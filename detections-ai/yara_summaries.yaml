ACE_Containing_EXE:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3730eb8aef9e50fe2b564ddda656fd16
  Ruleset: securityonion-yara
  Summary: This rule detects ACE Archive files that contain executable (.exe) or screensaver (.scr) files. It scans for a specific header signature within the file and checks for the presence of the extensions ".exe," ".EXE," ".scr," or ".SCR" at a specific location to confirm the file type.
  Updated-Date: '2024_08_07'
ALFA_SHELL:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d3cac050bbff0ef77bcff34eb4698ea9
  Ruleset: securityonion-yara
  Summary: This rule detects a web shell often associated with Iranian APT groups, such as APT33. It identifies specific malicious patterns within webpage scripts, including function calls for URL decoding, an email address linked to the attacker, certain configuration settings, a global variable named `__ALFA__`, and obfuscated PHP function calls for base64 encoding. Additionally, it looks for a specific sequence of bytes at the end of files smaller than 900KB.
  Updated-Date: '2024_08_07'
APT12_Malware_Aug17:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d894f68822feced279ebfefe170fd170
  Ruleset: securityonion-yara
  Summary: This rule detects APT 12 malware by identifying files with a specific combination of characteristics. It checks for an executable file format, as indicated by the presence of the value 0x5a4d at the beginning of the file, and a unique import hash "9ba915fd04f248ad62e856c7238c0264". These indicators help in recognizing the malicious software associated with APT 12.
  Updated-Date: '2024_08_07'
APT15_Malware_Mar18_BS2005:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ec4b4b5adfca06ab8ed622bffc5abcb1
  Ruleset: securityonion-yara
  Summary: This rule detects malware attributed to APT 15, known for targeting victims in cyber espionage campaigns. It identifies suspicious PE files smaller than 200KB, employing unique identification strings in the binary data, and specific URLs associated with command and control servers. The rule also examines the presence of particular text patterns indicative of malware operations, including the formatting of temporary files and command-line operations.
  Updated-Date: '2024_08_07'
APT15_Malware_Mar18_MSExchangeTool:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3f54af197c9c300761b8870d1450a8c8
  Ruleset: securityonion-yara
  Summary: This rule detects malware associated with APT 15, which targets Microsoft Exchange Server tools. It identifies specific strings within the malware, including a path related to EWSTEW.pdb, the executable EWSTEW.exe, and a reference to Microsoft.Exchange.WebServices.Data. Additionally, it looks for the presence of a temporary data file named tmp.dat and a specific command line string fragment. The condition ensures that the file starts with the characteristic "MZ" header found in executable files, and that the file size is under 40KB.
  Updated-Date: '2024_08_07'
APT15_Malware_Mar18_RoyalCli:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b2baa221ad6bbed16cd2da5f11c2db55
  Ruleset: securityonion-yara
  Summary: This rule detects malware associated with APT 15, specifically identifying the RoyalCli variant as reported by NCC Group. It uses specific strings that are characteristic of the malware, including file paths, executable names, error messages, and command formats indicative of RoyalCli's behavior. The rule triggers when the file type matches a Windows executable format, the file size is below 200KB, and at least two of the identifying strings are present.
  Updated-Date: '2024_08_07'
APT15_Malware_Mar18_RoyalDNS:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5e2a3bed594ed7a2bf22790da09b8f8a
  Ruleset: securityonion-yara
  Summary: This rule detects a specific type of malware associated with APT 15, also known as RoyalDNS, as reported by the NCC Group. It identifies the presence of this malware through several indicators, including specific strings found in the executable, such as "rights.dll," "Nwsapagent," and filenames ending in "r.exe" and "s.txt." The rule also checks for particular patterns such as commands for deleting or running executable files in the Windows temporary directory. Additionally, it recognizes the exports "RunInstallA" and "RunUninstallA" within the executable's structure, ensuring it is under 200KB in size. These characteristics collectively help in detecting the malicious software associated with APT 15.
  Updated-Date: '2024_08_07'
APT17_Malware_Oct17_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: da018d24b20a9674b0709ef5ab8bad3e
  Ruleset: securityonion-yara
  Summary: This rule detects a specific APT17 malware variant by checking for the presence of particular DLL files, such as localspl.dll, msvcrt.dll, and TSMSISrv.dll, within certain directory paths. It targets files that start with the common Windows executable signature and are smaller than 500KB in size.
  Updated-Date: '2024_08_07'
APT17_Malware_Oct17_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7025630748af60d903b7a43330bf08eb
  Ruleset: securityonion-yara
  Summary: This rule detects APT17 malware by identifying specific patterns and indicators within a file. The rule searches for specific strings and behaviors associated with the APT17 malware, such as certain HTTP client actions, error messages, and file headers. It includes checks for particular substrings within the code, like "FoxHTTPClient_EXE_x86.exe" and specific HTTP request formats, which are indicative of the malware's presence. The rule also examines the file size and signature to confirm its findings, ensuring accurate detection based on established export functions and characteristic string patterns.
  Updated-Date: '2024_08_07'
APT17_Malware_Oct17_Gen:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f9cd1dde8f7cd1d78f82493b885f802d
  Ruleset: securityonion-yara
  Summary: 'This rule detects APT17 malware by checking for specific characteristics and patterns. Indicators include certain user-agent strings and URLs, such as references to Mozilla browsers and image resources. Additionally, specific error messages and session handling strings, including phrases like "hWritePipe2 Error:%d" and "Not Support This Function!," are used as detection criteria. The rule also identifies specific content types (e.g., "image/x-png") and language preferences (e.g., "Accept-Language: en-US"), as well as particular error formats and communications patterns typically associated with APT17. The detection condition requires these indicators to be present in a file smaller than 200KB with a specified PE import hash.'
  Updated-Date: '2024_08_07'
APT17_Sample_FXSST_DLL:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5624abf38fba6379795dba5cccd598b4
  Ruleset: securityonion-yara
  Summary: This rule detects samples associated with APT17 activity, specifically targeting the file "FXSST.DLL." It identifies files less than 800KB in size with a DOS header signature (0x5a4d) that contain specific strings related to the Windows Operating System and references to "fxsst.dll." Additionally, the rule examines the presence of common function names such as "DllRegisterServer," "GetLastActivePopup," "Sleep," "GetModuleFileName," "VirtualProtect," "HeapAlloc," "GetProcessHeap," and "GetCommandLine" to confirm the match.
  Updated-Date: '2024_08_07'
APT17_Unsigned_Symantec_Binary_EFA:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 175bf0599526759b345da5b3b9a2eebf
  Ruleset: securityonion-yara
  Summary: This rule detects APT17 malware by identifying an unsigned Symantec binary. It looks for specific strings within the code that reference Symantec Corporation and a particular device path, ensuring the file bears the characteristics of a portable executable (PE) file, is below 200KB in size, and contains no digital signatures.
  Updated-Date: '2024_08_07'
APT28_CHOPSTICK:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5630bef5fd0b15c094896ae13f198cea
  Ruleset: securityonion-yara
  Summary: This rule detects a malware associated with CHOPSTICK, a tool reported in the APT28 threat actor's toolset. The malware is identified through specific string patterns found within its code such as "jhuhugit.tmp," "KERNEL32.dll," "IsDebuggerPresent," "IsProcessorFeaturePresent," "TerminateProcess," "DeleteFileA," "GetProcessHeap," "This program cannot be run in DOS mode," and "LoadLibraryA." These strings are indicative of the malware's behavior and its attempts to interact with system processes and utilities, making use of common Windows API functions and techniques recognizable in malicious activity. The rule verifies the file structure to ensure it corresponds to the expected executable file characteristics typical of such malware.
  Updated-Date: '2024_08_07'
APT28_HospitalityMalware_document:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6d1ef3912acafe2dd0fc20e05510a56a
  Ruleset: securityonion-yara
  Summary: This rule detects a form of malware associated with APT28, targeting the hospitality sector through malicious documents. It identifies specific malicious payload strings and characteristics unique to the document, ensuring that the file size falls within a specified range of 75KB to 82KB.
  Updated-Date: '2024_08_07'
APT28_HospitalityMalware_mvtband_file:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 37c1d5201283c61bddbe8cc1def2128b
  Ruleset: securityonion-yara
  Summary: This rule detects the mvtband.dll malware, associated with the APT28 group, by identifying a specific string "DGMNOEP" and a sequence of two significant machine instructions within the file. In addition, the rule checks that the raw data size of the third section in the PE (Portable Executable) file format is zero.
  Updated-Date: '2024_08_07'
APT28_SourFace_Malware1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ba16c0e55c4deea0d901284d1b911926
  Ruleset: securityonion-yara
  Summary: This rule detects SOURFACE malware, a downloader linked to APT28 cyber espionage operations. SOURFACE retrieves a secondary-stage backdoor from a command and control (C2) server. Key indicators include specific strings like "coreshell.dll" and "Core Shell Runtime Service," as well as the presence of a file path "\\chkdbg.log". The file must begin with the hex value 0x5a4d and be less than 62KB in size.
  Updated-Date: '2024_08_07'
APT28_SourFace_Malware2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 534c69259ad36a2a429d11d2065e27d4
  Ruleset: securityonion-yara
  Summary: This rule detects malware associated with the APT28 incident known as SOURFACE, which functions as a downloader to retrieve a second-stage backdoor from a command-and-control (C2) server. By checking specific strings such as "coreshell.dll" and "Applicate" within files smaller than 550KB, and ensuring the file header starts with the magic number 0x5a4d, this rule identifies the presence of this particular malware variant.
  Updated-Date: '2024_08_07'
APT28_SourFace_Malware3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ad859d4113b2d0c6c7f187b8de078f63
  Ruleset: securityonion-yara
  Summary: This rule detects malware associated with an APT28 incident, specifically known as SOURFACE. SOURFACE functions as a downloader designed to obtain and deploy a second-stage backdoor from a command-and-control (C2) server. The rule identifies the malware by checking for the presence of specific strings within the file, such as "coreshell.dll" and "Core Shell Runtime Service", and confirms it by validating the PE file header and ensuring the file size is less than 550KB.
  Updated-Date: '2024_08_07'
APT30_Generic_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e014f3240a4c4948fc3e2aba224c2825
  Ruleset: securityonion-yara
  Summary: This rule detects specific samples associated with APT30, a threat group reported by FireEye. The rule identifies executable files smaller than 250KB and containing certain string patterns. These patterns include various global region names such as "ASSAMESE," "BELARUSIAN," and specific formats for file names and timestamps. Additionally, the rule looks for specific server types like "AdvancedServer" and "DataCenterServer," and checks for unique identifiers and phrases such as "%s\\%s.txt," "Computer Name:", and "(Extended Wansung)." Files matching these criteria are flagged as potential APT30 samples.
  Updated-Date: '2024_08_07'
APT30_Generic_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d3d455e33132ebe8406f8bbf33c6c5cf
  Ruleset: securityonion-yara
  Summary: This rule detects a malware sample linked to the APT30 group as reported by FireEye. The sample files are identified through a combination of specific strings and hashes. Notables strings include references to log files such as "KB985109.log" and "KB989109.log", signaling logging activity, and multiple instances of wide string references to "Opera.exe" and related terms like "Opera Internet Browser" and "Opera Software", which indicate potential misuse or impersonation of Opera browser software. Other strings hint at functionality related to online status and network activity. The conditions ensure the file is under 100KB in size, has a specific header value, and matches all specified strings.
  Updated-Date: '2024_08_07'
APT30_Generic_3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 261009dc0f718bf0f22aee83e93f983d
  Ruleset: securityonion-yara
  Summary: This rule detects a specific set of strings and attributes within files smaller than 100KB, particularly targeting executable files that start with the hexadecimal value 0x5A4D. Key indicators include the presence of the string "Acrobat.exe" in wide format, a sequence of asterisks, and a particular string pattern "FFFF:>>>>>>>>>>>>>>>>>@". The rule appears to be designed based on a sample associated with the APT30 threat actor as reported by FireEye, identifying malicious files that exhibit these characteristics.
  Updated-Date: '2024_08_07'
APT30_Generic_4:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4865356c6dd8be7582dbf0db2e072225
  Ruleset: securityonion-yara
  Summary: This rule detects a sample associated with APT30, a hacking group identified by FireEye. It identifies specific strings and conditions within executable files that are smaller than 250KB and start with the 'MZ' header, typically indicative of Windows executables. The strings include specific filenames and commands such as "NetEagle_Scout.bat," "visit.exe," "System.exe," "System.dat," "ieupdate.exe," various error handling protocol markers, and certain file attributes and patterns. This combination of criteria is used to pinpoint malicious files attributed to APT30's activities.
  Updated-Date: '2024_08_07'
APT30_Generic_5:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ce34a75b4d4f982fe8d898f26c3dbd05
  Ruleset: securityonion-yara
  Summary: This rule detects files associated with the APT30 threat group, as reported by FireEye, by identifying specific strings and characteristics. The conditions focus on filenames and descriptions commonly used by APT30, including references to "regsvr32" with "Norton360" paths, "ftpserver.exe," "LiveUpdate.EXE," and "FTP Explorer" descriptions. Additionally, it checks for files named "ashelper.dll" and mentions of "LiveUpdate." The file must be less than 100KB and start with the "MZ" header, typical of executable files.
  Updated-Date: '2024_08_07'
APT30_Generic_6:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 01a70273ab7e074bfec04768917484bd
  Ruleset: securityonion-yara
  Summary: This rule detects malware samples associated with APT30 based on specific characteristics, including unique strings and a file size less than 100KB. The targeted strings, such as "GetStar," ".rdUaS," and "a Encrt% Flash Disk," are checked in files starting with the hexadecimal value 0x5A4D, which is indicative of a Windows executable (PE file). The rule aims to identify files that match these patterns, which are characteristic of APT30's malicious activities as reported by FireEye.
  Updated-Date: '2024_08_07'
APT30_Generic_7:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6d9646d5775e9e826578ba17bb519884
  Ruleset: securityonion-yara
  Summary: This rule detects specific small files (under 100KB) associated with APT30 malware known for using certain distinct string patterns such as "Xjapor_*ata," "Xjapor_o*ata," and "Ouopai" in their code. The presence of these strings, combined with the file starting with the "MZ" header (0x5A4D), are indicators of APT30 malicious activity.
  Updated-Date: '2024_08_07'
APT30_Generic_8:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3fdba04d3c84e17bd1d0b5fd2e46f177
  Ruleset: securityonion-yara
  Summary: This rule detects malware samples associated with APT30, as detailed in a FireEye report, by examining specific strings and conditions within the file. Targeted strings include references to older Windows operating systems such as "Windows NT4.0" and "Windows NT3.51," as well as various specific strings like "%d;%d;%d;%ld;%ld;%ld;" and "SQSRSS." The rule looks for these patterns in files smaller than 250KB that start with the hexadecimal value 0x5A4D, ensuring that all identified strings are present for a match.
  Updated-Date: '2024_08_07'
APT30_Generic_9:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 73d8b0b47a199589fed4b9c0fb210793
  Ruleset: securityonion-yara
  Summary: This rule detects APT30 malware samples by identifying specific patterns and attributes within executable files. It uses a combination of strings and conditions tied to file size and format. Specifically, it searches for certain file paths, URL patterns, version numbers, and copyright notices that are indicative of APT30 activities. Files targeted by this rule are less than 250KB in size and begin with the "MZ" header, a characteristic of Windows executables.
  Updated-Date: '2024_08_07'
APT30_Generic_A:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: bc39073f3f3e604cc95ce3158303294c
  Ruleset: securityonion-yara
  Summary: This rule detects samples associated with APT30, a cyber espionage group, by evaluating specific characteristics within executable files. It checks for files smaller than 100KB that begin with the 'MZ' header, indicating a Windows executable, and contains specific ASCII strings such as "WPVWhhiA", "VPWVhhiA", "VPhhiA", and "uUhXiA". This detection relies on the presence of these distinctive strings and the file properties to identify malicious activities linked to APT30.
  Updated-Date: '2024_08_07'
APT30_Generic_B:
  Created-Date: '2024_08_06'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b0943c6f2352622f2e0ea7be8bbccdfd
  Ruleset: securityonion-yara
  Summary: This rule detects samples associated with APT30, a cyber espionage group, based on specific file hashes and the presence of the string "Moziea/4.0" within executable files smaller than 100KB and starting with the hexadecimal value 0x5A4D.
  Updated-Date: '2024_08_06'
APT30_Generic_C:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ab34d7a7ec900dc37245261fbf60bb6e
  Ruleset: securityonion-yara
  Summary: This rule detects malicious files commonly associated with the APT30 group as reported by FireEye. It searches for files under 100KB in size that start with the common 'MZ' header (0x5A4D) and contain specific strings, including "MYUSER32.dll," "MYADVAPI32.dll," "MYWSOCK32.dll," and "MYMSVCRT.dll." These strings suggest the presence of custom-named dynamic-link libraries (DLLs) mimicking legitimate system DLLs, indicative of APT30 malware designed to evade detection.
  Updated-Date: '2024_08_07'
APT30_Generic_D:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 963a834204ba8d4d47de16344d723bd4
  Ruleset: securityonion-yara
  Summary: This rule detects a sample associated with the APT30 threat actor as reported by FireEye. The detection is based on specific string patterns and characteristics found within executables smaller than 100KB, including references to "Windows Security Service Feedback," the filename "wssfmgr.exe," and specific HTML files and keywords. Additionally, all detected files begin with the "MZ" header, a signature of Windows executable files.
  Updated-Date: '2024_08_07'
APT30_Generic_E:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 981c38a4bc9c728aab606dcab849eea8
  Ruleset: securityonion-yara
  Summary: This rule detects a sample associated with APT30 malware, as described in the FireEye APT30 report. It identifies specific strings such as "Nkfvtyvn}" and detailed window or class name patterns in files smaller than 100KB, starting with the 'MZ' signature commonly found in PE files. The rule checks for five specific hash values to identify known APT30 samples.
  Updated-Date: '2024_08_07'
APT30_Generic_E_v2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ac93625b2b635cd3cd87a4efb1808d5e
  Ruleset: securityonion-yara
  Summary: This rule detects a sample related to APT30, a cyber-espionage group reported by FireEye. It specifically identifies a file containing certain strings, namely "Nkfvtyvn}duf_Z}{Ys," "Nkfvtyvn}*Zrswru1i," "Nkfvtyvn}duf_Z}{V," and "Nkfvtyvn}*ZrswrumT\\b." The file must be less than 100KB in size and have a magic number at its start that matches the value 0x5A4D.
  Updated-Date: '2024_08_07'
APT30_Generic_F:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 892460690af3b0dc56ca187fdcd28ebc
  Ruleset: securityonion-yara
  Summary: This rule detects a sample associated with APT30, a cyber espionage group detailed in a FireEye report. The rule identifies files that are less than 100KB in size, start with the "MZ" header signature, and contain specific strings such as "\\~zlzl.exe", "\\Internet Exp1orer", and "NodAndKabIsExcellent".
  Updated-Date: '2024_08_07'
APT30_Generic_G:
  Created-Date: '2024_08_06'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5e9026af8d71c6ecb3a30986ba04089e
  Ruleset: securityonion-yara
  Summary: This rule detects samples associated with APT30, specifically focusing on executable files smaller than 100KB that begin with the MZ header. It utilizes several ASCII string patterns including file operations, disk space information, and timestamp formats to identify potential malicious activity characteristic of APT30, a group noted for sophisticated cyber-espionage techniques as detailed in FireEye's APT30 report.
  Updated-Date: '2024_08_06'
APT30_Generic_H:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d79a719c48d7ec4e2fad174ad20390c7
  Ruleset: securityonion-yara
  Summary: This rule detects a sample associated with APT30 malware that creates a file named "Temp1020.txt," references a string "Xmd.Txe," and attempts to disguise itself by using the string "\\Internet Exp1orer." The condition triggers when the file size is less than 100KB, the file starts with the magic number 0x5A4D, and all specified strings are found within the file.
  Updated-Date: '2024_08_07'
APT30_Generic_I:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0de9b4daa3cec9a5d676fa4f2b9a2f06
  Ruleset: securityonion-yara
  Summary: This rule detects malware associated with APT30, a cyber espionage group, by identifying specific strings within executable files smaller than 100KB. The targeted strings include copyright details referencing Google Inc. and specific formatted text patterns. The condition for detection also ensures that the file starts with the characteristic "MZ" signature indicative of Windows executable files.
  Updated-Date: '2024_08_07'
APT30_Generic_J:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6977b77080bb4bc6e30549de22b28f1c
  Ruleset: securityonion-yara
  Summary: This rule detects samples related to the APT30 group as described in a FireEye report. It identifies executable files associated with Symantec products, specifically targeting filenames and strings that reference Symantec software components such as Launcher.EXE, Symantec Security Technologies, and various filenames including ccSvcHst.exe, wssfmgr.exe, and Symantec LiveUpdate.lnk. The rule checks for specific properties like file size and ensures certain characteristics match those typical of Symantec's software within files smaller than 100KB.
  Updated-Date: '2024_08_07'
APT30_Generic_K:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4d35c43c3d7a729de51f195e91caa3db
  Ruleset: securityonion-yara
  Summary: This rule detects a sample associated with APT30, a cyber-espionage group, based on specific strings found in infected files. The strings identified include typical file paths and constants such as "C:\Program Files\Common Files\System\wab32," "\\TEMP\," and "\\Temporary Internet Files\." It also considers phrases like "Maybe a Encrypted Flash," "Copy File %s OK!" and formatted text patterns such as "%s Space:%uM,FreeSpace:%uM." These indicators help identify potential APT30 malware signatures in files smaller than 100KB with the standard 'MZ' header.
  Updated-Date: '2024_08_07'
APT30_Microfost:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 41f80743846bb09cceb738d2577f3943
  Ruleset: securityonion-yara
  Summary: This rule detects a sample associated with APT30, specifically targeting a file under 100KB in size that begins with the 'MZ' executable file signature. It identifies the presence of text strings such as "Copyright (c) 2007 Microfost All Rights Reserved" and "Microfost," where the misspelling of "Microsoft" as "Microfost" serves as a key identifier.
  Updated-Date: '2024_08_07'
APT30_Sample_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 99269d1b220e248a6103a7bb3ea967be
  Ruleset: securityonion-yara
  Summary: This rule detects a specific sample associated with the APT30 threat actor group. It identifies malicious files less than 100KB in size, starting with the "MZ" header, which indicates a Windows executable. The matching file contains strings such as "#hostid", file paths resembling "\\Windows\\C", and keywords like "TimUmove", "Moziea/4.0 (c", and "StartupNA". These characteristics are derived from the detailed analysis of APT30's tactics and tools as outlined in FireEye's report on the group.
  Updated-Date: '2024_08_07'
APT30_Sample_10:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ad90206d6b67e5735a4862c1ad0965e2
  Ruleset: securityonion-yara
  Summary: This rule detects a specific sample associated with the APT30 group, as reported by FireEye. It targets files smaller than 100KB that begin with the "MZ" header, indicating a Windows executable. The detection focuses on embedded strings within the file, such as specific version and copyright information from Microsoft, as well as distinctive phrases like "!! Use Connect Method !!", formatted proxy settings, and a reference to "msmsgs". These characteristics are used to identify the malicious activity attributed to APT30, a known threat actor group.
  Updated-Date: '2024_08_07'
APT30_Sample_11:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: cadf3122b2ee142f9847174aec9a795f
  Ruleset: securityonion-yara
  Summary: This rule detects a specific sample associated with APT30, which is detailed in a FireEye report. The rule identifies the sample by checking for strings indicative of particular system and software references within files less than 250KB in size and that start with the common executable header 0x5A4D. Key indicators include system path and application names such as "msofscan.exe", references to various Windows operating systems and Microsoft products, and certain unique strings like "NetEagle_Scout" and "Eagle-Norton360-OfficeScan". These patterns suggest the file may be related to a threat actor targeting specific Microsoft environments or using particular applications for malicious activities.
  Updated-Date: '2024_08_07'
APT30_Sample_12:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c01f2e41b0d219a38d1b2d0870d6e4b5
  Ruleset: securityonion-yara
  Summary: This rule detects a specific sample associated with APT30 as reported by FireEye. It identifies files less than 250KB in size that begin with the 'MZ' header (indicating a Windows executable). The detection relies on strings within the file, including "Richic," a specific HTTP accept header, and a detailed format string typically used for logging or report generation.
  Updated-Date: '2024_08_07'
APT30_Sample_13:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4c04e79193be6ef091c486bf3aeb1470
  Ruleset: securityonion-yara
  Summary: This rule detects a sample associated with APT30, as described in a report by FireEye. It identifies a specific malicious file with characteristics suggesting it impersonates or exploits Microsoft Office components. The detection focuses on specific strings related to Microsoft Office, such as "msofscan.exe" and phrases indicating it is a Microsoft product, along with certain metadata constraints like file size and file header signature.
  Updated-Date: '2024_08_07'
APT30_Sample_14:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0caab245da90de2b9761cb8674c5bc0f
  Ruleset: securityonion-yara
  Summary: This rule detects a specific sample associated with APT30, an advanced persistent threat group, by identifying a file named "AdobeReader.exe" that mimics Adobe Reader software. It checks for characteristics such as the version number "10.1.7.27" and a copyright notice from Adobe Systems Incorporated, among others. The targeted file must be under 100KB in size and start with the "MZ" header typical of executable files.
  Updated-Date: '2024_08_07'
APT30_Sample_15:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c48bc14d6cdbc74d92bd9a092e2a8a63
  Ruleset: securityonion-yara
  Summary: This rule detects a specific sample associated with the APT30 threat actor, as reported by FireEye. It identifies the presence of certain ASCII strings within files smaller than 100KB in size and that start with the "MZ" header (hexadecimal 0x5A4D), commonly associated with executable files. The strings used for detection include fragments and patterns such as "\Windo," "HHOSTR," "Softwa]\Mic," "Startup'T," "help32Snapshot0L," and "TimUmoveH," indicating characteristics of the malware attributed to APT30.
  Updated-Date: '2024_08_07'
APT30_Sample_16:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 71581143644c30fe10814010769d8230
  Ruleset: securityonion-yara
  Summary: This rule detects a specific sample associated with the APT30 group, as documented in a FireEye report. It identifies the malware based on several strings found within the file, including paths like "\Temp1020.txt" and specific ASCII sequences such as "cmcbqyjs", "SPVSWh\\", "PSShxw@", "VWhHw@", and "SVWhHw@". Additionally, it targets files smaller than 100KB and checks if the file header starts with the hexadecimal value 0x5A4D, indicating a Windows executable.
  Updated-Date: '2024_08_07'
APT30_Sample_17:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a03ceb5bcf2b820f2786e8da2fffa6e1
  Ruleset: securityonion-yara
  Summary: This rule detects a specific malicious sample related to APT30, as reported by FireEye. It identifies files smaller than 100KB with a "MZ" header and certain unique ASCII strings, including "Nkfvtyvn}]ty}ztU" and "IEXPL0RE".
  Updated-Date: '2024_08_07'
APT30_Sample_18:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: aed62be4c7f010c2b874c39489ee4fc3
  Ruleset: securityonion-yara
  Summary: This rule detects a specific sample associated with APT30 as reported by FireEye. It identifies a small file, less than 100KB in size, that begins with the 'MZ' header (indicating a DOS executable). The detection is based on the presence of multiple indicators within the file, such as the domain "w.km-nyc.com", the executable name "tscv.exe", and specific strings like "Exit/app.htm", "UBD:\\D", "LastError", "MicrosoftHaveAck", "HHOSTR", and "XPL0RE.". These characteristics collectively help in identifying the APT30-related malware sample.
  Updated-Date: '2024_08_07'
APT30_Sample_19:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8545379420296df99b900703bc444272
  Ruleset: securityonion-yara
  Summary: This rule detects a specific malware sample related to the APT30 hacking group, as detailed by FireEye. It identifies the presence of this malware by looking for a particular file path, several storage-related formatted strings, mentions of temporary directories, specific user and file details, and a distinctive message regarding an encrypted flash disk. Conditions include that the file must be less than 100KB in size and that it conforms to a standard PE file format.
  Updated-Date: '2024_08_07'
APT30_Sample_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f1d3f60b11cc8b4f81860bf78dd1a4f0
  Ruleset: securityonion-yara
  Summary: This rule detects a specific sample associated with the APT30 espionage group, known from a FireEye report. It identifies an executable file named "ForZRLnkWordDlg.EXE" along with specific wide strings referencing "Microsoft," version "1.0," and a copyright notice from 2011. The executable must be less than 100KB in size and start with the hexadecimal value 0x5A4D.
  Updated-Date: '2024_08_07'
APT30_Sample_20:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5bd305cd01fff8f26e247c7b1c213b71
  Ruleset: securityonion-yara
  Summary: This rule detects a sample associated with APT30, a cyber espionage group, as reported by FireEye. It identifies specific ASCII strings within a file that is less than 100KB in size and has a 'MZ' header indicating a Windows executable. Notable strings include "dizhi.gif", references to "Mozilla/u", "XicrosoftHaveAck", "flyeagles", "iexplore.", "WindowsGV", "CatePipe", and a specific path pattern "'QWERTY:/webpage3". These strings are signatures characteristic of APT30's malware.
  Updated-Date: '2024_08_07'
APT30_Sample_21:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c4ff70a8571ba745c735af07a6f7aa89
  Ruleset: securityonion-yara
  Summary: This rule detects a malicious sample associated with APT30, identified in a FireEye report. The specified characteristics include a file named "Service.dll" and strings formatted to include parameters and placeholders, such as "(%s:%s %s)", "%s \"%s\",%s %s", and "Proxy-%s:%u". The detection conditions involve the file being less than 100KB in size, having a specific header signature (0x5A4D), and containing all the defined strings.
  Updated-Date: '2024_08_07'
APT30_Sample_22:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2bc126424e7da5a64edfacb2c1891e34
  Ruleset: securityonion-yara
  Summary: This rule detects a sample from APT30, a cyber espionage group identified by FireEye. The detection focuses on executable files smaller than 100KB, checking for specific ASCII strings such as "(\\TEMP", "Windows\\Cur", "LSSAS.exeJ", "QC:\\WINDOWS", "System Volume", and "PROGRAM FILE," and ensuring the files begin with the 'MZ' header, indicative of executable files.
  Updated-Date: '2024_08_07'
APT30_Sample_23:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 21c202ac21dd4f621de37a2123d976d5
  Ruleset: securityonion-yara
  Summary: This rule detects a sample associated with APT30, a threat group known for cyber-espionage activities. The detection is based on specific strings within the file, such as "hostid," variations of "Window," formatting with "%u:%u%s," and fragments like "S2tware\\Mic" and "la/4.0 (compa." Additionally, the sample includes strings like "NameACKernel," "ToWideChc[lo," and "help32SnapshotfL." The targeted files are less than 100KB in size and start with the MZ header, indicating a Windows executable.
  Updated-Date: '2024_08_07'
APT30_Sample_24:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 71e3ca26ee100c04f5625e9f37b8f1cf
  Ruleset: securityonion-yara
  Summary: This rule detects a malware sample associated with APT30, as reported by FireEye. The identified sample is characterized by specific strings such as "dizhi.gif," "Mozilla/4.0," "lyeagles," "HHOSTR," "#MicrosoftHaveAck7," "iexplore.," and "ModuleH." Additionally, the file must be less than 100KB in size and its first two bytes must equal the hexadecimal value 0x5A4D.
  Updated-Date: '2024_08_07'
APT30_Sample_25:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: fff5dda2918191187a980c7b879ccb49
  Ruleset: securityonion-yara
  Summary: This rule detects a sample associated with APT30, a cyber-espionage group, as detailed in a FireEye report. The rule identifies specific indicators within the file, such as references to system paths and keywords like "C:\\WINDOWS," "aragua," and "System V," among others. The file must be less than 100KB in size, begin with the magic number 0x5A4D, and match all specified string patterns for the rule to trigger.
  Updated-Date: '2024_08_07'
APT30_Sample_26:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2bce95028238cb103bbacf6ee7e896cb
  Ruleset: securityonion-yara
  Summary: This rule detects a sample associated with APT30, a threat group. It searches for specific strings within files smaller than 100KB that start with the "MZ" header, indicative of Windows executable files. Notable strings include "forcegue," "Windows\\Cur," "System Id," "Software\\Mic," "utiBy0ToWideCh&$a," "ModuleH," and "PeekNamed6G." These indicators suggest the file may be related to malicious activities attributed to APT30.
  Updated-Date: '2024_08_07'
APT30_Sample_27:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2936ec9ed16c0c3e566775c06ca9bcd8
  Ruleset: securityonion-yara
  Summary: This rule detects a specific sample associated with the APT30 cyber espionage group, as detailed in a FireEye report. It identifies this sample by matching several unique strings within executable files smaller than 100KB. The strings of interest include "Mozilla/4.0," "dizhi.gif," "oftHaveAck+," "HlobalAl," "$NtRND1$," "_NStartup," and "GXSYSTEM." The executable files must also possess a certain file header characteristic, indicated by the specific byte sequence 0x5A4D.
  Updated-Date: '2024_08_07'
APT30_Sample_28:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6eed11c74fbb0f8644150b4887a3c408
  Ruleset: securityonion-yara
  Summary: This rule detects a specific sample described in the FireEye APT30 report. It identifies malware based on file size, being less than 100KB, and having a specific file signature. Indicators include strings related to domain names, executable filenames, system paths, and URLs. Observations like "www.flyeagles.com", "iexplore.exe", "cmdLine.exe", and "USBTest.sys" are key markers. Additionally, it looks for specific registry paths, such as "Software\Microsoft\CurrentNetInf", and various URL and file patterns, like "/dizhi.gif" and "netscv.exe", which are characteristic of APT30 malware activities.
  Updated-Date: '2024_08_07'
APT30_Sample_29:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e808b5d147a96421a12289957dd798c3
  Ruleset: securityonion-yara
  Summary: This rule detects a malicious sample associated with the APT30 cyber espionage group, as reported by FireEye. It identifies an executable file smaller than 100KB with the "MZ" header and containing specific strings such as "LSSAS.exe," "MicrosoftFlashExit," and "MicrosoftFlashHaveAck." The strings indicate interactions with the Windows Registry, particularly under paths related to "FlashDiskInf" and the presence of ".petite" and "driver32," suggesting evasion or persistence mechanisms through registry modifications and file naming conventions.
  Updated-Date: '2024_08_07'
APT30_Sample_3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d3282844ecf84303c8e9beb07ebea28c
  Ruleset: securityonion-yara
  Summary: This rule detects a specific sample associated with APT30, a cyber-espionage group, by identifying particular string patterns within executable files smaller than 100KB. Notable strings include "Software\\Mic," "HHOSTR," "ThEugh," "Moziea/," and "%s%s(X-".
  Updated-Date: '2024_08_07'
APT30_Sample_30:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4eb052dc9bfdc7c9b880bcf9bb97a568
  Ruleset: securityonion-yara
  Summary: This rule detects a specific sample related to the APT30 threat group as identified in the FireEye APT30 report. It looks for files smaller than 100KB with a specific characteristic header (0x5A4D). The rule triggers when the file contains certain strings including "5.1.2600.2180 (xpsp_sp2_rtm.040803-2158)" in wide format, "RnhwtxtkyLRRMf{jJ}ny" and "RnhwtxtkyLRRJ}ny" in ASCII format, as well as "ZRLDownloadToFileA" and "5.1.2600.2180" in wide format.
  Updated-Date: '2024_08_07'
APT30_Sample_31:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 71f7fe13912c0dd3daa78f00a60393d0
  Ruleset: securityonion-yara
  Summary: This rule detects a specific sample associated with the APT30 threat group, as reported by FireEye. It identifies malware based on multiple unique strings within a file that is less than 100KB in size. Key indicators include the presence of specific terms and paths such as "\\ZJRsv.tem", "forceguest", "\\$NtUninstallKB570317$", "[Can'tGetIP]", and "QWERTY:,`/". The detection mechanism also checks whether the file starts with the magic number 0x5A4D, which is indicative of a Windows executable.
  Updated-Date: '2024_08_07'
APT30_Sample_33:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3bc6752a59d88b564685702a4043cea6
  Ruleset: securityonion-yara
  Summary: This rule detects a sample attributed to the APT30 group, as detailed in a report by FireEye. It identifies a file smaller than 100KB with a specific hash value and matching several characteristics, including filename patterns and specific string occurrences. Specific strings searched for within the file include "Version 4.7.3001", "msmsgr.exe", various custom DLL names like "MYUSER32.dll", and references to "Microsoft(R)" as well as "CeleWare.NET1". These indicators help in identifying malware associated with APT30 based on the specified attributes.
  Updated-Date: '2024_08_07'
APT30_Sample_34:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d01bcc61870b66dd70f9d6dfec25cc97
  Ruleset: securityonion-yara
  Summary: This rule detects a specific sample associated with APT30, a threat actor group reported by FireEye. The rule identifies files by looking for multiple unique strings, such as "dizhi.gif" and "eagles.vip.nse," among others, that are characteristic of this malware. It targets executable files under 100KB in size that start with the header bytes 0x5A4D, indicating a Windows executable file.
  Updated-Date: '2024_08_07'
APT30_Sample_35:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: db19ecb543b5d68227f95ad9ea5f256f
  Ruleset: securityonion-yara
  Summary: This rule detects a malicious software sample associated with the APT30 threat group, targeting files smaller than 100KB with a specific hash value. The malware is identified by several unique strings, including "WhBoyIEXPLORE.EXE.exe", "Startup>A", and "olhelp32Snapshot". The condition also checks that the file starts with the hexadecimal value 0x5A4D, which indicates a Windows executable.
  Updated-Date: '2024_08_07'
APT30_Sample_4:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0c12110c54623fa271e8ce10741f7365
  Ruleset: securityonion-yara
  Summary: This rule detects a specific APT30 malware sample based on characteristics present within files under 100KB in size. The file header must start with the signature 0x5A4D. Detection is triggered by the presence of ASCII strings such as "GetStartupIn", "enMutex", "tpsvimi", "reateProcesy", "FreeLibr1y*S", and "foAModuleHand". These strings are indicative of typical functions and operations within the APT30 malware, which has been analyzed and reported by FireEye.
  Updated-Date: '2024_08_07'
APT30_Sample_5:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 493fee24a0e991da192952e37631b86d
  Ruleset: securityonion-yara
  Summary: "This rule detects a specific APT30 malware sample identified in a FireEye report. It identifies the file based on a combination of unique strings found within the file, including references to Microsoft software versions and trademarks, specific messages containing the string \u201Cmsmsgs,\u201D and formatted debug or log messages. The file being analyzed must be smaller than 100KB and start with the typical DOS header signature 0x5A4D to match the conditions set by the rule."
  Updated-Date: '2024_08_07'
APT30_Sample_6:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1b49b9e5d90303e987fbf9f2a55cf779
  Ruleset: securityonion-yara
  Summary: This rule detects a sample related to APT30, a cyber espionage group, by identifying executable files smaller than 100 KB. It looks for the presence of specific strings, including "GreateProcessA" and "Ternel32.dll". The rule also ensures the file starts with the "MZ" header, indicating a Windows executable.
  Updated-Date: '2024_08_07'
APT30_Sample_7:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a7e84cc81a6f70a0aa24cf7b44e9c6a9
  Ruleset: securityonion-yara
  Summary: This rule detects a malware sample associated with APT30, as documented in a FireEye report. It identifies files smaller than 100KB that begin with the hexadecimal value 0x5A4D (indicative of a Windows executable) and contain specific strings such as "datain," "C:\Prog," "$LDDATA$," "Maybe a Encrypted Flash," "Jean-loup Gailly," and "deflate 1.1.3 Copyright." These strings are used to recognize components common in APT30's malware.
  Updated-Date: '2024_08_07'
APT30_Sample_8:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c413e3da2acba30cf1008926bd393905
  Ruleset: securityonion-yara
  Summary: This rule detects a specific malware sample associated with the cyber-espionage group APT30. The detection logic looks for distinctive strings within a file that is smaller than 100KB and has a characteristic file header, suggesting it's a Windows executable. The strings that trigger detection include "ateProcessA," "Ternel32.dllFQ," "StartupInfoAModuleHand," and "OpenMutex." These strings are indicative of operations or components the malware uses to perform its malicious activities on a compromised system.
  Updated-Date: '2024_08_07'
APT30_Sample_9:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: abd7aa703ea622999fda52d40c377ecf
  Ruleset: securityonion-yara
  Summary: This rule detects a specific sample associated with APT30 by examining a file less than 100KB in size that starts with the "MZ" header, indicative of a Windows executable. It searches for several ASCII strings, including fragments like "\Windo", "oHHOSTR", "Softwa]\\Mic", "Startup'T", "Ora\\%^", "\\Ohttp=r", "help32Snapshot0L", "TimUmoveH", and "WideChc[lobalAl", which are characteristic patterns found in the malware as described in the FireEye APT30 report.
  Updated-Date: '2024_08_07'
APT34_Malware_Exeruner:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 222a43fc6acaf43fd56bd9ab67000f01
  Ruleset: securityonion-yara
  Summary: This rule detects APT 34 malware, specifically by identifying indicators associated with the malware variant Exeruner. It looks for specific patterns such as the presence of file paths related to "exeruner.pdb" and references to the execution of PowerShell scripts with encoded commands. The rule also searches for scheduled task commands aimed at maintaining persistence and checks for specific file paths and Java update host directories, indicative of the malware's behavior. Additional identifiers include specific power shell scripts and environment variable manipulations related to Java within the ProgramData directory, along with unique function names and GUIDs.
  Updated-Date: '2024_08_07'
APT34_Malware_HTA:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b08fd514c72735ef81905c4ad11d09f9
  Ruleset: securityonion-yara
  Summary: This rule detects malware associated with APT 34 by identifying specific strings and patterns within an HTA (HTML Application) file. It looks for script commands executed by the Windows Shell and behaviors typically indicative of malicious activity, such as writing and executing batch files, using certutil to decode files, and creating objects to run shell commands. Additionally, it checks for certain HTML title and body tags related to an example HTA named "HTA Hello World!" to further identify suspicious scripts. The condition is triggered when these specific characteristics are found in a file smaller than 60KB.
  Updated-Date: '2024_08_07'
APTGroupX_PlugXTrojanLoader_StringDecode:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ede8b0179c71ced111ee7400cf3ce42d
  Ruleset: securityonion-yara
  Summary: This rule detects the PlugX malware, specifically targeting its string decoding mechanisms. PlugX is a remote access Trojan (RAT) used by advanced persistent threat (APT) groups to gain control over infected systems. The rule identifies unique byte sequences in the malware's code that are indicative of its presence. These patterns include specific variations and combinations of machine-level commands associated with the Trojan's operation. The detection method involves matching these byte sequences to known samples of PlugX, which are referenced by multiple hash values.
  Updated-Date: '2024_08_07'
APT_APT10_Malware_Imphash_Dec18_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4f5d72df5876ef70239640f52d22c404
  Ruleset: securityonion-yara
  Summary: This rule detects APT10 malware by identifying specific Import Hashes (ImpHashes) within executable files (.exe). The condition checks for a valid Portable Executable (PE) file header and ensures the file size is less than 6000KB. It then matches the file's ImpHash against a given set of known ImpHashes associated with APT10 malware, which are indicative of known malicious patterns used by this advanced persistent threat group.
  Updated-Date: '2024_08_07'
APT_APT28_Cannon_Trojan_Nov18_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7762beb0ca3a9b85357cde85a6803514
  Ruleset: securityonion-yara
  Summary: This rule detects the Cannon Trojan, which is known to be employed by the Sofacy group. It identifies specific characteristics within files, including certain hexadecimal patterns and ASCII strings related to filenames and paths, such as those pointing to desktop directories and specific user directories. Additionally, the rule searches for specific wide strings and ASCII text related to Windows system configurations and documents. These distinctive elements combined with file size restrictions enable the identification of this specific Trojan.
  Updated-Date: '2024_08_07'
APT_APT28_drovorub_kernel_module_unique_strings:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2eca04e52986993302810f7cc0bce0b0
  Ruleset: securityonion-yara
  Summary: This rule detects the Drovorub-kernel module by identifying a series of unique strings associated with the module. These strings include references to specific Linux directories and files like "/proc," "/proc/net/packet," and "/proc/net/tcp6," as well as various unique identifiers such as "cs02," "do_fork," and "sysfs." The detection covers a range of ASCII and wide ASCII encoded strings, requiring all the specified strings to be present to confirm the presence of the Drovorub-kernel module.
  Updated-Date: '2024_08_07'
APT_APT28_drovorub_library_and_unique_strings:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 444dc80d3e22432946897dfeb3b237eb
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of Drovorub malware, specifically its server, agent, and client components, by identifying specific string patterns and file characteristics. The rule targets files with a size between 1MB and 10MB, a valid ELF file header, and contains the strings "Poco," "Json," and "OpenSSL" frequently. Additionally, it searches for specific ASCII strings like "clientid," "-----BEGIN," "-----END," and "tunnel," which are indicative of the Drovorub malware components.
  Updated-Date: '2024_08_07'
APT_APT28_drovorub_unique_network_comms_strings:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 431a66cf2cff884d709e112663b424af
  Ruleset: securityonion-yara
  Summary: This rule detects the Drovorub malware, specifically targeting its server, agent, or client components, by identifying unique network communication strings. The rule matches a variety of keywords such as "action," "auth.commit," "auth.hello," "client_id," "client_login," "file_list_request," "module_list_request," "monitor," "net_list_request," "server finished," "serverid," and "tunnel." These terms are associated with network operations and authentication processes utilized by Drovorub, indicating the presence of the malware through its distinctive communication patterns.
  Updated-Date: '2024_08_07'
APT_APT28_generic_poco_openssl:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a866ddf16ba3eb8957fe93c8480701aa
  Ruleset: securityonion-yara
  Summary: This rule detects statically linked POCO and OpenSSL libraries, which could be related to Drovorub malware and warrant further investigation. The detection relies on specific hexadecimal patterns that are characteristic of these libraries, including several distinct byte sequences that are indicative of POCO and OpenSSL's internal operations. These patterns include unique sequences of machine code instructions commonly found in the compiled binaries of these libraries. Identifying these sequences helps pinpoint the presence of potentially malicious or suspicious software that includes these particular libraries, aiding in cybersecurity efforts to identify and analyze potential threats.
  Updated-Date: '2024_08_07'
APT_APT29_NOBELIUM_BoomBox_May21_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ddc42e8fc04356905e11569ea3948130
  Ruleset: securityonion-yara
  Summary: This rule detects BoomBox malware, which is described in a report about APT29 NOBELIUM. The detection is based on specific string patterns found within the malware code, making it identifiable for protective measures. The rule specifically looks for unique sequences of characters in the malware that match predefined patterns, ensuring accurate identification.
  Updated-Date: '2024_08_07'
APT_APT29_NOBELIUM_BoomBox_May21_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: da741e2961e1223d3cf59f97e72b60df
  Ruleset: securityonion-yara
  Summary: This rule detects the BoomBox malware used by the APT29/NOBELIUM group. It identifies specific strings and patterns associated with the malware, such as references to "NativeCacheSvc.dll," Dropbox API content URLs, and certain execution commands like "rundll32.exe." Additionally, it looks for specific hexadecimal byte patterns and restricts the detection to files smaller than 40KB that start with a specific header value (0x5a4d).
  Updated-Date: '2024_08_07'
APT_APT29_NOBELIUM_BoomBox_PDF_Masq_May21_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1247f8284ea432f2fe0c4f785ebdf9c1
  Ruleset: securityonion-yara
  Summary: "This rule detects PDF documents utilized by the BoomBox malware, which is associated with the APT29 NOBELIUM group. It identifies files with specific PDF header and end-of-file markers, checks that these files are under 100KB, and ensures that certain common PDF structures are absent to evade detection. Additionally, the rule examines the file\u2019s entropy to ensure it is relatively high, which is indicative of obfuscation often used in malicious documents."
  Updated-Date: '2024_08_07'
APT_APT29_NOBELIUM_JS_EnvyScout_May21_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3b7a82b019a7ed7d01177b05feacfc05
  Ruleset: securityonion-yara
  Summary: This rule detects deobfuscator code used by the NOBELIUM group, specifically in their EnvyScout JavaScript malware. The detection is based on identifying a specific string pattern involving the `charCodeAt` function and an XOR operation within files that are smaller than 5000KB.
  Updated-Date: '2024_08_07'
APT_APT29_NOBELIUM_JS_EnvyScout_May21_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 369fd9148fbae9df02eb379b04937b23
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of EnvyScout deobfuscator code, which is utilized by the NOBELIUM group. It identifies specific strings related to saving files with an ".iso" extension, MIME type for CD images, and checks for the occurrence of "Win" in the user agent string, indicating targeting of Windows systems. The rule applies to files smaller than 5000KB and triggers when all specified strings are found within the file.
  Updated-Date: '2024_08_07'
APT_APT29_NOBELIUM_LNK_NV_Link_May21_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6062d4bac8ba0a7cc48fecbde5641e70
  Ruleset: securityonion-yara
  Summary: This rule detects the NV Link tool utilized by the NOBELIUM group. It looks for specific strings, such as "RegisterOCX BOOM" and "cmd.exe /c start BOOM.exe," within files smaller than 5000KB to identify potential indicators of this tool's presence. This tool is associated with malicious activities targeting high-profile entities.
  Updated-Date: '2024_08_07'
APT_APT29_NOBELIUM_LNK_Samples_May21_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e16f65d0f7dbb0a27e9b12aa7ca4c2bf
  Ruleset: securityonion-yara
  Summary: This rule detects link files associated with the APT29 NOBELIUM group, which is known for sophisticated email-based attacks. It identifies link files that execute "rundll32.exe" and contain specific strings indicative of malicious activity. These strings include references to DLL files such as "IMGMountingService.dll", "diassvcs.dll", "MsDiskMountService.dll", and "GraphicalComponent.dll", as well as specific functions and components like "MountImgHelper", "InitializeComponent", "DiskDriveIni", and "VisualServiceComponent". Additionally, it looks for the presence of "data/mstu.dll, MicrosoftUpdateService" within the file. Together, these characteristics help identify potentially harmful link files under 4KB in size.
  Updated-Date: '2024_08_07'
APT_APT29_NOBELIUM_Malware_May21_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c3145b208645bdd4535ebe5f8f5887d3
  Ruleset: securityonion-yara
  Summary: This rule detects malware associated with the advanced persistent threat group APT29, also known as NOBELIUM. It specifically identifies malicious software by matching unique hexadecimal string patterns used by the malware within files smaller than 2200KB. The presence of these patterns indicates a potential compromise by malware wielded by APT29. The keywords in the strings section represent machine code instructions typically found in the malicious binaries used by the threat actors.
  Updated-Date: '2024_08_07'
APT_APT29_NOBELIUM_Malware_May21_3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 026c90ba4c4fb34547751c31fa0d90bd
  Ruleset: securityonion-yara
  Summary: This rule detects malware associated with APT29, also known as NOBELIUM. It specifically targets a file named "Win32Project1.dll" and identifies certain hexadecimal code patterns that are characteristic of the malware's functionality. The rule sets a condition based on the size of the file being less than 3000KB and the presence of specific strings or hexadecimal sequences within the file to confirm a match.
  Updated-Date: '2024_08_07'
APT_APT29_NOBELIUM_Malware_May21_4:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 994f65d45733b9ad57bb070d4ad35574
  Ruleset: securityonion-yara
  Summary: This rule detects malware associated with APT29, also known as NOBELIUM. It identifies specific patterns and strings within executable files, such as "KM.FileSystem.dll" and unique hexadecimal sequences. These signatures help in pinpointing malicious activities attributed to this specific threat actor. Detection criteria include verifying file headers and ensuring the file size is below a certain threshold.
  Updated-Date: '2024_08_07'
APT_APT29_NOBELIUM_NativeZone_Loader_May21_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: db04acb28095178ea14a73e3eab497da
  Ruleset: securityonion-yara
  Summary: This rule detects the NativeZone loader associated with APT29, also known as NOBELIUM, as detailed in a security report. It identifies specific string patterns such as "\\SystemCertificates\\Lib\\CertPKIProvider.dll", "rundll32.exe %s %s", and "eglGetConfigs". Additionally, it matches particular hexadecimal code sequences. It is designed to target executable files smaller than 3000KB that exhibit these characteristics, with an initial file signature check confirming a common Windows executable header.
  Updated-Date: '2024_08_07'
APT_APT29_NOBELIUM_Stageless_Loader_May21_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4ba199936873c12e779d97870976e17c
  Ruleset: securityonion-yara
  Summary: This rule detects a stageless loader associated with APT29, also known as NOBELIUM. It identifies the malware by looking for specific strings and characteristics within the code, such as references to "DLL_stageless.dll" and paths like "c:\\users\\devuser\\documents." Additionally, the rule searches for unique function names like "VisualServiceComponent" and "CheckUpdteFrameJavaCurrentVersion" and detects particular byte patterns in the executable. The file size is also limited to under 900KB, ensuring that it matches the characteristics of the specific loader used by the threat group.
  Updated-Date: '2024_08_07'
APT_APT29_sorefang_add_random_commas_spaces:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b8edf749c7071be5b708c447003b2f67
  Ruleset: securityonion-yara
  Summary: This rule detects the SoreFang malware based on identifying a particular function responsible for adding commas and spaces within the code. This specific behavior is marked by a sequence of hexadecimal bytes that match a pattern characteristic of the SoreFang malware. The rule focuses on executable files by verifying the presence of 'MZ' and 'PE' headers, ensuring the search is conducted within appropriate file types.
  Updated-Date: '2024_08_07'
APT_APT29_sorefang_command_elem_cookie_ga_boundary_string:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6bba2b7f2b113dc7b620b7ea0daba325
  Ruleset: securityonion-yara
  Summary: This rule detects the SoreFang malware by identifying specific elements within a scheduled task and HTTP headers. It looks for a wide string "<Command>", a string matching "Cookie:_ga=", and a unique boundary string "------974767299852498929531610575" within the target. The conditions are met if the file has a PE header and contains at least two of the specified strings.
  Updated-Date: '2024_08_07'
APT_APT29_sorefang_custom_encode_decode:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d3746b6b21cc3d98a22e0c88065d62c8
  Ruleset: securityonion-yara
  Summary: This rule detects SoreFang malware by identifying a custom encoding/decoding algorithm function within executable files. The detection is based on specific hexadecimal string patterns found in the code, which match the malware's unique encoding and decoding routines. These patterns include sequences of operations such as comparisons, additions, and bitwise shifts that are distinct to SoreFang's algorithm. The condition for this rule to trigger requires the file to be a Windows executable, as indicated by the checks for common headers.
  Updated-Date: '2024_08_07'
APT_APT29_sorefang_directory_enumeration_output_strings:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b671a40535ae8d30eb2208e447f7790d
  Ruleset: securityonion-yara
  Summary: This rule detects SoreFang malware by looking for specific formatted string outputs used during directory enumeration. These outputs include strings such as "----------All users directory----------", "----------Desktop directory----------", and "----------Documents directory----------". The detection condition also checks for certain file header characteristics indicative of executable files.
  Updated-Date: '2024_08_07'
APT_APT29_sorefang_disk_enumeration_strings:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 17a56f1fcbda22b5cefa245ae10152bb
  Ruleset: securityonion-yara
  Summary: This rule detects the SoreFang malware by identifying specific strings related to disk enumeration, including error messages and disk information details. Some of the targeted strings include phrases like "Free on disk:", "Total disk:", "Error in GetDiskFreeSpaceEx", "Volume label:", "Serial number:", "File system:", and "Error in GetVolumeInformation". The rule ensures that the executable file follows the PE format before checking for the presence of these identifying strings.
  Updated-Date: '2024_08_07'
APT_APT29_sorefang_encryption_key_2b62:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d17b2f82afa0fcaffe39a70e166c6df8
  Ruleset: securityonion-yara
  Summary: This rule detects the SoreFang malware by identifying a specific hardcoded encryption key within executable files. It checks for a particular key string "2b6233eb3e872ff78988f4a8f3f6a3ba" and confirms the presence of appropriate file headers to ensure the file is a valid executable.
  Updated-Date: '2024_08_07'
APT_APT29_sorefang_encryption_key_schedule:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 19fc455f6b4804e775d2c79f66941b40
  Ruleset: securityonion-yara
  Summary: This rule detects SoreFang malware by identifying a specific encryption key schedule used within its operations. SoreFang, associated with the threat actor group APT29, has been noted for targeting COVID-19 vaccine development efforts. The detection is based on a particular sequence of bytes that represent characteristic patterns in the malware's encryption process, ensuring that samples matching these patterns are flagged.
  Updated-Date: '2024_08_07'
APT_APT29_sorefang_encryption_round_function:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 32acbe4081f15b31a2dd81f1058963a1
  Ruleset: securityonion-yara
  Summary: This rule detects the SoreFang malware by identifying its specific encryption round function. The detection is based on a particular sequence of bytes within executable files that match known patterns associated with SoreFang's encryption operations. This malware has been observed targeting COVID-19 vaccine development.
  Updated-Date: '2024_08_07'
APT_APT29_sorefang_modify_alphabet_custom_encode:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3bb2f1f2d16263b63b69c42e6e50939f
  Ruleset: securityonion-yara
  Summary: This rule detects the SoreFang malware by identifying specific arguments passed into a custom encoding algorithm function. The presence of certain hexadecimal string patterns along with PE file header signatures is used to confirm the detection. The SoreFang malware is known to be associated with APT29 and has been observed targeting COVID-19 vaccine development initiatives.
  Updated-Date: '2024_08_07'
APT_APT29_sorefang_remove_chars_comma_space_dot:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 27ae7736a07db4301dca0747d20f8450
  Ruleset: securityonion-yara
  Summary: This rule detects the SoreFang malware based on a specific function it uses to remove commas, spaces, and dots from strings. The detection is achieved through a series of byte patterns that match the behavior of this function within executable files.
  Updated-Date: '2024_08_07'
APT_APT29_wellmess_dotnet_unique_strings:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a310eac24bc4cde7078a000c25c0d4d6
  Ruleset: securityonion-yara
  Summary: This rule detects WellMess .NET malware samples by looking for unique strings and function or variable names within the code. Specific strings that it monitors include "HealthInterval," "Hello from Proxy," "Start bot:", "FromNormalToBase64," "FromBase64ToNormal," and "WellMess." The condition is met if the file has a valid PE header and at least three of these strings are present.
  Updated-Date: '2024_08_07'
APT_APT34_PS_Malware_Apr19_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2a88dec4ba75ace62ec457d64040ac9c
  Ruleset: securityonion-yara
  Summary: This rule detects APT34 PowerShell malware by identifying specific script content that points to malicious behavior attributed to APT34. It looks for distinctive PowerShell commands and strings such as "get-wmiobject" to fetch system UUID information and "Write-Host" for error handling. Additionally, it searches for sleep commands that delay execution, indicating obfuscation or evasion tactics used in the malware.
  Updated-Date: '2024_08_07'
APT_APT34_PS_Malware_Apr19_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 15e690198792296532c8764d5ca9adf1
  Ruleset: securityonion-yara
  Summary: This rule detects APT34 PowerShell malware by identifying specific PowerShell commands and constructs commonly used by this threat actor. The detection is based on the presence of certain strings in the script, such as the creation of web proxies, gathering of system information via WMI, and using particular comparison operators and formatting constructs. Specifically, it looks for patterns like DNS host address resolution, system UUID retrieval, non-whitespace matching, and content setting, which are indicative of APT34's malicious activities.
  Updated-Date: '2024_08_07'
APT_APT34_PS_Malware_Apr19_3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e755f1f9380fcf31221a175cdf43e1d6
  Ruleset: securityonion-yara
  Summary: This rule detects APT34 PowerShell malware, which is characterized by strings associated with its execution and scheduling. It looks for specific indicators such as "Powershell.exe -exec bypass", task scheduling commands like "schtasks /create /F /ru SYSTEM /sc minute /mo 10 /tn", and script file names such as "UpdateTasks\\UpdateTaskHosts" and "UpdateTask.vbs". Additionally, it checks for encoded PowerShell commands and script components like "hUpdater.ps1" used in the malware's operation. The condition to trigger this detection is the presence of any one of these distinctive strings.
  Updated-Date: '2024_08_07'
APT_APT41_CN_ELF_Speculoos_Backdoor:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d1b678779a2d9fe936d01ad0e185f889
  Ruleset: securityonion-yara
  Summary: This rule detects Speculoos Backdoor, a malicious software used by the cyber espionage group APT41. The detection leverages specific strings and byte sequences found within the malware, such as file paths, unique identifiers, and system commands like "uname -v" and "uname -s". Conditions for detection include checking for certain hexadecimal patterns, file size constraints, and specific ASCII text and full words including "badshell" and "hw.physmem". These combined elements help identify the Speculoos Backdoor when it appears in ELF files smaller than 600KB.
  Updated-Date: '2024_08_07'
APT_APT41_CRACKSHOT:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c0a940c788c7d2ac07076d1a25b07a27
  Ruleset: securityonion-yara
  Summary: This rule detects the APT41 malware known as CRACKSHOT. It identifies signatures related to the presence of specific process names such as "procmon64.exe", "netmon.exe", "tcpview.exe", "MiniSniffer.exe", and "smsniff.exe", commonly used for network monitoring. Additionally, it searches for specific functions and user-agent strings associated with this malware, such as "RunUrlBinInMem" and "DownRunUrlFile", along with a distinctive web user-agent string that mimics a legitimate browser. The rule checks for these signatures in files that start with the hexadecimal value 0x5a4d and are smaller than 250KB.
  Updated-Date: '2024_08_07'
APT_APT41_HIGHNOON:
  Created-Date: '2024_08_06'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9c2ceb54731aa5584715f02b427e07e0
  Ruleset: securityonion-yara
  Summary: This rule detects APT41 malware known as HIGHNOON, identified by specific strings and patterns within a file. It looks for the presence of "workdll64.dll" and other indicators such as directory paths like "\\Fonts\\Error.log" and "\\svchost.exe". Additionally, it checks for log format patterns, system settings references like "LoadAppInit_DLLs" and "netsvcs", and specific code markers such as "HookAPIs ...PID %d", "DllMain_mem", and "%s\\NtKlRes.dat". Overall, the rule scans for key characteristics of the HIGHNOON malware within executable files that are smaller than 2000KB.
  Updated-Date: '2024_08_06'
APT_APT41_HIGHNOON_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 511d072e0596e8fcf50f26f82add7173
  Ruleset: securityonion-yara
  Summary: This rule detects APT41's malware known as HIGHNOON. It identifies specific characteristics of the malware, such as the presence of the string "H:\\RBDoor\\", the filenames "PlusDll.dll" and "ShutDownEvent.dll", and a reference to "\svchost.exe". The rule further checks that the file starts with the "MZ" header, has a filesize under 600KB, and matches a specific import hash or exports a function named "DllMain_mem".
  Updated-Date: '2024_08_07'
APT_APT41_HIGHNOON_BIN:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2df3f93c1b2b852e218ba7fcee9a2050
  Ruleset: securityonion-yara
  Summary: This rule detects HIGHNOON.BIN malware associated with the cyber-espionage group APT41. The detection focuses on specific strings, such as "PlusDll.dll" and various registry paths related to Internet Settings and Security. It also considers the file's PE import hash and ensures the file size is under 600KB with a specific header signature.
  Updated-Date: '2024_08_07'
APT_APT41_HIGHNOON_BIN_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8ab46fed21498deeef857f20b4e0eb9a
  Ruleset: securityonion-yara
  Summary: This rule detects the APT41 malware known as HIGHNOON.BIN. It specifically looks for unique strings associated with the malware, such as "\\Double\\Door_wh\\", "[Stone] Config --> 2k3 TCP Positive Logout.", "\\RbDoorX64.pdb", "RbDoor, Version 1.0", and "About RbDoor". Additionally, the rule checks for a file header indicating a Windows executable (0x5a4d) and ensures the file size is less than 2000KB for the detection to trigger.
  Updated-Date: '2024_08_07'
APT_APT41_POISONPLUG:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3cef707f804917eeff779d9c16afd5d7
  Ruleset: securityonion-yara
  Summary: This rule detects the APT41 malware known as POISONPLUG. It identifies the presence of specific strings associated with the malware, including "TSMSISrv.DLL," error messages indicating failures such as "[-]write failed[%d]" and "[-]load failed," and a reference to "Remote Desktop Services." The rule applies conditions focusing on the file type and size, including checks for a specific PE import hash value and the presence of at least two of the specified strings.
  Updated-Date: '2024_08_07'
APT_APT41_POISONPLUG_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2aab48d2f547269c3100ef1548f313aa
  Ruleset: securityonion-yara
  Summary: This rule detects the POISONPLUG malware associated with the APT41 group. It identifies malware through specific string patterns such as "ma_lockdown_service.dll," "acbde.dll," "MA lockdown Service," and "McAfee Agent." The rule is triggered if the file starts with the "0x5a4d" header and is less than 11,000KB in size.
  Updated-Date: '2024_08_07'
APT_APT41_POISONPLUG_3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 91b47876bac1ba6a93d58b9611def054
  Ruleset: securityonion-yara
  Summary: This rule detects the APT41 malware POISONPLUG by identifying specific string patterns and characteristics associated with the malware. It checks for the presence of certain strings such as "Rundll32.exe \"%s\", DisPlay 64", "tcpview.exe", and reversed goodware strings like 'Software\\Microsoft\\Windows\\CurrentVersion\\Run' and 'RegSetValueExA'. Additionally, the rule examines the file's size being less than 900KB and ensures that the file starts with the bytes 0x5a4d.
  Updated-Date: '2024_08_07'
APT_APT41_POISONPLUG_SHADOW:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: de63cefd41c73d288118eb0ed9cbab44
  Ruleset: securityonion-yara
  Summary: This rule detects the POISONPLUG SHADOW malware associated with APT41 by identifying specific characteristics in executable files. It looks for files starting with the "MZ" header (indicating a Windows executable) that are smaller than 500KB and match a specific import hash, helping to pinpoint this particular threat.
  Updated-Date: '2024_08_07'
APT_APT41_RevokedCert_Aug19_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 52eb32065c9ee2d3c3f53448c4996e95
  Ruleset: securityonion-yara
  Summary: This rule detects the use of revoked certificates associated with the APT41 threat group. It identifies executable files with specific serial numbers in their digital signatures indicative of this group's activity, allowing for targeted detection of compromised or malicious software signed with these certificates.
  Updated-Date: '2024_08_07'
APT_ATP28_Sofacy_Indicators_May19_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a2e3d8b75b49045e54501f179088cbc9
  Ruleset: securityonion-yara
  Summary: This rule detects APT28 Sofacy malware by identifying specific indicators within software samples. It looks for certain strings associated with directory paths and filenames, such as those referencing "openssl-1.0.1e" and "Downloader_Poco," as well as a particular system file "npmproxy.dll." Additionally, it examines byte sequences indicative of the malware's operations, focusing on specific hexadecimal patterns. The rule also checks for a distinct import hash signature and ensures the sample size is under 10,000 KB while starting with the "MZ" header to confirm it is a portable executable file.
  Updated-Date: '2024_08_07'
APT_Area1_SSF_GoogleSend_Strings:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: cc86b23890646fc676de8c83e70aee58
  Ruleset: securityonion-yara
  Summary: This rule detects a send tool used in phishing campaigns that employ specific strings and configurations. Indicators include the presence of "RefreshToken.ini" configuration files, placeholders for client IDs and secrets, and the status message "We are going to send." Furthermore, it identifies a unique byte sequence within the tool's binary structure.
  Updated-Date: '2024_08_07'
APT_Area1_SSF_PlugX:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 63845eea055758fce4ea721bb14dc2d2
  Ruleset: securityonion-yara
  Summary: This rule detects a "send tool" utilized in a phishing campaign reported by Area 1 in December 2018. It identifies specific malicious code patterns related to various functionalities, including keylogging, file operations, version comparisons, and registry editing. Key indicators include sequences used for function calls, registry manipulations, and checks for device capabilities. These patterns are characteristic of the PlugX malware, known for its comprehensive remote access and control features, enabling threat actors to perform a range of malicious activities on compromised systems. Detection relies on identifying at least three distinctive code patterns from the specified strings.
  Updated-Date: '2024_08_07'
APT_ArtraDownloader2_Aug19_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8648cf3c7c8ddd90c516497d0a1dc430
  Ruleset: securityonion-yara
  Summary: This rule detects the ArtraDownloader malware, a malicious downloader known to target Pakistan. The detection is based on multiple unique hexadecimal strings and ASCII patterns indicative of this specific malware variant. The conditions for triggering this detection include the presence of a specific header and a file size less than 600KB.
  Updated-Date: '2024_08_07'
APT_Backdoor_MacOS_GORAT_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e644538acd8ddc46617dbe018a9bb2f5
  Ruleset: securityonion-yara
  Summary: This rule detects specific strings related to network activities associated with the MacOS variant of the GORAT backdoor malware. It looks for strings such as "SID1=%s", "http/http.dylib", "Mozilla/", "User-Agent", and "Cookie". The condition for detection is the presence of these strings in files with specific magic numbers (0xBEBAFECA, 0xFEEDFACE, 0xFEEDFACF, or 0xCEFAEDFE), indicating Mach-O executable formats.
  Updated-Date: '2024_08_07'
APT_Backdoor_SUNBURST_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 91a0168c8f192f54b5d8e5b5e11e8609
  Ruleset: securityonion-yara
  Summary: This rule detects the SUNBURST backdoor utilized in the SolarWinds supply chain compromise. SUNBURST is capable of spawning and terminating processes, manipulating files, modifying registry keys, gathering system data, and disabling forensic tools and services. The rule identifies specific code patterns such as a function performing XOR operations on names and paths of processes, services, and drivers. It also looks for encoded and plain versions of certain strings associated with fake Orion events and messages, indicating the presence of this sophisticated backdoor.
  Updated-Date: '2024_08_07'
APT_Backdoor_SUNBURST_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a7ab5556ad7284a2ffd130f5093f0e30
  Ruleset: securityonion-yara
  Summary: This rule detects the SUNBURST backdoor, which employs a domain generation algorithm (DGA) as part of its command-and-control (C2) communications. It identifies specific branches of code that determine the HTTP methods used. The backdoor can spawn and terminate processes, read and write files, modify registry keys, collect system data, and disable various forensic tools and services, making it a versatile and persistent threat. The signature is designed to match any reused part of the DGA in other samples, ensuring robust detection.
  Updated-Date: '2024_08_07'
APT_Backdoor_Win_DShell_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5f8aaff86b16f870797c1a7dfbec08f2
  Ruleset: securityonion-yara
  Summary: This rule detects a specific backdoor, DShell, that targets the Windows operating system. It identifies sections of an integer array containing encoded payloads alongside a list of Windows functions frequently utilized by the malware. The rule looks for a set of specific Windows API functions such as "CreateFileA," "GetTickCount," and "Sleep," as well as particular RegOpenKey-related functions. The condition checks for specific file headers and size criteria, alongside multiple occurrences of the defined strings and integer patterns within a specified range.
  Updated-Date: '2024_08_07'
APT_Backdoor_Win_DShell_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c7e13325e2180da1673e0fd2db29c118
  Ruleset: securityonion-yara
  Summary: This rule detects the DShell payload by identifying specific strings associated with the D programming language coupled with various Windows functions. Key identifiers include file paths and error messages related to the D programming language, such as "C:\\D\\dmd2\\windows\\bin\\..\\..\\src\\phobos\\std\\utf.d" and "Unexpected '\\n' when converting from type const(char)[] to type int." Additionally, it checks for a broad range of Windows functions like "CreateFileA," "CloseHandle," "GetLastError," and "WriteFile." The rule also ensures the absence of certain ignored strings. This detection method is aimed at identifying malware that incorporates D language constructs and standard Windows API functions, specifically within executables sized between 500KB and 700KB.
  Updated-Date: '2024_08_07'
APT_Backdoor_Win_DShell_3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1c4877fcaf9b31161356ecfb416b2169
  Ruleset: securityonion-yara
  Summary: This rule detects a backdoor associated with DShell malware, which is indicated by the presence of specific strings from the D programming language's Phobos library. It identifies files that contain references to these libraries, such as paths to standard modules like "utf.d," "file.d," "format.d," "base64.d," and "stdio.d." Additionally, it looks for specific patterns within an integer array that indicate the presence of encoded payloads used by the malware. This rule targets executables with a typical PE header and a file size between 500KB and 1500KB.
  Updated-Date: '2024_08_07'
APT_Backdoor_Win_GORAT_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 97baf1c0ed79d1bb26a57072d64144f0
  Ruleset: securityonion-yara
  Summary: 'This rule detects a sample that is less than 50KB in size and contains specific strings associated with the Gorat shellcode, which acts as a stage0 loader. This loader includes an embedded DLL, called stage0.dll, which hosts several unique strings. One significant string is "Cookie: SID1=%s," which is essential for the loader to communicate with the Command and Control (C2) server to download the Gorat implant, known as the stage1 payload. Other notable strings include references to various functions and modules, like "httpComms.dll," "runCommand," and "initialize."'
  Updated-Date: '2024_08_07'
APT_Backdoor_Win_GORAT_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 14f7216abf275401afe61046c756e499
  Ruleset: securityonion-yara
  Summary: This rule detects a Windows PE file smaller than 10MB that includes specific Go build ID strings and various indicators associated with the Gorat implant, a type of backdoor malware. It looks for JSON strings related to command-and-control (C2) communication, specific method names, and the distinct string "murica" used in C2 communication. Additionally, it ensures that the string "rat" appears in the binary over 1000 times, reflecting the name of the project used by the implant.
  Updated-Date: '2024_08_07'
APT_Backdoor_Win_GORAT_3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 30d0e600630f8b852c8fd8c7fd00f9e7
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the Gorat backdoor implant on a Windows system. It identifies specific strings related to FireEye, RedFlare, and other markers that indicate the malware, checks for certain Go build identifiers, and looks for JSON structures common in Gorat's code. Additionally, it includes various indicators such as command handler references, beacon sending behavior, and the presence of over 1000 occurrences of the abbreviation "rat." The detection aims to find the backdoor if it hasn't undergone a specific cleanup script.
  Updated-Date: '2024_08_07'
APT_Backdoor_Win_GORAT_4:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: db3d7eeb62a637e0adf515e67655c297
  Ruleset: securityonion-yara
  Summary: This rule detects a Windows Portable Executable (PE) file that is smaller than 10MB and exports numerous functions typically associated with the Gorat implant. The aim is to identify packed samples that may lack other identifiable strings but need to replicate these specific exports to maintain their functionality. Functions include various memory management and resource handling routines such as "MemoryCallEntryPoint," "MemoryDefaultAlloc," "MemoryDefaultFree," and "MemoryLoadLibrary," amongst others.
  Updated-Date: '2024_08_07'
APT_Backdoor_Win_GORAT_5:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 802f8d393dab64f056a0692212c72965
  Ruleset: securityonion-yara
  Summary: This rule detects the GORAT version 5 backdoor, a malicious tool associated with Advanced Persistent Threats (APTs). It identifies this malware by scanning for specific strings related to its communication and command-response functionalities, such as "comms.BeaconData," "comms.CommandResponse," "rat.BaseChannel," "rat.Config," and "rat.Core." Additionally, it looks for references to the platform and host identification functions, and the "dllmain.go" file associated with the RAT command. The rule specifically searches for Windows Portable Executable (PE) files by checking for typical PE file headers.
  Updated-Date: '2024_08_07'
APT_Backdoor_Win_GoRat_Memory:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 048339e6644e59ebe1ffa276cc559ed1
  Ruleset: securityonion-yara
  Summary: This rule detects the GoRat backdoor malware in memory by identifying specific strings associated with its operation. These strings include various indicators related to modules and functions used by GoRat, such as `rat/modules/socks.(*HTTPProxyClient).beacon`, `rat.(*Core).generateBeacon`, `rat.gJitter`, `rat/comms.(*protectedChannel).SendCmdResponse`, and several others that are distinctive to the GoRat malware's activity in a Windows environment.
  Updated-Date: '2024_08_07'
APT_Builder_PY_MATRYOSHKA_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0d7386deab1236f1f7b49a8a2c15d514
  Ruleset: securityonion-yara
  Summary: This rule detects FireEye's Python MATRYOSHKA tool, which is used for specific cyber-attack actions. Indications of this tool include the presence of Python code segments such as functions utilizing `pop(0)` method, string replacements associated with converting data to a hexadecimal format, and system calls for building projects with the Rust compiler. It also involves specific paths and environment variables related to Rust, like `shutil.which('rustc')` and `~/.cargo/bin`. Additionally, there are unique patterns of joining hexadecimal representations of data. All these markers must be found to confirm the detection.
  Updated-Date: '2024_08_07'
APT_Builder_PY_REDFLARE_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 57c2cbb46592ba6f4d45dc7a69008678
  Ruleset: securityonion-yara
  Summary: This rule detects malicious activity associated with FireEye's Python Redflar by identifying specific strings in the code. These strings include load offsets for 32-bit and 64-bit architectures, references to an RC4 class, a particular struct packing format, a stager configuration related to communications, and filename patterns for dynamic link libraries (.dll) for both x86 and x64 systems. The condition requires all specified strings to appear in a sequential order within the code.
  Updated-Date: '2024_08_07'
APT_Builder_PY_REDFLARE_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: df1b3365f16c08ecc3459c2cbefca502
  Ruleset: securityonion-yara
  Summary: This rule detects indicators associated with a specific cyber threat organization or malware activity documented by FireEye, particularly by identifying unique string patterns. It looks for the presence of certain hexadecimal sequences, a specific string ("<510sxxII"), and the term "parsePluginOutput" within files. The detection condition is triggered when all specified strings are found and the second string appears exactly twice.
  Updated-Date: '2024_08_07'
APT_Builder_Win64_MATRYOSHKA_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9eb00aee52bb30fafc0012e7d20c5a18
  Ruleset: securityonion-yara
  Summary: This rule detects a builder associated with the MATRYOSHKA_PE_TO_SHELLCODE, identified by its unique sequence of bytes and specific strings within Windows 64-bit PE files, indicating the presence of certain executable characteristics. The targeted file is recognized by specified hexadecimal patterns and string markers that denote stub size, executable size, and logging messages related to writing output to a file. This detection helps in identifying the MATRYOSHKA toolkit used in cyber attacks, as described by FireEye.
  Updated-Date: '2024_08_07'
APT_CN_Group_Loader_Jan20_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 257ed3f4298d4ff616eeab6aae25b2a9
  Ruleset: securityonion-yara
  Summary: This rule detects loaders used by Chinese threat groups, specifically identifying a unique sequence of hexadecimal bytes within the malware. This pattern is indicative of malicious software employed by these groups in their cyber operations.
  Updated-Date: '2024_08_07'
APT_CN_MAL_RedDelta_Shellcode_Loader_Oct20_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 98afca4c65ed7b4278c0f2b0532f5d33
  Ruleset: securityonion-yara
  Summary: This rule detects samples associated with Red Delta, a cyber-espionage group. It identifies the use of shellcode injection techniques in suspicious executable files, specifically searching for the term "InjectShellCode." Additionally, it looks for multiple indicators within the file, such as mentions of "DotNetLoader.exe," "clipboardinject," references to a raw file download link, specific Windows registry paths, and executable names like "FlashUpdate.exe." The rule further matches on distinct sequences of machine code instructions indicative of the malware's presence, ensuring the file size is less than 200KB and that it starts with the MZ header commonly found in executable files.
  Updated-Date: '2024_08_07'
APT_CN_MAL_RedDelta_Shellcode_Loader_Oct20_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4b2885653590a5605a2cd07cc91fe75f
  Ruleset: securityonion-yara
  Summary: This rule detects Red Delta malware samples by identifying specific patterns and strings associated with its known behaviors and characteristics. These include the presence of executable names like "\\CLRLoader.exe" and specific URL patterns such as "/callback.php" with query parameters and "/download.php?api=40". It also looks for particular program text strings such as "DotNetLoader.Program", error messages like "Read code failed", and logs like "Writefile success". Additionally, the rule checks for certain byte sequences typically found in the loader's code.
  Updated-Date: '2024_08_07'
APT_CN_MAL_RedDelta_Shellcode_Loader_Oct20_3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6458efc1921d426a0c4748385ebe1da6
  Ruleset: securityonion-yara
  Summary: 'This rule detects the presence of Red Delta malware samples, specifically a shellcode loader, by identifying unique strings associated with the malware. It looks for references to specific DLL files like "Taskschd.dll" and "AddTaskPlanDllVerson.dll", the executable "\\FlashUpdate.exe", a project path "D:\\Project\\FBIRedTeam", and an error message pattern "Error %s:%d, ErrorCode: %x". The rule checks the file size to be under 400KB and verifies the file header to further ascertain the sample.'
  Updated-Date: '2024_08_07'
APT_CN_TwistedPanda_64bit_Loader:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f851035b3e14ab8b606c90dd6282064a
  Ruleset: securityonion-yara
  Summary: This rule detects the 64-bit Loader DLL associated with the TwistedPanda espionage operation targeting Russian state-owned defense institutes. It identifies specific sequences of assembly instructions related to file path checking, shellcode reading, and memory allocation within the DLL. The conditions include validating MZ and PE signatures to ensure the file type and restricting detection to files smaller than 3000KB.
  Updated-Date: '2024_08_07'
APT_CN_TwistedPanda_SPINNER_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2c5e059748445ff42a528d5c9c83c4f6
  Ruleset: securityonion-yara
  Summary: This rule detects the obfuscated variant of the SPINNER payload used by the TwistedPanda group. The payload is associated with espionage operations targeting Russian state-owned defense institutes. Key characteristics identified include specific byte patterns used for configuration initialization, command and control (C2) commands, and decryption routines. The rule examines files smaller than 3000KB with an MZ and PE header signature and correlates multiple detection patterns to confirm the presence of the SPINNER payload.
  Updated-Date: '2024_08_07'
APT_CN_TwistedPanda_SPINNER_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 46fa47914a4433bab013620f1c070489
  Ruleset: securityonion-yara
  Summary: This rule detects an older variant of the SPINNER payload utilized by the TwistedPanda group. It identifies specific binary patterns including memory initialization instructions, command and control (C2) command sequences, and decryption routines within executable files. The condition checks that the file structure has a valid MZ and PE signature, a file size of less than 3000KB, contains a significant amount of specific initialization code, several C2 commands, and the presence of particular decryption sequences.
  Updated-Date: '2024_08_07'
APT_CN_TwistedPanda_droppers:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 36a0a4b23f513b4fdaaae8a7623b1154
  Ruleset: securityonion-yara
  Summary: This rule detects droppers used by TwistedPanda, a Chinese APT group involved in espionage operations against Russian state-owned defense institutes. The rule identifies specific sequences of byte manipulation and control flow instructions typical of such droppers. It ensures the presence of both MZ and PE signatures, checks for characteristic binary patterns in executable files, and ensures the file size is less than 3000KB. Specific strings like "%public%" are also used as part of the detection criteria.
  Updated-Date: '2024_08_07'
APT_CN_TwistedPanda_loader:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 58b3dbad49c3ac78aea0a2fddc3641ea
  Ruleset: securityonion-yara
  Summary: This rule detects a loader associated with the TwistedPanda group, which is known for its espionage operations targeting Russian state-owned defense institutes. The rule identifies specific code sequences and decryption routines within executable files. It verifies the presence of MZ and PE headers, ensuring the file is a Windows Portable Executable (PE) file and that its size is under 3000KB.
  Updated-Date: '2024_08_07'
APT_CobaltStrike_Beacon_Indicator:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4092cbf03bb385b011138ba44385b7b7
  Ruleset: securityonion-yara
  Summary: This rule detects CobaltStrike beacons by identifying specific hexadecimal patterns within files smaller than 300KB that begin with the common 'MZ' header used in executable files. The patterns searched for include '73 70 72 6E 67 00' and a series of eight '69' bytes in sequence.
  Updated-Date: '2024_08_07'
APT_Controller_Linux_REDFLARE_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6898b19d707992eafff1e49d430ec62e
  Ruleset: securityonion-yara
  Summary: This rule detects specific characteristics of the REDFLARE backdoor malware associated with a sophisticated cyber-attack. It identifies the presence of certain strings typically found within the malware, including "/RedFlare/gorat_server", "RedFlare/sandals", "goratsvr.CommandResponse", and "goratsvr.CommandRequest". Additionally, it checks for a specific file header value, indicating an ELF (Executable and Linkable Format) file, which is common in Linux environments. These combined indicators help recognize the malicious activity associated with REDFLARE.
  Updated-Date: '2024_08_07'
APT_CryWiper_Dec22:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b30d5db684a4fd77a5eb716e720ab858
  Ruleset: securityonion-yara
  Summary: This rule detects CryWiper malware samples, which are characterized by specific behaviors and markers. It identifies the presence of the malware by looking for registry entries associated with Sysinternals BrowserUpdate. Additionally, it checks for the execution of commands to terminate Microsoft Exchange processes and the modification of Windows Terminal Server settings to deny connections. The combination of these indicators helps in identifying infected systems.
  Updated-Date: '2024_08_07'
APT_DNSpionage_Karkoff_Malware_Apr19_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0722c1569b9c0c92352e1cb8bfc330d4
  Ruleset: securityonion-yara
  Summary: This rule detects DNSpionage Karkoff malware, which is identified by specific file names and domains such as "Karkoff.exe," "kuternull.com," and "rimrun.com." It also looks for behaviors like the use of "C:\Windows\Temp\" directory, execution of "CMD.exe," and certain function calls including "get_ProcessExtensionDataNames" and "get_ProcessDictionaryKeys." The rule triggers if the file header matches standard PE characteristics, the file size is less than 1000KB, and either one of the specific strings for file names or domains is found, or all the behavioral strings are present.
  Updated-Date: '2024_08_07'
APT_DarkHydrus_Jul18_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b1bee37b0ce9ec143b6596f7b0867ab7
  Ruleset: securityonion-yara
  Summary: This rule detects a specific string and various characteristics associated with malware samples linked to the DarkHydrus threat actor, which targets Middle Eastern government entities. The detection is triggered by the presence of a particular ASCII string, "Z:\\devcenter\\aggressor\\," within an executable file smaller than 600KB that starts with the magic number 0x5a4d. Additionally, the executable's import hash should match a specified value ("d3666d1cde4790b22b44ec35976687fb") to confirm the presence of this malware.
  Updated-Date: '2024_08_07'
APT_DarkHydrus_Jul18_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8f2fdef4dd5426340c5f16aaab519e4c
  Ruleset: securityonion-yara
  Summary: This rule detects strings associated with malware samples from an advanced persistent threat (APT) group known as DarkHydrus, which primarily targets Middle Eastern governmental entities. The rule searches for specific strings commonly found in the malware, such as "windir," "temp.dll," "libgcj-12.dll," "%s\\System32\\%s," and "StartW," ensuring their presence in executable files smaller than 40KB, and matching certain initial file characteristics.
  Updated-Date: '2024_08_07'
APT_DarkHydrus_Jul18_3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d2944b8452ff402c4f42750126abb2cc
  Ruleset: securityonion-yara
  Summary: "This rule detects malware samples associated with the APT group DarkHydrus, which targets Middle Eastern governments. The rule identifies specific strings within the malware, such as \"Ws2_32.dll\" and a particular user-agent string resembling that of a Mozilla-compatible browser, indicative of the threat actor\u2019s tactics. The detection criteria are based on these strings, the PE file import hash, and file size constraints."
  Updated-Date: '2024_08_07'
APT_Downloader_Win32_REDFLARE_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6cd7d09f04f6e5dbea3671591eec93a5
  Ruleset: securityonion-yara
  Summary: This rule detects the APT32 REDFLARE downloader malware targeting Windows systems. It identifies the presence of specific strings and patterns within executable files, including a unique HTTP request format and a particular cookie syntax used by the malware. Additionally, it verifies that the file has valid Windows executable headers. This combination helps to accurately pinpoint files associated with this malicious downloader activity.
  Updated-Date: '2024_08_07'
APT_Downloader_Win64_REDFLARE_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c0d525881521aa86fd6b5181ee07750e
  Ruleset: securityonion-yara
  Summary: 'This rule detects the presence of a malware downloader named REDFLARE, targeting 64-bit Windows systems. It identifies this downloader by looking for specific string patterns and byte sequences characteristic of its network communication behavior, such as the string "Cookie: SID1=%s" and a specific sequence of bytes used in HTTP requests. Additionally, it confirms the presence of a valid executable file by checking the PE file headers.'
  Updated-Date: '2024_08_07'
APT_Dropper_Raw64_TEARDROP_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3c5e68e978b06ee67fa8aa3d5cdd210d
  Ruleset: securityonion-yara
  Summary: This rule detects the TEARDROP backdoor, a memory-only dropper known for reading files and registry keys, XOR-decoding an embedded payload, and loading the payload into memory. TEARDROP persists by running as a Windows service and has been associated with dropping Cobalt Strike BEACON into memory. The rule identifies crucial components of the backdoor, ensuring effective detection.
  Updated-Date: '2024_08_07'
APT_Dropper_Win64_MATRYOSHKA_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a0643f404b3c2a7b0ad6b16d451339ea
  Ruleset: securityonion-yara
  Summary: This rule detects the APT dropper malware known as MATRYOSHKA, targeting Windows 64-bit systems. It identifies a specific executable by checking for a combination of unique byte patterns within the file, ensuring the file matches the characteristics of a Portable Executable (PE) format. The detection focuses on the presence of certain hexadecimal sequences that are indicative of the MATRYOSHKA dropper's code, aiding in the identification and analysis of this particular threat.
  Updated-Date: '2024_08_07'
APT_Dropper_Win64_TEARDROP_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 450b9e3caff7c8842085a1d7b87c3863
  Ruleset: securityonion-yara
  Summary: This rule detects the TEARDROP memory-only dropper, which is known for reading files and registry keys, XOR-decoding an embedded payload, and loading this payload into memory. TEARDROP operates as a Windows service and has been identified dropping the Cobalt Strike BEACON into memory. It matches specific opcode sequences associated with its behavior, including payload decoding.
  Updated-Date: '2024_08_07'
APT_Dropper_Win_MATRYOSHKA_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f908cd6deaf1a88c8209750594ae6f90
  Ruleset: securityonion-yara
  Summary: This rule detects a specific variant of the MATRYOSHKA dropper malware on Windows systems, identified by certain unique strings within the executable. The rule looks for the presence of the strings "matryoshka.exe", "Unable to write data", "Error while spawning process. NTStatus:", and ".execmdstart/Cfailed to execute process" within files that begin with the typical 'MZ' header and PE signature for Windows executables. These strings are indicative of the dropper's attempts to execute and handle errors during its operation.
  Updated-Date: '2024_08_07'
APT_FIN7_EXE_Sample_Aug18_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6d3ca6f18c8501ec68d0c96dcc97c3bf
  Ruleset: securityonion-yara
  Summary: This rule detects a sample associated with the FIN7 cybercriminal group from a report published in August 2018. It specifically looks for the string "Manche Enterprises Limited0" within executable files that start with the hexadecimal value 0x5a4d and are less than 800KB in size.
  Updated-Date: '2024_08_07'
APT_FIN7_EXE_Sample_Aug18_10:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0e3f0d9644303f8478a0dbf4b68a7165
  Ruleset: securityonion-yara
  Summary: This rule detects a specific executable sample from the FIN7 cybercriminal group reported in August 2018. The detection criteria include a unique sequence of hexadecimal values representing a copyright string within the file, which must match the identified pattern. Additionally, the file must start with the common Windows executable magic number (0x5a4d) and be smaller than 1000KB in size.
  Updated-Date: '2024_08_07'
APT_FIN7_EXE_Sample_Aug18_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 99b78097b70d388c9738d31614d073e5
  Ruleset: securityonion-yara
  Summary: This rule detects a specific sample from the FIN7 cybercriminal group's activities reported in August 2018. It identifies the malware by scanning for specific strings, such as "constructor or from DllMain." and "Network Software Ltd0", within the executable file. The file is further validated by checking for a particular file header signature and ensuring the file size is less than 400KB. The sample in question is associated with a hash value for precise identification.
  Updated-Date: '2024_08_07'
APT_FIN7_EXE_Sample_Aug18_3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2fdadb47402c4ca6add868f174304dbd
  Ruleset: securityonion-yara
  Summary: This rule detects a specific malicious executable file that was part of a FIN7 criminal operation reported in August 2018. The detection is based on the presence of particular strings within the file and characteristics such as its file size being less than 50KB and a specific header signature. FIN7, also known as Carbanak Group, is a sophisticated cybercrime group known for targeting financial organizations.
  Updated-Date: '2024_08_07'
APT_FIN7_EXE_Sample_Aug18_4:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b3d065b45734650333202f27f97ae666
  Ruleset: securityonion-yara
  Summary: This rule detects a sample associated with the FIN7 cybercriminal group from an August 2018 report. It identifies a Windows executable file smaller than 700KB that starts with the "MZ" header (indicating a PE file) and includes specific strings such as "c:\\file.dat," "constructor or from DllMain.," and "lineGetCallIDs." These strings are used as indicators of compromise to pinpoint the presence of the malicious sample.
  Updated-Date: '2024_08_07'
APT_FIN7_EXE_Sample_Aug18_5:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3936c2100a403c5132333f883cdbb61c
  Ruleset: securityonion-yara
  Summary: This rule detects a malicious executable sample associated with the FIN7 cybercriminal group from a report published in August 2018. It identifies the specific malware by searching for particular ASCII and wide string patterns within executable files smaller than 400KB, provided the file begins with the "MZ" header, which characterizes Windows executables.
  Updated-Date: '2024_08_07'
APT_FIN7_EXE_Sample_Aug18_6:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 96ca1420ddb80de94d41f4198de83355
  Ruleset: securityonion-yara
  Summary: This rule detects a malicious executable associated with the FIN7 criminal group, known for sophisticated cyberattacks. Specifically, it targets a sample identified in a report from August 2018. The rule looks for certain executable names such as "coreServiceShell.exe," "PtSessionAgent.exe," "TiniMetI.exe," "PwmSvc.exe," and "uiSeAgnt.exe," and specific keywords "LHOST:", "TRANSPORT:", and "LPORT:". Furthermore, the file must be a PE file with a size smaller than 20KB, and either have an export function named "TiniStart" or contain at least four of the identified strings.
  Updated-Date: '2024_08_07'
APT_FIN7_EXE_Sample_Aug18_7:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f1bba20b2692740bda2c955a20873600
  Ruleset: securityonion-yara
  Summary: This rule detects a sample associated with the FIN7 cybercriminal group as reported in August 2018. The rule identifies the presence of specific strings within an executable file, including "libpng version" in ASCII and a seemingly random wide character string "sdfkjdfjfhgurgvncmnvmfdjdkfjdkfjdf." Additionally, the rule checks for a particular file signature and ensures the file size is under 800KB. The FIN7 group is known for sophisticated cyber-attacks targeting various sectors globally.
  Updated-Date: '2024_08_07'
APT_FIN7_EXE_Sample_Aug18_8:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: fdeed7e1cff374eb743ce2790dfe374d
  Ruleset: securityonion-yara
  Summary: This rule detects a specific executable sample associated with the FIN7 group, reported in August 2018. It identifies the malicious software by checking for a particular string "GetL3st3rr", ensuring the file starts with the typical "MZ" header for PE files and is less than 600KB in size.
  Updated-Date: '2024_08_07'
APT_FIN7_MalDoc_Aug18_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f9c1d6be35ebc4a4124d538822c52c7c
  Ruleset: securityonion-yara
  Summary: This rule detects a malicious document associated with the FIN7 cybercrime group campaign. It targets a specific behavior in which the document contains a string that prompts the user to enable editing, a common tactic used to execute further malicious activities once the victim complies. The detection is based on this indicative string and the file being smaller than 800KB in size.
  Updated-Date: '2024_08_07'
APT_FIN7_MsDoc_Sep21_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8efc6524a9f9ce182fa94c475322d18b
  Ruleset: securityonion-yara
  Summary: This rule detects malicious documents (MalDocs) associated with the FIN7 cybercrime group, specifically targeting a set of Windows 11 alpha-themed documents used to deliver a JavaScript backdoor. The detection is based on specific hexadecimal strings and ASCII text related to file paths and properties within the document, such as "word_data.bin," "V:\\DOC\\For_JS," "HomeCompany," and "W10ProOff16." The rule is triggered if the document header begins with a certain value and contains either one of the specific hexadecimal patterns or at least three of the identified ASCII strings.
  Updated-Date: '2024_08_07'
APT_FIN7_Sample_Aug18_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b2b2162afa1032f6c57636355fd3792d
  Ruleset: securityonion-yara
  Summary: This rule detects malicious samples associated with the cybercriminal group FIN7 as described in a report by FireEye. The detection is based on specific strings encoded in various formats, including ASCII and hexadecimal representations, which are embedded within the malware samples. These strings include obfuscated PowerShell commands, encoded paths to user directories (e.g., "C:\Users\andy"), and encoded indications of malicious scripts and executables (e.g., "xecute("On Error Resume Next:se" and "mshta.exe#..\..\..\Windows\Syst"). The condition checks the file type and size, ensuring it matches the criteria before identifying unique patterns that characterize the FIN7 samples.
  Updated-Date: '2024_08_07'
APT_FIN7_Sample_Aug18_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2cc5752b99f1306234cd3e845cf72352
  Ruleset: securityonion-yara
  Summary: "This rule detects a specific sample of FIN7 malware through the presence of unique string patterns and specific attributes within files, such as \"Description: C:\\\\Users\\\\oleg\\\\Desktop\\\\\", a copyright notice indicating \"Copyright 2016 Microsoft, Industries\", and sequences of numbers representing ASCII characters within the file. The rule checks that the file\u2019s format is indicated by a specific hexadecimal value and that its filesize is less than 2000KB."
  Updated-Date: '2024_08_07'
APT_FIN7_Sample_EXE_Aug18_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 44a5d6fd4729ad3be0f90c501fa52b6c
  Ruleset: securityonion-yara
  Summary: This rule detects a sample associated with the FIN7 cybercriminal group. It identifies specific ASCII strings related to coordinate parameters and error messages, as well as a sequence of bytes within the code. The rule applies to files less than 1000KB in size that start with the hexadecimal indicator 0x5a4d.
  Updated-Date: '2024_08_07'
APT_FIN7_Strings_Aug18_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 75c0edb4f4ab1ec7c14116464a5db8cb
  Ruleset: securityonion-yara
  Summary: This rule detects specific strings associated with the FIN7 cybercriminal group from a report released in August 2018. These strings include command-line patterns and script execution commands involving "wscript.exe" and "jscript," indicative of FIN7's tactics in executing and maintaining their malicious operations.
  Updated-Date: '2024_08_07'
APT_FallChill_RC4_Keys:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e5adf42d1d0d1a935d652d8268509aca
  Ruleset: securityonion-yara
  Summary: This rule detects FallChill malware by identifying specific RC4 encryption keys used within it. The detection is based on a particular sequence of byte patterns that are characteristic of this type of malware. The rule looks for a Windows Portable Executable (PE) file that begins with the "MZ" header and contains these unique byte sequences.
  Updated-Date: '2024_08_07'
APT_GreyEnergy_Malware_Oct18_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 69591cfc916d39aefd40e977730808b6
  Ruleset: securityonion-yara
  Summary: This rule detects GreyEnergy malware samples by identifying specific characteristics associated with the threat. It uses file properties and distinctive strings, such as file paths and error messages, within the malware. The rule targets files with certain hexadecimal signatures, specific file sizes, and import hashes, ensuring accurate identification of this malicious software. GreyEnergy malware is known for its sophisticated capabilities and has been linked to dangerous threat actors.
  Updated-Date: '2024_08_07'
APT_GreyEnergy_Malware_Oct18_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 152e9c8a0249d207c0923d364e9c5a8a
  Ruleset: securityonion-yara
  Summary: This rule detects malware samples associated with the GreyEnergy cyber-espionage group. It identifies files with specific string indicators embedded in the ASCII text, validating them based on the file size being under 300KB and the presence of a common executable file signature. These samples are part of a report that highlights the updated arsenal of this dangerous threat actor group.
  Updated-Date: '2024_08_07'
APT_GreyEnergy_Malware_Oct18_3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4e960160fbe97b375d5a6f39486e28c5
  Ruleset: securityonion-yara
  Summary: This rule detects specific malware samples associated with the GreyEnergy threat actor group, which is detailed in a report by WeLiveSecurity. It identifies these samples by looking for particular ASCII strings within executable files smaller than 300KB, starting with the hex value 0x5a4d. The identified strings include "USQTUNPPQONOPOQUMSNUTRMRRLVPUOPMROPMPMQTPNPONVUOUQOMMNNSRSRQQVTPPRSSNVSTURTMMOPTONSQTOMONQVMQNUSONTQTUTSRRPVTONUQNORQMRRNRUSPS," "tEMPiuP," and "sryCEMieye."
  Updated-Date: '2024_08_07'
APT_GreyEnergy_Malware_Oct18_4:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b2dd1ecb6671e7af91bca2103c4f4e0a
  Ruleset: securityonion-yara
  Summary: This rule detects samples from the GreyEnergy malware, a malicious software utilized by dangerous threat actors. It identifies specific file characteristics such as particular string patterns within the file content, specific file size constraints, and the presence of a unique PE import hash.
  Updated-Date: '2024_08_07'
APT_GreyEnergy_Malware_Oct18_5:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ca45739ab922549b2931ae9ff3dfd2f2
  Ruleset: securityonion-yara
  Summary: This rule detects samples from the GreyEnergy malware, identified in a report detailing an updated arsenal of dangerous threat actors. It matches files by checking the presence of the specific string "WespySSld.eQ" and ensuring the file's size is less than 300KB, among other conditions.
  Updated-Date: '2024_08_07'
APT_HAFNIUM_ForensicArtefacts_Cab_Recon_Mar21_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: cd504fffdd5ee64135ce298cb3df7869
  Ruleset: securityonion-yara
  Summary: This rule detects suspicious CAB files utilized by the HAFNIUM group for reconnaissance activities. It identifies these files by checking for the presence of specific strings such as "ip.txt", "arp.txt", "system", and "security" within the first 200 bytes of the file. Additionally, the files must start with the specific signature `0x4643534d` and be smaller than 10,000KB in size. These characteristics suggest the files are being used to gather system, network, and security information.
  Updated-Date: '2024_08_07'
APT_HAFNIUM_ForensicArtefacts_WER_Mar21_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2f6ed237854fd1171d3b831c3c55823c
  Ruleset: securityonion-yara
  Summary: This rule detects a Windows Error Report (WER) file that signifies an attempted exploitation of an Exchange server vulnerability as outlined in CVE-2021-26857. This detection specifically pertains to unsuccessful exploitation attempts occurring after the relevant patches have been applied. The rule focuses on identifying certain paths and string values related to the Microsoft Exchange ECP application, ensuring the WER file is reported only if it meets specific size and content criteria.
  Updated-Date: '2024_08_07'
APT_HAFNIUM_Forensic_Artefacts_Mar21_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b9df4debb70b1212859e9c1bf720089f
  Ruleset: securityonion-yara
  Summary: This rule detects forensic artifacts associated with HAFNIUM intrusions by identifying specific patterns. It looks for instances of the string "lsass.exe C:\\windows\\temp\\lsass", which indicates potential credential dumping in the Windows Temp directory. Additionally, it searches for the presence of "c:\\ProgramData\\it.zip", which may represent a malicious archive file used during the compromise. The rule also checks for "powercat.ps1'); powercat -c", signaling the use of a PowerShell script, particularly PowerCat, a tool that attackers might use for remote command execution. Detection is triggered if any one of these patterns is found.
  Updated-Date: '2024_08_07'
APT_HKTL_Wiper_WhisperGate_Jan22_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 061c25c0a5b46c493369c34cd3f97967
  Ruleset: securityonion-yara
  Summary: This rule detects unknown wiper malware linked to a destructive campaign targeting Ukrainian organizations. It searches for specific strings and binary patterns that indicate the presence of malware designed to corrupt hard drives, rendering data inaccessible. Key identifiers include a corrupted message embedded in the code and several unique operational code sequences. This behavior and collection of signatures suggest a highly targeted attack aimed at damaging data beyond recovery.
  Updated-Date: '2024_08_07'
APT_HKTL_Wiper_WhisperGate_Jan22_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2cd549395f6952a962112600ef59c123
  Ruleset: securityonion-yara
  Summary: This rule detects unknown wiper malware associated with a cyberattack targeting Ukrainian organizations, reported by Microsoft in January 2022. The detection is based on several specific encoded and plain text strings commonly used by the malware, one of which includes UTF-16-LE encoded Base64 string "Sleep -s 10" and another is a URL format related to Discord attachments. Additionally, the rule looks for specific hexadecimal patterns within the file and checks if the file starts with the "MZ" header, indicative of Windows PE files, and ensures the file size is less than 1000KB.
  Updated-Date: '2024_08_07'
APT_HKTL_Wiper_WhisperGate_Stage3_Jan22:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b219267aa024554ad8bc5c1044f4acbc
  Ruleset: securityonion-yara
  Summary: This rule detects a specific stage of the WhisperGate malware, which is a Ukrainian wiper malware. The detection focuses on reversed code, identifying unique hexadecimal and string patterns within files that meet certain size constraints, specifically looking for the signature of the malware's executable.
  Updated-Date: '2024_08_07'
APT_HackTool_MSIL_ADPassHunt_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: bdb4325df20e9b1fe82c798432ba5ea2
  Ruleset: securityonion-yara
  Summary: This rule detects FireEye's ADPassHunt tool, which is used to identify and extract credentials from Active Directory environments. It works by searching for specific byte sequences within files that match known patterns associated with ADPassHunt. Additionally, the rule applies criteria that check for characteristics of Windows executable files, ensuring that the detected components are consistent with those of executable files used by ADPassHunt.
  Updated-Date: '2024_08_07'
APT_HackTool_MSIL_ADPassHunt_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e69355dd0c16c3bb826786626100b1cc
  Ruleset: securityonion-yara
  Summary: This rule detects FireEye's ADPassHunt tool by identifying specific strings indicative of its operations. ADPassHunt is designed for Active Directory penetration testing purposes and hunts for sensitive information such as passwords within Group Policy Preferences. The rule looks for unique strings in files, such as "LDAP://", "[GPP] Searching for passwords now...", and "Searching Group Policy Preferences (Get-GPPPasswords + Get-GPPAutologons)!" among others. Additionally, it checks for the presence of particular keywords and file structures associated with ADPassHunt activities, such as "groups.xml" and certain directory-related terms.
  Updated-Date: '2024_08_07'
APT_HackTool_MSIL_DTRIM_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0c5b38fbffaf5098088a5239b4c053f8
  Ruleset: securityonion-yara
  Summary: This rule detects .NET PE files associated with the 'dtrim' project, which is a modified version of SharpSploit. It identifies these files by searching for a specific TypeLibGUID within them. The detection allows for the correlation of the TypeLibGUID in the .NET binary with the ProjectGuid used in the project file of 'dtrim'. This connection helps in identifying files that are potentially related to this specific project.
  Updated-Date: '2024_08_07'
APT_HackTool_MSIL_FLUFFY_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1f2a6e64c0f893c1314ee345b8b7368e
  Ruleset: securityonion-yara
  Summary: This rule detects a malicious MSIL (Microsoft Intermediate Language) hack tool known as "Fluffy." The tool's unique characteristics are identified by specific hexadecimal patterns present within the file. Additionally, the tool's strings include the embedded text "\x00Fluffy\x00," which aids in its identification. This rule applies these patterns and string searches specifically to executable files, as indicated by the presence of the PE (Portable Executable) file header signature (0x5A4D and 0x00004550).
  Updated-Date: '2024_08_07'
APT_HackTool_MSIL_FLUFFY_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 99404485f7da10a1d8938bbe5ca1830b
  Ruleset: securityonion-yara
  Summary: This rule detects the APT HackTool MSIL FLUFFY, a malicious software tool potentially involved in a cyber attack documented by FireEye. The rule identifies specific strings within executables that suggest activity related to ticket-granting ticket manipulation (Kerberoasting), command harvesting, and ticket enumeration. This malware includes specific command names like "Asktgt," "Kerberoast," "HarvestCommand," and "EnumerateTickets," typically indicative of actions to gain unauthorized access and perform network reconnaissance. The rule is triggered when these suspicious strings are found in a file that matches the characteristics of a Windows executable file header.
  Updated-Date: '2024_08_07'
APT_HackTool_MSIL_GPOHUNT_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4d1a09b301af002f98540231025eb6af
  Ruleset: securityonion-yara
  Summary: This rule detects .NET Portable Executable (PE) files associated with the 'gpohunt' project by searching for a specific TypeLibGUID that corresponds to the ProjectGuid in the '.csproj' file. Specifically, it identifies files containing the GUID "751a9270-2de0-4c81-9e29-872cd6378303".
  Updated-Date: '2024_08_07'
APT_HackTool_MSIL_JUSTASK_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5893b7deb96991af1eeb6dd05440e364
  Ruleset: securityonion-yara
  Summary: This rule detects .NET PE files associated with the 'justask' project by identifying the presence of a specific TypeLibGUID within the binary. The TypeLibGUID used in this rule corresponds directly to a ProjectGuid found in the '.csproj' file of the 'justask' project, allowing for the identification of binaries linked to this specific project.
  Updated-Date: '2024_08_07'
APT_HackTool_MSIL_LUALOADER_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b2fab6a02a2ea486cf8d76811410bdd1
  Ruleset: securityonion-yara
  Summary: This rule detects .NET Portable Executable (PE) files that contain a specific ProjectGuid associated with the 'lualoader' project. It identifies these files by looking for the TypeLibGUID "8b546b49-2b2c-4577-a323-76dc713fe2ea", which maps directly to the ProjectGuid found in the corresponding '.csproj' file of the .NET project. This indicates the presence of the 'lualoader' hack tool in .NET binaries.
  Updated-Date: '2024_08_07'
APT_HackTool_MSIL_MODIFIEDSHARPVIEW_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c4dc00493eb769cc56d56f50f5fdc368
  Ruleset: securityonion-yara
  Summary: This rule detects .NET Portable Executable (PE) files associated with the "modifiedsharpview" project by identifying a specific ProjectGuid found within the .NET binary. The rule targets the unique TypeLibGUID "22a156ea-2623-45c7-8e50-e864d9fc44d3," which correlates with the ProjectGuid from the related '.csproj' file. This detection aims to identify instances of the "modifiedsharpview" hack tool employed in cyber-attacks, as detailed by the referenced FireEye report.
  Updated-Date: '2024_08_07'
APT_HackTool_MSIL_NOAMCI_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a16ac85ad2cb2154d6bc21ea6ef5ff5c
  Ruleset: securityonion-yara
  Summary: This rule detects .NET PE files containing specific TypeLibGUID values that directly map to the ProjectGuid found in the 'noamci' project as documented in a .NET binary. The identifiers searched for in these files are "7bcccf21-7ecd-4fd4-8f77-06d461fd4d51" and "ef86214e-54de-41c3-b27f-efc61d0accc3", which are indicative of the association with the mentioned project.
  Updated-Date: '2024_08_07'
APT_HackTool_MSIL_PRAT_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3a04240b4bf3437b9d2fd040eeb8ae50
  Ruleset: securityonion-yara
  Summary: This rule detects .NET PE files that feature specific TypeLibGUIDs which correlate directly to the ProjectGuid found in a particular '.csproj' file associated with the 'prat' project. These identifiers help identify binaries connected to specific projects, enabling the detection of potentially malicious or unauthorized files related to this known project setup.
  Updated-Date: '2024_08_07'
APT_HackTool_MSIL_REDTEAMMATERIALS_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 031e77b3b8a7b8dc9567a8957d89d6ca
  Ruleset: securityonion-yara
  Summary: This rule detects .NET PE files associated with the "red_team_materials" project, searching specifically for those that include TypeLibGUIDs found in the ProjectGuid of the project's '.csproj' file. It identifies these files by checking for the presence of two specific TypeLibGUIDs within the binary data.
  Updated-Date: '2024_08_07'
APT_HackTool_MSIL_REVOLVER_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9b265c4e4c76509d84ac20f21d86deba
  Ruleset: securityonion-yara
  Summary: This rule detects .NET Portable Executable (PE) files associated with the 'revolver' project by looking for specific TypeLibGUIDs within the binary. It identifies the presence of the ProjectGuid found in the 'revolver' project through two distinct GUID values, ensuring that the examined file is both a .NET binary and matches one of the specified GUIDs.
  Updated-Date: '2024_08_07'
APT_HackTool_MSIL_SHARPDACL_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 158a664eea5a9eb3d17e8d06319e9aaa
  Ruleset: securityonion-yara
  Summary: This rule detects .NET Portable Executable (PE) files associated with the "sharpdacl" project by identifying the specific ProjectGuid found in the relevant '.csproj' file. It looks for the TypeLibGUID "b3c17fb5-5d5a-4b14-af3c-87a9aa941457" within .NET binaries that are smaller than 10MB and ensures the files match the PE file signature.
  Updated-Date: '2024_08_07'
APT_HackTool_MSIL_SHARPDNS_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e4fd046794151cc0ff5f7e44878173b5
  Ruleset: securityonion-yara
  Summary: This rule detects .NET PE files that include the ProjectGuid associated with the 'sharpdns' project by searching for a specific TypeLibGUID within the binary. The presence of this GUID suggests that the .NET binary is likely part of, or related to, the 'sharpdns' project.
  Updated-Date: '2024_08_07'
APT_HackTool_MSIL_SHARPGOPHER_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a723f409f3ff02dc3966f75c33341f08
  Ruleset: securityonion-yara
  Summary: This rule detects .NET PE files that are associated with the 'sharpgopher' project by identifying the presence of a specific ProjectGuid ("83413a89-7f5f-4c3f-805d-f4692bc60173") within the binary. The ProjectGuid in a .NET binary maps to the ProjectGuid specified in a '.csproj' file, facilitating the identification of files related to specific .NET projects.
  Updated-Date: '2024_08_07'
APT_HackTool_MSIL_SHARPNATIVEZIPPER_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2462e6120f5af7a5f2cd33952f447eb3
  Ruleset: securityonion-yara
  Summary: This rule detects .NET PE files that contain the ProjectGuid associated with the 'sharpnativezipper' project. It specifically searches for the TypeLibGUID "de5536db-9a35-4e06-bc75-128713ea6d27" within these binaries. The detection targets files that map directly to the ProjectGuid found in the '.csproj' file of a .NET project.
  Updated-Date: '2024_08_07'
APT_HackTool_MSIL_SHARPNFS_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5d319073fa1a8fba449cbd2770921464
  Ruleset: securityonion-yara
  Summary: This rule detects .NET PE files that contain a specific ProjectGuid found in the 'sharpnfs' project. It identifies the files by checking for the TypeLibGUID present in a .NET binary, which maps directly to the ProjectGuid in the '.csproj' file of the project. Specifically, the rule searches for the TypeLibGUID value "9f67ebe3-fc9b-40f2-8a18-5940cfed44cf" within the file.
  Updated-Date: '2024_08_07'
APT_HackTool_MSIL_SHARPPATCHCHECK_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 886810d9ca8976bd3e0645e582232fb0
  Ruleset: securityonion-yara
  Summary: This rule detects a .NET Portable Executable (PE) file that contains a specific TypeLibGUID, which is linked to the ProjectGuid found in the 'sharppatchcheck' project. The presence of the GUID "528b8df5-6e5e-4f3b-b617-ac35ed2f8975" within the binary is indicative of this particular project. This could be used to identify binaries associated with this project, potentially pointing to the use of tools or code linked to it.
  Updated-Date: '2024_08_07'
APT_HackTool_MSIL_SHARPSACK_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 500d33965b60fcb21c0eee05760dba91
  Ruleset: securityonion-yara
  Summary: This rule detects .NET PE files associated with the "sharpsack" project by identifying a specific ProjectGuid within .NET binaries. The TypeLibGUID present in these binaries maps directly to the ProjectGuid found in the corresponding '.csproj' file, aiding in the identification of this particular project.
  Updated-Date: '2024_08_07'
APT_HackTool_MSIL_SHARPSQLCLIENT_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9a582d9756274a7ffbdd46e2e7538488
  Ruleset: securityonion-yara
  Summary: This rule detects .NET Portable Executable (PE) files that contain a specific ProjectGuid referenced in the 'sharpsqlclient' project. The presence of the TypeLibGUID "13ed03cd-7430-410d-a069-cf377165fbfd" within the binary is used to identify such files. This identifier links to the ProjectGuid found in the '.csproj' file of the related .NET project.
  Updated-Date: '2024_08_07'
APT_HackTool_MSIL_SHARPSTOMP_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 58f8273382043e7c63fab64d863ce8b8
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of SharpStomp, a hacking tool written in MSIL (Microsoft Intermediate Language) that is utilized to manipulate file timestamps. It looks for specific strings associated with file time modification operations, such as "GetLastWriteTime", "SetLastWriteTime", "GetCreationTime", "SetCreationTime", "GetLastAccessTime", and "SetLastAccessTime". The detection checks for references to "mscoree.dll", indicating .NET framework usage, and includes markers like "timestompfile" and "sharpstomp" to identify the tool's specific functionality. The condition ensures that the file being analyzed is a PE (Portable Executable) file by checking for the "MZ" and "PE" headers.
  Updated-Date: '2024_08_07'
APT_HackTool_MSIL_SHARPSTOMP_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 36e1aaff3b07c4bc12cf15316f8d6ad3
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the APT hacking tool known as MSIL/SharpStomp. Specifically, it identifies the use of the "mscoree.dll" file and certain byte sequences in the code, which are indicative of this tool. These sequences include patterns related to setting and getting file attributes such as creation time and last access time. Additionally, the rule verifies the file structure to ensure it matches the characteristics of a Windows executable.
  Updated-Date: '2024_08_07'
APT_HackTool_MSIL_SHARPTEMPLATE_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 83cb0911344cc453ebd4e217e37d8d65
  Ruleset: securityonion-yara
  Summary: This rule detects .NET PE files associated with the "sharptemplate" project by identifying a specific TypeLibGUID within the binary. The TypeLibGUID uniquely maps to the ProjectGuid found in the corresponding '.csproj' file of the project. The presence of the TypeLibGUID "e9e452d4-9e58-44ff-ba2d-01b158dda9bb" within the file's metadata signals its connection to the identified project.
  Updated-Date: '2024_08_07'
APT_HackTool_MSIL_SHARPWEBCRAWLER_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d3fb56bc0fce29b0ee8ecb347cb5e048
  Ruleset: securityonion-yara
  Summary: This rule detects .NET PE files associated with the "sharpwebcrawler" project by looking for the presence of a specific TypeLibGUID within the binary. The GUID corresponds to a ProjectGuid found in the project's '.csproj' file, signifying a unique identifier used during the development of the software. This helps to identify binaries that may be related to the "sharpwebcrawler" project.
  Updated-Date: '2024_08_07'
APT_HackTool_MSIL_SHARPZIPLIBZIPPER_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 25fe1ab0f837f336fa9d6c8513a722a1
  Ruleset: securityonion-yara
  Summary: This rule detects .NET Portable Executable (PE) files associated with a specific ProjectGuid from the 'sharpziplibzipper' project. It searches for the presence of a particular TypeLibGUID within the binary, which correlates with the ProjectGuid found in the '.csproj' file of this .NET project. The rule triggers when it finds the specified GUID in files that have the typical signature patterns of PE files.
  Updated-Date: '2024_08_07'
APT_HackTool_MSIL_TITOSPECIAL_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 13d5e8e212f8c5bdc043075c93baa425
  Ruleset: securityonion-yara
  Summary: This rule detects the APT HackTool MSIL TitoSpecial, a specific malware used in advanced persistent threat (APT) activities. It looks for the presence of distinctive patterns in executable files, such as the usage of functions like "NtReadVirtualMemory" and "WriteProcessMemory," which are indicative of memory manipulation techniques. Additionally, it scans for known x64 and x86 shellcode sequences that may be embedded within the file. The rule sets conditions based on the file's PE header signature and verifies that all memory manipulation patterns are present along with any known shellcode sequences to identify the malicious software.
  Updated-Date: '2024_08_07'
APT_HackTool_MSIL_WMISPY_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 174a75e31466b1206780973e18565f38
  Ruleset: securityonion-yara
  Summary: This rule detects a hack tool associated with APT activity, specifically targeting MSIL-based WMISPY spyware. The detection is based on various string patterns related to WQL searches, involving specific Windows Management Instrumentation (WMI) queries such as "root\\cimv2", "from Win32_NetworkLoginProfile", "from Win32_IP4RouteTable", among others. These strings help identify the presence of the WMISPY tool by checking for typical patterns it uses in executing its network and system management tasks on a Windows operating system.
  Updated-Date: '2024_08_07'
APT_HackTool_PS1_COSMICGALE_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a9674d5879da9b157abb1dbfddd04763
  Ruleset: securityonion-yara
  Summary: This rule detects various unique strings related to COSMICGALE. COSMICGALE is a credential theft and reconnaissance PowerShell script that collects credentials using the publicly available Get-PassHashes routine. It clears log files, writes acquired data to a hardcoded path, and encrypts the file with a password.
  Updated-Date: '2024_08_07'
APT_HackTool_Win64_EXCAVATOR_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ea3dd25fd4a3eb20b718f512daa08415
  Ruleset: securityonion-yara
  Summary: This rule detects a 64-bit Windows-based hacking tool known as EXCAVATOR. It identifies executable files that capture system memory snapshots and create memory dumps by checking for specific API calls such as "PssCaptureSnapshot" and "MiniDumpWriteDump." The rule also searches for a particular sequence of bytes commonly associated with these operations and the presence of "lsass.exe," a process often targeted for dumping credentials in memory. The rule conditions ensure the file is a valid 64-bit Portable Executable (PE) by verifying specific headers and characteristics before matching all defined patterns.
  Updated-Date: '2024_08_07'
APT_HackTool_Win64_EXCAVATOR_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9b588686b706cbd5be2b2c6726a21c78
  Ruleset: securityonion-yara
  Summary: This rule detects the Win64 version of the hacking tool EXCAVATOR by looking for specific API calls and byte patterns indicative of its operation. It specifically searches for strings related to memory snapshot capture and dump creation, notably "PssCaptureSnapshot" and "MiniDumpWriteDump". Additionally, it includes unique hexadecimal patterns that correlate with executable code used by the malware. The rule applies conditions to validate PE header structures typical of 64-bit Windows executables.
  Updated-Date: '2024_08_07'
APT_HiddenCobra_GhostSecret_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: bd04e886a29e7803ed37b5b8fded5d5a
  Ruleset: securityonion-yara
  Summary: This rule detects a sample associated with the Hidden Cobra malware, specifically targeting an operation known as GhostSecret. The detection is based on the presence of specific strings within a file, including a DLL filename pattern and the term "PROXY_SVC_DLL.dll". The rule is activated only if the file size is under 3000KB and its initial bytes match the signature indicating a Windows executable file.
  Updated-Date: '2024_08_07'
APT_HiddenCobra_GhostSecret_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: cd31c9ea0394d2e6b1256b92be71097e
  Ruleset: securityonion-yara
  Summary: This rule detects Hidden Cobra malware, specifically a sample associated with Operation GhostSecret, which seeks to steal data worldwide. It identifies the malware by looking for specific strings within files that are less than 400KB in size and start with the 'MZ' header. The strings include a ping command to localhost, an ASCII string "Process32," a formatted date string, and a wide-character delete command.
  Updated-Date: '2024_08_07'
APT_HiddenCobra_enc_PK_header:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 98a2593080316fd3ffb5aa54ce6689ba
  Ruleset: securityonion-yara
  Summary: This rule detects a variant of the TYPEFRAME malware family associated with the Hidden Cobra group. It identifies a trojan that has an encrypted header using specific hex string patterns. The detection mechanism checks for a particular sequence in the header to determine if the file matches the signature of this malware.
  Updated-Date: '2024_08_07'
APT_HiddenCobra_import_obfuscation_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: da41d135064a200303ac81225db8265c
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a remote access trojan associated with the Hidden Cobra group, specifically targeting the TYPEFRAME malware family. It identifies the malware by checking for specific hexadecimal string patterns within executable files that match the PE file format.
  Updated-Date: '2024_08_07'
APT_IIS_Config_ProxyShell_Artifacts:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5c21465ce3dd06ba03fa655b847d15f5
  Ruleset: securityonion-yara
  Summary: This rule detects the configuration of a virtual directory in Internet Information Services (IIS) that points to folders within the ProgramData directory. This is indicative of attacks that occurred against Microsoft Exchange servers in August 2021, which involved the ProxyShell exploit. The rule focuses on specific markers within IIS configuration files and checks for physical paths pointing to subdirectories within ProgramData, such as COM, WHO, ZING, ZOO, XYZ, AUX, and CON. Additionally, it looks for configurations pointing to the "Users\All Users" directory. The condition is met if the file size is less than 500KB and the necessary markers are present.
  Updated-Date: '2024_08_07'
APT_Kaspersky_Duqu2_SamsungPrint:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c869f5347c3242ea1b0dc9a066e1f588
  Ruleset: securityonion-yara
  Summary: This rule detects a sample associated with the Duqu2 malware family, identified by Kaspersky, which is disguised as an installer for printer drivers and applications, specifically for Samsung printers. It recognizes specific file components such as "msi4_32.dll" and "ca.dll", and looks for certain strings, including references to "Samsung Electronics Co., Ltd." and SQL-like queries. The rule applies to files under 82KB in size and ensures the presence of all specified indicators.
  Updated-Date: '2024_08_07'
APT_Kaspersky_Duqu2_msi3_32:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 56d25044f9a54b81df153ec118c30207
  Ruleset: securityonion-yara
  Summary: This rule detects the Duqu2 malware by identifying specific strings within a file, particularly focusing on "ProcessUserAccounts", SQL queries involving `CustomUserAccounts`, and keywords like "msi3_32.dll" and "RunDLL". Additionally, it checks for the presence of specific operations related to MSI Custom Actions and the size of the file being under 72KB. The rule leverages these distinct characteristics to distinguish the Duqu2 sample.
  Updated-Date: '2024_08_07'
APT_Kaspersky_Duqu2_procexp:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 814b5830f5dc1791c86ce9167d0b2980
  Ruleset: securityonion-yara
  Summary: This rule detects a malicious Microsoft Installer (MSI) file associated with the Duqu 2.0 advanced persistent threat (APT), as reported by Kaspersky. The detection is based on the presence of specific file names such as "svcmsi_32.dll", "msi3_32.dll", "msi4_32.dll", and "MSI.dll". Additionally, it looks for specific wide strings indicative of behavior related to binary data extraction and references to Sysinternals Process Explorer. The executable header should match the DOS signature (0x5a4d) and the file size should be less than 100KB.
  Updated-Date: '2024_08_07'
APT_Keylogger_Win32_REDFLARE_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0b05e9c19e167768b261a727541b5c11
  Ruleset: securityonion-yara
  Summary: This rule detects the REDFLARE keylogger, a Windows-based malware. It identifies specific byte sequences related to the creation of a window and the checking of keystrokes, which are typical behaviors associated with keylogging activity. The rule examines the executable file format to confirm it matches the characteristics of a legitimate Windows PE file and ensures all defined byte patterns are present within the file.
  Updated-Date: '2024_08_07'
APT_Keylogger_Win64_REDFLARE_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2e42ce4191d1a71bc75b54724e69c5a2
  Ruleset: securityonion-yara
  Summary: This rule detects a specific keylogger malware tailored for 64-bit Windows systems, identified as APT_Keylogger_Win64_REDFLARE_1. The detection focuses on particular byte sequences associated with the creation of windows and key event monitoring, which are indicative of keylogger activities. The rule also ensures that the target binary matches the standard signatures of a Windows Portable Executable (PE) file.
  Updated-Date: '2024_08_07'
APT_LNX_Academic_Camp_May20_Eraser_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b948ad9ea7fd3ab5a09296ef32175230
  Ruleset: securityonion-yara
  Summary: This rule detects malware used in attacks on academic data centers, particularly focusing on code sequences associated with crypto-currency mining activities. Key characteristics include specific byte patterns and a file size under 60KB.
  Updated-Date: '2024_08_07'
APT_LNX_Academic_Camp_May20_Loader_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 61df30319fc2225af582a99193bf41f6
  Ruleset: securityonion-yara
  Summary: This rule detects malware used in attacks on academic data centers, particularly focusing on malicious software involved in unauthorized cryptocurrency mining activities. The identification is based on specific byte sequences and file characteristics, such as file size being less than 10KB and matching certain hexadecimal patterns in the code.
  Updated-Date: '2024_08_07'
APT_Lazarus_Aug18_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 58f896eee42abb0e4bb871c904d3e844
  Ruleset: securityonion-yara
  Summary: This rule detects malware associated with the Lazarus Group by identifying specific strings and patterns in executable files. It looks for references to "mws2_32.dll," batch file formatting with "%s.bat," certain command syntaxes, standard Microsoft Corporation text, and a specific use of the ping command. The condition focuses on files with a PE imphash of "3af996e4f960108533e69b9033503f40," or by matching four of the designated string patterns. This rule applies to files that begin with the "MZ" header and are smaller than 500KB.
  Updated-Date: '2024_08_07'
APT_Lazarus_Aug18_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 56a87ac7306b0bffbac2e5a3974d97a9
  Ruleset: securityonion-yara
  Summary: This rule detects malware associated with the Lazarus Group, a notorious cybercriminal organization. The detection focuses on identifying specific strings within the malware, such as references to "vAdvapi32.dll," "lws2_32.dll," command-line patterns like "%s %s > \"%s\" 2>&1," diagnostic messages such as "Not Service," and a loopback address ping command "ping 127.0.0.1 -n 3." The rule applies to files smaller than 600KB that have an MZ header, a common trait of executable files.
  Updated-Date: '2024_08_07'
APT_Lazarus_Aug18_Downloader_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: df3476be12c361773caa45462bce8963
  Ruleset: securityonion-yara
  Summary: This rule detects a downloader malware associated with the Lazarus Group, focusing on specific strings and patterns. It identifies the presence of developer paths such as "H:\\DEV\\TManager\\", debug file references like "\\Release\\dloader.pdb" and "\\Debug\\dloader.pdb", and special project paths such as "Z:\\jeus\\". Additionally, it looks for specific compiled binary string markers and an error message "Error protecting memory page". The rule narrows its focus to executable files smaller than 500KB, ensuring precise detection of the targeted malware.
  Updated-Date: '2024_08_07'
APT_Lazarus_Dropper_Jun18_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ba61d020e751f5938e930a6653203418
  Ruleset: securityonion-yara
  Summary: This rule detects a dropper associated with the Lazarus Group, a notorious cybercrime group. The detection relies on specific characteristics such as the presence of particular filenames resembling Windows update executables, the ASCII string "EYEJIW," and the wide string "update," which appears frequently in legitimate software. Additional conditions include file size limits and a specific hash value for the import table, which signifies the presence of the malicious dropper.
  Updated-Date: '2024_08_07'
APT_Lazarus_RAT_Jun18_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 893219be890d61e03365b71467e5ccf0
  Ruleset: securityonion-yara
  Summary: This rule detects a Remote Access Trojan (RAT) associated with the Lazarus Group, a known cyber espionage group. The detection criteria include specific URLs linked to malicious activities and patterns in HTTP headers related to file uploads. Additionally, it looks for certain DLL file names and temporary file patterns that may be indicative of malicious behaviors. These elements collectively help identify the presence of the RAT within executable files smaller than 500KB.
  Updated-Date: '2024_08_07'
APT_Lazarus_RAT_Jun18_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c50d67dde5c0de69367fef8619cfbe98
  Ruleset: securityonion-yara
  Summary: This rule detects a Remote Access Trojan (RAT) associated with the Lazarus Group by identifying specific characteristics within files. It looks for particular strings, such as a reference to a directory path "\\KB\\Release\\", a version string "KB, Version 1.0", and a placeholder copyright notice. Additionally, the rule checks that the file starts with the 'MZ' header, common in executable files, and ensures the file size is less than 5000KB.
  Updated-Date: '2024_08_07'
APT_Liudoor:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c9a9dc1921d914956a1c2c1c0be2261e
  Ruleset: securityonion-yara
  Summary: This rule detects the Liudoor daemon backdoor, a malicious Win32 DLL that is characterized by specific strings such as "Succ", "Fail", "pass", "exit", "svchostdllserver.dll", "L$,PQR", "0/0B0H0Q0W0k0", "QSUVWh", and "Ht Hu[". The detection focuses on matching all these strings within a binary file, indicating the presence of the backdoor which may compromise system security.
  Updated-Date: '2024_08_07'
APT_Loader_MSIL_PGF_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: dd2949ccf0e9c2ad4d5421e29744688a
  Ruleset: securityonion-yara
  Summary: This rule detects a specific loader malware written in MSIL (Microsoft Intermediate Language), identifiable by its unique byte sequence. The rule is configured to identify a file with a PE (Portable Executable) header and includes a distinct pattern of hexadecimal values aligning with known malicious code typically associated with advanced persistent threats. The referenced malware, detailed in a FireEye report, was part of a broader cyber attack highlighted in late 2020.
  Updated-Date: '2024_08_07'
APT_Loader_MSIL_PGF_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d73ee16253e62c82079514a9f20e1545
  Ruleset: securityonion-yara
  Summary: This rule detects a loader associated with the APT group that utilizes a specific MSIL payload identified by its MD5 hash (7c2a06ceb29cdb25f24c06f2a8892fba). The loader employs techniques involving JScript.NET, indicated by patterns recognizing "CreateThread," "ScriptObjectStackTop," and "Microsoft.JScript" strings. The loader's signature corresponds to a particular file structure starting with "MZ" and a PE header.
  Updated-Date: '2024_08_07'
APT_Loader_MSIL_TRIMBISHOP_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6398c1f9632205fd43d0194a4734f243
  Ruleset: securityonion-yara
  Summary: This rule detects the APT loader known as MSIL TRIMBISHOP, identified by specific hexadecimal code patterns and string sequences within the executable file. It assesses the presence of certain functions such as `NtMapViewOfSection`, `NtOpenProcess`, `NtAlertResumeThread`, `LdrGetProcedureAddress`, and the .NET implementation `DTrim.Execution.DynamicInvoke`. The rule is designed to match on executables that follow the PE file format indications (`0x5A4D` and `0x00004550`), ensuring the identified behaviors and patterns are characteristic of this loader.
  Updated-Date: '2024_08_07'
APT_Loader_MSIL_TRIMBISHOP_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: cc0d851c6c3ef8b051085852640aee3c
  Ruleset: securityonion-yara
  Summary: This rule detects a specific malicious loader, identified as APT_Loader_MSIL_TRIMBISHOP_2, used in cyber-attacks. The loader interacts with several native Windows functions, such as NtMapViewOfSection, NtOpenProcess, NtAlertResumeThread, and LdrGetProcedureAddress. Additionally, it includes distinct string patterns related to injection and cleaning operations, along with a reference to DTrim.Execution.DynamicInvoke. The rule targets executable files recognizable by specific header signatures and checks for the presence of all these characteristic strings.
  Updated-Date: '2024_08_07'
APT_Loader_MSIL_WILDCHILD_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4fb10c186ff15b1ae40597bb09e6de5d
  Ruleset: securityonion-yara
  Summary: This rule detects a specific loader malware known as "WILDCHILD" written in MSIL. The rule identifies the presence of this malware by matching certain strings and a complex sequence of bytes that are characteristic of the WILDCHILD loader. The targeted strings include certain API functions likely used for process manipulation and memory writing, such as "QueueUserAPC" and "WriteProcessMemory". Additionally, the rule checks for specific signatures in the executable file format to ensure accurate identification of the malicious loader.
  Updated-Date: '2024_08_07'
APT_Loader_Raw32_REDFLARE_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 72575483e5cf47a1dceb4c7536fd2b8b
  Ruleset: securityonion-yara
  Summary: This rule detects a specific type of malware loader associated with the APT group that targets 32-bit raw executable formats. The detection is based on a unique sequence of hexadecimal bytes that represent the malware's loading mechanism, as analyzed and documented by FireEye.
  Updated-Date: '2024_08_07'
APT_Loader_Raw64_REDFLARE_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a0b3617c243d107bb72c231f8f8f57b6
  Ruleset: securityonion-yara
  Summary: This rule detects a loader associated with a specific Advanced Persistent Threat (APT) by identifying a unique sequence of bytes in the binary code, ensuring the file is not a standard Windows executable by checking the initial bytes.
  Updated-Date: '2024_08_07'
APT_Loader_Win32_DShell_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b636377028ebd2600f6cebde3822244b
  Ruleset: securityonion-yara
  Summary: This rule detects a specific Windows-based loader associated with advanced persistent threats (APT). It identifies the presence of unique byte patterns and strings within executables, including particular hexadecimal sequences, the "CreateThread" function, "base64.d", and "core.sys.windows" keywords. The detection is further scoped to Windows portable executables (PE) format by validating its PE header signatures and specific offsets, ensuring precise identification within the system.
  Updated-Date: '2024_08_07'
APT_Loader_Win32_DShell_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 42b17c6bc91425a81c728f2a8ec454c4
  Ruleset: securityonion-yara
  Summary: This rule detects a Windows-based Advanced Persistent Threat (APT) loader known as DShell. It specifically identifies executables that start with the MZ header and further confirm the PE header format. The rule uses a combination of hexadecimal patterns and specific strings such as "CreateThread" and "base64.d" to validate the presence of characteristics associated with the software, checking for references to core Windows system files and configuration files like "C:\\Users\\config.ini". Additionally, it looks for the error message "Invalid config file" within the detected files.
  Updated-Date: '2024_08_07'
APT_Loader_Win32_DShell_3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7e89ce858b8997f9e7168889d822786e
  Ruleset: securityonion-yara
  Summary: This rule detects the APT Loader associated with Win32 DShell 3. The rule identifies the malware by checking for specific hexadecimal patterns and string indicators within the file. It looks for a PE file format marker (indicated by the 0x5A4D and 0x00004550 signatures) and searches for distinct characteristics, such as the "CreateThread" string, the presence of "base64.d" and "core.sys.windows." These indicators help in identifying files related to the APT Loader that targets Windows systems.
  Updated-Date: '2024_08_07'
APT_Loader_Win32_PGF_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 86c2c6582a15754cfc8eaecf5bd3d307
  Ruleset: securityonion-yara
  Summary: This rule detects a specific variant of the APT (Advanced Persistent Threat) Loader malware targeting Windows systems. It focuses on identifying malicious DLLs that employ techniques related to unmanaged exports. The rule checks for a combination of specific byte patterns and the presence of particular signatures in the headers of executable files to determine if the loader is present. This helps in identifying and mitigating threats associated with this loader, which has been detailed in industry reports by cybersecurity firm FireEye.
  Updated-Date: '2024_08_07'
APT_Loader_Win32_PGF_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ef15175ff3f161337685e045d7da0900
  Ruleset: securityonion-yara
  Summary: This rule detects a specific Windows loader associated with advanced persistent threat (APT) activity by analyzing the Portable Executable (PE) headers and certain byte patterns within the file. It identifies the loader based on distinct hexadecimal patterns within the binary, indicating the presence of malicious functions typical of the techniques used by these threats, including specific DLL characteristics. The rule is designed to catch executable files that match these identified patterns, helping to pinpoint malware leveraged in sophisticated cyber attacks.
  Updated-Date: '2024_08_07'
APT_Loader_Win32_PGF_3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: fe2ed7dec0de36ed619d03254f3dd2ec
  Ruleset: securityonion-yara
  Summary: This rule detects a PGF payload targeting dllmain_hook x86 payloads. It identifies the presence of specific byte patterns associated with this malicious software, allowing for the detection of related files. This detection helps to flag potential instances of the PGF malware, which has been documented in cybersecurity analyses.
  Updated-Date: '2024_08_07'
APT_Loader_Win32_PGF_4:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3af2a1daba2935d05052a32d931a8b77
  Ruleset: securityonion-yara
  Summary: This rule detects a loader associated with a cyber-attack, as detailed by FireEye. The rule looks for specific byte sequences indicative of the loader's presence in a Windows Portable Executable (PE) file. The conditions specified ensure the PE file follows the expected structure and contains the defined hexadecimal patterns.
  Updated-Date: '2024_08_07'
APT_Loader_Win32_PGF_5:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7b9373eb32d58823fdef3b6295576f4a
  Ruleset: securityonion-yara
  Summary: This rule detects the PGF payload by evaluating specific hexadecimal patterns within the code, which are indicative of the loader functionalities associated with this payload. The condition checks for the presence of the PE (Portable Executable) file format, starting with the "MZ" header and followed by the "PE" header, and further validates by inspecting certain offsets and bytes within the file. Parameters like the magic number indicating a PE32 image are also verified, and the rule consolidates various matching patterns to identify the presence of the malicious loader accurately.
  Updated-Date: '2024_08_07'
APT_Loader_Win32_REDFLARE_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 65c07f1ca4ee7eb8f4807671f3c5b57f
  Ruleset: securityonion-yara
  Summary: This rule detects the APT Loader named REDFLARE, which is a Win32-based malware. The conditions to identify this malware include specific sequence patterns in memory allocation and loading operations, as well as constant values within the executable file. It verifies the file by checking the PE header and specific offsets to ensure the file meets the characteristics of a PE executable file. The rule aims to identify this malicious loader based on these identifiable patterns and structural properties.
  Updated-Date: '2024_08_07'
APT_Loader_Win32_REDFLARE_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 73772dc34518cf2255bf5eea7a2d66d1
  Ruleset: securityonion-yara
  Summary: This rule detects a specific loader associated with the malware REDFLARE targeting the Windows platform. It identifies the malware through a combination of unique hexadecimal byte sequences related to the injection process and specific strings like "ResumeThread." The rule ensures the target file is a valid Portable Executable (PE) format by checking for the "MZ" and "PE" headers and confirming the PE format version.
  Updated-Date: '2024_08_07'
APT_Loader_Win64_MATRYOSHKA_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8979f2e7a9efbe0da5460e718cf1bd34
  Ruleset: securityonion-yara
  Summary: This rule detects a 64-bit Windows loader named MATRYOSHKA, which utilizes process hollowing techniques. It looks for specific hexadecimal patterns and structures that signify the presence of the loader, such as identifying the PE header, Windows executable signature "MZ" and "PE", and specific code sequences associated with process hollowing. This behavior involves injecting malicious code into a legitimate process to hide its execution, making it challenging to detect by conventional means.
  Updated-Date: '2024_08_07'
APT_Loader_Win64_MATRYOSHKA_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ce6d7e218048855715f1ec88d3ba8df5
  Ruleset: securityonion-yara
  Summary: This rule detects the APT Loader for Windows 64-bit, specifically identifying the MATRYOSHKA malware variant. It uses several hexadecimal patterns and APIs such as "CreateToolhelp32Snapshot" and "Process32Next" to pinpoint the malicious software. The conditions confirm the presence of standard PE file headers and the specific characteristics of the PE32+ format.
  Updated-Date: '2024_08_07'
APT_Loader_Win64_PGF_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 27e0a3f5a43c7aa16a3c793f211f6a46
  Ruleset: securityonion-yara
  Summary: This rule detects a 64-bit Windows loader associated with APT activity, specifically focusing on DLL files using unmanaged exports techniques. It identifies this malware by checking for specific hexadecimal patterns within the executable file format, ensuring the presence of a Windows PE header and verifying the subsystem version. The loader's behavior is delineated by unique string patterns that involve register operations and memory manipulations common in sophisticated payload delivery routines.
  Updated-Date: '2024_08_07'
APT_Loader_Win64_PGF_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: feb12164c41d7e7ca4ec607c640ace9a
  Ruleset: securityonion-yara
  Summary: This rule detects a specific Advanced Persistent Threat (APT) loader used on Windows 64-bit systems. The detection focuses on particular patterns within the DLL files involved in loading malicious payloads. Key hexadecimal patterns are identified, examining aspects such as specific byte sequences and memory address manipulations commonly associated with this APT loader. The rule aims to identify malicious DLLs through a combination of heuristic checks and predefined binary patterns, targeting the unique footprint left by this type of malware loader.
  Updated-Date: '2024_08_07'
APT_Loader_Win64_PGF_3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: db7be06b72e36e28b1e5b7b4655f017b
  Ruleset: securityonion-yara
  Summary: This rule detects a 64-bit payload associated with the PGF malware family, which targets DLL injection using a method named `dllmain_hook`. The detection is based on identifying specific hexadecimal patterns within the binary that match known signatures of this payload. These patterns represent functions and instructions executed by the malware to achieve its malicious goals.
  Updated-Date: '2024_08_07'
APT_Loader_Win64_PGF_4:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 436d5462f71a1b09050cc55451b9bc96
  Ruleset: securityonion-yara
  Summary: This rule detects a 64-bit Windows loader associated with the APT group by identifying specific hexadecimal patterns and byte sequences within the file. It focuses on verifying the presence of a valid PE file and matching unique code sequences such as manipulation and loading of register values, arithmetic operations, and data movement commands. This detection aims to identify malware used in a cyber attack detailed by FireEye.
  Updated-Date: '2024_08_07'
APT_Loader_Win64_PGF_5:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d603dfbb3fe410ac8645e373e574456f
  Ruleset: securityonion-yara
  Summary: This rule detects a 64-bit Windows payload associated with the PGF loader. It identifies binary patterns within PE files, specifically by looking for specific hexadecimal string sequences related to the payload's functionality. The conditions for detection include verifying specific PE file signatures and matching any of the predefined hexadecimal patterns in the binary's code.
  Updated-Date: '2024_08_07'
APT_Loader_Win64_REDFLARE_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8f1368895057429d7d6b5b05661d0f3e
  Ruleset: securityonion-yara
  Summary: This rule detects a malicious loader, specifically targeting 64-bit Windows systems, named REDFLARE. It identifies the loader by scanning for specific byte patterns indicative of memory allocation and loading mechanisms, as well as certain constant values used during execution. The rule ensures that the file starts with the "MZ" header, confirms it is a PE file by validating the "PE" signature, and checks for the presence of a 64-bit optional header.
  Updated-Date: '2024_08_07'
APT_Loader_Win64_REDFLARE_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 096b02915d4ff95b8981b976ab6b0264
  Ruleset: securityonion-yara
  Summary: This rule detects a 64-bit Windows malware loader known as "REDFLARE." It identifies the malware by inspecting a 64-bit PE file header and looking for specific hexadecimal sequences in the code that are indicative of its behavior. These sequences include patterns related to memory allocation and thread injection, as well as the presence of the string "ResumeThread."
  Updated-Date: '2024_08_07'
APT_Loader_Win_MATRYOSHKA_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7d5839a98706e6e9d88efa3813a4d0da
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the MATRYOSHKA malware loader on Windows systems. It identifies the malware by searching for specific strings and API calls commonly used in process hollowing techniques, such as "ZwQueryInformationProcess", "WriteProcessMemory", and "CreateProcessW". Additionally, it looks for specific error messages related to process manipulation, NT signature verification, and PE header erasure. The condition checks for PE file characteristics and ensures all specified strings are present to confirm the malware's presence.
  Updated-Date: '2024_08_07'
APT_Loader_Win_PGF_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4fa544202f99a36f37df5223c43c410f
  Ruleset: securityonion-yara
  Summary: This rule detects PGF DLL samples by identifying specific PDB strings that are embedded within the files. It searches for patterns related to the PDB paths characteristic of the development environments, such as paths including "c:\\source\\dllconfig-master\\dllsource," "C:\\Users\\Developer\\Source\\Release\\DllSource," and "q:\\objchk_win7_amd64\\amd64\\init." Additionally, the file must start with the signature for executable files (MZ header and PE header), and be less than 15MB in size. The rule uses these criteria to ascertain if the file is a PGF DLL sample.
  Updated-Date: '2024_08_07'
APT_Loader_Win_PGF_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: fb633ece6e58ba263b9e2021834f022a
  Ruleset: securityonion-yara
  Summary: This rule detects the PGF backdoor by identifying the presence of specific patterns within the rich header of a Windows Portable Executable (PE) file. It uses a combination of MD5 hash values and unique hexadecimal string sequences to match against known characteristics of the PGF backdoor. The rule checks that the file is a valid PE file and is smaller than 15MB in size before applying these pattern matches at a specific file offset. This method ensures that the targeted malicious software is accurately identified based on its rich header attributes.
  Updated-Date: '2024_08_07'
APT_MAL_ASPX_HAFNIUM_Chopper_Mar21_3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b3bc341a65ee1848bb229647371cb87d
  Ruleset: securityonion-yara
  Summary: This rule detects HAFNIUM ASPX files deployed on compromised servers by identifying specific patterns in the file content. It scans for strings related to server-side code execution and file handling within small files (less than 50KB).
  Updated-Date: '2024_08_07'
APT_MAL_ASPX_HAFNIUM_Chopper_Mar21_4:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0e79986ed6c01bb2eec283ae450911c5
  Ruleset: securityonion-yara
  Summary: This rule detects HAFNIUM ASPX web shell files that are dropped on compromised servers, specifically related to the 2021 attack on Microsoft Exchange servers. It identifies these malicious files by looking for specific strings within the file that indicate the use of Jscript, Base64 decoding, and the evaluation of strings through the .NET System.Text.Encoding class, all within a limited file size.
  Updated-Date: '2024_08_07'
APT_MAL_ASP_DLL_HAFNIUM_Mar21_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6ef5b1cac6267ca44a2e0265195be4e1
  Ruleset: securityonion-yara
  Summary: This rule detects ASP.NET DLL files compiled by the HAFNIUM group that are dropped on compromised servers. The rule focuses on specific characteristics such as the presence of the "Page_Load" function, certain hexadecimal string sequences, and predefined operation patterns within files smaller than 50KB. The detection criteria include a combination of static string matches and specific binary patterns to identify malicious DLLs associated with HAFNIUM attacks.
  Updated-Date: '2024_08_07'
APT_MAL_BKA_GoldenSpy_Aug20_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c1c387da203b186b515882b8b8c65587
  Ruleset: securityonion-yara
  Summary: This rule detects variants of the GoldenSpy malware, which is known for its capability to exploit systems by establishing persistent access and executing unauthorized commands. The rule searches for specific hexadecimal patterns and strings such as "Ryeol HTTP Client Class," specific registry paths associated with the malware, and keywords like "svmm," "PROTOCOL_," "softList," and "excuteExe." The condition to confirm the presence of the malware includes checking if the file starts with the hex value 0x5A4D and matches at least five of the identified string patterns.
  Updated-Date: '2024_08_07'
APT_MAL_CISA_10365227_01_APPSTORAGE_Dec21:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: cf745f84f4435114e6578463d61fb494
  Ruleset: securityonion-yara
  Summary: This rule detects samples associated with the AppStorage malware, specifically noting patterns related to "ntstatus" and "msexch." It searches for specific strings indicating malware presence, including identifiers and function names like "GetHDDId," "AppStorage," and "AppDomain." The condition specifies that the executable file should begin with the signature 'MZ' and match all defined strings.
  Updated-Date: '2024_08_07'
APT_MAL_CISA_10365227_02_ClientUploader_Dec21:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: fbe8d3eaa084b34ab5242a473240b9b1
  Ruleset: securityonion-yara
  Summary: This rule detects the "ClientUploader" malware, identified as "ClientUploader_mqsvn," by matching several unique strings and byte sequences within the file, such as "UploadSmallFileWithStopWatch" and "UploadPartWithStopwatch." The rule specifically looks for these indicators to identify the presence of the malware in executable files starting with the "MZ" header, which denotes a Windows executable.
  Updated-Date: '2024_08_07'
APT_MAL_CISA_10365227_03_ClientUploader_Dec21:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9a00a4d403405316460c307733c70290
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the ClientUploader software, specifically targeting a variant associated with onedrv. It identifies specific strings such as "Decoder2," "ClientUploader," "AppDomain," "LzmaDecoder," and a unique identifier string "$ee1b3f3b-b13c-432e-a461-e52d273896a7." Additionally, it searches for a particular hexadecimal sequence. The rule aims to flag instances of this software by checking for these indicators within files that start with the hex values matching the specified condition.
  Updated-Date: '2024_08_07'
APT_MAL_CN_Unit78020_Sep15:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e7335f69518fb004d7bde3763754d540
  Ruleset: securityonion-yara
  Summary: This rule detects malware associated with Unit78020 by identifying specific patterns and strings within files. Among these indicators are various hardcoded URLs such as "greensky27.vicp.net" and other similar domain references, as well as specific HTTP request strings like "POST http://%s:%d/aspxabcdefg.asp?%s HTTP/1.1" and "GET http://%s:%d/aspxabcdef.asp?%s HTTP/1.1". Additionally, the rule looks for user-agent strings e.g., "dMozilla/4.0 (compatible; MSIE 6.0;Windows NT 5.0; .NET CLR 1.1.4322)", language headers, and specific file paths like "%USERPROFILE%\\Application Data\\Mozilla\\Firefox\\Profiles". It also detects shortcuts such as "\\Office Start.lnk" and "\\MSN Talk Start.lnk" and other specific patterns in the code. The rule applies to files smaller than 2000KB that start with the executable file signature "MZ".
  Updated-Date: '2024_08_07'
APT_MAL_CN_Wocao_Agent_Csharp:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: bf6f356a93b7c05d755d432921554bfc
  Ruleset: securityonion-yara
  Summary: This rule detects the CSharp version of the Agent malware utilized by the Chinese hacking group known as Wocao. It looks for specific bytecode sequences and programming patterns, such as sending data through a socket, resolving DNS host addresses, and defining port values from buffer data. Additionally, functions related to data transmission and static method definitions are also part of the detection criteria. These distinctive strings and byte sequences are indicative of the malware's presence in a system.
  Updated-Date: '2024_08_07'
APT_MAL_CN_Wocao_agent_powershell_b64encoded:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 45859711f6b8a91de1f40a2f7bb448f1
  Ruleset: securityonion-yara
  Summary: This rule detects a specific piece of Base64 encoded data associated with Agent CSharp, referencing a cybersecurity investigation into a Chinese hacking group called Operation Wocao. The script checks for the presence of a defined Base64 string, indicating suspicious or malicious PowerShell activity tied to this group.
  Updated-Date: '2024_08_07'
APT_MAL_CN_Wocao_agent_powershell_dropper:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0ccbbcc29d7f18db5bfdfb4b56b994cb
  Ruleset: securityonion-yara
  Summary: This rule detects a PowerShell dropper associated with the CSharp version of a malicious agent possibly used by the APT group known for Operation Wocao. It identifies specific strings used in the PowerShell script, including a function definition, a loop operation involving bitwise XOR, and a command referencing the main function of an agent.
  Updated-Date: '2024_08_07'
APT_MAL_CN_Wocao_agent_py:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1c635ad798b96ce68d8972c849288382
  Ruleset: securityonion-yara
  Summary: This rule detects behaviors and string patterns associated with the Python version of the Agent used by the malware group APT known as Wocao. The detection focuses on specific code constructs and functionalities, including methods like "self._newsock.recv" for receiving data, "Rsock.connect" for establishing connections, and "vpshex.decode" for decoding purposes. It also targets specific constants and server listening functionalities, such as "MAX_DATALEN = 10240," "LISTEN_MAXCOUNT = 80," and "ListenSock.listen(LISTEN_MAXCOUNT)." Additionally, it checks for particular data handling routines and string patterns used within the malware, including an encrypted key for identification.
  Updated-Date: '2024_08_07'
APT_MAL_CN_Wocao_agent_py_b64encoded:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e20e197ca2a733816be5a5cd4970e7b8
  Ruleset: securityonion-yara
  Summary: This rule detects a piece of Base64 encoded data from the Agent Python malware, identified as part of Operation Wocao, a campaign attributed to a Chinese hacking group.
  Updated-Date: '2024_08_07'
APT_MAL_CN_Wocao_checkadmin_bin:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0d715a26367adc4ff19ee9a7caedccff
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the "Checkadmin" utility, which is associated with the Operation Wocao hacking group linked to China. It identifies specific patterns in strings that indicate system errors and access denied messages, helping to uncover potential malicious activity.
  Updated-Date: '2024_08_07'
APT_MAL_CN_Wocao_getos_py:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ef82c4257c5803db04347e3e55ca67aa
  Ruleset: securityonion-yara
  Summary: This rule detects the use of a Python script named "getos.py" associated with Operation Wocao, a hacking group. Specific behaviors and functions within "getos.py" are identified, such as byte sequences indicating network communication using SMB protocols, Python code snippets handling errors, parsing and formatting tasks, and various textual indicators like usage instructions and error messages. The rule matches these patterns to recognize the script's execution and the deployment of related tasks within a targeted environment.
  Updated-Date: '2024_08_07'
APT_MAL_CN_Wocao_info_vbs:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1a31d044b06b23fca35c26f597c0a50f
  Ruleset: securityonion-yara
  Summary: This rule detects an information-gathering Visual Basic script (VBS) associated with the APT group known as Wocao. It does this by identifying specific strings embedded in the script, such as commands used for logging connections, obtaining administrative information, installing components, and executing tasks. The strings include various logging functions and concatenations used for constructing output messages related to administrative names, drive volumes, and machine states.
  Updated-Date: '2024_08_07'
APT_MAL_CN_Wocao_injector_bin:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 188af0f57fde21e7805e550a4353fc05
  Ruleset: securityonion-yara
  Summary: This rule detects a process injector or launcher related to the Wocao hacking group, known for its activities originating from China. The detection is based on specific strings and byte sequences indicative of the malware's behavior, which references temporary file creation and certain executable manipulations. Notable strings include unique format specifiers for temporary files and patterns observed within the binary data, suggesting characteristics of the malicious process injection technique employed by this group.
  Updated-Date: '2024_08_07'
APT_MAL_CN_Wocao_keylogger_file:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 401e18aa38eccf23f7f85a55edce5ead
  Ruleset: securityonion-yara
  Summary: This rule detects keylogger output files associated with the Operation Wocao, which is linked to a Chinese hacking group. It looks for specific patterns in the file contents that match the hexadecimal sequence indicating the format of data typically generated by this keylogger.
  Updated-Date: '2024_08_07'
APT_MAL_CN_Wocao_keylogger_py:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: caccdbf88868be1040e736144477e594
  Ruleset: securityonion-yara
  Summary: This rule detects a Python-based keylogger associated with the Wocao hacking group, identified by specific string patterns. These strings include file paths such as "c:\\windows\\temp\\tap.tmp" and "c:\\windows\\temp\\mrteeh.tmp", as well as terms like "GenFileName", "outfile", and a particular format string "[PASTE:%d]". The presence of any three of these strings triggers the detection of the keylogger.
  Updated-Date: '2024_08_07'
APT_MAL_CN_Wocao_timeliner_bin:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 46aa7dab32e588eb118e3cffd529dd47
  Ruleset: securityonion-yara
  Summary: This rule detects the Timeliner utility, which is linked to a Chinese hacking group as described by Fox-IT SRT. The rule identifies specific strings such as messages indicating successful work completion, file creation failure, path correctness issues, formats for specifying file paths and data. These distinctive patterns are utilized to recognize the presence or use of the Timeliner tool.
  Updated-Date: '2024_08_07'
APT_MAL_CN_Wocao_webshell_console_jsp:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3d62aef8a93bd7edf572b0ceae2c3fe0
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a malicious component known as "console.jsp" webshell. This webshell contains specific strings related to saving files, such as "String strLogo = request.getParameter('image')", messages indicating the success or failure of the save operation like "<font color=red>Save Failed!</font>" and "<font color=red>Save Success!</font>", and conditional checks to verify file existence and size. The detection is triggered if at least one of these unique strings is found, indicating the potential presence of this webshell on a compromised server.
  Updated-Date: '2024_08_07'
APT_MAL_CN_Wocao_webshell_index_jsp:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 15f85fde4e6942d3e7c353b0738a4399
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific web shell backdoor, associated with Operation Wocao, by identifying unique strings within the `index.jsp` file. It searches for the identifiers "X-CMD," "X-STATUS," "X-TARGET," and "X-ERROR," alongside a Java output statement "out.print(\"All seems fine.\");" to confirm the malicious activity.
  Updated-Date: '2024_08_07'
APT_MAL_CN_Wocao_webshell_ver_jsp:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c984ffd30f1701001d5a39b58a3e6b28
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the ver.jsp webshell, which is associated with the operation conducted by the Chinese hacking group known as Wocao. It looks for specific strings within the webshell's code, such as parameter handling with "String strLogo = request.getParameter(\"id\")" and equality checks "!strLogo.equals(\"256\")". The rule also recognizes code patterns related to reading and outputting data, including "boolean chkos = msg.startsWith", "while((c = er.read()) != -1)", "out.print((char)c);}in.close()", and "out.print((char)c);}er.close()". These strings help identify the malicious behavior typical of the ver.jsp webshell.
  Updated-Date: '2024_08_07'
APT_MAL_CN_Wocao_webshell_webinfo:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: af059da704d25dfbba739fa5fc785ec0
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the Wocao webshell, specifically `webinfo.war`. It identifies common strings used within the webshell's source code. These include parameters like `strLogo` and `content` being retrieved via `request.getParameter`, the `basePath` being set through `request.getScheme()`, and conditional checks and file operations involving variables `path` and `content`. Additionally, the rule looks for success and failure messages commonly found in the webshell code, such as "Save Success!" and "Save Failed!"
  Updated-Date: '2024_08_07'
APT_MAL_CN_Wocao_xserver_csharp:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5a618708ee1f1d8d5599e34d43819b24
  Ruleset: securityonion-yara
  Summary: This rule detects specific strings associated with the CSharp version of the XServer malware, part of Operation Wocao attributed to a Chinese hacking group. It identifies unique code structures and commands, such as initializing a server with `ServerX`, defining a class called `xserver`, invoking the main function with `[xserver]::Main($args);`, creating firewall rules for PowerShell on port 47000, handling file paths with a `.CT` extension, calculating a port value from a buffer, and sending specific byte sequences via a socket.
  Updated-Date: '2024_08_07'
APT_MAL_CN_Wocao_xserver_powershell_b64encoded:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 57c267152146c69b5f9d15eaced018f7
  Ruleset: securityonion-yara
  Summary: "This rule detects a piece of Base64 encoded data associated with the XServer PowerShell dropper, used in Operation Wocao\u2014a campaign reportedly linked to a Chinese hacking group. The specified encoded strings are indicators of the presence of this particular malware."
  Updated-Date: '2024_08_07'
APT_MAL_CN_Wocao_xserver_powershell_dropper:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2b884346497caa1ec92f151ad82437f6
  Ruleset: securityonion-yara
  Summary: This rule detects a PowerShell dropper associated with the XServer malware, which utilizes a specific obfuscation technique. The dropper contains a command involving the creation of a new DeflateStream object used to decompress Base64-encoded data stored in memory, highlighting a particular method employed by this malware to execute its payload.
  Updated-Date: '2024_08_07'
APT_MAL_DNS_Hijacking_Campaign_AA19_024A:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 55af352d2d831c730e8cad2bbf761b0c
  Ruleset: securityonion-yara
  Summary: This rule detects malware associated with a DNS hijacking campaign. It identifies specific strings within files, such as login URL patterns, user-agent headers mimicking Internet Explorer, and configuration files. Additionally, it checks for distinct form-data elements related to file uploads. The rule applies to executable files smaller than 1000KB, ensuring precision by confirming the presence of at least two of the defined string patterns.
  Updated-Date: '2024_08_07'
APT_MAL_DTRACK_Oct19_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2cd0dbf1a7a654bbe181010318b66840
  Ruleset: securityonion-yara
  Summary: "This rule detects the DTRACK malware, a malicious software known for its data theft capabilities. It identifies specific string patterns and hexadecimal sequences characteristic of the DTRACK malware, such as unique log filename formats, temporary file paths, Mozilla Firefox profile paths, error messages, command download notifications, and network activity signatures. Additionally, the rule checks for certain opcode patterns present in DTRACK\u2019s binary code and ensures conditions like file size limits and specific hexadecimal markers to verify the presence of the malware."
  Updated-Date: '2024_08_07'
APT_MAL_Fujinama:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2a70a57bdbfe844dbf6de31797464067
  Ruleset: securityonion-yara
  Summary: This rule detects the Fujinama Remote Access Trojan (RAT), which has been associated with an insider threat incident at Leonardo SpA. The rule identifies the malware by looking for specific keywords and strings within the file that include database-related terms, Windows system references, and user agent strings. Additionally, it checks for specific patterns and functions associated with Fujinama RAT, such as "t_save" and "cftmon." The file must also start with a particular signature (0x5a4d) to be considered a match.
  Updated-Date: '2024_08_07'
APT_MAL_Gopuram_Backdoor_Apr23:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7f3f07375b24cfc5762d7ff98db4b18f
  Ruleset: securityonion-yara
  Summary: This rule detects the Gopuram backdoor, a malicious software associated with a 3CX supply chain attack. It identifies specific patterns within file names and file operations, such as decrypting and virtual memory protection mechanisms, as well as reading file content. To recognize the presence of this backdoor, it looks for certain ASCII patterns and hexadecimal byte sequences indicative of these operations, particularly within files that are smaller than 2MB and have characteristics of a DLL file. Specific hash values related to known instances of Gopuram backdoor are also used for detection.
  Updated-Date: '2024_08_07'
APT_MAL_HOPLIGHT_NK_HiddenCobra_Apr19_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 54767cccc31fe84afcc27323639dbea4
  Ruleset: securityonion-yara
  Summary: This rule detects the HOPLIGHT malware associated with the HiddenCobra APT group. It identifies the presence of specific indicators within a file, including the string "www.naver.com" and "PolarSSL Test CA0," both in ASCII and matching the full word. Additionally, the file size must be less than 1000KB for the detection criteria to be met.
  Updated-Date: '2024_08_07'
APT_MAL_HOPLIGHT_NK_HiddenCobra_Apr19_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d40d033f51dc30823f43322123562f4d
  Ruleset: securityonion-yara
  Summary: This rule detects HOPLIGHT malware used by the HiddenCobra APT group. It identifies the presence of suspicious strings within files, specifically targeting certain patterns that include system paths, services, and parameters. The condition for detection includes the presence of a specific file header and a file size limit.
  Updated-Date: '2024_08_07'
APT_MAL_HOPLIGHT_NK_HiddenCobra_Apr19_3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: bb51f28439907d3141e67908d53f8823
  Ruleset: securityonion-yara
  Summary: This rule detects the HOPLIGHT malware, which is attributed to the HiddenCobra APT group. The detection criteria include specific strings often associated with this malware, such as "Oleaut32.dll," "Process32NextA," "Process32FirstA," and other patterns related to RSA key sizes and email addresses. Additional distinct strings and file patterns such as "udbcgiut.dat" are also used for identification. The rule triggers if the initial bytes of the file match the 'MZ' header and the file size is less than 800KB, combined with matching one of several unique strings or a set of key suspicious strings.
  Updated-Date: '2024_08_07'
APT_MAL_HP_iLO_Firmware_Dec21_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4f2b5ad42f16fcb9b592011fde12c1db
  Ruleset: securityonion-yara
  Summary: This rule detects suspicious ELF files with specific sections that align with the characteristics of a malicious iLO Board firmware, as analyzed in December 2021 by AmnPardaz. The targeted strings within these ELF files include ".newelf.elf.text," ".newelf.elf.libc.so.data," ".newelf.elf.Initial.stack," and ".newelf.elf.libevlog.so.data." The detection criteria are based on the file size being less than 5MB and the presence of at least two of these strings or all of them together.
  Updated-Date: '2024_08_07'
APT_MAL_Ke3chang_Ketrican_Jun20_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b00cdafe06542ed6780b06da4113e97a
  Ruleset: securityonion-yara
  Summary: This rule detects the Ketrican malware by examining specific byte sequences in executable files. It looks for particular code patterns, including certain hexadecimal strings, within files that are smaller than 300KB. The rule specifically targets files that start with the "MZ" header, indicating a Windows executable.
  Updated-Date: '2024_08_07'
APT_MAL_LNX_Kobalos:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: aa58daeadb045ddba38f3714e2020687
  Ruleset: securityonion-yara
  Summary: This rule detects the Kobalos malware, which is known to target high-performance computing infrastructure. It uses specific indicators such as encrypted string sizes, an MD5 digest of a password, an RSA-512 module header, and an RC4 key to identify the presence of this complex Linux threat.
  Updated-Date: '2024_08_07'
APT_MAL_LNX_Kobalos_SSH_Credential_Stealer:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0ad3b2bb608da947749c02dfdd37eb9d
  Ruleset: securityonion-yara
  Summary: This rule detects the Kobalos SSH credential stealer in the OpenSSH client. It identifies specific strings related to SSH connection attempts, including user information, host details, port numbers, and passwords. The rule is designed to avoid false positives by ensuring certain conditions in the file's content. Kobalos is known as a complex Linux threat targeting high-performance computing infrastructures.
  Updated-Date: '2024_08_07'
APT_MAL_LNX_RedMenshen_BPFDoor_Controller_Generic_May22_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 18d678ed87dfa3a9282c747b0c83364b
  Ruleset: securityonion-yara
  Summary: This rule detects BPFDoor malware, which is a surveillance tool attributed to a Chinese threat group. The malware is identified through specific operations in its code and evaluates binary patterns. It checks for certain byte sequences and file sizes to identify the BPFDoor executable, leveraging an array of hash values for various known samples of the malware. The rule targets executable files smaller than 200KB that match particular patterns typical of BPFDoor's code structure.
  Updated-Date: '2024_08_07'
APT_MAL_LNX_RedMenshen_BPFDoor_Controller_May22_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 61c84a8d9d7e850aa39dc35798be611f
  Ruleset: securityonion-yara
  Summary: This rule detects Linux implants used by APT groups, specifically focusing on identifying BPFdoor malware variants. These implants may originate from specific uploads in South Korea and Macau. The rule targets specific string patterns and byte sequences indicative of malicious activity, including error messages, shell command exports, and unique operational code sequences within executable files. It operates on files smaller than 80KB and uses a combination of string and byte pattern matching to ascertain the presence of the malware.
  Updated-Date: '2024_08_07'
APT_MAL_LNX_RedMenshen_BPFDoor_Controller_May22_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5b62ca4252afcb7f90d92d9028326f8a
  Ruleset: securityonion-yara
  Summary: This rule detects BPFDoor implants used by the Chinese actor Red Menshen. The detection is based on specific hexadecimal patterns found in the malware's code, which are characteristic of BPFDoor. The rule targets files smaller than 100KB that begin with the hexadecimal value 0x457f, indicating potential BPFDoor activity.
  Updated-Date: '2024_08_07'
APT_MAL_LNX_RedMenshen_BPFDoor_Controller_May22_3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d5af15fa42578b658ad8ab085acf88b0
  Ruleset: securityonion-yara
  Summary: This rule detects BPFDoor implants, sophisticated surveillance tools deployed by the Chinese actor known as Red Menshen. The rule identifies specific strings within files, including references to the "hald-addon-acpi" process and the "/sbin/mingetty" service, which are indicative of the presence of BPFDoor. Additionally, it looks for the phrase "pickup -l -t fifo -u." These strings help pinpoint the malware by checking that the file is in ELF format and is under 200KB in size.
  Updated-Date: '2024_08_07'
APT_MAL_LNX_RedMenshen_BPFDoor_Tricephalic_Implant_May22:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 44c63cacc8773c16ce5f0e796d54b5c5
  Ruleset: securityonion-yara
  Summary: 'This rule detects the BPFDoor/Tricephalic Hellkeeper passive implant, a type of Linux malware. It identifies specific strings within the system that are indicative of this implant, such as messages related to system operations ("hald-addon-acpi: listening on acpi kernel interface /proc/acpi/event"), the creation and removal of files in the shared memory directory ("/bin/rm -f /dev/shm/%s"), and various error messages indicative of issues in networking operations (e.g., "[-] socket", "[-] bind", "[-] accept"). Additionally, it looks for IP table commands and responses from the implant indicating the state of the malware processes, such as "[+] Spawn shell ok." and "[+] Monitor packet send." This rule helps identify affected systems by matching these unique behavioral and textual patterns associated with the BPFDoor/Tricephalic Hellkeeper implant.'
  Updated-Date: '2024_08_07'
APT_MAL_LNX_Turla_Apr202004_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2ab3685f4b0965c31fe3b943a52328f6
  Ruleset: securityonion-yara
  Summary: 'This rule detects Turla Linux malware, targeting both x64 and x32 architectures. It identifies specific strings in the malware, such as paths to temporary system files and unique debug messages, including "/root/.hsperfdata," "VS filesystem: %s," and "/tmp/.sync.pid." Additionally, it looks for specific phrases and format strings used by the malware, such as "File already exist on remote filesystem !" and "TREX_PID=%u." The malware must meet certain conditions, such as having a specific file header (0x457f) and being smaller than 5000KB. The detection is based on matching four out of the identified strings.'
  Updated-Date: '2024_08_07'
APT_MAL_LNX_Turla_Apr202004_1_opcode:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: fb596362e3ba071351d20b6a57fcf62e
  Ruleset: securityonion-yara
  Summary: This rule detects Turla Linux malware in both x64 and x32 architectures. It looks for specific byte patterns that indicate the presence of malicious code, including various XOR string loops, opcode exceptions, and specific decryption initiation strings. The rule checks for these patterns in files smaller than 5MB and confirms the match if at least two of the defined patterns are found.
  Updated-Date: '2024_08_07'
APT_MAL_LNX_Turla_Apr20_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 70aaede80497045a7d2746c26650e02c
  Ruleset: securityonion-yara
  Summary: This rule detects Turla Linux malware by identifying specific strings and patterns commonly associated with the malicious software. It looks for particular file paths, error messages, and system capabilities that the malware is known to use or reference, such as "/root/.hsperfdata," error messages about unsupported IPv6 addresses, and existing files in remote filesystems. The rule is triggered when four out of the defined string conditions are met and the file size is less than 5000KB.
  Updated-Date: '2024_08_07'
APT_MAL_MalDoc_CloudAtlas_Oct20_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: eade5baf8b4e1affe52c7347acdda186
  Ruleset: securityonion-yara
  Summary: This rule detects an unknown malicious document (maldoc) dropper identified in October 2020. It looks for a specific URL ("https://msofficeupdate.org") within files that start with the hexadecimal value 0xcfd0 and are smaller than 300KB.
  Updated-Date: '2024_08_07'
APT_MAL_NK_Lazarus_VHD_Ransomware_Oct20_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b33e7fab55de2244dcf1132b14042cd5
  Ruleset: securityonion-yara
  Summary: This rule detects Lazarus VHD Ransomware by identifying specific characteristics and behaviors associated with this malware. It searches for the presence of certain text files, such as "HowToDecrypt.txt," references to "rsa.cpp," and commands like stopping the "Microsoft Exchange Compliance Service." Additionally, it looks for particular sequences of byte operations in the code. It applies these checks to files smaller than 400KB and with a specific file header.
  Updated-Date: '2024_08_07'
APT_MAL_NK_Lazarus_VHD_Ransomware_Oct20_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4a1b767e136ef25959447520d7d39b7c
  Ruleset: securityonion-yara
  Summary: This rule detects the Lazarus VHD Ransomware by identifying specific byte sequences within files under 9000KB in size that match certain hexadecimal patterns. The rule focuses on three distinct byte patterns that are characteristic of this ransomware, facilitating its identification.
  Updated-Date: '2024_08_07'
APT_MAL_RANSOM_ViceSociety_Chily_Jan23_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5b19226b22cc33b66f5d85b195dab3a2
  Ruleset: securityonion-yara
  Summary: This rule detects the Chily or SunnyDay malware used by the Vice Society group. It identifies specific textual markers such as email addresses and URLs for cryptocurrency transactions. The rule also looks for distinct file paths and command-line strings associated with ransomware behavior, including the clearing of Windows event logs, navigation to user profile document directories, and deletion of Volume Shadow Copies. Additionally, it searches for defined binary sequences within executable files smaller than 500KB to confirm the presence of the malware.
  Updated-Date: '2024_08_07'
APT_MAL_RANSOM_ViceSociety_PolyVice_Jan23_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: be5ae1440913e1b2ae804e15c8769e3f
  Ruleset: securityonion-yara
  Summary: This rule detects the NTRU-ChaChaPoly (PolyVice) malware, which is associated with the Vice Society ransomware group. It identifies the threat by looking for specific file paths, ASCII strings, and byte sequences that are characteristic of this malware. The conditions include checking for a PE file header and ensuring the file size is less than 400KB, followed by matching certain strings and operation codes that are typical to the malware.
  Updated-Date: '2024_08_07'
APT_MAL_REvil_Kaseya_Jul21_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 707868825e7097b238bf3926881fd9af
  Ruleset: securityonion-yara
  Summary: This rule detects malware associated with the Kaseya supply chain attack. It identifies specific executable files and patterns within the code, utilizing several distinctive string and byte sequence matches, including filenames like "Mpsvc.dll" and specific operation codes. The malware is also recognized by its import hash value and certain characteristics of the file's structure.
  Updated-Date: '2024_08_07'
APT_MAL_REvil_Kaseya_Jul21_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 451bc3ccfbd64d80721d0384a23df8b9
  Ruleset: securityonion-yara
  Summary: This rule detects malware used in the Kaseya supply chain attack, specifically targeting malicious software associated with the REvil ransomware group. It identifies the presence of certain hexadecimal patterns and strings within executable files smaller than 3000KB. The conditions focus on specific opcodes and code sequences characteristic of the malicious payload used during the attack.
  Updated-Date: '2024_08_07'
APT_MAL_RU_Snake_Indicators_May23_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5776d8d1c9bc0b5b102901b8ad10ac7d
  Ruleset: securityonion-yara
  Summary: 'This rule detects indicators related to the Snake malware, which is identified through specific strings and file hashes. The Snake malware samples contain distinctive patterns such as "\\\\.\\%s\\\\", "read_peer_nfo", "rcv_buf=%d%c", "%s: (0x%08x)", and "no_impersonate". The detection criteria also match various known cryptographic hashes associating the files with the Snake malware, which is known for its use in advanced persistent threats.'
  Updated-Date: '2024_08_07'
APT_MAL_RU_Turla_Kazuar_May20_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2b8310ce53c512ad40a2afdb05ca2492
  Ruleset: securityonion-yara
  Summary: This rule detects the Turla Kazuar malware by identifying specific characteristics and strings associated with it. It looks for the presence of the term "Sysinternals" in ASCII and the phrase "Test Copyright" in wide character format within a file that starts with the magic number 0x5a4d, which denotes a Windows executable (PE) file. Additionally, it ensures the file size does not exceed 2000KB and matches various content patterns, including a sequence of hexadecimal bytes, to confirm the presence of the Turla Kazuar malware.
  Updated-Date: '2024_08_07'
APT_MAL_RU_WIN_Snake_Malware_May23_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c3b00aff1563b5dd41f44c1bdf22770c
  Ruleset: securityonion-yara
  Summary: This rule detects Snake malware associated with Russian intelligence operations targeting Windows systems. It searches for specific sequences of bytes commonly found within executable code, scanning memory in areas where code can be executed and modified. These byte patterns are characteristic of the Snake malware's behavior and structure, facilitating the identification of this threat.
  Updated-Date: '2024_08_07'
APT_MAL_SLOTHFULMEDIA_Oct20_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: bc8afd096869343873cc938d6e4b820f
  Ruleset: securityonion-yara
  Summary: This rule detects the SLOTHFULMEDIA malware by identifying specific hexadecimal and textual patterns in files. It looks for unique strings and fragments of data that are characteristic of the SLOTHFULMEDIA malware, such as various URL patterns, data setup formats, and specific application strings. The rule also checks for the presence of known binary file signatures and ensures the file size is less than 400KB. The malware targets local security processes and uses specific functions and headers typical of malicious activities.
  Updated-Date: '2024_08_07'
APT_MAL_Sandworm_Exaramel_Configuration_File_Ciphertext:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 69e4d396f662421ba4b4cc15c241a204
  Ruleset: securityonion-yara
  Summary: This rule detects encrypted contents of the configuration file used by Exaramel, a malware associated with the Sandworm APT group. The encryption key for this file is `odhyrfjcnfkdtslt`. The specific pattern of encrypted bytes identified is `6F B6 08 E9 A3 0C 8D 5E DD BE D4`.
  Updated-Date: '2024_08_07'
APT_MAL_Sandworm_Exaramel_Configuration_File_Plaintext:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3578e5afda9da58e7fbb305bdd1db2a2
  Ruleset: securityonion-yara
  Summary: This rule detects the plaintext contents of the configuration file used by Exaramel malware. The configuration file typically includes details such as hosts, proxy settings, version information, and a unique GUID.
  Updated-Date: '2024_08_07'
APT_MAL_Sandworm_Exaramel_Configuration_Key:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9e9a47a4bba0e6796ed13806dbc26a45
  Ruleset: securityonion-yara
  Summary: This rule detects the encryption key for the configuration file used by the Exaramel malware, which is associated with the Sandworm threat group. The specified string, "odhyrfjcnfkdtslt," is utilized as a marker for identifying this encryption key within the malware's configuration.
  Updated-Date: '2024_08_07'
APT_MAL_Sandworm_Exaramel_Configuration_Name_Encrypted:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c95b0e63f91fc58731083d7920f7686e
  Ruleset: securityonion-yara
  Summary: This rule detects the specific name of a configuration file, "configtx.json," associated with the Exaramel malware. Exaramel is linked to the Sandworm group, known for various cyber-espionage activities. The rule identifies instances where this particular configuration file name is present in a system, indicating a potential compromise by the Exaramel malware.
  Updated-Date: '2024_08_07'
APT_MAL_Sandworm_Exaramel_Socket_Path:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c77c8a70dbfa0a97c24305692ba2a137
  Ruleset: securityonion-yara
  Summary: This rule detects the unique path of a Unix socket created by Exaramel malware to prevent concurrent executions. It identifies the specific string "/tmp/.applocktx" used by the malware.
  Updated-Date: '2024_08_07'
APT_MAL_Sandworm_Exaramel_Strings:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4691cf38781e7fcb3f8f61f35574fc76
  Ruleset: securityonion-yara
  Summary: This rule detects the use of specific strings associated with Exaramel malware. It identifies strings related to persistence mechanisms such as "systemd," "upstart," "systemV," and "freebsd rc," as well as filenames like "systemdupdate.rep," "upstartupdate.rep," and "remove.rep." Additionally, it looks for URLs consistent with Exaramel's behavior, including "/tasks.get/," "/time.get/," "/time.set," "/tasks.report," "/attachment.get/," and "/auth/app." The rule triggers upon the presence of either a combination of certain URLs and persistence-related strings, or persistence and reporting strings, or a combination of URLs and reporting strings.
  Updated-Date: '2024_08_07'
APT_MAL_Sandworm_Exaramel_Strings_Typo:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d4d5cdfc4ef4ccd39a92ac8b2f50e546
  Ruleset: securityonion-yara
  Summary: This rule detects various strings in Exaramel malware that contain typographical errors. These strings include commands and messages such as "/sbin/init | awk", "Syslog service for monitoring \n", "Error.Can't update app! Not enough update archive.", and a string containing ":\"metod\"". The presence of any three of these strings triggers the detection.
  Updated-Date: '2024_08_07'
APT_MAL_Sandworm_Exaramel_Struct:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 03791b8dbb519a0d497e2f59ecafd8d9
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of specific structures used in the Exaramel malware, particularly focusing on key structures such as configuration, worker, client, report, and task data. By identifying these unique patterns within the malware, the rule can recognize instances of Exaramel based on how it organizes and structures its data.
  Updated-Date: '2024_08_07'
APT_MAL_Sandworm_Exaramel_Task_Names:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4d5dd02c6b395653f186f5d16bdcbc61
  Ruleset: securityonion-yara
  Summary: This rule detects specific task names received from the command and control server of the Exaramel malware. These tasks include operations such as deleting applications, setting server configurations, configuring proxies, setting timeouts, updating applications, reading and writing files, and executing shell commands.
  Updated-Date: '2024_08_07'
APT_MAL_SideWinder_implant:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3a86f67b409be76a03992badde72783a
  Ruleset: securityonion-yara
  Summary: This rule detects the final payload associated with SideWinder, a sophisticated piece of malware. It identifies the presence of this malware by examining specific sequences of bytes and strings commonly found in files associated with the SideWinder campaign. The malware often leverages these distinctive patterns to achieve its malicious objectives.
  Updated-Date: '2024_08_07'
APT_MAL_TinyTurla_Sep21_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 19cfc1555946bf6177b4771bbae70f45
  Ruleset: securityonion-yara
  Summary: 'This rule detects the Tiny Turla backdoor DLL, a piece of malware associated with the Turla APT group. The detection criteria include several specific strings related to system and network operations such as "Title: ", "Hosts", "Security", "TimeLong", "TimeShort", "MachineGuid", "POST", "WinHttpSetOption", and "WinHttpQueryDataAvailable". Additionally, the file must start with the "MZ" header (indicating a Windows executable) and have a file size of less than 25KB.'
  Updated-Date: '2024_08_07'
APT_MAL_URL_CloudAtlas_Oct20_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f9301ddddfa008f02280ca0f81813d4d
  Ruleset: securityonion-yara
  Summary: This rule detects an unknown malicious document dropper first observed in October 2020. The rule specifically targets a file named "morgue6visible5bunny6culvert7ambo5nun1illuminate4.url" and identifies it by matching a certain hash value and a specific byte pattern indicating an HTTP URL within an Internet Shortcut file. The URL points to "https://msofficeupdate.org/", which is likely associated with malicious activity. The rule also checks that the file has a specific size and a particular starting byte sequence.
  Updated-Date: '2024_08_07'
APT_MAL_VEILEDSIGNAL_Backdoor_Apr23:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: cf218def1a672b6f292902a32e757507
  Ruleset: securityonion-yara
  Summary: This rule detects the malicious VEILEDSIGNAL backdoor, which is associated with the 3CX software supply chain compromise. It identifies the malware by searching for specific patterns in the binary that correspond to XOR decryption, shell execution, and file reading operations. The rule activates when all of these patterns are present in a file that starts with the "MZ" header, indicating a Windows executable.
  Updated-Date: '2024_08_07'
APT_MAL_WildNeutron_javacpl:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3991a1fdfd48c025168edc7f00080284
  Ruleset: securityonion-yara
  Summary: This rule detects activity associated with the Wild Neutron advanced persistent threat (APT), known for economic espionage. It specifically identifies a sample by looking for certain strings and hexadecimal patterns within executable files smaller than 5MB. The strings include error messages and phrases related to command-line operations, as well as unique identifiers like "dpnxfsatz." Additionally, specific sequences of bytecode indicative of malware operations are checked, aiding in the identification of Wild Neutron-related behaviors.
  Updated-Date: '2024_08_07'
APT_MAL_WinntiLinux_Main_AzazelFork_May19:
  Created-Date: '2024_08_06'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 18c02311f8d43038cd30079f536424b7
  Ruleset: securityonion-yara
  Summary: This rule detects the Linux variant of the Winnti malware by identifying specific patterns within the binary. It looks for a particular UUID lookup command, an error message related to the creation of a PF_INET socket, and several RTTI (Run-Time Type Information) names including "CNetBase," "CMyEngineNetEvent," "CBufferCache," "CSocks5Base," "CDataEngine," "CSocks5Mgr," and "CRemoteMsg." The rule triggers if the binary starts with the ELF magic number (0x457f) and meets one of several conditions involving the presence of these strings.
  Updated-Date: '2024_08_06'
APT_ME_BigBang_Gen_Jul18_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4d459f9de9c0e2e5d49bdc9fe217ec92
  Ruleset: securityonion-yara
  Summary: This rule detects malware associated with the Big Bang campaign targeting Palestinian authorities. It searches for specific ASCII strings that appear obfuscated or encoded, such as those related to script execution, installation processes, and file operations. Additionally, the rule looks for base64 encoded strings translating to messages about installing and updating programs, particularly actions involving temporary files and task scheduling. It also matches a specific PE import hash and checks for files with the 'MZ' header and sizes below 3000KB.
  Updated-Date: '2024_08_07'
APT_ME_BigBang_Mal_Jul18_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 822e48d8a736de76b66b2cb721905f7d
  Ruleset: securityonion-yara
  Summary: This rule detects malware associated with the Big Bang campaign targeting the Middle East. It identifies specific patterns in strings related to timestamp formats, API request paths, and various file names, such as "part.txt," "ALL.txt," and "sat.txt." Additionally, it looks for the presence of the string "runfile.proccess_name" and a complex format string token. The file must begin with the "MZ" signature and be smaller than 3000KB in size, with at least four of the specified strings present for detection.
  Updated-Date: '2024_08_07'
APT_MagicHound_MalMacro:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8323cc220f3d40b945f23b8c054c1a92
  Ruleset: securityonion-yara
  Summary: This rule detects malicious macros or PowerShell scripts embedded in Microsoft Office documents. It identifies the presence of references to "powershell.exe", "CommandButton1_Click", and "URLDownloadToFile" within the document. These indicators are characteristic of the Iranian PupyRAT malware, which often targets Middle Eastern organizations through such methods.
  Updated-Date: '2024_08_07'
APT_Malware_CommentCrew_MiniASP:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: cc3ae72d1299f05b713429693bbb326d
  Ruleset: securityonion-yara
  Summary: This rule detects the MiniASP malware attributed to the APT group CommentCrew. It searches for specific patterns and strings associated with the malware, such as file paths referencing "MiniAsp.pdb" and commands like "run http://%s/logo.png setup.exe." Other strings include HTTP requests and user-agent strings imitating Mozilla browsers. Detected strings also encompass error and success messages related to command execution, registry paths, and specific URL structures indicative of data exfiltration or remote command and control typical of the MiniASP malware. The rule looks for these patterns within PE (Portable Executable) files by checking for certain hexadecimal values at the file's start.
  Updated-Date: '2024_08_07'
APT_Malware_PutterPanda_Gen1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 462f84f7247ada84fe86bd910c63b92c
  Ruleset: securityonion-yara
  Summary: This rule detects a specific malware associated with PutterPanda, targeting systems by searching for distinctive string patterns. The malware signatures include debugging logs and system-related keywords like "ssdpsvc.dll" and "LsaServiceInit," as well as phrases used within network services and cryptographic provider references. The rule triggers if the file size is less than 1MB and it contains at least five of the defined signature strings.
  Updated-Date: '2024_08_07'
APT_Malware_PutterPanda_Gen4:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ff9087364eaed993fd528e4f404babb6
  Ruleset: securityonion-yara
  Summary: This rule detects malware related to PutterPanda by identifying specific characteristics and strings within files. The detection targets file sizes less than 300KB and combines various conditions to match patterns. It looks for the presence of a string "rz.dat" and at least three distinct suspicious strings such as "Mozilla/4.0 (Compatible; MSIE 6.0;)", "Internet connect error:%d", and "Proxy-Authorization:Basic ". Additional strings that could indicate malware include "HttpQueryInfo failed:%d", "read file error:%d", and unique identifiers like "abe2869f-9b47-4cd9-a358-c22904dba7f7". The rule aims to identify PutterPanda malware by matching a combination of these suspicious strings and conditions, ensuring robust detection.
  Updated-Date: '2024_08_07'
APT_Malware_PutterPanda_MsUpdater_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 157a9eba8039dd55f2b0ccfafc3cee1d
  Ruleset: securityonion-yara
  Summary: This rule detects malware associated with the PutterPanda group, specifically targeting 'msupdate.exe', which masquerades as Microsoft's Automatic Updates process. The rule identifies strings related to Microsoft Corporation, such as "Automatic Updates" and "Invalid parameter," as well as function names like "VirtualProtectEx" and "WriteProcessMemory" to flag the malicious activity.
  Updated-Date: '2024_08_07'
APT_Malware_PutterPanda_MsUpdater_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0e8315d84f386ba39461802c5bb80102
  Ruleset: securityonion-yara
  Summary: This rule detects malware associated with PutterPanda, specifically targeting the MSUpdater component. It identifies the presence of malicious software by searching for specific strings commonly used by the malware, such as "winsta0\\default", "EXPLORER.EXE", "WNetEnumResourceA", and several functions related to process and module handling in the Windows operating system, such as "CreateProcessAsUserA", "Process32Next", and "EnumProcesses". It also checks for strings related to HTTP requests and internet connections like "HttpSendRequestExA", "HttpEndRequestA", and "InternetConnectA". The condition for detection includes a file size of less than 220KB and a matching header signature, indicating a portable executable file.
  Updated-Date: '2024_08_07'
APT_Malware_PutterPanda_MsUpdater_3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e74233c22649dc008fc0af0b517653ec
  Ruleset: securityonion-yara
  Summary: This rule detects malware associated with the PutterPanda group, specifically targeting the "msupdater.exe" file. The rule identifies malicious activity through specific strings including "msupdater.exe", "Explorer.exe \"", "FAVORITES.DAT", and "COMSPEC". The condition checks ensure that the file begins with the magic number indicative of a Windows executable (0x5a4d) and that at least three of the defined strings are present in the file.
  Updated-Date: '2024_08_07'
APT_Malware_PutterPanda_PSAPI:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7611650b264b2a22ebcc54f61a6dac2b
  Ruleset: securityonion-yara
  Summary: This rule detects malware associated with Putter Panda by identifying specific strings in the binary that indicate the presence of malicious activity. It searches for errors and procedure entries such as "LOADER ERROR" and "The procedure entry point %s could not be located in the dynamic link library %s". It also looks for the presence of particular dynamic link library names and functions including "psapi.dll", "urlmon.dll", and "WinHttpGetProxyForUrl". The detection is further refined by ensuring the file is a Windows executable with a size less than 300KB.
  Updated-Date: '2024_08_07'
APT_Malware_PutterPanda_Rel:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: bd2be56565e24f5b082610d557803f63
  Ruleset: securityonion-yara
  Summary: This rule detects an advanced persistent threat (APT) malware associated with PutterPanda, a known malicious group. It identifies specific strings within the code that indicate the presence of the malware, such as URLs, error messages, file execution confirmations, and the successful downloading of files. Notable strings include phrases related to failed process queries, connection errors, and indicators of compromising activities like downloading and executing files. These distinct markers help in recognizing the malicious software by evaluating the presence of multiple indicative text patterns within the executable files.
  Updated-Date: '2024_08_07'
APT_Malware_PutterPanda_Rel_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1e2ba1dc2c79a4a5d8cf779fbffab722
  Ruleset: securityonion-yara
  Summary: This rule detects malware associated with the PutterPanda group, which utilizes various web-related strings and error messages for its operations. Key indicators include specific URLs related to "konamidata.com", user-agent strings mimicking Internet Explorer, and several error messages related to connections, HTTP queries, file reading, and proxy authorization. It also identifies certain filenames like "downdll.dll" and "rz.dat" and strings indicating success or error in downloading files. These elements combined form the signature of the PutterPanda group's malicious activities.
  Updated-Date: '2024_08_07'
APT_Malware_PutterPanda_WUAUCLT:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d2a5aab917c5ec4fab2fd0d1c6b00c2b
  Ruleset: securityonion-yara
  Summary: This rule detects a malware related to Putter Panda by identifying specific strings commonly associated with the executable file "WUAUCLT.EXE" and other telltale patterns within the file. The strings include references to executable files and Microsoft Corporation copyrights, as well as common API functions and DLL files typically seen in both legitimate and malicious Windows programs. The detection pattern relies on the presence of either all malicious indicators or a combination of these with certain other widely-occurring benign strings.
  Updated-Date: '2024_08_07'
APT_NK_AR18_165A_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1107450a494a486cc2bfd1f450a68f8d
  Ruleset: securityonion-yara
  Summary: This rule detects APT malware related to the AR18-165A report from US CERT. It identifies specific strings associated with commands to add firewall rules through "netsh.exe". The commands include creating rules to open TCP ports with descriptive names like "PortOpenning". The detection is applied to files starting with the "MZ" header and is limited to files less than 2000KB in size.
  Updated-Date: '2024_08_07'
APT_NK_AR18_165A_HiddenCobra_import_deob:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: dc1b1343ff922458abe14c4797e7ea25
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a malicious proxy module installed as a service associated with the Hidden Cobra threat group and the TYPEFRAME malware family. It identifies specific hexadecimal patterns within executable files to identify the threat.
  Updated-Date: '2024_08_07'
APT_NK_BabyShark_KimJoingRAT_Apr19_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1fd9570790622c477b15dfcc913c4733
  Ruleset: securityonion-yara
  Summary: This rule detects the BabyShark KimJongRAT malware, which is associated with cyber-espionage activities. It specifically looks for certain strings and patterns within a file less than 2000KB in size that starts with the "MZ" header, characteristic of Windows executables. The rule targets particular file paths, like "%s\\Microsoft\\ttmp.log," and strings encoded in various formats, such as "logins.json," "SMTP Password," and database queries related to login credentials. It also checks for references to login pages of popular services like Google and Yahoo, as well as specific browser-related data, indicating the malware's potential functionality to steal user credentials and other sensitive data from infected systems.
  Updated-Date: '2024_08_07'
APT_NK_Lazarus_Network_Backdoor_Unpacked:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0f503dbfb2c6f653dbb3ba6d78069fef
  Ruleset: securityonion-yara
  Summary: This rule detects an unpacked variant of the Lazarus Group network backdoor. It identifies specific commands and strings associated with this malware, including the use of "netsh" to add or delete firewall port openings, command masking with "cmd.exe /c", and references to log files such as "perflog.dat", "perflog.evt", and "cbstc.log". It also looks for function names like "LdrGetProcedureAddress" and "NtProtectVirtualMemory". The rule checks for executables starting with the "MZ" header and limits the file size to under 3000KB.
  Updated-Date: '2024_08_07'
APT_NK_Lazarus_RC4_Loop:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3155acf9a73bc859615d68fc5c26ed79
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of an RC4 loop within a Lazarus Group implant, a cyber-espionage tool linked to the Lazarus Group known for its involvement in various cyber attacks. The signature specifically searches for a distinctive pattern of bytes associated with the RC4 encryption algorithm loop used by the implant. The detection is triggered when the binary being scanned has an MS-DOS header and a file size less than 3000KB, ensuring that it targets likely executable files.
  Updated-Date: '2024_08_07'
APT_NK_MAL_DLL_Apr23_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 761feabde34bab22ba74b64142ee9f12
  Ruleset: securityonion-yara
  Summary: This rule detects Dynamic Link Libraries (DLLs) loaded by a specific shellcode loader, which is associated with the Lazarus Group. It identifies unique strings and opcode patterns indicative of this malicious activity, such as ASCII and wide full-word strings representing user-agent information, timestamps, and common Windows format notations. Additionally, it checks for specific opcode sequences that match known behaviors of the malware, ensuring accuracy in detecting the related DLL files. The identification is constrained to files smaller than 500KB and begins with a specific header signature.
  Updated-Date: '2024_08_07'
APT_NK_MAL_Keylogger_Unknown_Nov19_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c7842ec20303ee6a8f58398138d01fc5
  Ruleset: securityonion-yara
  Summary: This rule detects an unidentified keylogger reported by a cybersecurity entity in November 2019. It identifies the keylogger by searching for specific strings and hexadecimal patterns within a file, such as "CKeyLogDlg::Keylogger_WriteFile," "Keylog file is saved >>>>>> %s," and "cr5cr33nc4p.dat." It also looks for multiple other indications like command execution strings and references to user account names within the Windows registry. This rule targets files with a particular initial signature and size constraints.
  Updated-Date: '2024_08_07'
APT_NK_MAL_M_Hunting_VEILEDSIGNAL_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4fe42a73d0abb4911d27d77412b02c77
  Ruleset: securityonion-yara
  Summary: This rule detects the VEILEDSIGNAL malware, known for specific byte patterns within its code. It identifies the presence of this malware by examining byte sequences characteristic of VEILEDSIGNAL within executable files. These sequences serve as unique signatures, and if one such pattern is found in a file structured as a Portable Executable (PE), the file is flagged.
  Updated-Date: '2024_08_07'
APT_NK_MAL_M_Hunting_VEILEDSIGNAL_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c480d52ab843d850bd9beee9fa0e2988
  Ruleset: securityonion-yara
  Summary: This rule detects the VEILEDSIGNAL malware, which is implicated in a software supply chain compromise. The rule utilizes specific hexadecimal patterns and unique strings such as "CryptBinaryToStringA," "BCryptGenerateSymmetricKey," "CreateThread," "ChainingModeGCM," and "__tutma" to identify the presence of this malware. The given conditions ensure a precise match for executable files impacted by this threat.
  Updated-Date: '2024_08_07'
APT_NK_MAL_M_Hunting_VEILEDSIGNAL_3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 53c027bd29c2acc3a7f5b2185f243666
  Ruleset: securityonion-yara
  Summary: This rule detects VEILEDSIGNAL malware by identifying specific sequences of hexadecimal bytes and full-word function names within executable files. It targets applications using the HTTP protocol header, functions such as `HttpSendRequestW`, `CreateNamedPipeW`, `CreateThread`, and `DllGetClassObject`, and checks for PE file format characteristics with specific offsets and values.
  Updated-Date: '2024_08_07'
APT_NK_MAL_M_Hunting_VEILEDSIGNAL_4:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f2a9394ac58e375785063eda48042c9a
  Ruleset: securityonion-yara
  Summary: This rule detects VEILEDSIGNAL malware by identifying specific byte sequences and API string references that are characteristic of this malware. It checks for PE file headers, indicating the file format, and includes patterns for common functions such as "CreateThread," "MultiByteToWideChar," "LocalAlloc," and "DllGetClassObject." The purpose of this rule is to assist in hunting for this malware, particularly by leveraging known hash values and detailed patterns indicative of VEILEDSIGNAL's behavior and structure.
  Updated-Date: '2024_08_07'
APT_NK_MAL_M_Hunting_VEILEDSIGNAL_5:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 575b7ff86560efad32ebea344e138a25
  Ruleset: securityonion-yara
  Summary: This rule detects the VEILEDSIGNAL malware by identifying specific patterns and indicators associated with it. It looks for a sequence of bytes and strings within executable files that suggest the presence of VEILEDSIGNAL. Indicators include process names like "chrome.exe," "firefox.exe," and "msedge.exe," as well as functions and objects such as "\\\\.\\pipe\\*", "FindFirstFileA," "Process32FirstW," "RtlAdjustPrivilege," "GetCurrentProcess," and "NtWaitForSingleObject." The rule targets files with a specific header indicating they are Windows PE files and applies these checks to confirm potential malware presence.
  Updated-Date: '2024_08_07'
APT_NK_MAL_M_Hunting_VEILEDSIGNAL_6:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 402afa7f8047915b3e0e6dc4807aa7b5
  Ruleset: securityonion-yara
  Summary: This rule detects the VEILEDSIGNAL malware by identifying specific characteristics within files, such as the presence of paths like "C:\\Programdata\\", as well as certain dynamic link libraries (DLLs) like "devobj.dll" and "msvcr100.dll". It also looks for files named "TpmVscMgrSvr.exe" and paths related to Microsoft's TPM service. Technical conditions include checks for specific headers that indicate the file is a valid Windows executable, alongside particular API functions like "CreateFileW". This combination of traits helps to identify potentially malicious files associated with VEILEDSIGNAL malware.
  Updated-Date: '2024_08_07'
APT_NK_Methodology_Artificial_UserAgent_IE_Win7:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7dc21f0d9a0d2b0b0511c76b70289be8
  Ruleset: securityonion-yara
  Summary: This rule detects a hard-coded User-Agent string specific to several APT37 malware families, which is indicative of malicious activity. The User-Agent string mimics Internet Explorer 11 on Windows 7 operating systems, including specific identifiable byte sequences found in the malware samples. Additionally, the rule ensures the presence of the identified User-Agent string while excluding certain known false positive indicators like "Esumsoft," "Acunetix," and "TASER SYNC."
  Updated-Date: '2024_08_07'
APT_NK_Scarcruft_RUBY_Shellcode_XOR_Routine:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ac9d19a099d7201d355723cd2917f362
  Ruleset: securityonion-yara
  Summary: This rule detects a Ruby shellcode XOR routine employed by the ScarCruft APT group. It identifies specific hexadecimal patterns in the code that are indicative of the XOR routine, including operations such as rotate left (ROL), increment (INC), test bit (TEST), and XOR with the constant 0x78AEEA97. The rule focuses on recognizing characteristic sequences of these operations to flag the presence of this particular shellcode XOR routine used by the malware.
  Updated-Date: '2024_08_07'
APT_NK_Scarcruft_evolved_ROKRAT:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 03987c0a9f96afba192e52b9c5e72057
  Ruleset: securityonion-yara
  Summary: This rule detects the RokRAT malware associated with the ScarCruft APT group. It identifies specific byte patterns indicative of the malware's behavior, including the use of certain AES keys and URL decoding routines. The rule checks for the presence of these unique sequences in the program files to ascertain the presence of the RokRAT malware.
  Updated-Date: '2024_08_07'
APT_NK_TradingTech_ForensicArtifacts_Apr23_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1e02c256d094b3acdac2ad651494a159
  Ruleset: securityonion-yara
  Summary: This rule detects forensic artifacts, file names, and keywords associated with the UNC4736 compromise of Trading Technologies software. It identifies specific URLs related to Trading Technologies order management, executable file names, and file path locations within the ProgramData directory on Windows systems.
  Updated-Date: '2024_08_07'
APT_Nazar_Component_Guids:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5a1d4cbd2349253aa23288e33a044df0
  Ruleset: securityonion-yara
  Summary: This rule detects specific components of the Nazar malware by identifying the globally unique identifiers (GUIDs) associated with certain COM objects. These identifiers include those related to Godown.dll and Filesystem.dll. The GUIDs are utilized to ascertain the presence of these files, which are part of the malicious Nazar malware family aimed at compromising target systems. The GUIDs listed in the rule serve to match known identifiers of these malware components, thus enabling the detection of the associated threats.
  Updated-Date: '2024_08_07'
APT_Nazar_Svchost_Commands:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: cacc43fa0f9f8a839a3c3c2d2164b278
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of Nazar malware based on specific byte sequences associated with its svchost commands. Nazar is a type of malicious software that executes commands through the svchost process. The detection is based on multiple unique byte patterns that are indicative of this malware's behavior, ensuring that at least four of these patterns must be present for a match.
  Updated-Date: '2024_08_07'
APT_Neuron2_Loader_Strings:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 414000c23bb307c09c67840ee793d1a6
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of Neuron2 malware by identifying specific strings and patterns within the loader. It looks for various strings related to the malware, such as "dcom_api," URLs like "http://*:80/OWA/OAB/" and "https://*:443/OWA/OAB/," and filenames such as "dcomnetsrv.cpp," "dcomnet.dll," and a development path "D:\\Develop\\sps\\neuron2\\x64\\Release\\dcomnet.pdb." The condition is triggered if the file format matches the PE (Portable Executable) format and at least two of the defined strings are found.
  Updated-Date: '2024_08_07'
APT_PY_ESXi_Backdoor_Dec22:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 85d2ed031172aff0fcc4fa05be318ae0
  Ruleset: securityonion-yara
  Summary: This rule detects a Python-based backdoor specifically targeting VMware ESXi servers. It identifies scripts containing certain encoded commands, such as base64-decoded instructions and a specific shell command that uses netcat (nc) to establish a reverse shell. The identified script files are relatively small, with file sizes less than 10KB.
  Updated-Date: '2024_08_07'
APT_Project_Sauron_Custom_M1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3c1536564b75d2e4e8bbbb4cb39391df
  Ruleset: securityonion-yara
  Summary: This rule detects malware associated with the Project Sauron Advanced Persistent Threat (APT). It specifically identifies files that mention "ncnfloc.dll" and "Network Configuration Locator" with fullword and wide string matching. Additionally, it looks for specific opcode patterns within executable files where the beginning of the file has a DOS header and the file size is under 200KB.
  Updated-Date: '2024_08_07'
APT_Project_Sauron_Custom_M2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f1db92ebfba6d268d57bdf7c93778d8d
  Ruleset: securityonion-yara
  Summary: This rule detects malware from the Project Sauron Advanced Persistent Threat (APT). It identifies specific characteristics of the malware by looking for the presence of certain strings and opcode sequences within executable files. The rule checks if the file starts with the magic number "0x5a4d", indicates a Windows executable (PE file), is smaller than 400KB, and contains both the specified ASCII string pattern and all given opcode sequences.
  Updated-Date: '2024_08_07'
APT_Project_Sauron_Custom_M3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c0d4be2128018fb2cb0a380ff2e5b905
  Ruleset: securityonion-yara
  Summary: This rule detects malware associated with the Project Sauron advanced persistent threat (APT). Specifically, it identifies the presence of malware that interacts with a file named "ExampleProject.dll" and checks for certain machine code sequences (opcodes) within the file. The rule applies to files that start with the "MZ" header, indicating a Windows executable or DLL, and are smaller than 1000KB in size.
  Updated-Date: '2024_08_07'
APT_Project_Sauron_Custom_M4:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3ee45af2a95fa53412b55631644e999b
  Ruleset: securityonion-yara
  Summary: This rule detects malware associated with the Project Sauron advanced persistent threat (APT). It identifies specific malicious software by looking for the presence of the string "xpsmngr.dll" and "XPS Manager" in a wide format within the file. Furthermore, the rule checks for certain opcode sequences that signify malicious behavior, such as the particular byte patterns present in the binary code. For a positive detection, the file should have a 'MZ' header, a size under 90KB, include the specified strings and at least one of the opcode sequences.
  Updated-Date: '2024_08_07'
APT_Project_Sauron_Custom_M6:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 64fee524dd48435acf9e37a058031981
  Ruleset: securityonion-yara
  Summary: This rule detects malware from Project Sauron APT by identifying specific characteristics in executable files. The malware is recognized through the presence of particular strings indicating the "rseceng.dll" and "Remote Security Engine" within the file, alongside certain opcode patterns. These combined indicators help identify the malicious software if the file size is less than 200KB, ensuring precision in detection.
  Updated-Date: '2024_08_07'
APT_Project_Sauron_Custom_M7:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d7ccedf0c020ae88663fa502f70abea2
  Ruleset: securityonion-yara
  Summary: This rule detects malware associated with the Project Sauron APT. It identifies specific string patterns and opcodes within files that are less than 200KB in size to determine if the file contains malicious content related to this advanced persistent threat. Notable strings include "MSAOSSPC.dll," "AOL Security Package," and "Default user," along with various opcode sequences that are indicative of the malware's behavior and structure. These identifiers help in recognizing the specific traits and components of the Project Sauron malware.
  Updated-Date: '2024_08_07'
APT_Project_Sauron_Scripts:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: dd885ab3a6b2c8ca3cab10964a7ebd8f
  Ruleset: securityonion-yara
  Summary: This rule detects scripts from the Project Sauron report by identifying specific LUA code patterns. These patterns include commands executed via `w.exec2str`, the movement and manipulation of specific files such as `FakeVirtualEncryptedNetwork.dll`, and references to encrypted network configurations (`VirtualEncryptedNetwork.licence`, `VirtualEncryptedNetwork.ini`). It also checks for commands that interact with the system's security and registry settings, such as `regedit`, and the execution of system information dumps (`sinfo`, `samdump`). Specific string matching related to network security and encryption activities suggests monitoring and manipulation of network services and configurations.
  Updated-Date: '2024_08_07'
APT_Project_Sauron_arping_module:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: bd5b817351254afd11cd2859b3f84231
  Ruleset: securityonion-yara
  Summary: This rule detects specific strings associated with the arping module linked to the Project Sauron malware, which is documented in a report by Kaspersky. It identifies phrases like "Resolve hosts that answer," "Print only replying IPs," and "Do not display MAC addresses."
  Updated-Date: '2024_08_07'
APT_Project_Sauron_basex_module:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: df79832a570b52ec0db8578339e0cfea
  Ruleset: securityonion-yara
  Summary: This rule detects specific strings associated with the basex module in Project Sauron, a sophisticated cyber-espionage operation reported by Kaspersky. It identifies phrases such as "64, 64url, 32, 32url or 16," "Force decoding when input is invalid/corrupt," and "This cruft" to determine the presence of the basex module by matching any of these unique strings.
  Updated-Date: '2024_08_07'
APT_Project_Sauron_dext_module:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 34c61b1c9ee4c5ddb94210764dc10846
  Ruleset: securityonion-yara
  Summary: This rule detects specific strings associated with the "dext module" from Project Sauron, which is a sophisticated piece of malware reported by Kaspersky. The strings of interest include phrases related to the processing and manipulation of DNS names and data lengths, indicating activities such as assembling DNS names into data strings, removing length checks, and randomizing data lengths.
  Updated-Date: '2024_08_07'
APT_Project_Sauron_kblogi_module:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b249bfb212a3105a5e7b8799cab2dd76
  Ruleset: securityonion-yara
  Summary: This rule detects strings associated with the kblogi module, which has been linked to Project Sauron as reported by Kaspersky. The kblogi module involves functionalities such as injecting processes using a name or process ID by default, converting logs from files to text mode, and defining a maximum running time in seconds. The presence of any of these specific strings is used to identify the module.
  Updated-Date: '2024_08_07'
APT_Proxy_Malware_Packed_dev:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4adf28a450e14bee8fe9189edc0b2dfc
  Ruleset: securityonion-yara
  Summary: This rule detects APT malware associated with a proxy, identified by specific strings related to the PECompact2 packer, the presence of "[LordPE]" text, and a filename "steam_ker.dll".
  Updated-Date: '2024_08_07'
APT_PupyRAT_PY:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 38b9ca2f3303d26be63bcb438583110f
  Ruleset: securityonion-yara
  Summary: This rule detects the Pupy Remote Access Trojan (Pupy RAT), an advanced persistent threat typically used for covert remote administration. The rule identifies specific string patterns and an opcode sequence associated with Pupy RAT, including references to DLL injection methods and error messages from the malware's operations. These string patterns include phrases related to reflective DLL injection, import errors for Pupy's built-in modules, and Python scripting for executing compressed code. The rule conditions check for signatures in executable files, focusing on specific characteristics indicative of Pupy RAT activity.
  Updated-Date: '2024_08_07'
APT_RANCOR_DDKONG_Malware_Exports:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0295623c98e29be61cd6eab2e6b71559
  Ruleset: securityonion-yara
  Summary: 'This rule detects the DDKONG malware by identifying a specific set of exported functions within a PE file. The file must have three exports: "ServiceMain," "Rundll32Call," and "DllEntryPoint." Additionally, the PE file should start with the standard "MZ" header and exclusively contain these three exported functions. This configuration is characteristic of the DDKONG malware, which has been linked to targeted attacks in Southeast Asia.'
  Updated-Date: '2024_08_07'
APT_RANCOR_JS_Malware:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d0e62ba0a06e562af199e88e0ebc0230
  Ruleset: securityonion-yara
  Summary: This rule detects Rancor malware, which is identified by specific strings within a JavaScript file that indicate malicious activities such as creating and running tasks using the Windows Script Host. The rule looks for indicators such as command strings to run a Visual Basic script, and the creation of scheduled tasks or execution of commands via Wscript.Shell. These behaviors are characteristic of the Rancor malware group targeting Southeast Asia by using various malware families like Plaintee and DDKong.
  Updated-Date: '2024_08_07'
APT_RANCOR_PLAINTEE_Malware_Exports:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b9ec756bd6e8b0d4aeb142af33942365
  Ruleset: securityonion-yara
  Summary: This rule detects the PLAINTEE malware by identifying a Portable Executable (PE) file with specific characteristics. The file starts with the magic number 0x5a4d, indicating it is a valid PE file, and contains exactly three export functions named "Add," "Sub," and "DllEntryPoint."
  Updated-Date: '2024_08_07'
APT_RANCOR_PLAINTEE_Variant:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 82184d2073f752260ced7b5635f41692
  Ruleset: securityonion-yara
  Summary: This rule detects the PLAINTEE malware by searching for specific strings within files smaller than 100KB in size that begin with the 'MZ' signature commonly associated with executable files. The strings it looks for include "payload.dat", "temp_microsoft_test.txt", a Windows Registry command pattern, and phrases involving "helloworld" and plugin reception types.
  Updated-Date: '2024_08_07'
APT_RU_Sandworm_PY_May20_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ecca1c5db8dedb1aa150e5a9976c693a
  Ruleset: securityonion-yara
  Summary: This rule detects the Sandworm Python loader, specifically designed to identify a Python script characterized by certain strings that indicate suspicious behavior. It looks for a User-Agent string mimicking a Windows 7 browser and an HTTP URL opening command. Additionally, it checks for the presence of the `urllib` library import statement. The rule triggers if the file starts with "mi" (hex 0x6d69), is less than 1KB in size, and meets the string pattern conditions.
  Updated-Date: '2024_08_07'
APT_RU_Sandworm_PY_May20_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 916aaeca88377c43c54d37c50db81248
  Ruleset: securityonion-yara
  Summary: This rule detects a Python loader associated with the Sandworm APT group. It identifies specific strings within the script, such as the import statement for the `sys`, `re`, and `subprocess` modules, and a user agent resembling an old version of Internet Explorer on Windows. Additionally, it looks for particular command sequences indicating communication with a server and a check for processes related to Little Snitch, a macOS security tool. The rule applies to files smaller than 2KB that start with the magic number 0x6d69.
  Updated-Date: '2024_08_07'
APT_SH_CodeCov_Hack_Apr21_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 789bde4c11708526d32d013a942a1a92
  Ruleset: securityonion-yara
  Summary: This rule detects a manipulated version of the Codecov bash uploader tool compromised by an unknown actor in March or April 2021. The detection criteria include specific strings related to the global report uploading functionality and the use of a cURL command with particular options, ensuring the file size is below 70KB.
  Updated-Date: '2024_08_07'
APT_SH_ESXi_Backdoor_Dec22:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8c0528716da13f090afeee5098ef4621
  Ruleset: securityonion-yara
  Summary: This rule detects a malicious script tailored for ESXi servers. It identifies the presence of commands that manipulate system files and run a Python script (`vmtools.py`) without termination, suggesting an attempt to maintain persistent, unauthorized access on the targeted server.
  Updated-Date: '2024_08_07'
APT_SH_Sandworm_Shell_Script_May20_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1d5f2883bb0b15b8275a9e1b6f70a7ca
  Ruleset: securityonion-yara
  Summary: This rule detects a shell script used by the Sandworm group in an attack against the Exim mail server. It identifies specific patterns within the script, such as commands to grant all privileges to a user named 'mysqldb', import and decode base64-encoded data in Python, modify SSH configurations to enable password authentication and root login, and add a new user with root privileges. Additionally, it looks for scripts interacting with URLs, altering SSH keys and user permissions, and preparing certain MySQL configurations. The script also includes patterns for inserting cron jobs, specifying an SSH path, creating database users, and running MySQL with particular initialization files. The script's file size must be under 20KB, and it must begin with a specific byte sequence.
  Updated-Date: '2024_08_07'
APT_Sandworm_CyclopsBlink_config_identifiers:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b36c802134882d7c32514a80c391f718
  Ruleset: securityonion-yara
  Summary: This rule detects specific identifiers within the configuration data of Cyclops Blink malware, used by the Sandworm group. It recognizes initial characters in configuration parameters, RSA public keys, X.509 certificates, and RSA private keys, facilitating the identification of this malware's distinctive data structures.
  Updated-Date: '2024_08_07'
APT_Sandworm_CyclopsBlink_core_command_check:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d8ab66fbe47fb934b72c3817c62b61e1
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of Cyclops Blink malware, specifically looking for code bytes that test the command ID sent to its core component. It identifies whether the command ID matches one of the values 0x7, 0xa, 0xb, 0xc, or 0xd within the malware's code.
  Updated-Date: '2024_08_07'
APT_Sandworm_CyclopsBlink_default_config_values:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 61765b24108eec2e4d58af7ca180a3a5
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of specific code bytes that set default configuration values for the Cyclops Blink malware, which is linked to the Sandworm threat group. The identified configuration values include several hexadecimal settings such as 0x19, 0x18000, 0x4000, 0x10b, and 0x2711. These specific values are indicative of Cyclops Blink being installed or running on a system, as they are unique to its configuration setup.
  Updated-Date: '2024_08_07'
APT_Sandworm_CyclopsBlink_handle_mod_0x51_command:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9b92dd51f53c71609525a33f4f0c7573
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of specific byte sequences used to check commands sent to module ID 0x51, as well as notable strings associated with the Cyclops Blink malware update process. It identifies these patterns by looking for specific command ID conditions, legitimate WatchGuard device configuration file paths, and arguments used in remounting the root filesystem as either read-write or read-only. The rule ensures detection by verifying the presence of these patterns in the targeted binary file.
  Updated-Date: '2024_08_07'
APT_Sandworm_CyclopsBlink_handle_mod_0xf_command:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: afad479d3c5828fb80828aea09a998cb
  Ruleset: securityonion-yara
  Summary: This rule detects specific code bytes associated with the Cyclops Blink malware, identified as a replacement for VPNFilter. It focuses on recognizing various control flags for module ID 0xf, including flags that test the execute, add module, run as shellcode, and upload functionalities. Additionally, the rule identifies a particular format string used during file content uploads.
  Updated-Date: '2024_08_07'
APT_Sandworm_CyclopsBlink_modified_install_upgrade:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d02236baccc753c6f20735587dcea757
  Ruleset: securityonion-yara
  Summary: This rule detects notable strings within the modified "install_upgrade" executable embedded in the Cyclops Blink malware. It identifies specific format strings for temporary filenames and hard-coded keys used for initializing HMAC calculations. The rule also includes file paths for storing patched firmware images and references the legitimate "install_upgrade" executable. Additionally, it detects IOCTL codes related to loop devices and a specific HMAC record signature.
  Updated-Date: '2024_08_07'
APT_Sandworm_CyclopsBlink_module_initialisation:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 10259abd4746e5a22795811fac446ac1
  Ruleset: securityonion-yara
  Summary: This rule detects the specific code bytes used to initialize modules within Cyclops Blink, a type of malware attributed to the Sandworm APT group. The identified sequence of bytes reflects the process where the module returns its ID to the caller.
  Updated-Date: '2024_08_07'
APT_Sandworm_CyclopsBlink_notable_strings:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c13cea11a95434ad65a9a7dd058a9976
  Ruleset: securityonion-yara
  Summary: This rule detects notable strings within the Cyclops Blink malware executable, associated with the APT group Sandworm. It identifies process names the malware masquerades as, DNS queries over SSL to resolve command-and-control server addresses, and iptables commands used by the malware. It also looks for format strings tied to system reconnaissance, file paths for testing access to the device's filesystem, implant configuration paths, and default file download paths. This comprehensive detection aids in identifying the specific behaviors and configurations of Cyclops Blink malware on infected systems.
  Updated-Date: '2024_08_07'
APT_Sandworm_InitFile_May20_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ebe91991f2dd25d4547dbc9fd87125b8
  Ruleset: securityonion-yara
  Summary: This rule detects a malicious MySQL initialization script deployed by the Sandworm group on compromised machines. The script includes commands to grant all privileges on the database to a specific local user and to create a new user identified by a specific string, indicating unauthorized database access and potential control over the database server.
  Updated-Date: '2024_08_07'
APT_Sandworm_Keywords_May20_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 36cda7bcb79c084fc0f94d62e44dcf73
  Ruleset: securityonion-yara
  Summary: This rule detects commands used by the Sandworm group to exploit the critical vulnerability CVE-2019-10149 in the Exim email transfer agent. It looks for specific strings in files that indicate the execution of unauthorized commands or the download of malicious content via 'wget'.
  Updated-Date: '2024_08_07'
APT_Sandworm_SSHD_Config_Modification_May20_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c79345e034601809d33fca89c71373d7
  Ruleset: securityonion-yara
  Summary: This rule detects modifications made to the SSH configuration file on compromised machines by the Sandworm group. Specifically, it identifies the presence of the entry "AllowUsers mysql_db" and ensures that the configuration includes the term "ListenAddress". This combination of indicators suggests unauthorized access manipulation by Sandworm actors. The rule applies to files that are less than 10KB in size.
  Updated-Date: '2024_08_07'
APT_Sandworm_SSH_Key_May20_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9a60003b2614940a2b8a92b4484f69d0
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific SSH key associated with the Sandworm threat actor group on compromised machines. Sandworm, known for exploiting vulnerabilities in systems, particularly targets issues in the Exim transfer agent. The rule identifies this malicious SSH key by matching its distinct string signature within files smaller than 1000KB.
  Updated-Date: '2024_08_07'
APT_Sandworm_User_May20_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7786d00eba65d3916b46019343d30869
  Ruleset: securityonion-yara
  Summary: This rule detects a malicious user added by the Sandworm malware on compromised machines. It searches for specific user account strings within files smaller than 4KB to identify unauthorized user entries that indicate a compromise.
  Updated-Date: '2024_08_07'
APT_Script_AUS_4:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d4671437feb87184866a4e3c2ce73d16
  Ruleset: securityonion-yara
  Summary: This rule detects a script associated with the compromise of the Australian Parliament House network. It identifies specific strings within scripts, such as the creation of a mutex named "teX23stNew", manipulation of file paths involving "Microsoft\\mm.accdb" within the appdata directory, and the declaration of variables for file paths. The script may also contain commented out message box code and specific commands for saving and closing in database-related operations. The detection is based on file size constraints and the presence of at least one of these distinct strings.
  Updated-Date: '2024_08_07'
APT_SideWinder_NET_Loader_Aug_2020_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4f096895ab90bc01ee477327acdd23ff
  Ruleset: securityonion-yara
  Summary: This rule detects a .NET loader used by the SideWinder group as of August 2020. Specifically, it looks for the presence of certain strings within a file, such as "DUSER.dll," which must be a full word and in wide character format. Other indicators include base64 encoded strings like "UHJvZ3JhbQ==" (which decodes to 'Program') and "U3RhcnQ=", as well as strings like ".tmp           ", "FileRipper," and "copytight @". The rule is designed to identify files smaller than 4KB that start with the "MZ" header, indicating an executable file format.
  Updated-Date: '2024_08_07'
APT_TA18_149A_Joanap_Sample1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 58c9e47f4c1941978334723c7b255cf0
  Ruleset: securityonion-yara
  Summary: This rule detects malware associated with the TA18-149A report by US-CERT, particularly the Joanap malware. It identifies specific strings in executable files, such as "cmd.exe /q /c net share adnim$," "\\\\%s\\adnim$\\system32\\%s," "SMB_Dll.dll," "%s User or Password is not correct!," and "perfw06.dat." Additionally, it checks if the import hash of the portable executable (PE) file matches a known hash value and confirms the file is less than 300KB in size to corroborate the presence of this malware.
  Updated-Date: '2024_08_07'
APT_TA18_149A_Joanap_Sample2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c16174d56d40c7d5e0caf8e25ed12bc7
  Ruleset: securityonion-yara
  Summary: This rule detects malware associated with the TA18-149A report by US-CERT, specifically identifying the Joanap sample. It looks for specific executable and Dynamic Link Library (DLL) file paths within the system root directory, such as "svchost.exe" running with particular parameters and the presence of "Wmmvsvc.dll" and "scardprv.dll" files. The rule triggers when the file header matches a specific pattern and the file size is less than 600KB, either by identifying a specific import hash or the presence of certain strings.
  Updated-Date: '2024_08_07'
APT_TA18_149A_Joanap_Sample3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: bc6f56b33f6d6d2d4dd00e08900b3709
  Ruleset: securityonion-yara
  Summary: This rule detects the Joanap malware associated with the TA18-149A report by US-CERT. It identifies malicious files by checking for specific string patterns within the file and ensuring certain conditions are met. The strings include references to "mssvcdll.dll", "https://www.google.com/index.html", "LOGINDLG", "rundll", and formatted string patterns involving slashes and digits. The rule applies additional checks, such as verifying the PE header value, file size being under 200KB, and a specific PE import hash, to confirm the presence of the malware.
  Updated-Date: '2024_08_07'
APT_Thrip_Sample_Jun18_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8e52cef1f5fb204c3a9f13ea40563670
  Ruleset: securityonion-yara
  Summary: This rule detects a malicious sample associated with the Thrip cyber-espionage group, as reported by Symantec. It looks for specific indicators such as the presence of the strings "idocback.dll," "constructor or from DllMain," "appmgmt," and "chksrv" within files. The rule triggers on files with a PE header (indicated by a magic number of 0x5a4d) and a file size of less than 200KB that contain all these strings, identifying them as potentially harmful and linked to Thrip's cyber activities targeting sectors like satellite, telecom, and defense.
  Updated-Date: '2024_08_07'
APT_Thrip_Sample_Jun18_10:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5a595f8982c90f6fcac54d9d9bc61fb6
  Ruleset: securityonion-yara
  Summary: This rule detects a specific malware sample associated with the Thrip cyber-espionage group, as reported by Symantec. The rule targets executable files beginning with the "DOS mode" message, specifically aiming at files smaller than 200KB. Additionally, the presence of "svchost.dll" and references to code constructors or DllMain functions are identifiers in the rule's detection logic.
  Updated-Date: '2024_08_07'
APT_Thrip_Sample_Jun18_11:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a0c71d8f0e5385cf674fa2e89ee70a5c
  Ruleset: securityonion-yara
  Summary: This rule detects a sample associated with the Thrip cyber-espionage group, as reported by Symantec. The malware seems to use specific file paths and strings, including references to files in the AppData and system32 directories, and exhibits a distinctive import hash. It targets files smaller than 100KB and starts with the DOS header identifier 0x5a4d. This rule helps identify the malware components used in Thrip's attacks on satellite, telecom, and defense sectors.
  Updated-Date: '2024_08_07'
APT_Thrip_Sample_Jun18_12:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1f9cdd2728cf1ccbca80e7d1b5cc8aa0
  Ruleset: securityonion-yara
  Summary: This rule detects a specific sample associated with the Thrip cyber espionage group, as reported by Symantec. It identifies a file by matching various strings related to command-line execution, logging, DLL usage, and common executable names such as `cmd.exe`, `gupdate.exe`, and `wusa.exe`. The rule conditions also specify that the file must start with the signature `0x5a4d` and be less than 100KB in size, ensuring precise detection of the malicious sample.
  Updated-Date: '2024_08_07'
APT_Thrip_Sample_Jun18_13:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6655c54e568307f000fbb5afeeb10fbe
  Ruleset: securityonion-yara
  Summary: "This rule detects a malware sample associated with the APT group Thrip, as documented by Symantec. The detection focuses on identifying specific strings within the malware, such as a User-Agent string mimicking Internet Explorer on Windows, XML elements containing the term \u201Cpassword\u201D and specifying the value \u201Cqqtorspy,\" a registry path referencing \"SOFTWARE\\\\QKitTORSPY,\" and a network communication target \"ipecho.net.\" The rule also includes conditions based on the file's PE header and size, as well as the import hash (imphash) value of the executable. The presence of these characteristics helps identify and mitigate malware used by Thrip to target satellite, telecommunications, and defense sectors."
  Updated-Date: '2024_08_07'
APT_Thrip_Sample_Jun18_14:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4d36946f2bf851165d1156f23c2ab145
  Ruleset: securityonion-yara
  Summary: This rule detects a malicious software sample associated with the Thrip cyber-espionage group, as reported by Symantec. It identifies the malware by looking for specific characteristics, including strings related to system processes, dynamic link libraries (DLLs), and registry modifications. The malware sample is characterized by its attempts to execute under the Windows "svchost.exe" process, use of a DLL named "spdirs.dll," and messages indicative of installation services and registry alterations. The detection is further refined by confirming that the file is a Portable Executable (PE) with specific export functions and limited to a size under 200KB.
  Updated-Date: '2024_08_07'
APT_Thrip_Sample_Jun18_15:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 98f8a4cb1fffc9cb88f7f429b87c181d
  Ruleset: securityonion-yara
  Summary: This rule detects a specific malware sample mentioned in a report by Symantec related to the Thrip cyber espionage group. It identifies executable files smaller than 200KB with a Windows executable header and matches certain string patterns indicative of malicious activity, such as commands involving cmd.exe, CryptBase.dll, gupdate.exe, and wusa.exe, along with specific formatting patterns for DLL and CAB files. Additionally, it checks for a unique import hash associated with the malware.
  Updated-Date: '2024_08_07'
APT_Thrip_Sample_Jun18_16:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ddb14b2645b1ffa18eee867e17364e03
  Ruleset: securityonion-yara
  Summary: This rule detects a specific malicious sample associated with the Thrip cyberespionage group, as reported by Symantec. It identifies the presence of the sample by checking for specific strings within the file such as error messages and unique phrases, or by evaluating the Import Hash (IMPHASH) of the PE file. The rule triggers if the file has a "MZ" header (indicating a valid executable) and is smaller than 200KB.
  Updated-Date: '2024_08_07'
APT_Thrip_Sample_Jun18_17:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ca436faeea2dbd723901324034cd2583
  Ruleset: securityonion-yara
  Summary: This rule detects a specific sample associated with the Thrip cyber espionage group, which targets satellite, telecom, and defense entities. Key indicators include file paths, strings related to PnP device drivers, and specific PDB file references. The conditions for detection are a particular file signature and size, along with the presence of defined strings within the binary code.
  Updated-Date: '2024_08_07'
APT_Thrip_Sample_Jun18_18:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5a3933521a7323f8c2d0ee291a51478a
  Ruleset: securityonion-yara
  Summary: This rule detects a malware sample documented in a report by Symantec, targeting organizations in sectors such as satellite, telecommunications, and defense. It identifies specific hash values associated with the malware and includes multiple strings that are indicative of its presence. These strings reference various Windows operating systems and functionalities, such as IME process keys, specific keyboard keys on particular Windows versions, a failed LoadLibraryA() function, unknown virtual-key codes, and a computer sleep key. The rule applies conditions like matching the PE file signature and ensuring the file size is under 200KB to confirm a positive detection.
  Updated-Date: '2024_08_07'
APT_Thrip_Sample_Jun18_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e42ab67ed35515cd6312aebe7d17bd51
  Ruleset: securityonion-yara
  Summary: This rule detects a specific malware sample associated with the Thrip cyber espionage group, as detailed in a Symantec report. The detection criteria include the presence of a PE file header, the file being less than 60KB in size, and the inclusion of particular file path strings such as "C:\\WINDOWS\\system32\\sysprep\\cryptbase.dll" and "C:\\WINDOWS\\system32\\cmd.exe," as well as the string "ProbeScriptFint."
  Updated-Date: '2024_08_07'
APT_Thrip_Sample_Jun18_3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 34d0fde2d99da47f6daf9798e0944544
  Ruleset: securityonion-yara
  Summary: 'This rule detects a specific sample associated with the Thrip cyber espionage group, as detailed in a report by Symantec. The rule identifies the sample based on the presence of two specific strings: the path to "cmd.exe" in the SysNative directory and the path to "cryptbase.dll" within the sysprep directory. Additionally, the file must be a PE file, indicated by its "MZ" header, and be less than 60KB in size.'
  Updated-Date: '2024_08_07'
APT_Thrip_Sample_Jun18_4:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 37e1a0cf00aa4bb594afdc893ba4df90
  Ruleset: securityonion-yara
  Summary: This rule detects a malicious sample associated with the APT group Thrip, as reported by Symantec. The identified indicators include specific file paths, process names, and strings commonly observed within the malicious executable. Notably, the rule looks for strings such as "ProcessName No Access," "Hwnd of Process NULL," and timestamp formats like "Time:%d-%d-%d %d:%d:%d." Additionally, it checks for the presence of file paths such as "\system32\wbem\tmf\caches_version.db" and "\info.config." The rule applies to executables smaller than 400KB and starts with the "MZ" file signature, a typical characteristic of Windows PE files.
  Updated-Date: '2024_08_07'
APT_Thrip_Sample_Jun18_5:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5e589dc1a5404790bf1e0ddf61c5a504
  Ruleset: securityonion-yara
  Summary: This rule detects a specific file related to the Thrip cyber espionage campaign reported by Symantec. The file, identified by its particular hash value, is characterized by the presence of specific strings like "c:\windows\USBEvent.exe" and "c:\windows\spdir.dat". The targeted file is a Windows executable with a size less than 200KB. Thrip's activities include targeting satellite, telecom, and defense sectors.
  Updated-Date: '2024_08_07'
APT_Thrip_Sample_Jun18_6:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: dc90abec3e2215c4ca871f9e7e596410
  Ruleset: securityonion-yara
  Summary: This rule detects a specific malware sample associated with the APT group Thrip, as reported by Symantec. It identifies the presence of "C:\Windows\system32\Instell.exe" within files smaller than 100KB that start with the hexadecimal value 0x5a4d.
  Updated-Date: '2024_08_07'
APT_Thrip_Sample_Jun18_7:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c292cd6668cd0c092ea0e729af632dbe
  Ruleset: securityonion-yara
  Summary: This rule detects a specific sample related to the Thrip cyber espionage group, as reported by Symantec. It identifies the malware through the presence of a particular string "C:\\runme.exe" within files that are less than 60KB in size and start with the "MZ" header, which is typical for executable files. The rule aims to catch files associated with malicious activities targeting satellite, telecom, and defense entities.
  Updated-Date: '2024_08_07'
APT_Thrip_Sample_Jun18_8:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1e4e92dcbf353e78a303bbbe545d5b4a
  Ruleset: securityonion-yara
  Summary: This rule detects a specific malware sample identified in Symantec's Thrip report targeting satellite, telecom, and defense sectors. The detection is based on the presence of particular strings used in the malware's code, including commands invoking 'cmd.exe', the creation of a new 'WScript.Shell' object, and manipulation of environment variables through 'ExpandEnvironmentStrings'. The sample also has a restrictive file size, being less than 10 kilobytes.
  Updated-Date: '2024_08_07'
APT_Thrip_Sample_Jun18_9:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9b2c964be50e56466829863a6353a289
  Ruleset: securityonion-yara
  Summary: This rule detects a malicious sample associated with the Thrip cyber espionage group, as reported by Symantec. It identifies executable files smaller than 100KB with specific import hash values, which indicates suspicious activity linked to Thrip's attacks on satellite, telecom, and defense sectors.
  Updated-Date: '2024_08_07'
APT_Tick_HomamDownloader_Jun18:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: da20f4318c362f77458ce54cc0275f82
  Ruleset: securityonion-yara
  Summary: This rule detects the HomamDownloader malware associated with the Tick group, known for incidents involving weaponized USB drives. The rule identifies specific command-line activities and executable names, particularly "Mstray.exe" and "msupdata.exe," common in the malware's operation. It also looks for specific registry path strings related to Windows' startup processes and characteristics of HTTP requests mimicking Internet Explorer. The malware aims to compromise air-gapped critical systems by using these distinct indicators.
  Updated-Date: '2024_08_07'
APT_Tick_Sysmon_Loader_Jun18:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f534b800eaf4e2de4a8073a0f0acb051
  Ruleset: securityonion-yara
  Summary: This rule detects a Sysmon Loader associated with a cyber incident involving the Tick group's weaponized USB strategy. It examines executable files under 200KB in size, specifically targeting those that match a particular import hash or contain characteristic strings such as references to 'SysMonitor_3A2DCB47', 'msxml.exe', 'device monitor', or Windows system paths and logs like "%USERPROFILE%" and "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\run".
  Updated-Date: '2024_08_07'
APT_Trojan_Linux_REDFLARE_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 446f8d4ee2958e9db717e30180440369
  Ruleset: securityonion-yara
  Summary: This rule detects a specific Linux trojan known as REDFLARE. It identifies the malware by looking for particular strings within an executable file format, including "find_applet_by_name," "bb_basename," "hk_printf_chk," "runCommand," and "initialize," ensuring that the file matches all these characteristics.
  Updated-Date: '2024_08_07'
APT_Trojan_Win_REDFLARE_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 851af8463980ce2a9e3542f15e153d27
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific APT Trojan known as REDFLARE targeting Windows systems. It identifies the malware by checking for the executable's MZ header and PE signature and looking for particular strings within the file such as "initialize," "runCommand," "stop," "fini," "VirtualAllocEx," and "WriteProcessMemory." These strings are indicative of the behavior and functionality associated with this Trojan, such as memory allocation and inter-process communication.
  Updated-Date: '2024_08_07'
APT_Trojan_Win_REDFLARE_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1e8f5385e3fc8e15b59c847638e8d9fa
  Ruleset: securityonion-yara
  Summary: 'This rule detects FireEye''s REDFLARE tool by identifying specific terms such as "initialize," "getData," "putData," "fini," and "Cookie: SID1=%s" within files that have a PE structure with specific header values.'
  Updated-Date: '2024_08_07'
APT_Trojan_Win_REDFLARE_3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 19aa344ec979de68bb730dbad4b8d65d
  Ruleset: securityonion-yara
  Summary: This rule detects a specific variant of the REDFLARE Trojan targeting Windows systems. The detection is based on certain strings and patterns in the binary file. It looks for the presence of functions related to graphical operations such as "CreateCompatibleBitmap" and "BitBlt," as well as the string "runCommand." Additionally, the rule checks the file header to ensure it matches the PE (Portable Executable) format typically used for Windows executables. This combination of criteria helps identify the malicious software based on its unique characteristics and behaviors.
  Updated-Date: '2024_08_07'
APT_Trojan_Win_REDFLARE_4:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f67cc2c042d13d6445b13b450f6aad4c
  Ruleset: securityonion-yara
  Summary: This rule detects the REDFLARE Trojan aimed at the Windows operating system. It identifies the presence of specific functions such as "LogonUserW," "ImpersonateLoggedOnUser," and "runCommand." Additionally, the rule searches for a particular byte sequence related to user logon activities. The conditions check for a PE file format by validating the DOS header (0x5A4D) and the PE header (0x00004550), ensuring all specified strings or sequences are present.
  Updated-Date: '2024_08_07'
APT_Trojan_Win_REDFLARE_5:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 723c7232577db979578ed5b3613ee95e
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the REDFLARE Trojan, which is an advanced persistent threat (APT) targeting Windows operating systems. It specifically identifies the use of certain Windows API functions such as "AdjustTokenPrivileges," "LookupPrivilegeValueW," and "ImpersonateLoggedOnUser" that are typically leveraged by malware for privilege escalation and user impersonation. Additionally, the rule checks for a specific sequence of byte patterns in the binary, indicative of token stealing operations. The detection is confirmed if the file's headers correspond to a valid Portable Executable (PE) format.
  Updated-Date: '2024_08_07'
APT_Trojan_Win_REDFLARE_6:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2b15186d7893cb58c1052625ee329f57
  Ruleset: securityonion-yara
  Summary: This rule detects the Redflare Trojan, a type of malware. It identifies the Trojan by searching for specific strings like "RevertToSelf," "Unsuccessful," "Successful," "runCommand," and "initialize" within the file. Additionally, it verifies that the file header matches the standard executable file signature.
  Updated-Date: '2024_08_07'
APT_Trojan_Win_REDFLARE_7:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0433020b906ddaad2b22d9fa13ffb108
  Ruleset: securityonion-yara
  Summary: This rule detects the APT (Advanced Persistent Threat) Trojan named REDFLARE version 7. The detection focuses on specific strings and patterns within the executable file, such as "initialize," "getData", "putData", "fini," and "NamedPipe." It also identifies a specific sequence of bytes related to named pipes, which are used for inter-process communication. The rule applies to files beginning with the "MZ" header (indicating a Windows PE executable format) and verifies the presence of another marker at a certain offset, aligning with the structure of a standard Windows executable file.
  Updated-Date: '2024_08_07'
APT_Trojan_Win_REDFLARE_8:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2df1a694fcb240d745e5f8e544faac1b
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the REDFLARE malware, which is associated with an advanced persistent threat (APT) trojan. The rule identifies specific strings and patterns within an executable file, such as "PSRunner.PSRunner," "CorBindToRuntime," "ReportEventW," "InvokePS," "runCommand," and "initialize." Additionally, it looks for a particular sequence of bytes, indicating malicious activity. The condition confirms the executable begins with the "MZ" and "PE" headers, typical of Windows executables, and matches all specified strings and patterns to identify the malware.
  Updated-Date: '2024_08_07'
APT_TurlaMosquito_MAL_Oct22_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e029a6921d4da89f2c98c1ae7b6ba18b
  Ruleset: securityonion-yara
  Summary: This rule detects Turla Mosquito malware by identifying specific characteristics within the file. It searches for strings such as "Logger32.dll" and error messages like "Unsupported drive!!!", as well as unique paths and command formats. Additionally, the rule looks for specific byte sequences in the file. The condition for triggering detection includes checking for a certain file signature, verifying the file size is less than 2000KB, and matching either a particular PE import hash or all specified strings and byte patterns.
  Updated-Date: '2024_08_07'
APT_Turla_Agent_BTZ_Gen_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8037ed490b4fd9862cb4eb5a6232d010
  Ruleset: securityonion-yara
  Summary: This rule detects the Turla Agent.BTZ malware, known for its involvement in cyber espionage activities. The rule identifies files smaller than 500KB with a specific Portable Executable (PE) header and import hash. The target malware exhibits characteristics such as the creation of specific mutexes, manipulation of system files like `win.com`, detailed formatting of command identifiers and logs, and running specialized instructions. Additionally, it checks for the presence of certain string patterns in the executable that are indicative of the Agent.BTZ's behavior and structure.
  Updated-Date: '2024_08_07'
APT_UA_Hermetic_Wiper_Artefacts_Feb22_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9f117d3bbf00021ac7e0d8b234be4f64
  Ruleset: securityonion-yara
  Summary: This rule detects artifacts associated with Hermetic Wiper malware intrusions, which target systems using specific file paths, PowerShell commands, and network activities. It identifies malicious activities such as the use of `rundll32` to execute certain DLL functions, the presence of log files in suspicious locations, and the use of PowerShell scripts to bypass execution policies and download files. The rule also checks for specific known patterns like epoch timestamps and administrative share access attempts, while excluding benign HTML markers to minimize false positives.
  Updated-Date: '2024_08_07'
APT_UA_Hermetic_Wiper_Feb22_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e35505fee2811a42a8386c4243ef0f03
  Ruleset: securityonion-yara
  Summary: This rule detects the Hermetic Wiper malware, a destructive program targeting windows systems. It identifies characteristic strings and code patterns within the malware, such as specific sequences present in physical drive paths and system log files, as well as unique hexadecimal code indicative of its operations. It checks for files smaller than 400KB, looking for key signatures to confirm the presence of Hermetic Wiper. This malware is known for corrupting data to render systems inoperable, particularly targeting systems in Ukraine as noted in reports.
  Updated-Date: '2024_08_07'
APT_UA_Hermetic_Wiper_Scheduled_Task_Feb22_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 560a6af2fe0159210a2adf757975e389
  Ruleset: securityonion-yara
  Summary: This rule detects a scheduled task pattern used in cyber intrusions involving the Hermetic Wiper malware. Hermetic Wiper is known for its destructive capabilities, targeting systems primarily by deleting files and causing operational disruptions. The rule identifies specific strings, such as tasks involving the system drive's temp directory, command executions redirecting output, and file movement commands, to pinpoint the presence of this malware.
  Updated-Date: '2024_08_07'
APT_UNC1151_WindowsInstaller_Silent_InstallProduct_MacroMethod:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 249bd3c1502f7f32de746753608b15b9
  Ruleset: securityonion-yara
  Summary: This rule detects a specific macro method used in Windows Installer to facilitate the silent installation of a product, commonly associated with malicious activity by the state actor group referred to as APT-UNC1151. The key indicators for this rule include a particular document header and the presence of specific script strings that check the user interface level, create an instance of the Windows Installer object, and attempt to install a product from a provided URL.
  Updated-Date: '2024_08_07'
APT_UNC2447_BAT_Runner_May21_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f776c182d04920e3bad9fbd33c4311e8
  Ruleset: securityonion-yara
  Summary: This rule detects batch script runners associated with the UNC2447 campaign, a sophisticated financial threat. The rule specifically identifies the use of PowerShell commands within batch scripts that decode and execute base64-encoded files named "wwansvc.txt".
  Updated-Date: '2024_08_07'
APT_UNC2447_MAL_RANSOM_HelloKitty_May21_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 48bb16336e433f492bd539191f38c71b
  Ruleset: securityonion-yara
  Summary: This rule detects HelloKitty ransomware samples associated with the UNC2447 campaign. The malware is identifiable by specific code and text patterns, including unique hexadecimal sequences and certain string literals like "select * from Win32_ShadowCopy," "bootfont.bin," "DECRYPT_NOTE.txt," and ".onion." It further identifies ransomware characteristics through specific operations in the code, such as manipulating registers and performing bitwise operations. The identified files must have a PE file signature and be less than 800KB in size.
  Updated-Date: '2024_08_07'
APT_UNC2447_MAL_RANSOM_HelloKitty_May21_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: cf335d70481e920b37816e94b09f1ed9
  Ruleset: securityonion-yara
  Summary: This rule detects samples of the HelloKitty Ransomware associated with the UNC2447 campaign. The rule identifies specific code patterns and strings within an executable file, such as "HelloKittyMutex," references to a "read_me_lkd.txt" file, and a command to delete a file after executing a ping command. Additionally, it looks for certain hexadecimal sequences that correspond to typical operations performed by the ransomware. The file must have a specific signature and size constraint to trigger a detection.
  Updated-Date: '2024_08_07'
APT_UNC2447_MAL_SOMBRAT_May21_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f58a1b3d5e93978a9358342e9e1d3b24
  Ruleset: securityonion-yara
  Summary: This rule detects SombRAT samples associated with the UNC2447 campaign. It identifies specific strings such as "plugin64_", "0xUnknown", "b%x.%s", and "/news". Additionally, it looks for a particular sequence of bytes (hexadecimal patterns) that include service identification and operational codes such as "66 90 0f b6 45 80..." and "48 8b d0 66 0f 6f 05...". The rule ensures that files match these patterns and are less than 3000KB in size, initiating detection if these conditions are met.
  Updated-Date: '2024_08_07'
APT_UNC2447_PS1_WARPRISM_May21_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5f734a9fedd537c3f2b2c43310e296af
  Ruleset: securityonion-yara
  Summary: This rule detects WARPRISM PowerShell script samples associated with the UNC2447 campaign. It identifies specific strings and patterns within the script, including references to the PowerShell execution path, calls to kernel32.dll for memory allocation, and the use of inter-process communication and process start mechanisms. The script's file size is restricted to be less than 5000KB, ensuring that the rule targets appropriately sized PowerShell scripts.
  Updated-Date: '2024_08_07'
APT_UNC4736_NK_MAL_TAXHAUL_3CX_Apr23_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3a3804d66a1e2589954dcae015e6a572
  Ruleset: securityonion-yara
  Summary: This rule detects TAXHAUL, also known as TxRLoader, malware, which was utilized in the 3CX compromise attributed to UNC4736. The detection relies on specific hexadecimal patterns within the executable file, which starts with the "MZ" header indicating a Windows PE file.
  Updated-Date: '2024_08_07'
APT_WEBSHELL_HAFNIUM_SecChecker_Mar21_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 09cecc47c53b7fe5f96155071e21d50a
  Ruleset: securityonion-yara
  Summary: This rule detects the HAFNIUM SecChecker webshell, a malicious code snippet used by cyber attackers. The rule identifies specific strings within the code, such as checks for the existence of particular security software executables (e.g., FireEye xagt.exe and Cisco csfalconservice.exe), and matches files with a particular size limit (less than 1KB) and signature. The presence of these indicators in a web file suggests the webshell's activity within the compromised system.
  Updated-Date: '2024_08_07'
APT_WEBSHELL_PHP_Sandworm_May20_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 398c86eb352699a1c26ef812f84ce0db
  Ruleset: securityonion-yara
  Summary: This rule detects a specific PHP webshell used by the Sandworm group, identified by the presence of a GIF header followed by PHP code. Notably, it checks for a file with the string "GIF89a <?php $" at the beginning and the usage of the "str_replace(" function within the file, provided the file size is less than 10KB.
  Updated-Date: '2024_08_07'
APT_WebShell_AUS_4:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6914a9d00c512a094f154aeb4fbc7362
  Ruleset: securityonion-yara
  Summary: This rule detects a malicious webshell that was used in the compromise of the Australian Parliament House network. The identified strings in the webshell's code include patterns for creating network credentials, decoding base64 strings, checking for 'User-Agent' strings in a case-insensitive manner, and generating return opcodes using reflection emit. The detection condition evaluates the file signature and ensures the file size is less than 10KB.
  Updated-Date: '2024_08_07'
APT_WebShell_AUS_5:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 53a3f2a301bb453a83d85f2d2d37d03e
  Ruleset: securityonion-yara
  Summary: This rule detects a specific webshell used in the Australian Parliament House network compromise. The webshell uses functions for encoding and decoding data to and from Base64 format and includes references to hashing and storing data in a hashtable. The script manipulates HTTP request items and server response objects to facilitate its operations, all within a file size of less than 2KB.
  Updated-Date: '2024_08_07'
APT_WebShell_AUS_JScript_3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e57f38f8d4f4d611323520e0d53c2c1a
  Ruleset: securityonion-yara
  Summary: This rule detects a webshell used in the compromise of the Australian Parliament House network by identifying specific strings within JavaScript files. It looks for a combination of encoded base64 content and password-related manipulations within the script, and triggers if these patterns are found in files smaller than 1KB.
  Updated-Date: '2024_08_07'
APT_WebShell_AUS_Tiny_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9dcf5ca45f31813e0ba0b8ce13840e6a
  Ruleset: securityonion-yara
  Summary: This rule detects a tiny webshell used in the compromise of the Australian Parliament House network. It identifies specific patterns in web requests and encoded strings, looking for particular Base64 decoding and evaluation methods. The file must start with specific characters and be smaller than 1KB to match.
  Updated-Date: '2024_08_07'
APT_WebShell_Tiny_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4a537e892a0ea5e997138d0343b2607f
  Ruleset: securityonion-yara
  Summary: This rule detects a tiny webshell associated with the compromise of the Australian Parliament House network. It identifies scripts that utilize the `eval(` function, which is a common feature in malicious webshells. The detection is based on specific file signature markers and ensures the file size is under 40 bytes, signaling a particularly small and potentially harmful script.
  Updated-Date: '2024_08_07'
APT_Webshell_SUPERNOVA_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4c7fda3ad987452968b882c866925257
  Ruleset: securityonion-yara
  Summary: This rule detects SUPERNOVA, a .NET web shell backdoor that masquerades as a legitimate SolarWinds web service handler. SUPERNOVA inspects and responds to HTTP requests with specific HTTP query strings, cookies, and HTML form values, such as named codes, class, method, and arguments. The rule searches for distinctive strings and attributes associated with SUPERNOVA, including terms like "CompileAssemblyFromSource," "CreateCompiler," "ProcessRequest," "IHttpHandler," "clazz," and references to SolarWinds. It identifies the presence of the mscoree.dll import with "_CorDllMain" and validates the file structure and size, ensuring it matches the characteristics of the suspected backdoor.
  Updated-Date: '2024_08_07'
APT_Webshell_SUPERNOVA_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 99eb83ae70307893314a6a3dfac637a2
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of SUPERNOVA, a .NET web shell backdoor that disguises itself as a legitimate SolarWinds web service handler. SUPERNOVA operates by inspecting and responding to HTTP requests that include specific HTTP query strings, Cookies, or HTML form values, such as "codes", "class", "method", and "args." Key identifiers include the presence of the case-insensitive term "Solarwinds" and the string "DynamicRun." This rule focuses on files smaller than 10KB that match specific PE file structure characteristics and contain at least three of the specified strings alongside the critical strings "DynamicRun" and "Solarwinds."
  Updated-Date: '2024_08_07'
APT_Winnti_MAL_Dec19_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 466282d32739febe8a8c57989b86fbd1
  Ruleset: securityonion-yara
  Summary: This rule detects Winnti malware by identifying specific strings related to the malware in files with a size smaller than 3000KB. It looks for various unique event names and object identifiers, such as "Global\\BFE_Notify_Event" and specific GUIDs, either in ASCII or wide character format. The presence of these identifiers is coupled with the file starting with the common Windows executable header (0x5a4d).
  Updated-Date: '2024_08_07'
APT_Winnti_MAL_Dec19_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e0f461177257b00eaa2e98a9a06b4dec
  Ruleset: securityonion-yara
  Summary: This rule detects Winnti malware by identifying specific string patterns and hexadecimal sequences commonly associated with it. It looks for certain wide and fullword ASCII strings such as "IPSecMiniPort," "ndis6fw," "TCPIP," as well as system-related files and objects like "NDIS.SYS," "ntoskrnl.exe," "\\BaseNamedObjects\\{B2B87CCA-66BC-4C24-89B2-C23C9EAC2A66}," "\\Device\\Null," "\\Device," and "\\Driver." Additionally, it searches for specific hexadecimal byte patterns that are indicative of Winnti malware behavior.
  Updated-Date: '2024_08_07'
APT_Winnti_MAL_Dec19_3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7ba8b8aef4a899cedbf00689b77823bc
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of Winnti malware, which is a sophisticated and persistent threat often linked to cyber-espionage groups. It identifies specific sequences of bytes and patterns in the code, indicating traits and behaviors associated with Winnti, such as certain hexadecimal values and binary sequences within data strings. The rule triggers when multiple identified patterns appear in a file, helping to flag infections or suspicious activities related to this particular malware.
  Updated-Date: '2024_08_07'
APT_Winnti_MAL_Dec19_4:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 20202a7ff2eac2fc08c0c04ec4d26ff0
  Ruleset: securityonion-yara
  Summary: This rule detects Winnti malware by identifying specific hexadecimal byte patterns within the software code. These patterns include sequences of machine instructions that are characteristic of the malicious behavior exhibited by the Winnti malware. The rule matches if at least two of the defined byte sequences are present in the analyzed file, which helps in identifying the presence of this particular threat.
  Updated-Date: '2024_08_07'
APT_Winnti_MAL_Dec19_5:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: dabf00ae4d4a4f87e59fcafb54af67e2
  Ruleset: securityonion-yara
  Summary: "This rule detects the presence of Winnti malware by identifying specific strings and patterns associated with its behavior. It looks for indicators such as command-line arguments related to network services, the presence and execution of system binaries like \"svchost.exe\", \"cmd.exe\", \"rundll32.exe\", and \"conhost.exe\", as well as references to the Windows kernel executable \"ntoskrnl.exe\". Additionally, it searches for global event notifications, specific functions, and modified versions of libraries, including \"Detours\", which is typically used for function detouring\u2014a common technique in malware. It also identifies specific hexadecimal patterns that are characteristic of the malware's code structure."
  Updated-Date: '2024_08_07'
APT_apt_duqu2_drivers:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0490ba256c6c81093bd1f2c63ccf5c82
  Ruleset: securityonion-yara
  Summary: This rule detects Duqu 2.0 drivers by identifying specific strings and characteristics associated with the malware. It looks for wide and nocase instances of certain strings like "\\DosDevices\\port_optimizer," "romanian.antihacker," "PortOptimizerTermSrv," and "ugly.gorilla1," as well as strings linked to network drivers such as "NdisIMCopySendCompletePerPacketInfo," "NdisReEnumerateProtocolBindings," and "NdisOpenProtocolConfiguration." The rule also checks for a specific file header signature and ensures the file size is less than 100,000 bytes.
  Updated-Date: '2024_08_07'
APT_apt_duqu2_loaders:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 40b5e71607f0edb8765e1a319b90084f
  Ruleset: securityonion-yara
  Summary: This rule detects samples associated with Duqu 2.0, a sophisticated form of malware linked to high-profile cyber espionage campaigns. It identifies the malware based on specific indicators, including unique identifiers, pipe names, SQL queries related to binary data extraction, references to Microsoft Installer (MSI) files, and string patterns used by the malware. The rule determines the presence of Duqu 2.0 by evaluating certain conditions in files, such as file size and specific file signatures (PE and OLE signatures). Additionally, it identifies key components like action sequences and custom actions in MSI files to confirm the existence of malicious activities attributed to Duqu 2.0.
  Updated-Date: '2024_08_07'
APT_fnv1a_plus_extra_XOR_in_MSIL_experimental:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6386c7c76469afa54f735b2f73b3571f
  Ruleset: securityonion-yara
  Summary: This rule detects the specific MSIL implementation of the fnv1a hashing algorithm used by the SUNBURST backdoor. This backdoor, associated with the SolarWinds supply chain compromise, includes an additional XOR operation before the function returns. The rule identifies patterns corresponding to the fnv64a_offset and a series of operations around the fnv1a_prime with allowances for certain gaps and XOR operations. This detection aims to be independent of the specific XOR string used.
  Updated-Date: '2024_08_07'
APT_lazaruswannacry:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 21f830c578be39c834c9d2ffd7e1c307
  Ruleset: securityonion-yara
  Summary: This rule detects a malware sample by identifying shared code between the February 2017 WannaCry ransomware and a Lazarus Group backdoor from February 2015. It checks for specific sequences of bytes within executable files smaller than 15MB, looking for distinctive patterns that were found by Neel Mehta to link these two malicious programs.
  Updated-Date: '2024_08_07'
ASPXspy2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 262095a9418acd935a2078ab4653ea96
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the ASPXspy2 web shell, a malicious script often named ASPXspy2.aspx. The rule identifies several distinct strings common to the ASPXspy2 web shell, such as specific configurations for a user setup and network information, SQL execution commands, process enumeration, the addition of cookies, and dynamic importation of Windows API functions. The detection also looks for HTML and ASPX elements used to create a user interface and the manipulation of system services. Additionally, it captures redirect actions and references to external URLs, including those pointing to the rootkit.net.cn domain.
  Updated-Date: '2024_08_07'
ASP_CmdAsp:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1ace4895b91f6b8cde5588055537c27d
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific webshell script file named CmdAsp.asp. The script is identified through unique strings that indicate its functionality, such as executing commands via `cmd.exe` and handling temporary files, and the creation of COM objects for execution purposes.
  Updated-Date: '2024_08_07'
ASPack_ASPACK:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4163b3009566408d1d4a5ff6ed5d562d
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a potentially malicious file named "ASPACK.EXE," which is associated with an older disclosed hacktool set. It identifies the file by searching for specific strings within it, including the exact filename "ASPACK.EXE," the term "CLOSEDFOLDER," and a reference to "ASPack compressor." If all these strings are found, the file is flagged.
  Updated-Date: '2024_08_07'
ASPack_Chinese:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 894c5accf9be10b207adb7f937ed6423
  Ruleset: securityonion-yara
  Summary: This rule detects a specific configuration file related to an older disclosed hacktool set named ASPack. It identifies unique strings within the file, such as registration prompts, translation instructions, and contact information, specifically targeting a Chinese translation file named "ASPack Chinese.ini". The rule checks for distinct patterns, including messages about compressing with ASPack and where to insert translations, ensuring the detection of this particular tool's configuration file.
  Updated-Date: '2024_08_07'
ATM_Malware_DispenserXFS:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: cb58a28ba379616029a1c65e0b19935a
  Ruleset: securityonion-yara
  Summary: This rule detects a form of ATM malware known as DispenserXFS. It identifies the presence of this malware by looking for specific hexadecimal patterns in the code, the presence of file paths such as "\\dispenserXFS.pdb" and "C:\\xfsasdf.txt", and key phrases like "Injected mxsfs killer into %d." and "Waiting for freeze msxfs processes...". The rule also checks the file's import hash for a specific value to ensure accurate detection.
  Updated-Date: '2024_08_07'
ATM_Malware_JavaDispCash:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 53c7b834a7c3fe8797dc1c4a0dd7162b
  Ruleset: securityonion-yara
  Summary: This rule detects ATM malware known as JavaDispCash by identifying specific strings related to its operations, such as "getNumberOfCashUnits" and "waitforbillstaken." It also looks for particular log file names like "logft.log" and ".loginside" as well as a configuration file named ".Agentcli." The rule applies a condition that checks for a specific file header and ensures the file size is less than 500KB.
  Updated-Date: '2024_08_07'
ATM_Malware_Loup:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d2a5ca2de5efe46c3f044488a31f932e
  Ruleset: securityonion-yara
  Summary: This rule detects ATM malware known as Loup. It identifies specific code and strings indicative of the malware, including a debugging path to "loup.pdb", a reference to "CurrencyDispenser1", and a specific sequence of bytes associated with dispensing currency. This rule is triggered by files smaller than 100KB that start with the "MZ" header, a common identifier for executable files in Windows.
  Updated-Date: '2024_08_07'
ATM_Malware_XFSADM:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8b059d7ef0b4a60880e5591a97e70b33
  Ruleset: securityonion-yara
  Summary: This rule detects the ATM malware known as XFSADM. It identifies the presence of specific hexadecimal code patterns used to read card data and retrieve PIN data, checks for a mutex name "myXFSADM", and looks for the existence of the "msxfs.dll" file in the Windows System32 directory. Additionally, it searches for commands associated with the XFS API such as "WfsExecute" and "WfsGetInfo", the presence of a specific PDB path, certain window names, and specific log and temporary files. The rule is triggered if the file appears to be a valid PE file with a size smaller than 500KB and meets the conditions set by a combination of these indicators.
  Updated-Date: '2024_08_07'
ATM_Malware_XFSCashNCR:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0116022fd2fc72aa6027e38570a1fc0c
  Ruleset: securityonion-yara
  Summary: This rule detects XFSCashNCR ATM malware. It identifies specific code snippets related to cash dispenser status and dispense operations. Additionally, it checks for specific status messages in Spanish indicating the process of entering ISO denomination, specifying the number of bills, and errors related to dispersers not being found or being unable to continue due to dispenser issues. It also looks for a particular program database file path and a log file named "XfsLog.txt". The rule is triggered if the target file has a specific header and size, and if the specified strings or patterns are found in the file.
  Updated-Date: '2024_08_07'
Agent_BTZ_Aug17:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0faf8fdf47485f2eb9dad3108081db07
  Ruleset: securityonion-yara
  Summary: This rule detects Agent.BTZ malware by identifying specific characteristics within a file. It searches for the presence of the string "stdole2.tlb" and the string "UnInstallW" in their entirety and in ASCII format. Additionally, the file must start with the hex value 0x5a4d, be smaller than 900KB, and have certain exported functions named "Entry," "InstallW," and "UnInstallW." These criteria collectively help identify files associated with Agent.BTZ malware.
  Updated-Date: '2024_08_07'
Agent_BTZ_Proxy_DLL_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9e657e79687bce46884fd51c287e85ae
  Ruleset: securityonion-yara
  Summary: This rule detects the malware known as Agent-BTZ, specifically targeting the proxy DLL file named activeds.dll. It focuses on the presence of specific strings within the software, checks for certain executable characteristics, including file size and export functions, and matches known cryptographic hashes of the malicious file.
  Updated-Date: '2024_08_07'
Agent_BTZ_Proxy_DLL_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e8d69ec3a3971f4af4db087570ae66c7
  Ruleset: securityonion-yara
  Summary: This rule detects the Agent-BTZ proxy DLL, specifically targeting the "activeds.dll" file. It identifies the presence of this malicious file by checking for a distinct sequence of hexadecimal bytes within the file and confirming it matches specific conditions, including a unique import hash. The file must also have a PE header with a particular signature and a file size of less than 200KB to meet the criteria defined in this rule.
  Updated-Date: '2024_08_07'
Ajan_asp:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0198840097b077e48aed6d73202de9bd
  Ruleset: securityonion-yara
  Summary: 'This rule detects the presence of specific strings within files associated with Ajan.asp, indicating potential malicious activity. It looks for references to a file named "downloaded.zip" located on the C: drive, scripting activity involving the creation of a file named "net.vbs" at the root of the C: drive, and a URL pointing to "http://www35.websamba.com/cybervurgun/". These indicators suggest the involvement of malicious scripting and possibly unauthorized data downloads or access attempts.'
  Updated-Date: '2024_08_07'
Ajax_PHP_Command_Shell_php:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0524e0c9eeb355d092cfa71ff9309188
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the Ajax PHP Command Shell malware by identifying specific strings commonly associated with it. These strings include warning messages about the file browser being under construction, a prompt indicating an empty command with advice to type "shellhelp" for assistance, and a notification about reloading the page. The detection relies on matching at least one of these strings.
  Updated-Date: '2024_08_07'
AllTheThings:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d1d1fe5f9f4087d49463567a99c9386c
  Ruleset: securityonion-yara
  Summary: 'This rule detects the presence of the "AllTheThings" software by identifying specific strings and file characteristics. It looks for the following: the "AllTheThings.pdb" file path in a Debug directory, the "AllTheThings.exe" file, the "AllTheThings.dll" file path, and specific wide-string messages such as "Hello From Main...I Don''t Do Anything," "I am a basic COM Object," and "I shouldn''t really execute either." The detection is further confined to files smaller than 50KB with the first two bytes matching the PE file signature (0x5a4d).'
  Updated-Date: '2024_08_07'
Ammyy_Admin_AA_v3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f8c5bfbd9b9480b99ba8cfa5c8e66055
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the remote administration tool Ammyy Admin, specifically versions AA_v3.4.exe and AA_v3.5.exe. These versions are known to have been used by the APT group Anunak. The rule checks for unique strings tied to Ammyy Admin, including file paths and error messages, such as "S:\\Ammyy\\sources\\target\\TrService.cpp," "Global\\Ammyy.Target.IncomePort," and error messages related to process creation and invalid host names. The detection relies on identifying at least two specified path strings or matching all defined error message strings.
  Updated-Date: '2024_08_07'
Andromeda_MalBot_Jun_1A:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b2e8b98d8ccb3fa451e597fa055666fc
  Ruleset: securityonion-yara
  Summary: This rule detects the Andromeda/RETADUP malicious worm. It searches for specific strings and file paths associated with the malware, such as "%temp%\\FolderN\\name.exe", "firefox.exe.exe", and paths involving "Release" or "botkill.pdb". The rule triggers if a file starts with the 'MZ' header (indicating a Windows executable) and is less than 2000KB in size, meeting at least one predefined string condition or a combination of specified patterns.
  Updated-Date: '2024_08_07'
Angry_IP_Scanner_v2_08_ipscan:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3e1c256b2cfc905250c580e5677557ef
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the Angry IP Scanner version 2.08 by identifying specific strings unique to the executable file ipscan.exe, such as "_H/EnumDisplay/", "ECTED.MSVCRT0x", and "NotSupported7".
  Updated-Date: '2024_08_07'
Antichat_Shell_v1_3_php:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4526eebf2511f0a1326e94ec3b7986e3
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the Antichat Shell v1.3 PHP file by identifying specific strings within the file, such as "Antichat", "Can't open file, permission denide", and "$ra44". If at least two of these strings are found, the file is flagged as matching the characteristics of the Antichat Shell v1.3. This shell could potentially be used for unauthorized access or malicious activities on compromised systems.
  Updated-Date: '2024_08_07'
Antichat_Socks5_Server_php_php:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b2863df940e571408fd747149d7f85f2
  Ruleset: securityonion-yara
  Summary: This rule detects a PHP script associated with the Antichat Socks5 server. The rule identifies specific code snippets used to convert port data and handle domain name address types. It also flags references to the website antichat.ru. The detection relies on the presence of these distinctive strings within a file.
  Updated-Date: '2024_08_07'
Antiy_Ports_1_21:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6ed6918b7d86a59e663adc5371da26f8
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the hacktool set file named "Antiy Ports 1.21.exe." It identifies this file by looking for specific strings within it, including "AntiyPorts.EXE," "AntiyPorts MFC Application," and " @Stego:." This indicates the file is associated with the Antiy Ports software, which may be used for malicious purposes.
  Updated-Date: '2024_08_07'
Apolmy_Privesc_Trojan:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c7f6913cc761a7b57640a34120fb1bef
  Ruleset: securityonion-yara
  Summary: This rule detects the Apolmy Privilege Escalation Trojan, associated with the APT Terracotta group. It looks for specific indicators within a file, including certain ASCII and wide character strings such as "[%d] Failed, %08X", "[%d] Offset can not fetched.", and "PowerShadow2011". Additionally, it checks if the file starts with the "MZ" header (indicating a Windows executable) and ensures the file size is less than 300KB.
  Updated-Date: '2024_08_07'
AppInitHook:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4ee2c7a5a92bf01486df5fb129c071e6
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a file named AppInitHook.dll associated with the Mimikatz malware, used to conceal Mimikatz from process lists. It identifies specific strings related to the AppInitHook.pdb file, the Mimikatz executable, and certain C source files within the mhook disassembly library. The rule triggers when certain conditions in the file structure and size match predefined criteria.
  Updated-Date: '2024_08_07'
Armitage_MeterpreterSession_Strings:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 01d39b6e52562c03e2a945c533208483
  Ruleset: securityonion-yara
  Summary: This rule detects the Armitage component by identifying specific strings associated with it, including "session.meterpreter_read," "sniffer_dump," "keyscan_dump," and "MeterpreterSession.java," within files smaller than 30KB. Armitage is a front-end tool for Metasploit that facilitates exploiting and managing compromised systems.
  Updated-Date: '2024_08_07'
Armitage_OSX:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 90d436430c9e08eb20d24f5ad0e2c189
  Ruleset: securityonion-yara
  Summary: This rule detects components of the Armitage software on macOS systems by searching for specific resource file names within a file of less than 6000KB. Armitage is a graphical cyber attack management tool for the Metasploit Project, and the rule identifies it through the presence of certain files like "covertvpn-injector.exe," "browserpivot.x64.dll," and "msfrpcd_new.bat".
  Updated-Date: '2024_08_07'
Armitage_msfconsole:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b7b825656b9cd085d62eeec1e4340036
  Ruleset: securityonion-yara
  Summary: This rule detects the Armitage component, a front-end GUI for the Metasploit framework used for penetration testing. It identifies specific string patterns such as "meterpreter >" and "\umsf\u>", indicating the presence of Metasploit's interactive shell and command prompt within a file smaller than 1KB.
  Updated-Date: '2024_08_07'
Arp_EMP_v1_0:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: bb24e16e1b670523bc2b9fc9828134c3
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a Chinese hacktool named "Arp EMP v1.0". It specifically targets a file named "Arp EMP v1.0.exe" and looks for an executable file smaller than 800KB with a valid PE header (identified by the magic number 0x5a4d).
  Updated-Date: '2024_08_07'
ArtTrayHookDll:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0fe8a003788915bc6428f13a2662774d
  Ruleset: securityonion-yara
  Summary: This rule detects a hacktool file named ArtTrayHookDll.dll, identifying it by the specific name and the presence of a TerminateHook function within the file.
  Updated-Date: '2024_08_07'
ArtTray_zip_Folder_ArtTray:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2768b15c28610c55cb07334c298199c1
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a hacktool known as ArtTray, particularly focusing on the file ArtTray.exe. It identifies specific strings associated with the software, including a URL linked to its developer, "brigsoft.com," references to the "ArtTrayHookDll.dll" file, the version indicator "ArtTray Version 1.0," and the string "TRM_HOOKCALLBACK." These elements are used to confirm the presence of the ArtTray hacktool, which is an older, disclosed piece of software.
  Updated-Date: '2024_08_07'
Asmodeus_v0_1_pl:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d0ee840c92cf6224c51b20cdeee1144f
  Ruleset: securityonion-yara
  Summary: This rule detects files associated with Asmodeus v0.1, a Perl-based remote shell tool. The specific indicators include references to a government security URL, a command running the Asmodeus Perl script with connection details, and a print statement for the Asmodeus Perl Remote Shell. Additionally, it identifies code initializing network address resolution, highlighting potential use in establishing remote connections.
  Updated-Date: '2024_08_07'
Ayyildiz_Tim___AYT__Shell_v_2_1_Biz_html:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b2a026cebe84d108670edf9eaf38b3d2
  Ruleset: securityonion-yara
  Summary: This rule detects a specific version of a file associated with a web shell named "Ayyildiz Tim -AYT- Shell v 2.1 Biz.html." It identifies the presence of this file by looking for strings such as "Ayyildiz," "TouCh By iJOo," and a specific check for a working directory. Additionally, it includes a reference to an online image located at "http://ayyildiz.org/images/whosonline2.gif." The rule is triggered if at least two of these strings are found.
  Updated-Date: '2024_08_07'
BIN_Client:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5f8d5bcb3b216be25a7375f7744dd806
  Ruleset: securityonion-yara
  Summary: This rule detects a specific webshell called Client.exe, primarily identified by unique strings within its code. These strings include indicators like "=====Remote Shell Closed=====", "All Files(*.*)|*.*||", "WSAStartup Error!", "SHGetFileInfoA", "CreateThread False!", and "Port Number Error". Detection is based on the presence of at least four of these strings within the file.
  Updated-Date: '2024_08_07'
BIN_Server:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 523737da63e3c20fa0da6c827b920c0a
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the server.exe file, which is indicative of webshell malware. It identifies specific strings related to various functions and operations that this particular malware employs, such as "configserver," "GetLogicalDrives," "WinExec," "fxftest," "upfileok," and "upfileer." These strings suggest the malware's capability to interact with system drives, execute system commands, and handle file uploads, which are commonly associated with webshell activities.
  Updated-Date: '2024_08_07'
BKDR_Snarasite_Oct17:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a7d7e72ee01e26486fb78aa9bbc154ed
  Ruleset: securityonion-yara
  Summary: 'This rule detects the backdoor malware known as Snarasite. It identifies the presence of this malware by verifying specific characteristics: the file must start with the hexadecimal value 0x5a4d, indicating it is a Windows executable file, and its file size must be less than 3000KB. Additionally, the rule checks for specific Import Hash (imphash) values, which are unique signature-like identifiers derived from the import table of a Portable Executable (PE) file, matching either "322bef04e1e1ac48875036e38fb5c23c" or "15088754757513c92fa36ba5590e907b".'
  Updated-Date: '2024_08_07'
BTC_Miner_lsass1_chrome_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 70e0297b21d9e1a6a4175b22171b54c4
  Ruleset: securityonion-yara
  Summary: This rule detects a Bitcoin Miner specifically designed to target the `lsass.exe` and `chrome.exe` processes. It identifies the Bitcoin Miner based on specific strings within the executable, such as options for setting the number of miner threads and providing username:password pairs for mining servers. The rule triggers when these strings are present in a file, and the file shares specific characteristics like having a valid MZ header and being less than 6000KB in size.
  Updated-Date: '2024_08_07'
BackDooR__fr_:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 170df124880337209d6953779119ccb5
  Ruleset: securityonion-yara
  Summary: This rule detects a webshell file named "BackDooR (fr).php". It identifies the presence of this malicious script by looking for the specific string "print(\"<p align=\\\"center\\\"><font size=\\\"5\\\">Exploit include" within the file, which is indicative of the exploit code used by the webshell.
  Updated-Date: '2024_08_07'
Backdoor_Nitol_Jun17:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 745621c2079f7d0c8e26fef5a10db61a
  Ruleset: securityonion-yara
  Summary: This rule detects the malware backdoor known as Nitol, specifically targeting the file named wyawou.exe. This detection mechanism looks for specific User-Agent strings that match patterns of Internet Explorer versions, phrases associated with TCP connection flood attacks, as well as Internet Explorer's default installation path. Additional strings include various executable file names, HTTP GET request formats, targets for command and control attacks, language settings indicating zh-cn (Chinese), a specific keyword, and a known domain used by the malware for communication. The rule also notes that it inadvertently matches on the Upatre Downloader. The conditions for triggering the rule involve file size checks and a combination of keyword matches.
  Updated-Date: '2024_08_07'
BadRabbit_Gen:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: dbf8bfe4cc6b7e76fd92e4dd3b8214e8
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of BadRabbit ransomware by identifying specific behavioral and file-related characteristics. It looks for certain command lines involving the creation of scheduled tasks associated with the ransomware, as well as specific file paths like `C:\Windows\infpub.dat` and `C:\Windows\cscc.dat`. The rule also searches for ransom-related messages such as instructions to submit payment for decryption and prompts to disable security software. Additionally, it matches other technical patterns related to system changes and file operations indicative of a ransomware attack.
  Updated-Date: '2024_08_07'
BadRabbit_Mimikatz_Comp:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 79af8c22c9bb2ef4a9bec693c7b5abba
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the BadRabbit variant of the Mimikatz tool based on specific string matches and file characteristics. It looks for wide-character representations of certain keywords such as "lsasrv" and "CredentialKeys", checks for specific patterns in the file, and verifies if the file is less than 200KB in size. The conditions also include checking particular hexadecimal sequences associated with Mimikatz functionality, confirming the presence of potentially malicious activity related to credential theft or manipulation.
  Updated-Date: '2024_08_07'
Base64_PS1_Shellcode:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3c955679c3280155a505f409914ba09f
  Ruleset: securityonion-yara
  Summary: 'This rule detects Base64 encoded PowerShell (PS1) shellcode by identifying specific patterns in the encoded data. The detection is based on the presence of the string "AAAAYInlM" and any one of two patterns: "/OiCAAAAYInlM" or "/OiJAAAAYInlM". This type of encoded shellcode is often used in malicious PowerShell scripts to obfuscate and execute harmful payloads.'
  Updated-Date: '2024_08_07'
Batch_Powershell_Invoke_Inveigh:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c35545d9c8901fa4c724a5426e20c8a5
  Ruleset: securityonion-yara
  Summary: This rule detects a malicious batch file associated with the Inveigh PowerShell script, designed to execute network reconnaissance attacks. It specifically looks for the presence of strings related to the Inveigh script, including "Inveigh.ps1," "Invoke-Inveigh," and relevant command-line arguments such as "-LLMNR N -HTTP N -FileOutput Y," as well as the invocation of "powershell.exe."
  Updated-Date: '2024_08_07'
Batch_Script_To_Run_PsExec:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 15c9384cd5989758b8e2c047a6e8adc3
  Ruleset: securityonion-yara
  Summary: This rule detects a malicious batch script associated with a report from the UK's National Cyber Security Centre (NCSC) that potentially compromises engineering and industrial control environments. The script uses specific strings that identify its operation, including token delimiters, setting variables, performing checks, and preparing temporary files. Additionally, the rule looks for evidence of the "ps.exe -accepteula" command, which is a typical PsExec utility used for executing processes on remote systems.
  Updated-Date: '2024_08_07'
Beacon_K5om:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2feec4673d2478befbe09283bbc6c41e
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a malicious DLL file named K5om.dll, associated with the Meterpreter Beacon tool. It identifies specific patterns within the file, such as PowerShell commands used to download a string from a local address and execute encoded commands with bypassed execution policies. Additionally, it looks for unique error messages related to process token access issues, x86 process limitations, specific filenames, and patterns reflective of pipe connection failures. This combination of characteristics helps pinpoint the Meterpreter Beacon's activity, which is often used for unauthorized remote control and data exfiltration.
  Updated-Date: '2024_08_07'
Beastdoor_Backdoor:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2af4dbb9621bef1c564419cd07950a71
  Ruleset: securityonion-yara
  Summary: This rule detects the Beastdoor backdoor malware. It identifies specific text strings within files, such as commands for redirecting ports, posting to scripts, downloading files, setting service ports, acquiring a shell, deleting services, and retrieving usernames. These strings indicate activities consistent with the operations of Beastdoor, such as port redirection, file downloading, service configuration, and executing commands to control the system.
  Updated-Date: '2024_08_07'
BeepService_Hacktool:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: de5c83e789970c070a9d3efd2a9c9b39
  Ruleset: securityonion-yara
  Summary: This rule detects a hacktool named BeepService that is commonly used by Chinese Advanced Persistent Threat (APT) groups. It identifies strings associated with the hacktool, such as specific filenames ("123.exe" and "regclean.exe") and a hardcoded IP address ("192.168.88.69"). The rule also checks for a specific pattern in the file path and ensures that the file size is under 100KB while verifying the presence of a recognizable header signature (0x5a4d).
  Updated-Date: '2024_08_07'
BergSilva_Malware:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 907dc91f6d488bfd92f20efae860f80b
  Ruleset: securityonion-yara
  Summary: This rule detects a specific malware associated with the author of the Indetectables Remote Access Trojan (RAT). It identifies characteristic strings such as paths on the desktop directory, URLs for downloading executables from Dropbox, code for starting processes, file deletion commands, library references within the Windows system directory, and variable definitions for temporary directories. The rule checks for these indicators to determine the presence of the malware.
  Updated-Date: '2024_08_07'
BernhardPOS:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ed6e0baf8ab7e5ac3f707c5a00b322f5
  Ruleset: securityonion-yara
  Summary: This rule detects the BernhardPOS credit card dumping tool, a point-of-sale malware identified by Morphick Inc. The signature includes unique strings that are characteristic of this malware, such as specific shellcode with junk instructions, a mutex named "OPSEC_BERNHARD," and a particular build path referencing "C:\bernhard\Debug\bernhard.pdb." Additionally, it identifies a defined string decoding routine used by the malware. The presence of any of these indicators can trigger the detection of BernhardPOS.
  Updated-Date: '2024_08_07'
BeyondExec_RemoteAccess_Tool:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 37fb79e06b1bb813f340c96e4db54e6f
  Ruleset: securityonion-yara
  Summary: This rule detects the BeyondExec Remote Access Tool by identifying the file `rexesvr.exe`. It looks for specific strings such as the file path `\\BeyondExecV2\\Server\\Release\\Pipes.pdb`, a pipe name format `\\.\pipe\beyondexec%d-stdin`, and an error message that mentions the failure to create a dispatch pipe due to a potential instance already running. Additionally, it checks for particular opcodes in the file's binary data. The rule targets files that start with the hexadecimal value `0x5a4d` and are smaller than 200KB in size.
  Updated-Date: '2024_08_07'
BitPaymer:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 244fb8f8ea2b147ddbed36eaf08f24b3
  Ruleset: securityonion-yara
  Summary: This rule detects newer samples of the BitPaymer ransomware that utilize a custom packer framework. It identifies specific opcode patterns within the executable, characterized by certain hexadecimal sequences, and confirms the presence of the "MZ" header common to Windows executable files.
  Updated-Date: '2024_08_07'
BlackEnergy_BE_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9f0e1edc46fe54ae6198beac097a1abf
  Ruleset: securityonion-yara
  Summary: This rule detects the BlackEnergy 2 malware by identifying specific strings within a file. The targeted strings include descriptors and names related to a Windows system utility service, various process and service names such as "msiexec.exe" and "WinHelpW," as well as the function "ReadProcessMemory." The rule triggers when these strings are found within a file smaller than 250KB that starts with the characteristic "MZ" header of an executable file.
  Updated-Date: '2024_08_07'
BlackEnergy_BackdoorPass_DropBear_SSH:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5ce638bbba0c7763e084b22bb0394162
  Ruleset: securityonion-yara
  Summary: This rule detects a password, "passDs5Bu9Te7," used in a compromised instance of DropBear SSH Server, which is associated with the BlackEnergy malware. The condition checks for a PE file signature alongside the presence of this specific password within the examined file.
  Updated-Date: '2024_08_07'
BlackEnergy_Driver_AMDIDE:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 129c359052b9566af419050eb1e3a993
  Ruleset: securityonion-yara
  Summary: This rule detects the BlackEnergy malware, specifically targeting its driver component masquerading as an AMD IDE driver. It identifies the malware by matching specific string patterns such as "AMD IDE driver," "SessionEnv," and unique device path identifiers within a file less than 150KB in size, starting with the hexadecimal value 0x5a4d. String patterns are matched in wide format, indicating the presence of Unicode strings typical for the BlackEnergy malware drivers.
  Updated-Date: '2024_08_07'
BlackEnergy_Driver_USBMDM:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0bc9547c8a92f3fa1469e21292336bea
  Ruleset: securityonion-yara
  Summary: This rule detects the BlackEnergy malware, specifically the BlackEnergy Driver associated with the USB MDM (Modem) device driver. It identifies the malware by checking for specific patterns within the file, including known strings such as "USB MDM Driver," "KdDebuggerNotPresent," and "KdDebuggerEnabled." Additionally, it verifies that the file starts with the hexadecimal value 0x5a4d and is less than 180 kilobytes in size. These conditions together help in identifying and flagging the infected or malicious files associated with BlackEnergy, a notorious malware used in cyber-attacks on Ukrainian news media and the electric industry.
  Updated-Date: '2024_08_07'
BlackEnergy_KillDisk_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3d38f132fe83334a77b6a7689b9b5f33
  Ruleset: securityonion-yara
  Summary: This rule detects the KillDisk malware, which is associated with the BlackEnergy malware family. KillDisk is known for its destructive capabilities, which include deleting files and formatting disks. The rule identifies specific command-line operations indicative of KillDisk's activity, like executing system utilities such as 'cmd.exe' and 'icacls.exe', as well as commands to delete files, force reboots, and format drives. The presence of distinct patterns, like "/c del /F /S /Q %c:\\*.*" and "shutdown /r /t %d", helps confirm the presence of KillDisk. Additionally, it looks for less frequent but relevant strings like "taskhost.exe" and "shutdown.exe".
  Updated-Date: '2024_08_07'
BlackEnergy_KillDisk_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f4551ebe7910f95bc4b79aaccd4913ab
  Ruleset: securityonion-yara
  Summary: This rule detects the KillDisk malware variant associated with BlackEnergy. It identifies specific patterns in string data and file properties typical of the malware. These patterns include file paths and names with specific temporary and executable file extensions, as well as configurations involving .exe, .sys, .drv, and various document and image file types. The rule checks for a particular signature in the file header and ensures the file size is under 500KB, aiming to detect the presence of KillDisk and mitigate its destructive capabilities.
  Updated-Date: '2024_08_07'
BlackEnergy_VBS_Agent:
  Created-Date: '2024_08_06'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: afcc2c3c2892a34c73214d52b1b65c44
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a Visual Basic Script (VBS) agent associated with the BlackEnergy malware, specifically targeting a file named "Dropbearrun.vbs." The detection focuses on specific strings in the script, including commands to run "dropbear.exe" with certain parameters and setting the current directory to "C:\WINDOWS\TEMP\Dropbear." It also looks for the creation of a shell object using "WScript.Shell." The condition for detection is that the file size must be less than 1KB and at least two of the specified strings must be present.
  Updated-Date: '2024_08_06'
Bladabindi_Malware_B64:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 71dba7fd15230b2df42a360e66efbff1
  Ruleset: securityonion-yara
  Summary: This rule detects the Bladabindi malware by identifying specific Base64 encoded strings that are embedded within the malicious software. The strings include Base64 representations of key terms such as '\system32\', 'Execute ERROR', 'trojan.exe', 'Update ERROR', and 'Download ERROR'. The rule triggers when the file size is less than 700KB and one of these encoded strings is present, with an additional condition that the file starts with the bytes corresponding to 'MZ' (0x5a4d), which indicates a Windows executable file.
  Updated-Date: '2024_08_07'
BluenoroffPoS_DLL:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ebc0164c17652eafb4cefec70fae1da1
  Ruleset: securityonion-yara
  Summary: This rule detects the Bluenoroff POS malware based on the presence of specific strings within a DLL file named "hkp.dll". It checks for references to a DLL file named "ksnetadsl.dll" and an executable called "xplatform.exe", as well as the HTTP agent string "Nimo Software HTTP Retriever 1.0". Additionally, the rule looks for a log file path "c:\\windows\\temp\\log.tmp" and specific formatted strings related to base and function addresses like "%d-BaseAddr:0x%x" and "%d-FuncAddr:0x%x". Other identifiable strings include "HF-S(%d)" and "HF-T(%d)". The condition is satisfied if five of these specified strings are found.
  Updated-Date: '2024_08_07'
BluesPortScan:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 86198ef290ddbe87e940170e6abcd21f
  Ruleset: securityonion-yara
  Summary: This rule detects the program "BluesPortScan.exe" by identifying specific strings within the file, including a signature line from its creator Volker Voss and a unique identifier "JiBOo~SSB."
  Updated-Date: '2024_08_07'
BronzeButler_DGet_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 88955ba85610fb7f5326bc166e38816c
  Ruleset: securityonion-yara
  Summary: This rule detects a malware or hacktool sample associated with the Bronze Butler incident, specifically identifying a tool named "DGet Tool Made by XZ." The detection is based on the presence of a distinct string within executable files smaller than 10KB, coupled with a specific file signature.
  Updated-Date: '2024_08_07'
BronzeButler_Daserf_C_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 90fb1b601a03900dab4a0cdc810aa38a
  Ruleset: securityonion-yara
  Summary: This rule detects malware used in the Bronze Butler incident, which targets Japanese businesses. It identifies specific characteristics such as URLs, user-agent strings, encoded strings, and file system paths associated with the malware. The rule looks for strings like "(c) 2010 DYAMAR EnGineerinG," specific HTTP user-agent identifiers, and various ASP and PHP file names indicative of malicious activity. Additionally, it checks for PE files with a certain size and import hash to confirm the presence of the malware.
  Updated-Date: '2024_08_07'
BronzeButler_Daserf_Delphi_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4070a7b581a99742a9185bb46aa45195
  Ruleset: securityonion-yara
  Summary: This rule detects a malware or hacktool sample associated with the Bronze Butler incident, aimed at Japanese businesses. It identifies specific indicators within executable files, including the presence of the string "Services.exe," a user agent string mimicking Internet Explorer 11, and references to "l32.dll" and "tProcess:". It also looks for injection-related keywords and error messages associated with variant or safe array creation. The rule further examines registry paths related to Windows' current version run commands and references "ms1ng2d3d2.exe". The conditions specified include a PE file signature check and a file size constraint of less than 400KB, triggering detection if at least three of the identified strings are present.
  Updated-Date: '2024_08_07'
BronzeButler_RarStar_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1ad88ae1469604dab572b56d5a5ad702
  Ruleset: securityonion-yara
  Summary: This rule detects a malware or hacktool sample connected to the Bronze Butler incident targeting Japanese businesses. It identifies the presence of specific strings within the file, including a distinctive user agent string spoofing Internet Explorer, a URL pointing to the Japanese version of Google, a unique identifier, and a reference to RAR archive files. The rule applies to executable files smaller than 200KB that meet certain signature patterns.
  Updated-Date: '2024_08_07'
BronzeButler_UACBypass_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 480669451e2875766d006c9a6d6812c5
  Ruleset: securityonion-yara
  Summary: This rule detects a malware or hacktool sample associated with the Bronze Butler incident, which specifically targets Japanese businesses. It identifies executable files that reference the bypass of User Account Control (UAC) mechanisms, indicated by strings such as "BypassUacDll.pdb," "BypassUac.pdb," and various markers denoting the initiation of UAC bypass on both x64 and x86 systems. The condition checks for files that start with the MZ header and are less than 1000KB in size, containing at least one of the specified strings.
  Updated-Date: '2024_08_07'
BronzeButler_xxmm_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8914ba1ded5221d0aff8a4110f9cfe20
  Ruleset: securityonion-yara
  Summary: This rule detects a malware sample associated with the Bronze Butler cyber incident. It identifies specific strings and patterns related to the malware, such as paths to debugging and release directories, including "\\Release\\ReflectivLoader.pdb" and "\\Projects\\xxmm2\\Release\\". Additionally, it looks for an HTTP request to "http://127.0.0.1/phptunnel.php" and executable names like "xxmm2.exe" and "\\AvUpdate.exe". The rule ensures that the PE file signature starts with 'MZ' and that the file size is below 700KB, triggering detection if certain string patterns are found.
  Updated-Date: '2024_08_07'
Buckeye_Osinfo:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f6ecb61a59a3f2fe6cd11e8778e34765
  Ruleset: securityonion-yara
  Summary: This rule detects the OSinfo tool used by the Buckeye APT group. The OSinfo tool includes specific strings such as commands and options for gathering information about shared directories, group and user details, input server lists, server and user information, connection tests, domain admin groups, and network usage. The detection condition is triggered when a file starts with a certain header and contains at least three of these distinctive strings.
  Updated-Date: '2024_08_07'
Builder_MSIL_G2JS_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d16708015fc53404228cf02d1190de43
  Ruleset: securityonion-yara
  Summary: This rule detects .NET Portable Executable (PE) files containing a specific TypeLibGUID, AF9C62A1-F8D2-4BE0-B019-0A7873E81EA9. This GUID corresponds to the ProjectGuid found in the Gadget2JScript project, which is indicative of binaries potentially linked to that particular .NET development project. The rule identifies such binaries by checking for the presence of the GUID string in an ASCII or wide format and verifying the structure of the file to match that of a .NET PE.
  Updated-Date: '2024_08_07'
Builder_MSIL_SharpGenerator_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 051e10143b60e5e17e30aca63ff68fdc
  Ruleset: securityonion-yara
  Summary: This rule detects .NET PE files associated with the SharpGenerator project by identifying the specific ProjectGuid ('3f450977-d796-4016-bb78-c9e91c6a0f08') embedded within the .NET binary files. The presence of this GUID signals a potential relation to the SharpGenerator project, allowing for targeted identification.
  Updated-Date: '2024_08_07'
Builder_MSIL_SinfulOffice_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6efd859f653ec2739772f6f997ad99b2
  Ruleset: securityonion-yara
  Summary: This rule detects .NET Portable Executable (PE) files containing a specific ProjectGuid associated with the 'SinfulOffice' project. It identifies binaries that include the TypeLibGUID "9940e18f-e3c7-450f-801a-07dd534ccb9a", which is indicative of the 'SinfulOffice' project, a potentially malicious .NET project.
  Updated-Date: '2024_08_07'
ByPassFireWall_zip_Folder_Ie:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 92bb552af2be12c2ca8b4792e272a121
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a hacktool associated with an old file named Ie.dll. It specifically looks for strings indicating paths and error messages related to this file, such as paths in the source directory and specific loader errors. The rule is triggered when all these identifying strings are found.
  Updated-Date: '2024_08_07'
ByPassFireWall_zip_Folder_Inject:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9e0828006249af2a5f052e015ffb464e
  Ruleset: securityonion-yara
  Summary: This rule detects a hacktool set involving the file named "Inject.exe." It looks for specific text strings within the file, such as "Fail To Inject," "BtGRemote Pro; V1.5 B/{," and " Successfully," indicating attempts to bypass firewalls. These strings must all be present to trigger detection.
  Updated-Date: '2024_08_07'
BypassUac2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c42dfda0ff0583ecf33a184c2454c061
  Ruleset: securityonion-yara
  Summary: This rule detects files related to the BypassUac utility by identifying specific strings within file paths and names, such as "BypassUac_Utils.cpp," "BypassUacDll.aps," and "BypassUac.ico."
  Updated-Date: '2024_08_07'
BypassUacDll_6:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: cbd85f34be641ef34e7132fb08030695
  Ruleset: securityonion-yara
  Summary: This rule detects a file named "BypassUacDLL.dll" which likely pertains to a DLL file used to bypass User Account Control (UAC) in Windows. The presence of the string "AFX_IDP_COMMAND_FAILURE" suggests that it may involve command execution or error handling typically associated with such bypass techniques.
  Updated-Date: '2024_08_07'
BypassUac_3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d2f3f04d5f4bb3b345e5203166ea6f76
  Ruleset: securityonion-yara
  Summary: This rule detects a file named "BypassUacDll.dll," which is related to bypassing User Account Control (UAC) on Windows systems. It identifies specific strings within the file, such as "BypassUacDLL.dll" and "Win7ElevateDLL," as well as paths like "\\Release\\BypassUacDll," to confirm the presence of the DLL used in UAC bypass techniques.
  Updated-Date: '2024_08_07'
BypassUac_9:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 95742a2fa92d43123fd527c054be2cbc
  Ruleset: securityonion-yara
  Summary: This rule detects files associated with software named "BypassUac," specifically targeting its executables and DLL files on both x86 and x64 architectures. The rule looks for specific ASCII strings such as file paths and names like "BypassUac.exe" and "BypassUacDll.dll," ensuring comprehensive detection by matching all identified patterns.
  Updated-Date: '2024_08_07'
BypassUac_EXE:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7c4534fd0bada0014a475bb6240ce025
  Ruleset: securityonion-yara
  Summary: This rule detects an executable file associated with bypassing User Account Control (UAC) mechanisms. It specifically looks for the presence of certain strings such as "Wole32.dll", "System32\\migwiz", "System32\\migwiz\\CRYPTBASE.dll", "Elevation:Administrator!new:", and "BypassUac". These strings suggest the file attempts to manipulate system directories and UAC settings to gain elevated privileges without user consent.
  Updated-Date: '2024_08_07'
Bytes_used_in_AES_key_generation:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6785df9164ce5f0229baaa892f91e8b8
  Ruleset: securityonion-yara
  Summary: This rule detects the Backdoor.goodor malware, which is known to compromise organizations by employing specific sequences of bytes used in AES key generation. It identifies the presence of this malware by searching for a unique byte pattern within files smaller than 5000KB, marked with a particular hash value. The rule ensures that the target file begins with a specific 16-bit value and matches the defined byte sequence to confirm the presence of the malware.
  Updated-Date: '2024_08_07'
CACTUSTORCH:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9c646b890e627038fcd1c0e5743aeb42
  Ruleset: securityonion-yara
  Summary: This rule detects the CactusTorch hacktool by identifying specific strings and patterns within files that are smaller than 800KB. It looks for specific references such as the use of "shellcode," script transformations involving base64 encoded payloads, commands for "rundll32.exe," and remarks attributed to Vincent Yiu. The identified patterns are associated with techniques used by CactusTorch, which leverages various script languages to execute malicious payloads stealthily.
  Updated-Date: '2024_08_07'
CGISscan_CGIScan:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 91430548dac01248160c5a4343fcd8af
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of CGIScan.exe, a file associated with CGISscan. It identifies specific strings within the file, including references to "Wang Products," a debug message related to resolving host addresses, and an indication that only TCP is supported through a SOCKS server. These characteristics distinguish CGISscan.exe based on its unique textual signatures.
  Updated-Date: '2024_08_07'
CHAOS_Payload:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3d6cadeb968cc1d0789f04e0fb282103
  Ruleset: securityonion-yara
  Summary: This rule detects a CHAOS back connect payload, a malicious component associated with the CHAOS malware designed to establish a reverse connection to a remote attacker. The rule specifies certain hexadecimal patterns within the file and includes conditions regarding the file's signature and size to identify the presence of the malware payload effectively.
  Updated-Date: '2024_08_07'
CMStar_Malware_Sep17:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: fd385820dc7695f5a22d0a88446e177c
  Ruleset: securityonion-yara
  Summary: This rule detects the CMStar malware, which is characterized by specific attributes and patterns in its file structure and behavior. It targets executable files with a 'MZ' header (indicative of an executable file format) and a size less than 100KB. The rule leverages particular string patterns, such as "UpdateService.tmp" and "StateNum:%d,FileSize:%d", to identify the malware. Additionally, it checks for a specific import hash or presence of the "WinCred" export function.
  Updated-Date: '2024_08_07'
CN_APT_ZeroT_extracted_Go:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a0e02d23873f219e628ea4a27fb096b3
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the ZeroT Remote Access Trojan (RAT) associated with Chinese Advanced Persistent Threat (APT) actors as identified by Proofpoint. The rule targets the file "Go.exe" and is triggered by specific string patterns related to command execution and file paths. Notable strings include references to known executables such as "Zjdsf.exe," "SS32prep.exe," and "Sysdug.exe," as well as command-line patterns involving the execution of "cmd.exe" with specific parameters. The conditions for detection are based on the file's header and size, along with the presence of identified string patterns.
  Updated-Date: '2024_08_07'
CN_APT_ZeroT_extracted_Mcutil:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 40150f6d120a33a4b197873c6ec96f7b
  Ruleset: securityonion-yara
  Summary: This rule detects the Mcutil.dll file, which is associated with the ZeroT Remote Access Trojan (RAT) used by a Chinese Advanced Persistent Threat (APT) group. It identifies the malicious file by checking for specific strings and patterns within the file, including "LoaderDll.dll," "QageBox1USER," "xhmowl," "?KEYKY," "HH:mm:_s," and "=licni] has maX0t." The rule triggers if the file size is less than 90KB and meets certain conditions based on the identified patterns.
  Updated-Date: '2024_08_07'
CN_APT_ZeroT_extracted_Zlh:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 36661c71adac8acf02e26b7fbf59fa00
  Ruleset: securityonion-yara
  Summary: This rule detects the ZeroT Remote Access Trojan (RAT) attributed to a Chinese Advanced Persistent Threat (APT) group, specifically targeting the file named Zlh.exe. It identifies the presence of particular strings such as "nflogger.dll," a specific error message regarding CreateProcess API failures, logging of the StartZlhh function's execution, and a formatted string related to executables. The rule fires when these patterns are found in executable files smaller than 300KB that have the characteristic 'MZ' header at the beginning, indicating a DOS executable.
  Updated-Date: '2024_08_07'
CN_APT_ZeroT_nflogger:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1b02cd3e413b19032bda02d3f45cd74e
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a malicious DLL file, specifically "nflogger.dll," associated with the ZeroT Remote Access Trojan (RAT) utilized by a Chinese Advanced Persistent Threat (APT) group. The rule triggers on a specific file structure beginning with "MZ" (0x5a4d), indicating a Windows executable file, and checks if the file size is less than 200KB. It further searches for a distinctive string pattern, "\\LoaderDll.VS2010\\Release\\", which is indicative of this particular threat.
  Updated-Date: '2024_08_07'
CN_Actor_AmmyyAdmin:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 87c5c32975c9502af90b49bf134c743e
  Ruleset: securityonion-yara
  Summary: "This rule detects the presence of Ammyy Admin Downloader, which is remote control software often used for unauthorized access or malware distribution. The detection is based on identifying a specific file path within the source code directory, due to its association with the software\u2019s compilation artifacts. The condition checks the file's binary header signature and ensures the file size is under 2000KB to confirm its identity."
  Updated-Date: '2024_08_07'
CN_Actor_RA_Tool_Ammyy_mscorsvw:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: fc26095f1cfa8c35a151209ba601577b
  Ruleset: securityonion-yara
  Summary: This rule detects the Ammyy remote access tool, identifying it through specific text strings present within the software. These strings include prompts such as requesting a password to access a remote computer, rejecting access requests in German, and messages about automatic execution upon system restart. Additionally, the rule checks for file properties like being a Windows executable and having a file size less than 4,000 KB.
  Updated-Date: '2024_08_07'
CN_GUI_Scanner:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 30b1edabf9b5166515bbc8eb13fcfb7a
  Ruleset: securityonion-yara
  Summary: This rule detects an unidentified GUI scanner tool by looking for specific string patterns in files. It identifies files that contain the ASCII strings "good.txt", "IP.txt", and "xiaoyuer", as well as wide string representations of "ssh(" and ").exe". This combination of strings is indicative of the presence of the unknown scanner tool.
  Updated-Date: '2024_08_07'
CN_Hacktool_1433_Scanner:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d0c1fefb0650f337e64b0d2ce2e47b5a
  Ruleset: securityonion-yara
  Summary: "This rule detects a Chinese MSSQL scanner by identifying specific patterns and commands associated with its activity. It searches for the occurrence of the string \"1433\" and the string \"1433V\" in a wide character format. Additionally, it looks for indications of deleting specific text files such as \"Weak1.txt\" and \"Attack.txt\", as well as the command to delete files in the directory \u201CC:\\Windows\\system32\\doors.\u201D Another sign is the presence of a command to start Internet Explorer with a specific URL (\"http://www.crsky.com/soft/4818.html\"). The rule triggers when these strings are found within a file with an MZ header (indicating a Windows executable file)."
  Updated-Date: '2024_08_07'
CN_Hacktool_1433_Scanner_Comp2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3b6cf378c38582028501d371007fed7b
  Ruleset: securityonion-yara
  Summary: This rule detects a component of a Chinese MSSQL scanner by identifying specific string patterns associated with scanning activities on port 1433. The identified strings include variations of the number "1433" and a specific sequence of characters. The rule applies to files that begin with the "MZ" header, indicating a Windows executable.
  Updated-Date: '2024_08_07'
CN_Hacktool_BAT_PortsOpen:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 621c3aa1b33092d83637a3daf2f3eef2
  Ruleset: securityonion-yara
  Summary: This rule detects a Chinese Batch (BAT) hacktool designed for local port evaluation by searching for specific command strings used to parse 'netstat' and 'tasklist' outputs. The hacktool utilizes these commands to gather and display information about active TCP connections and their associated processes.
  Updated-Date: '2024_08_07'
CN_Hacktool_MilkT_BAT:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7bea856e65022e2fd025a8db9b5373bc
  Ruleset: securityonion-yara
  Summary: This rule detects a Chinese port scanning tool named MilkT, which uses a batch file (BAT) script. The rule identifies specific patterns within the script, including certain command-line operations such as parsing and tokenizing input from a text file and setting variables based on user choice input adjustments.
  Updated-Date: '2024_08_07'
CN_Hacktool_MilkT_Scanner:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 04d2e410aee8ccb314d4ee513e09911e
  Ruleset: securityonion-yara
  Summary: 'This rule detects a Chinese portscanner known as MilkT. It identifies key strings related to the software, including common library names like KERNEL32.DLL, CRTDLL.DLL, and WS2_32.DLL. Additionally, it searches for specific function references such as GetProcAddress and atoi, as well as unique patterns like "Bf **************" and "forming Time: %d/". These elements collectively help in the identification of the MilkT portscanner.'
  Updated-Date: '2024_08_07'
CN_Hacktool_SSPort_Portscanner:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 62f80d4ec0f314a0e6b2ae627ebdc431
  Ruleset: securityonion-yara
  Summary: This rule detects a Chinese port scanning tool known as SSPort. It identifies the presence of this tool by looking for specific strings within files, such as "Golden Fox," "Syn Scan Port," and "CZ88.NET" in their full wide character format.
  Updated-Date: '2024_08_07'
CN_Hacktool_S_EXE_Portscanner:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3185d387b2a9df0d3cffb1293d55b3fa
  Ruleset: securityonion-yara
  Summary: This rule detects a Chinese port scanner executable named "s.exe". It identifies the software by searching for specific strings in the binary, such as the file path "\Result.txt", the text "By:ZT QQ:376789051", and the website link "(http://www.eyuyan.com)".
  Updated-Date: '2024_08_07'
CN_Hacktool_ScanPort_Portscanner:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ef0871d67aa4ab4191d483b275044dce
  Ruleset: securityonion-yara
  Summary: This rule detects a Chinese port scanning tool known as ScanPort. It identifies the presence of this software by looking for specific strings within files, including "LScanPort," "LScanPort Microsoft," and the URL "www.yupsoft.com."
  Updated-Date: '2024_08_07'
CN_Honker_ACCESS_brute:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a615f4a1752fdbe034d116ebbbcdd199
  Ruleset: securityonion-yara
  Summary: This rule detects the file 'ACCESS_brute.exe' from the CN Honker Pentest Toolset by identifying specific strings within the file, such as ".dns166.co", "SExecuteA", and "NT_SINK_AddRef". Additionally, it checks the file size to be less than 20KB and validates the file header to match certain characteristics. This tool is likely utilized in penetration testing scenarios.
  Updated-Date: '2024_08_07'
CN_Honker_ASP_wshell:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9ced9c3490463c55d21397eadb37540c
  Ruleset: securityonion-yara
  Summary: This rule detects a sample from the CN Honker Pentest Toolset, specifically targeting a file named "wshell.txt." The file uses encoded VBScript and contains certain strings such as "UserPass=", "VerName=", and "StateName=". The file's size must be less than 200KB, and it should start with the hexadecimal sequence "0x253c."
  Updated-Date: '2024_08_07'
CN_Honker_Alien_D:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f29f5323fb29e0a823ecc3d331719f61
  Ruleset: securityonion-yara
  Summary: This rule detects a specific script from the CN Honker Pentest Toolset, specifically the "D.ASP" file. The script contains specific patterns and keywords related to file system operations and form handling in an ASP environment, including paths referencing Windows directories, scripting of the File System Object, and HTML form elements. The detection is triggered if the file size is less than 30KB and at least two of the specified patterns are found within the file.
  Updated-Date: '2024_08_07'
CN_Honker_Alien_command:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b670a161e8ad1fcffe4e3b01c1e39966
  Ruleset: securityonion-yara
  Summary: This rule detects a script from the CN Honker Pentest Toolset, specifically aiming to identify the presence of particular command instructions. It focuses on the content of files that include specific directory manipulation and echo commands, as well as the execution of a Visual Basic Script (VBScript) targeting IIS (Internet Information Services) through the Windows command interpreter. The rule is designed to catch files smaller than 8KB that contain these specific strings.
  Updated-Date: '2024_08_07'
CN_Honker_Alien_ee:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4320b19cfc153a4e5986e76d7d456025
  Ruleset: securityonion-yara
  Summary: This rule detects a specific sample from the CN Honker Pentest Toolset named "ee.exe." The tool is identified by unique strings related to obtaining IIS usernames, passwords, and reading IIS IDs for FreeHost. The detection is based on a file size under 50KB and the presence of specified strings within the file.
  Updated-Date: '2024_08_07'
CN_Honker_Alien_iispwd:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 56137c7a45dbcbf3d5b21ad18ae706aa
  Ruleset: securityonion-yara
  Summary: This rule detects a specific script associated with the CN Honker Pentest Toolset, particularly focusing on a file named "iispwd.vbs." It identifies the presence of the script by looking for specific strings within files that are smaller than 3KB, including script elements characteristic of IIS object manipulation and an echo statement referencing an external URL.
  Updated-Date: '2024_08_07'
CN_Honker_Arp_EMP_v1_0:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 28ee300045dc84d35941f5c28eb9434b
  Ruleset: securityonion-yara
  Summary: This rule detects a specific sample from the CN Honker Pentest Toolset, specifically the "Arp EMP v1.0.exe" file. The detection criteria include the presence of the string "Arp EMP v1.0.exe" in a wide format, a PE file indicator with the magic number 0x5a4d, and a file size of less than 400KB. The rule uses a known hash value for precise identification.
  Updated-Date: '2024_08_07'
CN_Honker_AspxClient:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6c4b306ed7e9fbe642f4494c2d72ad4e
  Ruleset: securityonion-yara
  Summary: This rule detects a sample from the CN Honker Pentest Toolset, specifically targeting the file AspxClient.exe. It uses strings related to hash software, debug paths, shell files, and injection activities. The condition checks the file's PE header and size, triggering if three out of the four specified strings are present and the file size is less than 1000KB.
  Updated-Date: '2024_08_07'
CN_Honker_Baidu_Extractor_Ver1_0:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a5f2fa24f923444cf7d5ec482573270f
  Ruleset: securityonion-yara
  Summary: This rule detects a specific executable file from the CN Honker Pentest Toolset, specifically identified as "Baidu_Extractor_Ver1.0.exe." This file includes distinct strings such as a reference to the user directory "\\Users\\Admin," domain references "soso.com" and "baidu.com," and a command execution string "cmd /c ping." The file size is constrained to be less than 500KB, and it begins with a magic number indicating a Windows executable. The defined hash ensures precise identification of this file.
  Updated-Date: '2024_08_07'
CN_Honker_COOKIE_CooKie:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6b47e5c63c447ee7a0d6810939b81fe3
  Ruleset: securityonion-yara
  Summary: This rule detects a sample from the CN Honker Pentest Toolset, specifically targeting the file "CooKie.exe". It identifies the presence of the tool by looking for specific strings within the file, including a SQL injection pattern and the filename itself. The rule applies to executable files that start with the "MZ" signature and are less than 360KB in size, ensuring a precise match to this particular tool associated with penetration testing activities.
  Updated-Date: '2024_08_07'
CN_Honker_ChinaChopper:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5d32d3ef1a1daf23171e42aefc9c16d1
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the ChinaChopper.exe file, part of the CN Honker Pentest Toolset. It identifies the malware using specific strings associated with known malicious behavior, such as handling magic quotes in PHP and executing Windows command line instructions. Additionally, it includes another identifiable string related to remote code execution response handling. These elements combined with the file's metadata and size help in accurately flagging the ChinaChopper malware.
  Updated-Date: '2024_08_07'
CN_Honker_ChinaChopper_db:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ac6221b702e2d3d67c452faf4f12c401
  Ruleset: securityonion-yara
  Summary: This rule detects a specific script from the CN Honker Pentest Toolset, namely the file "db.mdb". It identifies particular string patterns related to an HTTP server request, an action parameter associated with login, and a localhost header. The script appears to include blacklisted strings, indicating its potential relevance to malicious activities or pentesting frameworks. To trigger detection, the file must be less than 340KB and contain at least two of the specified strings.
  Updated-Date: '2024_08_07'
CN_Honker_Churrasco:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: fac79dace66f4f80c350d4a84bac2f02
  Ruleset: securityonion-yara
  Summary: This rule detects the CN Honker Pentest Toolset's "Churrasco.exe" file. It identifies specific strings within the executable, such as "HEAD9 /", "logic_er", "proggam", "DtcGetTransactionManagerExA", "GetUserNameA", and "OLEAUT". The file must have a specific header and be less than 1276 KB in size for the detection to be valid.
  Updated-Date: '2024_08_07'
CN_Honker_CleanIISLog:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: cf0eb1920ae951fe14248b8955802a6c
  Ruleset: securityonion-yara
  Summary: This rule detects the file `CleanIISLog.exe` associated with the CN Honker Pentest Toolset, which is used for cleaning or manipulating IIS log files. The detection criteria include specific string patterns related to the usage instructions of the tool and the file's hash value. The rule checks for a Portable Executable (PE) header and ensures the file size is below 200KB.
  Updated-Date: '2024_08_07'
CN_Honker_CnCerT_CCdoor_CMD:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: acbd7be9eea5634c1c8fc0caf3c194e1
  Ruleset: securityonion-yara
  Summary: This rule detects a specific sample from the CN Honker Pentest Toolset, particularly focusing on a file named CnCerT.CCdoor.CMD.dll. The rule looks for certain strings such as "CnCerT.CCdoor.CMD.dll," "cmdpath," "Get4Bytes," and "ExcuteCmd" within files smaller than 22KB. Additionally, the file must have the bytes 0x5a4d at the beginning, which typically indicates a Windows executable.
  Updated-Date: '2024_08_07'
CN_Honker_CnCerT_CCdoor_CMD_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 933174a7ed4a71f10edfc1e5d4ddbb58
  Ruleset: securityonion-yara
  Summary: This rule detects a sample from the CN Honker Pentest Toolset, specifically a file named CnCerT.CCdoor.CMD.dll2. It identifies the presence of this malicious file by looking for specific strings such as "cmd.dll," "cmdpath," "Get4Bytes," and "ExcuteCmd," combined with certain file characteristics like its size being less than 22KB and its signature at the file beginning. This particular tool is associated with executing commands and interacting with command paths, often seen in pentesting activities.
  Updated-Date: '2024_08_07'
CN_Honker_Codeeer_Explorer:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: dfa2b03a0be50ff7428a8aaedb69db10
  Ruleset: securityonion-yara
  Summary: This rule detects a specific executable from the CN Honker pentest toolset named "Codeeer Explorer.exe." The detection is based on the presence of certain strings, including "Codeeer Explorer.exe" and "webBrowser1_ProgressChanged," and ensures the file size is under 470KB. The rule specifically looks for these ASCII and wide character strings and a particular file header value, making it effective for identifying this specific sample of pentesting software.
  Updated-Date: '2024_08_07'
CN_Honker_CookiesView:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7ca7b52233eb558619e8369a251510fd
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a tool called CookiesView.exe, which is part of the CN Honker Pentest Toolset. The rule identifies this file by checking for specific strings within it, including a version string "V1.0  Http://www.darkst.com Code:New4", an email address "maotpo@126.com", and the domain "www.baidu.com". Additionally, the file is confirmed as matching if it adheres to a particular file structure starting with the "MZ" header and is less than 640KB in size.
  Updated-Date: '2024_08_07'
CN_Honker_CoolScan_scan:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f970b236061f95bb684f1db5ab5689ae
  Ruleset: securityonion-yara
  Summary: This rule detects a file associated with the CN Honker Pentest Toolset named "scan.exe". The specific strings identified within the file include a user-agent string typically associated with "huasai" and the phrase "scan web.exe" in wide character encoding. The rule applies to files with a certain PE header signature and a file size less than 3680 KB.
  Updated-Date: '2024_08_07'
CN_Honker_Cracker_SHELL:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9ae572b1ad72ea0d9bde293dfeee4eba
  Ruleset: securityonion-yara
  Summary: This rule detects a specific executable file named SHELL.exe associated with the CN Honker Pentest Toolset. The rule identifies the file based on a unique hash value, several specific string patterns, and file characteristics. The targeted strings include a local URL "http://127.0.0.1/error1.asp," various forms of the word "password," a reference to the directory or file "\SHELL," and the term "WebBrowser1." These strings help in recognizing patterns commonly associated with the SHELL.exe file, collectively ensuring accurate detection if all conditions are met within a file smaller than 200KB with a specified initial byte sequence.
  Updated-Date: '2024_08_07'
CN_Honker_DLL_passive_privilege_escalation_ws2help:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 509cabee5e98ee6f3220d73d75e9a90c
  Ruleset: securityonion-yara
  Summary: This rule detects a malicious sample from the CN Honker Pentest Toolset, specifically targeting the file "ws2help.dll". The rule identifies this DLL, potentially used for passive privilege escalation, through its file size being under 30KB, a specific hash value, and the presence of the strings "PassMinDll.dll" and "\\ws2help.dll".
  Updated-Date: '2024_08_07'
CN_Honker_D_injection_V2_32:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2bc3a102b465c7c38315e1bdb43b1ac9
  Ruleset: securityonion-yara
  Summary: "This rule detects a sample from the CN Honker Pentest Toolset, specifically the file \"D_injection_V2.32.exe\". It identifies particular characteristics, including specific strings within the file, such as \"Missing %s property(CommandText does not return a result set{Error creating obje\" and a command to download and save a file from an external server using TFTP. The detection conditions also take into account the file\u2019s size and format."
  Updated-Date: '2024_08_07'
CN_Honker_DictionaryGenerator:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d91b862d3429e80cd4f3b9069dcec403
  Ruleset: securityonion-yara
  Summary: This rule detects the DictionaryGenerator.exe file from the CN Honker Pentest Toolset. It identifies the presence of specific strings such as "`PasswordBuilder" and "cracker" within the executable file, ensuring the file size is less than 3650KB. The rule aims to identify a particular sample with a matching hash value associated with penetration testing activities.
  Updated-Date: '2024_08_07'
CN_Honker_F4ck_Team_F4ck_3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2cb845998010aae6b0337db20b76cb28
  Ruleset: securityonion-yara
  Summary: This rule detects a file associated with the CN Honker Pentest Toolset, specifically targeting the executable named F4ck_3.exe. The detection criteria include several distinct strings within the file, such as "F4ck.exe" and "Team.F4ck.Net", which indicate components or activities related to this toolset. It also looks for references to "@Netapi32.dll" and error messages like "DLL ERROR" and "NO Net Add User". The overall condition checks that the file is a Windows executable (indicated by '0x5a4d' at the beginning) and its size is less than 100KB.
  Updated-Date: '2024_08_07'
CN_Honker_F4ck_Team_f4ck:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d2d8e81f64a9ea4e7b6bfce1f38f0c77
  Ruleset: securityonion-yara
  Summary: This rule detects a specific script associated with the CN Honker Pentest Toolset, specifically a file named "f4ck.txt." The rule looks for mentions of certain strings such as "PassWord:F4ckTeam!@#", "UserName:F4ck," and "F4ck Team." The condition for triggering the detection is that the file size must be less than 1KB and all specified strings must be present in the file.
  Updated-Date: '2024_08_07'
CN_Honker_F4ck_Team_f4ck_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e076ec2a8978ecd1b2f9680b8859a25e
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a particular sample from the CN Honker Pentest Toolset, specifically the file named f4ck_2.exe. It identifies this file by looking for specific strings within the executable, such as "F4ck.exe", "@Netapi32.dll", "Team.F4ck.Net", "Administrators", and "F4ck Team". The file is expected to start with the typical 'MZ' header and be smaller than 220KB.
  Updated-Date: '2024_08_07'
CN_Honker_F4ck_Team_f4ck_3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 760c69a55508f63dea98d8a9147fa1b4
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a file named "f4ck.exe," which is part of the CN Honker Pentest Toolset. This particular toolset includes samples with specific strings such as "File UserName PassWord [comment] /add", "No Net.exe Add User", "BlackMoon RunTime Error:", "Team.F4ck.Net", and "admin 123456789". These strings are indicative of software used potentially for malicious purposes, likely related to unauthorized user management and administrative functions. The rule checks for these patterns and confirms the detection if at least four of the specified strings are present in files smaller than 100KB.
  Updated-Date: '2024_08_07'
CN_Honker_FTP_scanning:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b1f3558087e19b3d709fddd213a80108
  Ruleset: securityonion-yara
  Summary: This rule detects an executable file named FTP_scanning.exe, which is part of the CN Honker Pentest Toolset. The detection is based on specific ASCII string patterns such as "CNotSupportedE," "nINet.dll," "?=MODULE," and "MSIE 6*". Additionally, it checks that the file starts with the "MZ" header (indicating a Windows executable) and that its size is less than 550KB.
  Updated-Date: '2024_08_07'
CN_Honker_Fckeditor:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e347bfe19339cad1bba4519657177fa3
  Ruleset: securityonion-yara
  Summary: This rule detects a specific sample from the CN Honker Pentest Toolset, specifically targeting the file named Fckeditor.exe. It identifies the presence of the executable by checking for a reference to "Fckeditor.exe" and a particular string pattern associated with the process "explorer.exe" accessing a specific URL. The rule employs a mixture of string patterns and file size constraints to determine the presence of the targeted file.
  Updated-Date: '2024_08_07'
CN_Honker_Fpipe_FPipe:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4f494053e7acba0f550db7db45c9b2ed
  Ruleset: securityonion-yara
  Summary: This rule detects the FPipe.exe file from the CN Honker Pentest Toolset by matching specific text strings within the file, such as error messages related to TCP socket creation, a URL referring to Foundstone, and a message about port address conflicts. The file is identified by its unique hash and verified by its size and header values.
  Updated-Date: '2024_08_07'
CN_Honker_GetHashes:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1c789f1ebc109f0574a7933fb5487cb7
  Ruleset: securityonion-yara
  Summary: This rule detects the "GetHashes.exe" file, part of the CN Honker Pentest Toolset. The tool is identified by specific strings related to error messages and instructions involved in reading and processing the Windows SAM registry hive and system key files. The rule checks for the presence of these specific strings within an executable file smaller than 87KB that begins with the typical "MZ" header used in Windows executable files.
  Updated-Date: '2024_08_07'
CN_Honker_GetHashes_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4fecc71ad1abb25739dde650eef36b45
  Ruleset: securityonion-yara
  Summary: This rule detects the "GetHashes.exe" file from the CN Honker Pentest Toolset. It identifies the file based on specific strings found within, such as references to "GetHashes.exe" and error messages related to SAM registry files and system keys. The file is confirmed as legitimate if it meets certain conditions, including a specific file size and format.
  Updated-Date: '2024_08_07'
CN_Honker_GetPass_GetPass:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3469408e633e6734b404abf911360c0d
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the GetPass.exe file from the CN Honker Pentest Toolset. It identifies specific strings within the file, such as directory paths, typos in administrative execution prompts, and key prompts for exiting. The rule triggers if the file has a particular hash, matches an expected size limit, and contains all the specified strings.
  Updated-Date: '2024_08_07'
CN_Honker_GetSyskey:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1c5cd8b2dc448194a740a8d760a6c2e6
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the GetSyskey.exe file, a sample from the CN Honker Pentest Toolset. It identifies specific text strings within the file such as "GetSyskey <SYSTEM registry file> [Output system key file]" and "The system key file \"%s\" is created." Additionally, it checks for the file header value 0x5a4d and ensures the file size is less than 40KB. These characteristics are used to identify the GetSyskey.exe tool which is involved in system key extraction.
  Updated-Date: '2024_08_07'
CN_Honker_GetWebShell:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0a075e33b0e17fa92a1733934d4d2a86
  Ruleset: securityonion-yara
  Summary: This rule detects the GetWebShell.exe file from the CN Honker Pentest Toolset. It identifies specific strings within the executable, such as commands to download files using a VBScript, a URL suggesting SQL injection, a command to add a new user with elevated privileges, and an SQL command sequence to manipulate database tables. The rule applies if the file size is less than 70KB and contains at least one of the specified strings.
  Updated-Date: '2024_08_07'
CN_Honker_GroupPolicyRemover:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 40041abba54f79501017384ecaea3d1c
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the GroupPolicyRemover.exe file, which is a part of the CN Honker Pentest Toolset. The rule identifies specific strings within the executable, including "GP_killer.EXE," "GP_killer Microsoft," and "SHDeleteKeyA." The conditions for detection include checking the file's header and ensuring the file size is less than 700KB.
  Updated-Date: '2024_08_07'
CN_Honker_HASH_32:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 460e9984bbfc00c0f0dbb7ae8950715d
  Ruleset: securityonion-yara
  Summary: This rule detects a file associated with the CN Honker Pentest Toolset, specifically targeting a file identified as 32.exe. The detection relies on the presence of particular strings within the file, such as messages about undefined OS versions, attempts to run the program as an administrator, and specific LUIDs not being found. These indicators, along with the file's hash value, are used to identify this pentesting software. The rule is applicable to files smaller than 240KB that begin with the magic number 0x5a4d, which is indicative of a Windows executable.
  Updated-Date: '2024_08_07'
CN_Honker_HASH_PwDump7:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 20f4fa3e3b022fd016fc3f5757ad92c4
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the PwDump7.exe file, which is part of the CN Honker Pentest Toolset. The detection relies on matching specific strings within the executable, such as paths related to the SYSTEM32 CONFIG SAM directory, error messages indicating failure to dump files, and messages about users and passwords. The file is identified by a particular hash value and must have a specific file size and header characteristics to be recognized.
  Updated-Date: '2024_08_07'
CN_Honker_HASH_pwhash:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 36fa41b283f1aa2660ac1e12bb1ea986
  Ruleset: securityonion-yara
  Summary: This rule detects a sample from the CN Honker Pentest Toolset, specifically targeting the file "pwhash.exe". It is identified by its unique hash value and certain explicit strings found within the executable. The strings suggest that "pwhash.exe" is associated with password dumping operations, such as through "quarks-pwdump.exe" commands, indicating its use in extracting password hashes, including historical hashes, possibly from NTDS files. The file is verified to be a valid PE file with a size under 1000KB, and detection is triggered if any of the specified strings are found.
  Updated-Date: '2024_08_07'
CN_Honker_HTran2_4:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4e499fb92bfafbaca5e966e0fbc0bba0
  Ruleset: securityonion-yara
  Summary: This rule detects the CN Honker Pentest Toolset file named HTran2.4.exe. It identifies the presence of specific strings within the executable, including prompts for SOCKS type selection and notifications of new connections. The detection relies on verifying the executable format and ensuring that the file size is less than 180KB.
  Updated-Date: '2024_08_07'
CN_Honker_Happy_Happy:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7e87ae55fbb2499591ca8de1c0fb1824
  Ruleset: securityonion-yara
  Summary: This rule detects the "Happy.exe" file from the CN Honker Pentest Toolset, specifically used for penetration testing activities. It identifies the presence of distinctive strings such as an HTML form with the POST method, references to "domainscan.exe," the URL "http://www.happysec.com/", and the term "cmdshell." The rule checks for these strings in a file with a size less than 655KB and a specific header characteristic.
  Updated-Date: '2024_08_07'
CN_Honker_Havij_Havij:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6cf57adb62146427c7c774b150ca8fbb
  Ruleset: securityonion-yara
  Summary: This rule detects a sample from the CN Honker Pentest Toolset specifically targeting the file Havij.exe. It identifies the file based on the presence of specific strings related to the user agent and a command for backing up a SQL Server database. The detection is further validated by checking that the file starts with the signature "0x5a4d" and is less than 3000KB in size. The rule aims to identify potential use of the Havij SQL injection tool, which is often employed in penetration testing to exploit SQL vulnerabilities.
  Updated-Date: '2024_08_07'
CN_Honker_HconSTFportable:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a03e5a40fbfe062e959a369f3093b408
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a file named "HconSTFportable.exe," which is part of the CN Honker Pentest Toolset. The toolset is associated with penetration testing activities. The detection is based on specific strings within the file, including the filename "HconSTFportable.exe" and the URL "www.Hcon.in." Additionally, the file must be a valid executable (indicated by the magic number 0x5a4d) and be less than 354KB in size.
  Updated-Date: '2024_08_07'
CN_Honker_Hookmsgina:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 459f6087e7165ad5d68bf66a6c3bb980
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a malicious DLL file named Hookmsgina.dll associated with the CN Honker Pentest Toolset. Specific strings within the file, such as "\\\\.\\pipe\\WinlogonHack" and "Global\\WinlogonHack_Load%u", are used to identify the payload that manipulates Windows login processes. The file size must be less than 300KB, and it must start with the hexadecimal value 0x5a4d. The detection focuses on recognizing patterns linked to unauthorized access and credential interception tools.
  Updated-Date: '2024_08_07'
CN_Honker_Htran_V2_40_htran20:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 097677f2bf21e86465d737b39e081031
  Ruleset: securityonion-yara
  Summary: This rule detects the htran20.exe file, a part of the CN Honker Pentest Toolset, by identifying specific strings associated with its functionality. These strings include references to connection parameters and error messages, such as "%s -slave  ConnectHost ConnectPort TransmitHost TransmitPort," prompts for user input on SOCKS types, error messages for failed connections, and formatted strings involving IPs and ports. The rule applies to files smaller than 200KB, ensuring they match all specified string patterns and confirming the file's nature as a reconnaissance and connection utility used in penetration testing scenarios.
  Updated-Date: '2024_08_07'
CN_Honker_IIS6_iis6:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c6659a96721b73bcf45bdc4a4bbc08c6
  Ruleset: securityonion-yara
  Summary: This rule detects a sample from the CN Honker Pentest Toolset, specifically targeting a file named "iis6.com". It identifies this tool by looking for specific ASCII strings such as "GetMod;ul", "excjpb", "LEAUT1", and "EnumProcessModules", ensuring these strings are present in their entirety within the file. Additionally, the rule checks that the file begins with the "MZ" header (which marks it as a Windows executable) and is smaller than 50KB in size, employing these criteria to confirm the presence of the targeted pentest tool.
  Updated-Date: '2024_08_07'
CN_Honker_IIS_logcleaner1_0_readme:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1a39c2c1d5cd0ba552c3086d06d0480d
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific script from the disclosed CN Honker Pentest Toolset. The identified file, readme.txt, is associated with a tool named "LogCleaner.exe" that likely requires IP and log path parameters to function. Additionally, the script contains a hardcoded URL, "http://l-y.vicp.net." The rule triggers when the file size is less than 7KB and all specified string conditions are met.
  Updated-Date: '2024_08_07'
CN_Honker_Injection:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0324fe7d8408afdfc753ef19b90bd36e
  Ruleset: securityonion-yara
  Summary: This rule detects a file named Injection.exe, which is part of the CN Honker Pentest Toolset. It identifies the malware by recognizing specific strings within the file, such as a local URL "http://127.0.0.1/6kbbs/bank.asp" and a reference to "jmPost.asp." The rule further verifies the presence of the injection file by checking that it is a PE file with a particular signature and that its file size is less than 220KB.
  Updated-Date: '2024_08_07'
CN_Honker_Injection_Transit_jmCook:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6d75648785a119f471ddf862f35efc64
  Ruleset: securityonion-yara
  Summary: 'This rule detects a specific script file, jmCook.asp, associated with the CN Honker pentest toolset. It looks for two particular strings within files smaller than 9KB: one containing ".Open \"POST\",PostUrl,False" and another containing "JmdcwName=request(\"jmdcw\")". These strings are indicative of the script''s behavior and purpose in the context of penetration testing.'
  Updated-Date: '2024_08_07'
CN_Honker_Injection_transit:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c7a77828e37401267a3bf26f739aa577
  Ruleset: securityonion-yara
  Summary: This rule detects a file named "Injection_transit.exe" associated with the CN Honker Pentest Toolset. The file is identified by specific strings, including a placeholder app description, a copyright notice from ZYDSoft Corp. dated 2003, and the string "ScriptnackgBun." The specified conditions include a PE header value, a file size of less than 3175KB, and the presence of all defined strings.
  Updated-Date: '2024_08_07'
CN_Honker_Interception:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 34b849d344a2e9768b81a580991fd775
  Ruleset: securityonion-yara
  Summary: This rule detects the CN Honker pentesting tool known as "Interception.exe," identified by specific strings within the file that suggest the presence of malicious components such as "Hookmsgina.dll" and "WinlogonHackEx." The file is a Windows executable with a size less than 160KB and contains certain markers linked to PEStudio's blacklist.
  Updated-Date: '2024_08_07'
CN_Honker_Interception3389_setup:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3d3693d8f51b9d01a2a3aa314a53fe21
  Ruleset: securityonion-yara
  Summary: "This rule detects a sample from the CN Honker Pentest Toolset, specifically identifying the file setup.exe. The rule looks for specific ASCII strings, such as paths and Windows registry entries associated with malicious activity\u2014like \"SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Winlogon\\\\Notify\\\\%s\" and \"EventStartShell,\" as well as specific filenames like \"temp%d.bat\" and \"wminotify.dll.\" The condition for detection includes both the presence of these strings and a file size less than 400KB."
  Updated-Date: '2024_08_07'
CN_Honker_Intersect2_Beta:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6e56e5daf19ea51544b7eeac227f9275
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a script from the disclosed CN Honker Pentest Toolset, specifically targeting the file named Intersect2-Beta.py. It looks for specific commands executed within the script that are indicative of its activity, such as listing all files in a directory, retrieving user account information, and removing a directory named "credentials." The condition for detection is met if certain identifiers and commands exist within a file smaller than 50KB.
  Updated-Date: '2024_08_07'
CN_Honker_InvasionErasor:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: bb1bf2c4bdf3251278293c9428fb3369
  Ruleset: securityonion-yara
  Summary: This rule detects the InvasionErasor.exe sample from the CN Honker Pentest Toolset. It identifies specific strings associated with Windows directory paths, configuration files, and common system operations keywords. These include "c:\\windows\\system32\\config\\*.*", "c:\\winnt\\*.txt", "Command1", "Win2003", and "Win 2000". The rule applies when the file type begins with the magic number 0x5a4d, signifying a Windows executable, and the filesize is less than 60KB. The purpose is to flag this specific pentesting tool based on its identifiable attributes.
  Updated-Date: '2024_08_07'
CN_Honker_LPK2_0_LPK:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7160827ce7c0eb8ea288c79ea715d2a4
  Ruleset: securityonion-yara
  Summary: "This rule detects a specific file from the CN Honker Pentest Toolset, particularly identifying an LPK.DAT file based on several distinctive string patterns. These patterns include references to modifying the accessibility utility 'sethc.exe,' resetting the guest account password, and specific paths linked to the system's DLL cache. The rule further specifies conditions such as the file\u2019s initial byte sequence and file size constraints to ensure accurate identification."
  Updated-Date: '2024_08_07'
CN_Honker_Layer_Layer:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 67e8fa9b900cb13027d91ef3cba729ae
  Ruleset: securityonion-yara
  Summary: This rule detects a specific file named "Layer.exe" associated with the CN Honker pentesting toolset. It identifies the file by checking for the presence of a particular debug path ("\\Release\\Layer.pdb"), a wide string for "Layer.exe," and a wide user-agent string that mimics Firefox 26.0 on Windows NT 6.3. Additionally, it ensures the file is a valid PE file with an "MZ" header and has a size less than 300KB.
  Updated-Date: '2024_08_07'
CN_Honker_LogCleaner:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 30b88b04e2e3ef9c58a8a27636a807d5
  Ruleset: securityonion-yara
  Summary: This rule detects a file associated with the CN Honker Pentest Toolset known as LogCleaner.exe. It identifies specific string patterns such as ".exe <ip> [(path]" and "LogCleaner v" within the file, confirming its presence. Additionally, it verifies that the file header corresponds to the "MZ" format and ensures the file size is below 250KB to confirm the detection criteria. This tool is known for its functionality in cleaning logs, likely used in penetration testing activities.
  Updated-Date: '2024_08_07'
CN_Honker_MAC_IPMAC:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 868b991c8315697186787ddf9356a8d4
  Ruleset: securityonion-yara
  Summary: This rule detects a specific file, IPMAC.exe, which is associated with the CN Honker Pentest Toolset. The rule identifies the file through its unique hash value and specific strings present within the file, such as "Http://Www.YrYz.Net," "IpMac.txt," and "192.168.0.1." Additionally, it checks that the file begins with the magic number 0x5a4d and ensures the file size is less than 267KB. This combination of criteria helps to accurately identify the presence of this pentest tool component.
  Updated-Date: '2024_08_07'
CN_Honker_MSTSC_can_direct_copy:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5d918ce4a858a34d93a38b4a51ed1f2d
  Ruleset: securityonion-yara
  Summary: This rule detects a specific executable file named MSTSC_can_direct_copy.EXE, which is a sample from the CN Honker Pentest Toolset. It identifies unique strings within the executable, such as a particular path to a debug file, the phrase "Clear Password," and a reference to migrating legacy connection files. The file must be a Portable Executable (PE) with a size of less than 600KB for the rule to apply accurately.
  Updated-Date: '2024_08_07'
CN_Honker_ManualInjection:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: aba1214a84480ee1fb43958b778c6dc1
  Ruleset: securityonion-yara
  Summary: This rule detects a file named "ManualInjection.exe," which is part of the CN Honker Pentest Toolset. The rule identifies the file based on specific strings found within it, such as URLs "http://127.0.0.1/cookie.asp?fuck=" and "http://Www.cnhuker.com | http://www.0855.tv". Additionally, the rule checks that the beginning of the file matches the typical signature of a Windows executable file (MZ header) and that its size is less than 3000KB. These criteria help to accurately pinpoint this particular pentesting tool.
  Updated-Date: '2024_08_07'
CN_Honker_Master_beta_1_7:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b430ad7edb4e0130e7d1800df9b38582
  Ruleset: securityonion-yara
  Summary: 'This rule detects a specific executable file named "Master_beta_1.7.exe" associated with the CN Honker Pentest Toolset. The detection is based on the presence of certain strings, including a URL "http://seo.chinaz.com/?host=" and a location string "Location: getpass.asp?info=", within the file, as well as specific file attributes such as its file magic value and size being less than 312KB.'
  Updated-Date: '2024_08_07'
CN_Honker_MatriXay1073:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a339c5a368f18524c49a5cb3044c1b42
  Ruleset: securityonion-yara
  Summary: This rule detects a sample from the CN Honker Pentest Toolset, specifically targeting the file MatriXay1073.exe. It identifies the presence of specific strings within the file, such as a "User-Agent" string mimicking an outdated version of Internet Explorer, a reference to a user settings file (.ini), a local URL format string, and a string related to retrieving all user password hashes. The rule ensures the file has a specific initial byte sequence typical for executable files and that the file size is under 9100KB.
  Updated-Date: '2024_08_07'
CN_Honker_Md5CrackTools:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 171adbb6fd2fca35d4038726dcbafc6e
  Ruleset: securityonion-yara
  Summary: This rule detects the file "Md5CrackTools.exe," identified within the CN Honker Pentest Toolset. It looks for specific characteristics in the file, including a user agent string resembling an older version of Internet Explorer and HTML content related to MD5 hash parameters. The tool aims to match these attributes when the file size is less than 4580KB and the PE header signature is present.
  Updated-Date: '2024_08_07'
CN_Honker_NBSI_3_0:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4b05c414972f33be97dcdd5761b4ee9d
  Ruleset: securityonion-yara
  Summary: This rule detects the CN Honker Pentest Toolset, specifically targeting the NBSI 3.0.exe file. It identifies the file through specific string patterns such as commands associated with Microsoft's Wscript.Shell and SQL Server's exec capabilities, which are commonly blacklisted in security tools. The rule ensures that the file's size is less than 2,600KB, and it matches certain identifiable features, such as known malicious commands and URLs related to localhost.
  Updated-Date: '2024_08_07'
CN_Honker_NetFuke_NetFuke:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 69a279b936e04688f79af383b8018e79
  Ruleset: securityonion-yara
  Summary: This rule detects a file associated with the CN Honker Pentest Toolset, specifically named "NetFuke.exe." It identifies the file based on a certain hash value, specific string patterns related to MAC flooding and file naming conventions, and constraints on file size and header content.
  Updated-Date: '2024_08_07'
CN_Honker_Oracle_v1_0_Oracle:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 15893b843df1865060b2734d436d149f
  Ruleset: securityonion-yara
  Summary: This rule detects the "Oracle.exe" file, which is part of the CN Honker Pentest Toolset. The rule focuses on specific ASCII strings found within the executable. These strings include a URL reference ("http://localhost/index.asp?id=zhr"), a function name ("OnGetPassword"), and a user agent string associated with the Indy Library ("Mozilla/3.0 (compatible; Indy Library)"). The executable must also match a specific file size and file header condition for the rule to trigger.
  Updated-Date: '2024_08_07'
CN_Honker_PHP_php11:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 599cb7385f37be1a2270d83511174e6e
  Ruleset: securityonion-yara
  Summary: This rule detects traces of the CN Honker Pentest Toolset, specifically targeting a sample named "php11.txt". It identifies strings indicative of malicious PHP scripts that perform actions such as executing shell commands to retrieve system IDs, injecting code into HTML files, and echoing found cPanel credentials. The rule is designed to flag files smaller than 800KB if they contain all specified malicious string patterns.
  Updated-Date: '2024_08_07'
CN_Honker_Perl_serv_U:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2236fce20fe0cc06f63ba37dc4c50887
  Ruleset: securityonion-yara
  Summary: This rule detects a Perl script associated with the CN Honker Pentest Toolset, specifically the file "Perl-serv-U.pl." The script is identified by certain strings that indicate it is designed to interact with the "System32" directory on Windows systems and establish a socket connection to a specified administration port. Detection criteria include the presence of these identifying strings within a file smaller than 8KB.
  Updated-Date: '2024_08_07'
CN_Honker_Pk_Pker:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1e526974c9481fa5b451790c7b8d608f
  Ruleset: securityonion-yara
  Summary: This rule detects the CN Honker Pentest Toolset, specifically the file Pker.exe. It identifies distinctive strings associated with this pentest tool, such as paths to Windows command executables obfuscated to bypass filters, specific phrases indicating authorship and tool origin, and filenames like "Report.dat." These identifiers help to pinpoint this toolset, checking for five or more of these strings within executable files smaller than 500KB and starting with a standard MZ header.
  Updated-Date: '2024_08_07'
CN_Honker_PostgreSQL:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c59385a8793c14a4ba31e9a066229703
  Ruleset: securityonion-yara
  Summary: This rule detects a specific file named "PostgreSQL.exe" associated with the CN Honker Pentest Toolset. The rule identifies the file by looking for a unique hash value "1ecfaa91aae579cfccb8b7a8607176c82ec726f4" and specific strings within the file, such as "&http://192.168.16.186/details.php?id=1" and "PostgreSQL_inject." The conditions for detection include the presence of a Windows executable file signature and a file size of less than 2000KB.
  Updated-Date: '2024_08_07'
CN_Honker_Pwdump7_Pwdump7:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d64cecf2515cd60294ae39800b4f2110
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a batch script associated with the CN Honker Pentest Toolset, specifically targeting the Pwdump7.bat file. The script is designed to run the Pwdump7 executable to dump password hashes into a file named "pass.txt". The rule is triggered if the file size is less than 1KB and if the specified string patterns are found within the file.
  Updated-Date: '2024_08_07'
CN_Honker_SAMInside:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6f54f7381b41f089ba5437d57095568a
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific pentesting tool called SAMInside developed by CN Honker. The tool executable, SAMInside.exe, is designed to perform password recovery operations on Windows SAM files. The detection is based on specific strings within the file, namely "www.InsidePro.com" and "SAMInside.exe", combined with specific file characteristics, including the file's signature and size.
  Updated-Date: '2024_08_07'
CN_Honker_SQLServer_inject_Creaked:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 525cee01c299db471a826eddd115eb5a
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a pentest tool named SQLServer_inject_Creaked.exe, which is part of the CN Honker Pentest Toolset. The detection relies on specific strings found within the executable, including a website URL "http://localhost/index.asp?id=2" and an email address "zhaoxypass@yahoo.com.cn". The file must have a DOS header (identified by the magic number 0x5a4d) and be smaller than 8110KB in size.
  Updated-Date: '2024_08_07'
CN_Honker_Safe3WVS:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d23154c732fceb2ad18e5aa41ab4d472
  Ruleset: securityonion-yara
  Summary: This rule detects a specific executable file, "Safe3WVS.EXE," which is part of the CN Honker Pentest Toolset. The detection is based on unique strings found within the file, such as "2TerminateProcess," "mscoreei.dll," "SafeVS.exe," and "www.safe3.com.cn." Additionally, the rule checks for the presence of a registry path string "SOFTWARE\\Classes\\Interface\\" and the file size being less than 3000KB, along with the file header starting with the hexadecimal value 0x5a4d. The purpose of this rule is to identify this particular penetration testing software program.
  Updated-Date: '2024_08_07'
CN_Honker_ScanHistory:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c626064d05eca46a8af54c927936e9a9
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the CN Honker Pentest Toolset component, specifically identifying the "ScanHistory.exe" file. It looks for specific indicators within the file, including the names "ScanHistory.exe" and ".\\Report.dat," as well as a SQL query string "select  * from  Results order by scandate desc." This rule aims to identify the executable file by checking for these distinctive strings and ensuring the file size is below 200KB, along with a valid executable header.
  Updated-Date: '2024_08_07'
CN_Honker_SegmentWeapon:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8221e41a13cdfa856250c3326bb84c3c
  Ruleset: securityonion-yara
  Summary: 'This rule detects the presence of a file named "SegmentWeapon.exe" from the CN Honker Pentest Toolset. It identifies the file by checking if it starts with the hexadecimal value 0x5a4d, its size is less than 100KB, and it contains specific strings: "C:\\WINDOWS\\system32\\msvbvm60.dll\\3" as a full word in ASCII, and "http://www.nforange.com/inc/1.asp?" as a full word in wide.'
  Updated-Date: '2024_08_07'
CN_Honker_ShiftBackdoor_Server:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6552b97b952eb8dc118990cb0115aea3
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a server component from the CN Honker Pentest Toolset, specifically associating with a file named Server.dat. It identifies the sample by searching for specific strings within the file, such as commands to delete system files, modify access control lists, and certain Windows executables like "sethc.exe" and "ntvdm.exe." The file must start with the "MZ" header (indicating a Windows executable) and be smaller than 200KB for the rule condition to be fulfilled.
  Updated-Date: '2024_08_07'
CN_Honker_SkinHRootkit_SkinH:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ba4060efa8de4bbab51194b2cfc55f9f
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the "SkinH.exe" file, which is part of the CN Honker Pentest Toolset, often associated with the SkinH Rootkit. It identifies the file by checking for specific strings within the executable, such as a copyright notice from 360.cn Inc., mentions of "SDVersion.dll," and "skinh.dll". The condition for detection includes the file's magic number matching the DOS header (0x5a4d) and a file size of less than 2000KB.
  Updated-Date: '2024_08_07'
CN_Honker_SqlMap_Python_Run:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 456adb72c4c148af9d8bd8154673b309
  Ruleset: securityonion-yara
  Summary: This rule detects a specific file, "Run.exe," associated with the CN Honker Pentest Toolset, which is known to include tools for penetration testing such as Sqlmap. It searches for specific ASCII strings like ".\\Run.log," "[root@Hacker~]# Sqlmap," and formatted strings containing "Sqlmap," in files smaller than 30KB with a characteristic initial hexadecimal value of 0x5a4d.
  Updated-Date: '2024_08_07'
CN_Honker_Sword1_5:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a51a0b0abc180f9880542f8b3820b078
  Ruleset: securityonion-yara
  Summary: This rule detects a sample from the CN Honker Pentest Toolset, specifically identifying the file named Sword1.5.exe. It identifies the presence of specific indicators such as a URL reference to "http://www.md5.com.cn", the string "ListBox_Command", a configuration file named "Set.ini", and the string "OpenFileDialog1". The specified file must also meet certain conditions including a particular file signature and be less than 740KB in size.
  Updated-Date: '2024_08_07'
CN_Honker_SwordCollEdition:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6553f657d4903b73564ffb3f01ff964e
  Ruleset: securityonion-yara
  Summary: This rule detects a sample from the CN Honker Pentest Toolset focusing on the executable file SwordCollEdition.exe. It identifies the file using specific indicators such as the presence of strings "YuJianScan.exe" and "YuJianScan" in the file content. The rule applies to files with the PE header signature 0x5a4d and a size of less than 225KB, ensuring all specified criteria are met for detection.
  Updated-Date: '2024_08_07'
CN_Honker_SwordHonkerEdition:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d5abbc1e29cd17d1021677d8e63ff316
  Ruleset: securityonion-yara
  Summary: This rule detects the SwordHonkerEdition.exe file from the CN Honker Pentest Toolset by identifying specific strings within the file, including paths and configuration details like "\bin\systemini\MyPort.ini" and "PortThread=200". The rule also ensures the file matches a particular hash and size to confirm its identity.
  Updated-Date: '2024_08_07'
CN_Honker_T00ls_Lpk_Sethc_v2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7273a247782ce89829d3d82d29093a80
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific executable file named "T00ls Lpk Sethc v2.exe" from the CN Honker Pentest Toolset. It identifies the file by looking for certain string patterns such as "LOADER ERROR," an entry point error message format, and a copyright string "2011-2012 T00LS&RICES." The file must have a valid PE header and be smaller than 800 KB in size to match the rule.
  Updated-Date: '2024_08_07'
CN_Honker_T00ls_Lpk_Sethc_v3_0:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: fee23b2f1ad2fd3e8e3b50ccdeaa22f5
  Ruleset: securityonion-yara
  Summary: This rule detects a specific executable from the CN Honker Pentest Toolset, known as T00ls Lpk Sethc v3.0. It matches particular characteristics of the file, including specific strings such as "http://127.0.0.1/1.exe", ":Rices  Forum:T00Ls.Net  [4 Fucker Te@m]", and "SkinH_EL.dll". Additionally, the file must start with the hexadecimal value 0x5a4d, be less than 1000KB in size, and contain at least two of the specified strings.
  Updated-Date: '2024_08_07'
CN_Honker_T00ls_Lpk_Sethc_v3_LPK:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b503d1dc75e6249292d08db3078226d9
  Ruleset: securityonion-yara
  Summary: This rule detects a sample from the CN Honker Pentest Toolset, specifically targeting a file named LPK.DAT. It identifies strings related to potentially malicious activities, such as references to "FreeHostKillexe.exe," sethc.exe processes with altered permissions, and file paths like "c:\\1.exe." Additionally, it checks for error messages pertaining to setting user groups. The rule triggers if these conditions are met in a file smaller than 400KB, starting with the "MZ" header typical of executable files.
  Updated-Date: '2024_08_07'
CN_Honker_T00ls_Lpk_Sethc_v4_0:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5ee4f2294cd12db768f87681f9cb6d77
  Ruleset: securityonion-yara
  Summary: This rule detects a sample from the CN Honker Pentest Toolset associated with the file T00ls Lpk Sethc v4.0.exe. It identifies the file by checking for the presence of specific strings such as "LOADER ERROR" in ASCII and "2011-2012 T00LS&RICES" in wide format. Additionally, the file must be of a certain size and begin with the hexadecimal value 0x5a4d, which typically indicates a Windows executable.
  Updated-Date: '2024_08_07'
CN_Honker_T00ls_Lpk_Sethc_v4_LPK:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d81a5a014d2101a09334387215ca3358
  Ruleset: securityonion-yara
  Summary: This rule detects a specific sample from the CN Honker Pentest Toolset, particularly targeting the LPK.DAT file. It identifies malicious activity through strings associated with known pentesting and potentially harmful executables, including a loopback URL pointing to "1.exe," references to "FreeHostKillexe.exe," a command to modify permissions for "sethc.exe," and a file path pointing to "c:\\1.exe". The detection focuses on executable files smaller than 300KB, verifying the presence of these strings to confirm the malicious nature of the file.
  Updated-Date: '2024_08_07'
CN_Honker_T00ls_scanner:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ede473235cf415b4af4f1c6378e7e88f
  Ruleset: securityonion-yara
  Summary: This rule detects a specific executable file named "T00ls_scanner.exe" that is part of the CN Honker Pentest Toolset. It matches on strings indicating use of an HTTP search query directed at cn.bing.com and a reference to the team behind www.t00ls.net. The rule is applied to files under 330KB in size and ensures the file starts with the characteristic "MZ" header typical of executable files.
  Updated-Date: '2024_08_07'
CN_Honker_Tuoku_script_MSSQL_:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1c550f3d8f0eb9434966f9130bdb7ab6
  Ruleset: securityonion-yara
  Summary: This rule detects a script associated with the MSSQL_.asp file from the CN Honker Pentest Toolset. The script includes specific patterns such as retrieving cookies for login sessions, setting the shell path to the Windows command prompt, and executing commands using that shell path. These indicators suggest activities consistent with penetration testing or potentially unauthorized access, typical of tools used in security assessments or malicious operations.
  Updated-Date: '2024_08_07'
CN_Honker_Tuoku_script_oracle_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a02b4f8335321503492fa8cd51ad674b
  Ruleset: securityonion-yara
  Summary: This rule detects a specific sample from the CN Honker Pentest Toolset associated with a file named "oracle.txt." It looks for the presence of the string "webshell" and the phrase "Silic Group Hacker Army" within files that are less than 3KB in size. The rule aims to identify webshell scripts potentially used for unauthorized access or control, especially those related to hacker groups.
  Updated-Date: '2024_08_07'
CN_Honker_WebCruiserWVS:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9d4ae4be410f90a9d56aea165fe0d395
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the WebCruiser Web Vulnerability Scanner, specifically the executable file WebCruiserWVS.exe, which is part of the CN Honker Pentest Toolset. The detection is based on specific strings found within the file, including identifiers related to usernames and passwords, and a note indicating the file was created by WebCruiser. Additionally, the file's size must be less than 700KB and it must begin with the standard executable file header.
  Updated-Date: '2024_08_07'
CN_Honker_WebRobot:
  Created-Date: '2024_08_06'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 764c53d8d913d3fcc1a21c1b3f500c13
  Ruleset: securityonion-yara
  Summary: This rule detects the WebRobot.exe file, which is part of the CN Honker Pentest Toolset. It identifies the file based on specific strings found within it, such as "%d-%02d-%02d %02d^%02d^%02d ScanReprot.htm," "\\log\\ProgramDataFile.dat," and "\\data\\FilterKeyword.txt." The file must also have a specific size and header value to match this rule.
  Updated-Date: '2024_08_06'
CN_Honker_WebScan_WebScan:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f49ddffd34f693402f162e5f8dea55fd
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the WebScan.exe file, which is part of the CN Honker Pentest Toolset. Specifically, it identifies the file based on its unique strings such as "wwwscan.exe" and "WWWScan Gui", and checks that the file size is less than 700KB. This helps in identifying instances of this particular pentesting tool.
  Updated-Date: '2024_08_07'
CN_Honker_WebScan_wwwscan:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c384213c7e501a271760d59df6396502
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the "wwwscan.exe" file, part of the CN Honker Pentest Toolset. It identifies specific characteristics such as a particular hash and strings indicating website scanning and HTTP requests, suggesting usage patterns related to penetration testing activities targeting web servers. The rule ensures that the file size is under 60KB and matches typical executable file headers to confirm its identity.
  Updated-Date: '2024_08_07'
CN_Honker_Webshell:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f202729a6289ecce7f17f54ec190785e
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a web shell named "Webshell.exe," which is part of the CN Honker Pentest Toolset. It identifies the executable by checking for specific ASCII strings within the file, such as references to WinIce/SoftIce and download prompts. The rule triggers when the file size is less than 381KB and the file's header matches a specific pattern. This detection targets a web shell typically used in penetration testing activities.
  Updated-Date: '2024_08_07'
CN_Honker_Webshell_ASPX_aspx:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2d9db1506d518f74aa2f2e4a287d59b1
  Ruleset: securityonion-yara
  Summary: This rule detects a specific webshell file associated with the CN Honker Pentest Toolset that is identified by the presence of certain strings within ASP.NET (.aspx) files. These strings include configurations such as IP addresses, port numbers, and user information, as well as HTML elements and JavaScript functions used in web management interfaces. The rule triggers when two or more of these specific strings are found in an ASPX file smaller than 353KB, using the provided hash for further identification. The webshell is used to execute commands or manage processes on a compromised server.
  Updated-Date: '2024_08_07'
CN_Honker_Webshell_ASPX_aspx2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8800d27c796c966de4eae11045aaa37c
  Ruleset: securityonion-yara
  Summary: This rule detects a webshell associated with the CN Honker Pentest Toolset, specifically targeting a file named aspx2.txt. It identifies the presence of specific ASPX code snippets, such as a password check, the use of a server-side head tag, a TextBox control for password input, and a method for retrieving the server path. Additionally, it checks that the file size is less than 9KB and that it starts with a specific byte sequence.
  Updated-Date: '2024_08_07'
CN_Honker_Webshell_ASPX_aspx3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 758a92cae0fc23f124eb017a5f28af74
  Ruleset: securityonion-yara
  Summary: This rule detects a specific webshell associated with the CN Honker Pentest Toolset, referenced as "aspx3.txt." The detection checks for defining characteristics in the content of the webshell, such as a process creation string using `Process.Start` with compressed archive parameters and a debug message output to the console. The rule applies to files smaller than 100KB and ensures all specified strings are present.
  Updated-Date: '2024_08_07'
CN_Honker_Webshell_ASPX_aspx4:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 86d070b59d39c349513b81119f0e6cee
  Ruleset: securityonion-yara
  Summary: This rule detects a specific webshell associated with the CN Honker Pentest Toolset, specifically identified by the aspx4.txt file. It searches for particular strings within a file smaller than 11KB, such as a command to delete a test directory, an ASP.NET TextBox element for a file path, and an HTML reference attributing the code to "Www.hkmjj.Com". These distinctive strings help in identifying and flagging the presence of this particular webshell.
  Updated-Date: '2024_08_07'
CN_Honker_Webshell_ASPX_shell_shell:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c6da3e99ea7a3fb53bcef5d2194e65dc
  Ruleset: securityonion-yara
  Summary: This rule detects a specific webshell named "shell.aspx" associated with the CN Honker Pentest Toolset. The webshell is identified by its use of certain embedded code patterns, such as one attempting to load an assembly through request data in ASP.NET and another specifying a C# page with validation disabled. The rule targets files under 1KB in size and identifies the webshell through these unique characteristic strings.
  Updated-Date: '2024_08_07'
CN_Honker_Webshell_ASPX_sniff:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c2ab6a6c6dbcc29688c7b4d4dc1bf793
  Ruleset: securityonion-yara
  Summary: This rule detects a webshell associated with the CN Honker Pentest Toolset, specifically targeting a file named "sniff.txt." The rule identifies the presence of potentially malicious ASPX code by looking for specific strings within files that are smaller than 91KB in size. One string checks for a DNS Host Entry operation, and another string checks for conditions related to SMTP port usage, particularly port 25, which is known for handling email traffic.
  Updated-Date: '2024_08_07'
CN_Honker_Webshell_ASP_asp1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 11d0bc1afe6286bdbf068ebf51827b7e
  Ruleset: securityonion-yara
  Summary: 'This rule detects a webshell associated with the CN Honker Pentest Toolset named "asp1.txt." It identifies the presence of this webshell by looking for specific strings within a file: a string containing "SItEuRl=", a VBScript encoded language declaration "<%@ LANGUAGE = VBScript.Encode %><%" typically flagged by PEStudio, and the string "Server.ScriptTimeout=" which is also flagged by PEStudio. The detection applies to files smaller than 200KB containing all these specified strings.'
  Updated-Date: '2024_08_07'
CN_Honker_Webshell_ASP_asp2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 94c7a3568c1337374ffe12efea6b287a
  Ruleset: securityonion-yara
  Summary: This rule detects a specific webshell associated with the CN Honker Pentest Toolset. The rule targets a set of strings characteristic of a webshell file, including references to server mapping, specific colored font markers for "webshell", and a hardcoded user password "admin." The detection is constrained to files smaller than 10KB that contain all these identified strings.
  Updated-Date: '2024_08_07'
CN_Honker_Webshell_ASP_asp3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1213d445cdef7cad4dfc88280e4a9de9
  Ruleset: securityonion-yara
  Summary: This rule detects a specific webshell associated with the CN Honker Pentest Toolset, specifically identified in a file named asp3.txt. It looks for unique strings within files less than 444KB in size, including commands related to setting the shell path to "cmd.exe" and an HTTP request pattern pointing to a local server address.
  Updated-Date: '2024_08_07'
CN_Honker_Webshell_ASP_asp4:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ae00dcc8e66e4926248a745f66fd6b1e
  Ruleset: securityonion-yara
  Summary: This rule detects a webshell file related to the CN Honker Pentest Toolset, specifically identified as asp4.txt. The webshell contains distinctive strings, such as setting the shell path to cmd.exe if it is empty, using cookies for login responses, and executing commands via cmd.exe. The rule targets files smaller than 150KB that contain these specific patterns.
  Updated-Date: '2024_08_07'
CN_Honker_Webshell_ASP_asp404:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 339458e4a5b43ff698a76b3c9ca1920b
  Ruleset: securityonion-yara
  Summary: This rule detects a webshell associated with the CN Honker Pentest Toolset, specifically identifying a file named asp404.txt. It looks for specific strings within files smaller than 113KB, including an operation adjusting a folder path using server.MapPath, an HTML form handling a POST request with an action attribute set to a server-side code, and a dynamically generated hyperlink pointing to a file name.
  Updated-Date: '2024_08_07'
CN_Honker_Webshell_ASP_hy2006a:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 22e3b017a35dfe3585a8d8b39c0ce13e
  Ruleset: securityonion-yara
  Summary: This rule detects a webshell associated with the CN Honker Pentest Toolset, specifically targeting a file named "hy2006a.txt." It identifies the presence of this webshell by looking for specific ASCII string patterns related to command execution functionality, such as references to "command.com" and conditions involving "cmd.exe" with arguments. These strings must be present in files smaller than 406KB for the detection to trigger.
  Updated-Date: '2024_08_07'
CN_Honker_Webshell_ASP_rootkit:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 020f1fdb7f83e9610231ae9f707ae900
  Ruleset: securityonion-yara
  Summary: This rule detects a webshell associated with the CN Honker Pentest Toolset, specifically targeting the file named rootkit.txt. The rule focuses on identifying specific string patterns corresponding to known malicious behavior within the webshell, such as commands and script manipulation involving "Win32_ProcessSta" and "cmd.exe /c net user". The detection is effective for files smaller than 80KB. The purpose of the webshell is to enable remote control and command execution on compromised systems, often using well-known administrator command-line tools.
  Updated-Date: '2024_08_07'
CN_Honker_Webshell_ASP_shell:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c9846d3d6fe2216e5f5cd984e3b3afc2
  Ruleset: securityonion-yara
  Summary: This rule detects a webshell associated with the CN Honker Pentest Toolset, specifically targeting a file named "shell.txt". The webshell uses HTTP requests to download and save malicious files, including references to URLs like "http://www.i0day.com/1.txt" and "http://hi.baidu.com/xahacker/fuck.txt". Additionally, it involves saving content to a file named "test.asp" on the server. The rule triggers when the file size is less than 1KB and all specified string patterns are present.
  Updated-Date: '2024_08_07'
CN_Honker_Webshell_ASP_web_asp:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 871c57324c5c4c31c8b735536b8a36f8
  Ruleset: securityonion-yara
  Summary: This rule detects a specific ASP webshell associated with the CN Honker Pentest Toolset. It identifies this webshell by looking for particular strings within the file, such as HTML form elements related to shell URL inputs and copied code markers. The detection is triggered when the file size is below 13KB and all specified strings are present in the file. The intent is to identify the web.asp.txt file known for malicious webshell activity used in penetration testing.
  Updated-Date: '2024_08_07'
CN_Honker_Webshell_FTP_MYSQL_MSSQL_SSH:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e6ec6edf41ed02d92a0fd4af503c8de4
  Ruleset: securityonion-yara
  Summary: This rule detects a webshell associated with the CN Honker Pentest Toolset. It identifies specific strings and patterns in files less than 20KB in size that pertain to the manipulation and use of FTP, MYSQL, MSSQL, and SSH networks. Key indicators include session variables related to host lists, connections to external sites, FTP connections, session management for SSH ports, and specific HTML title tags indicating scanning capabilities. These characteristics are used to identify potentially malicious activity related to this specific pentesting toolset.
  Updated-Date: '2024_08_07'
CN_Honker_Webshell_Injection_Transit_jmPost:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2dbe55206705d99455f8c2a17a7b3313
  Ruleset: securityonion-yara
  Summary: This rule detects a specific webshell associated with the CN Honker Pentest Toolset, specifically targeting a file named "jmPost.asp." The detection criteria are based on the presence of particular strings in the file, such as "response.write  PostData(JMUrl,JmStr,JmCok,JmRef)" and "JmdcwName=request(\"jmdcw\")", and checks if the file size is less than 9KB.
  Updated-Date: '2024_08_07'
CN_Honker_Webshell_Interception3389_get:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f542b156dad0adfc83993043333a72ef
  Ruleset: securityonion-yara
  Summary: This rule detects a web shell associated with the CN Honker Pentest Toolset, specifically the file named "get.asp". It identifies the malicious code by looking for specific strings such as the assignment of the variable "userip" using `Request.ServerVariables("HTTP_X_FORWARDED_FOR")`, logging activities involving the file `WinlogonHack.txt`, and logging user IP information. The rule applies to files smaller than 3KB containing all identified malicious strings.
  Updated-Date: '2024_08_07'
CN_Honker_Webshell_JSPMSSQL:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ee29ff34442dcccdccdbfe09e24179d7
  Ruleset: securityonion-yara
  Summary: This rule detects a web shell associated with the CN Honker Pentest Toolset, specifically targeting a file named JSPMSSQL.txt. It identifies specific strings within the file, such as the presence of an HTML form action that includes "operator&cmd=execute" and a Java statement where an SQL command is retrieved from a request parameter named "sqlcmd." The file size must be less than 35KB for the rule to apply.
  Updated-Date: '2024_08_07'
CN_Honker_Webshell_JSP_jsp:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c8bb64221403c65c437dc216f603c8e4
  Ruleset: securityonion-yara
  Summary: This rule detects a webshell associated with the CN Honker Pentest Toolset, specifically targeting a file named jsp.html. The detection criteria include the presence of specific strings within the file, such as an HTML input field with the name "f" and a default value of "shell.jsp," and a line that contains the text "www.i0day.com  By:" in red font. The rule is applicable to files less than 3 KB in size.
  Updated-Date: '2024_08_07'
CN_Honker_Webshell_Linux_2_6_Exploit:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 926a8e2d931a743e970b7d84e3fef8a5
  Ruleset: securityonion-yara
  Summary: This rule detects a webshell associated with the CN Honker Pentest Toolset, specifically for file version 2.6.9. The detection is based on a specific string output that suggests a failure in obtaining root access, potentially due to the kernel not being vulnerable. The rule applies to files smaller than 56KB.
  Updated-Date: '2024_08_07'
CN_Honker_Webshell_PHP_BlackSky:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a3c2fd9d49bd73146671bd7149937e16
  Ruleset: securityonion-yara
  Summary: This rule detects a webshell associated with the CN Honker Pentest Toolset, specifically targeting a PHP file identified as php6.txt. It identifies the webshell by matching specific strings within a file smaller than 641KB, including an encoded pattern using PHP functions 'eval', 'gzinflate', and 'base64_decode', as well as the string "B1ac7Sky-->".
  Updated-Date: '2024_08_07'
CN_Honker_Webshell_PHP_linux:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e63791f39bb363b785213a74a81f6cb6
  Ruleset: securityonion-yara
  Summary: This rule detects a PHP-based webshell associated with the CN Honker Pentest Toolset, specifically targeting Linux. The detection is based on specific strings found within the file, including a form tag used for exploitation purposes and a title related to altering CHMOD permissions. The rule applies to files that start with the specified hexadecimal value and are smaller than 6KB in size.
  Updated-Date: '2024_08_07'
CN_Honker_Webshell_PHP_php1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 77b21a3cbad4a16c9152ce1717309f17
  Ruleset: securityonion-yara
  Summary: This rule detects a specific PHP webshell associated with the CN Honker Pentest Toolset, particularly identified by the file named php1.txt. The rule looks for particular string patterns within PHP files that are characteristic of webshell functionality, such as executing commands sent via HTTP POST requests. These patterns include specific code fragments that send commands, check for certain PHP functions, and execute commands. The detection is further limited by ensuring the file size is less than 621KB.
  Updated-Date: '2024_08_07'
CN_Honker_Webshell_PHP_php10:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 71e08dd5c2e786c1364d77b1bc1930d1
  Ruleset: securityonion-yara
  Summary: This rule detects a specific PHP webshell file from the CN Honker Pentest Toolset identified as php10.txt. The webshell contains strings that perform operations like table dumping and SQL formatting, which are characteristic of webshell functionalities commonly used for malicious purposes. Specifically, indicators include the manipulation of SQL formats and database table dumps, marked by strings related to database operations and HTML encoding. This detection is based on a known hash and applies to files smaller than 600KB.
  Updated-Date: '2024_08_07'
CN_Honker_Webshell_PHP_php2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 481539a891b27579ea089f1e0d227678
  Ruleset: securityonion-yara
  Summary: This rule detects a specific PHP webshell file named "php2.txt" associated with the CN Honker Pentest Toolset. The detection is based on identifying unique strings within the file, such as a specific variable assignment and a characteristic PHP tag comment, ensuring the file size is less than 12KB.
  Updated-Date: '2024_08_07'
CN_Honker_Webshell_PHP_php3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3aa02ec52eb5e05cf1830c2bfc83096d
  Ruleset: securityonion-yara
  Summary: 'This rule detects a webshell associated with the CN Honker Pentest Toolset, specifically targeting a file named php3.txt. The webshell is identified by specific strings: one related to a condition checking resource status using `popen`, and another indicating a back-connect function involving `/tmp/.bc`. The rule applies to files smaller than 8KB and considers the presence of all defined strings within the file.'
  Updated-Date: '2024_08_07'
CN_Honker_Webshell_PHP_php4:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 04b130c8f01fba78c1537e5d9d44580f
  Ruleset: securityonion-yara
  Summary: This rule detects a specific webshell associated with the CN Honker Pentest Toolset, identified by the presence of a string pattern commonly found in PHP files smaller than 1KB. The pattern includes the usage of "nc -l -vv -p port" which stands as a command line for networking (Netcat), indicating potential malicious behavior.
  Updated-Date: '2024_08_07'
CN_Honker_Webshell_PHP_php5:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: fd96034496440da2396772dae2efb6a3
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific webshell associated with the CN Honker Pentest Toolset, particularly targeting a PHP file titled "php5.txt". The rule identifies the webshell by scanning for particular strings within the file, such as script fragments that enable FTP login with obfuscated user credentials and commands for interacting with hidden directories. The file is flagged if it matches these characteristics and has a file size less than 300KB. This detection aids in identifying potentially harmful PHP scripts used for unauthorized remote control or data extraction.
  Updated-Date: '2024_08_07'
CN_Honker_Webshell_PHP_php7:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3e970ec54c7496fbb7c6d863261d7376
  Ruleset: securityonion-yara
  Summary: This rule detects a specific webshell associated with the CN Honker Pentest Toolset, identified as being contained within a file named php7.txt. The webshell includes distinctive PHP code snippets that handle file downloading via POST requests and generate web-based outputs. The rule is designed to match files smaller than 300KB that contain these specific code segments.
  Updated-Date: '2024_08_07'
CN_Honker_Webshell_PHP_php8:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: fbd92bd46776ba286d5749278f1f9e11
  Ruleset: securityonion-yara
  Summary: This rule detects a specific PHP webshell known to be part of the CN Honker Pentest Toolset, identified by the presence of particular strings and function names within files smaller than 25KB. Notable strings include a reference to "Ca3tie1's Blog" and the function "startfile" with a default parameter of 'dodo.zip'. Other identifying markers include a form declaration and a specific assignment to a zip name variable. These characteristics are used to identify a potentially malicious web shell designed for unauthorized access or control of a web server.
  Updated-Date: '2024_08_07'
CN_Honker_Webshell_PHP_php9:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: cd9423f288e947e99d495f20e5480e9b
  Ruleset: securityonion-yara
  Summary: This rule detects a webshell associated with the CN Honker Pentest Toolset, specifically from a file named php9.txt. The webshell is identified by a specific string that includes a command to execute the Windows command prompt to create a user with administrative privileges. The rule focuses on files smaller than 1087KB and uses specific string patterns for detection.
  Updated-Date: '2024_08_07'
CN_Honker_Webshell_Serv_U_2_admin_by_lake2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: bacb9a392137e4e18870265f9ebbab40
  Ruleset: securityonion-yara
  Summary: This rule detects a webshell file associated with the CN Honker Pentest Toolset, known as "Serv-U 2 admin by lake2.asp." The detection focuses on specific strings within the file, including references to HTTP POST requests to local addresses, hardcoded FTP credentials, and notable phrases indicating local system shell access using ASP. The rule triggers if the file size is under 17KB and at least two of the specified strings are present, highlighting its intent to identify malicious webshell activities related to this pentest tool.
  Updated-Date: '2024_08_07'
CN_Honker_Webshell_Serv_U_asp:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1f9cd2168dd154854c76cc31d66527f0
  Ruleset: securityonion-yara
  Summary: This rule detects a web shell from the CN Honker Pentest Toolset associated with the file "Serv-U asp.txt." It identifies specific strings within files smaller than 30KB. These strings include commands related to user setup and domain deletion actions, such as creating a new user with specific parameters, executing a command to add a user 'goldsun,' and deleting a domain with specified settings. The presence of at least two of these predefined strings is required to trigger detection.
  Updated-Date: '2024_08_07'
CN_Honker_Webshell_Serv_U_by_Goldsun:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1dfdcdd229a6ba9d5470992a9e883958
  Ruleset: securityonion-yara
  Summary: This rule detects a specific webshell associated with the CN Honker Pentest Toolset, specifically the file "Serv-U_by_Goldsun.asp". Key indicators for this webshell include strings related to HTTP requests to localhost with variable ports, server variables, and user setup configurations. The webshell file is characterized by its small size, being less than 30KB.
  Updated-Date: '2024_08_07'
CN_Honker_Webshell_Serv_U_serv_u:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2887db8e4ec9ccae62a19855fc7ac7c5
  Ruleset: securityonion-yara
  Summary: 'This rule detects a webshell associated with the CN Honker Pentest Toolset, specifically targeting a file named ''serv-u.php''. The rule identifies the webshell by looking for certain strings: a reference to reading a file from "c:\\winnt\\system32\\", a constructed string involving a POST parameter named "password", and a command execution involving ''rundll32.exe'' with specified parameters. The detection is applicable to files smaller than 435KB and requires all specified strings to be present.'
  Updated-Date: '2024_08_07'
CN_Honker_Webshell_Serv_U_servu:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e29a54fb19688abc1289703713ce837b
  Ruleset: securityonion-yara
  Summary: This rule detects a malicious webshell associated with the CN Honker Pentest Toolset, specifically targeting a file named "servu.php." The primary indicators include specific strings related to FTP commands and execution functions, which are typical behaviors found in webshells used for unauthorized remote server access and command execution. The rule flags files smaller than 41KB containing particular code snippets that define and perform FTP operations.
  Updated-Date: '2024_08_07'
CN_Honker_Webshell_T00ls_Lpk_Sethc_v4_mail:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 62dedc6e82c8da0290d345367e7a0b7b
  Ruleset: securityonion-yara
  Summary: This rule detects a webshell file named "mail.php" that is part of the CN Honker Pentest Toolset. It looks for specific strings within files smaller than 39KB, including commands for SMTP authentication and debugging messages. The rule aims to identify potentially malicious activity related to this particular webshell used for unauthorized control of web servers.
  Updated-Date: '2024_08_07'
CN_Honker_Webshell_Tuoku_script_mssql_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7d6931e5e565835cc790cdfd40a83031
  Ruleset: securityonion-yara
  Summary: 'This rule detects a webshell from the CN Honker Pentest Toolset, specifically the file "mssql.asp". The rule identifies malicious activity by scanning for specific strings: a parameter for SQL password requests, a command creating a text file using file system object (FSO) methods, and an HTML blockquote tag displaying server IP information. This rule targets files smaller than 3KB containing all these strings. The detected webshell is typically associated with unauthorized access and manipulation of Microsoft SQL Server databases on compromised web servers.'
  Updated-Date: '2024_08_07'
CN_Honker_Webshell_Tuoku_script_mysql:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 18643ea5303f95e882dd5f48eaebdd39
  Ruleset: securityonion-yara
  Summary: This rule detects a specific webshell script associated with the CN Honker Pentest Toolset, particularly targeting a file named "mysql.aspx". It identifies the presence of this webshell by searching for distinctive patterns, such as certain login functionalities and database connection strings, indicative of potentially malicious activities used for unauthorized access or control.
  Updated-Date: '2025_03_13'
CN_Honker_Webshell_Tuoku_script_oracle:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5f1dbed5fc438299c6b797c0caedcff4
  Ruleset: securityonion-yara
  Summary: This rule detects a webshell associated with the CN Honker Pentest Toolset, specifically targeting an Oracle JSP file named "oracle.jsp." The webshell contains strings indicative of database interactions, including a JDBC connection string to an Oracle database, a hardcoded username "oracle_admin," and an SQL query that selects data from a table named "user_info." The rule is triggered when the file size is less than 7KB and all specified strings are present.
  Updated-Date: '2024_08_07'
CN_Honker_Webshell_Tuoku_script_xx:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 459f5f5350c6a64287288307a492c631
  Ruleset: securityonion-yara
  Summary: This rule detects a webshell associated with the CN Honker Pentest Toolset, specifically targeting a file named `xx.php`. The webshell is identified through specific strings related to MySQL operations. These include an SQL insert statement construction, a MySQL connection string, and a query to set the character set to "gbk". The rule triggers if a file smaller than 2KB contains all these indicative strings.
  Updated-Date: '2024_08_07'
CN_Honker_Webshell_WebShell:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 63e67fa36bb2d783e5cee593b62ba277
  Ruleset: securityonion-yara
  Summary: This rule detects a webshell originating from the CN Honker Pentest Toolset, specifically targeting a file named WebShell.cgi. The detection focuses on identifying certain unique strings associated with the webshell, such as encrypted login processes, error messages in restricted mode, and command warnings, provided the file size is less than 30KB and at least two of these strings are found within the file.
  Updated-Date: '2024_08_07'
CN_Honker_Webshell__Injection_jmCook_jmPost_ManualInjection:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 01089c1ab35eb976bd05567869ec4973
  Ruleset: securityonion-yara
  Summary: This rule detects a webshell associated with the CN Honker Pentest Toolset, specifically from files such as Injection.exe, jmCook.asp, jmPost.asp, and ManualInjection.exe. It does so by identifying specific strings that indicate the presence of this webshell, such as "response.write  PostData(JMUrl,JmStr,JmCok,JmRef)" and "strReturn=Replace(strReturn,chr(43),\"%2B\")  'JMDCW". The condition to trigger this detection is set for files smaller than 7342KB containing these strings.
  Updated-Date: '2024_08_07'
CN_Honker_Webshell__Serv_U_by_Goldsun_asp3_Serv_U_asp:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 49654498636b4e36edbfb64c29b224ae
  Ruleset: securityonion-yara
  Summary: This rule detects a webshell from the CN Honker Pentest Toolset, specifically from files named Serv-U_by_Goldsun.asp, asp3.txt, and Serv-U asp.txt. The detection is based on specific strings found in the webshell containing commands and login details, such as "loginuser & loginpass & mt & deldomain & quit", "loginpass = \"Pass \" & pass & vbCrLf", and "User go" & vbCrLf & "pass od" & vbCrLf & "site exec " & cmd & vbCr. These patterns help identify the malicious behavior typical of the specified webshell.
  Updated-Date: '2024_08_07'
CN_Honker_Webshell__asp4_asp4_MSSQL__MSSQL_:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7d1d3a620651e94457766187610b81d4
  Ruleset: securityonion-yara
  Summary: This rule detects a webshell associated with the CN Honker Pentest Toolset, specifically targeting files named 'asp4.txt', 'asp4.txt', 'MSSQL_.asp', and 'MSSQL_.asp'. Indicators include specific string patterns such as HTML form actions for file searching, specific table data alignments with database name placeholders, and the termination of a database connection in the source code. The condition for detection is based on the file size being under 341KB and the presence of all these strings.
  Updated-Date: '2024_08_07'
CN_Honker_Webshell__php1_php7_php9:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 26ff518477567247ed716ecfa1911cee
  Ruleset: securityonion-yara
  Summary: This rule detects a webshell originating from the CN Honker Pentest Toolset, identifiable by specific strings within PHP files. The targeted webshell strings include a hyperlink to a WScript.shell command interface, a JavaScript line for setting a command input field's value, and a command to copy a PHP file from one directory to another. The detection condition is triggered when a file smaller than 300KB includes all of these defining characteristics.
  Updated-Date: '2024_08_07'
CN_Honker_Webshell_assembly:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0ce220e66065833226f3a1bf301114aa
  Ruleset: securityonion-yara
  Summary: This rule detects a specific webshell associated with the CN Honker Pentest Toolset, particularly identifying the file named "assembly.asp." It searches for the presence of a command that executes "cmd.exe /c" concatenated with a client request parameter within scripts, comparing it against a known hash. The rule is applicable to files smaller than 1KB in size.
  Updated-Date: '2024_08_07'
CN_Honker_Webshell_cfmShell:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 86114a68728d8da16f1a5961aa081d36
  Ruleset: securityonion-yara
  Summary: This rule detects a specific webshell file named cfmShell.cfm, associated with the CN Honker Pentest Toolset. The detection is based on identifying certain strings within the file, specifically the execution of the Windows command line utility (cmd.exe) and a condition checking for the existence of a temporary text file. The file size must be under 4KB for the rule to trigger.
  Updated-Date: '2024_08_07'
CN_Honker_Webshell_cfm_list:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0afb1cf05171f7bd515401e9bcbefa40
  Ruleset: securityonion-yara
  Summary: This rule detects a specific webshell associated with the CN Honker Pentest Toolset, identified by the presence of certain HTML table tags and ColdFusion variables within a ColdFusion file named "list.cfm". The rule looks for specific patterns such as a hyperlink invoking a JavaScript function to show file details and table data displaying file size, ensuring that the file size is less than 10KB.
  Updated-Date: '2024_08_07'
CN_Honker_Webshell_cfm_xl:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 839889548f61c98236ebe700afe797ae
  Ruleset: securityonion-yara
  Summary: This rule detects a webshell associated with the CN Honker Pentest Toolset, specifically targeting a file named xl.cfm. It uses specific patterns in the file content, such as certain HTML input elements and ColdFusion file operations, to identify the malicious activity. The rule triggers when these conditions are met and the file size is less than 13KB.
  Updated-Date: '2024_08_07'
CN_Honker_Webshell_cmfshell:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 10bdb4e5780f8da1724d0f90cb56f108
  Ruleset: securityonion-yara
  Summary: This rule detects a webshell associated with the CN Honker Pentest Toolset, specifically from the file named "cmfshell.cmf." It identifies the presence of this webshell by looking for specific strings in a file. The detected strings include commands that execute the Windows command prompt and an HTML form that posts data to a script. The rule applies to files that are less than 4KB in size and contain all the identified strings.
  Updated-Date: '2024_08_07'
CN_Honker_Webshell_dz_phpcms_phpbb:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 54d13d29711e7ea252c6cfb6e8598236
  Ruleset: securityonion-yara
  Summary: This rule detects a specific webshell associated with the CN Honker Pentest Toolset, identifiable by the file name "dz_phpcms_phpbb.txt." The webshell contains unique code signatures such as password verification using a double MD5 hash combined with a salt, a function named "test_1" dealing with passwords, and distinctive output formatting involving user, password, and salt details. The rule applies to files smaller than 22KB that contain all specified code patterns.
  Updated-Date: '2024_08_07'
CN_Honker_Webshell_jspshell:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3d42891a952acf82a0fa6c6dac88f56d
  Ruleset: securityonion-yara
  Summary: This rule detects a web shell file named "jspshell.txt" from the CN Honker Pentest Toolset. The detection is based on specific string patterns within the file, such as code constructs that execute certain operations and parameter handling commonly found in malicious web shells. These patterns indicate its purpose in unauthorized remote control or data extraction activities, typically used in penetration testing or cyber attacks. The target files identified by this rule are smaller than 30KB.
  Updated-Date: '2024_08_07'
CN_Honker_Webshell_jspshell2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 47c10c775ef71fb48fa54ac8f30bbf7d
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a webshell from the CN Honker Pentest Toolset, specifically targeting the file named jspshell2.txt. The webshell's distinctive features include specific strings indicating the use of `cmd.exe` to execute system commands and logging output to a file named `Log.txt` within a specified directory. The rule triggers if these patterns are found in files smaller than 424KB.
  Updated-Date: '2024_08_07'
CN_Honker_Webshell_mycode12:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ddc00ece9a366dddbce8a0dd21bfbb7a
  Ruleset: securityonion-yara
  Summary: This rule detects a webshell file named "mycode12.cfm" from the CN Honker Pentest Toolset. It identifies the presence of specific strings indicative of malicious activity, including the usage of "<cfexecute name=\"cmd.exe\"" and "<cfoutput>#cmd#</cfoutput>", which suggest command execution functionalities. The rule applies to files smaller than 4KB and considers the presence of all specified strings for detection.
  Updated-Date: '2024_08_07'
CN_Honker_Webshell_nc_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2a2c987841d90fac4b532e64fa5d2f55
  Ruleset: securityonion-yara
  Summary: This rule detects a webshell associated with the CN Honker Pentest Toolset by identifying a specific file containing unique strings. The detected webshell uses a specific "User-Agent" string imitating an outdated browser and contains conditional logic relating to user session verification. The rule is specifically targeted at files smaller than 11KB and requires all defined string patterns to be present for identification.
  Updated-Date: '2024_08_07'
CN_Honker_Webshell_offlibrary:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 48fa05d443ddc9aac2d8c11db1b57bc1
  Ruleset: securityonion-yara
  Summary: This rule detects a webshell associated with the CN Honker Pentest Toolset, specifically targeting a file named offlibrary.php. The rule identifies the webshell by matching specific strings that indicate SQL query manipulation and JavaScript inclusion behavior, which are characteristic of this malicious toolset.
  Updated-Date: '2024_08_07'
CN_Honker_Webshell_phpwebbackup:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ba858ca5cf95dbc2b060a51dded35ae6
  Ruleset: securityonion-yara
  Summary: This rule detects a webshell used as part of the CN Honker Pentest Toolset, specifically the file named phpwebbackup.php. The detection focuses on specific strings within the file, such as a comment indicating the code was authored by 'isosky' and hosted on 'www.nbst.org,' as well as a distinct PHP code pattern involving the `__FILE__` and `urldecode` functions. The rule applies to files less than 67KB in size and includes a unique hash to ensure accurate identification.
  Updated-Date: '2024_08_07'
CN_Honker_Webshell_picloaked_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: fe3f8bd4f91cbae922098ce3a28abe62
  Ruleset: securityonion-yara
  Summary: This rule detects a specific web shell associated with the CN Honker Pentest Toolset. The malicious file masquerades as a GIF image (1.gif) and uses PHP code execution techniques to potentially take control of web servers. It searches for specific patterns within the file, including PHP evaluation code and HTTP request execution commands. Additionally, the rule ensures the file's size is below 6KB and looks for the presence of multiple indicative patterns for detection.
  Updated-Date: '2024_08_07'
CN_Honker_Webshell_portRecall_jsp:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 12ca0bb3bbfaa6385c1c17b446e57370
  Ruleset: securityonion-yara
  Summary: This rule detects a webshell associated with the CN Honker Pentest Toolset that is identified by specific strings in a .jsp file. The detection focuses on a particular JavaServer Page (JSP) with parameters like local and remote IP addresses and ports, reflecting a webshell's mode of network operations. The rule activates when the file size is less than 1KB and matches predefined string patterns indicative of this specific webshell.
  Updated-Date: '2024_08_07'
CN_Honker_Webshell_portRecall_jsp2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e498b0bbbfcea5b4994a330ad10fd5da
  Ruleset: securityonion-yara
  Summary: This rule detects a webshell linked to the CN Honker Pentest Toolset, specifically targeting a file named jsp2.txt. The webshell is identified based on specific strings related to Java Server Page (JSP) code functionality, such as setting parameters for remote and local IP addresses, and defining a local port with JSP-related requests. The detection is triggered for files smaller than 23KB that include all the defined characteristic strings.
  Updated-Date: '2024_08_07'
CN_Honker_Webshell_su7_x_9_x:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ccf1758a72aada19b2a4d51b0701df2a
  Ruleset: securityonion-yara
  Summary: This rule detects a specific webshell file, identified as "su7.x-9.x.asp," which is associated with the CN Honker Pentest Toolset. The rule looks for files under 59KB that contain distinct strings related to HTTP operations, including references to login credentials and administrative XML files. This webshell facilitates unauthorized remote access by leveraging specific HTTP requests.
  Updated-Date: '2024_08_07'
CN_Honker_Webshell_test3693:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: fef354702fc569a21f2dc37ea173b8e0
  Ruleset: securityonion-yara
  Summary: This rule detects a webshell associated with the CN Honker Pentest Toolset, specifically targeting a file named test3693.war. It identifies malicious behavior by searching for specific strings within the file, including a command execution process initiated by "Runtime.getRuntime().exec(\"cmd /c \"+strCmd);" and a reference to a URL with specific text. The rule checks that the file is a small Java Archive (JAR) with a size of less than 50KB and that all specified strings are present.
  Updated-Date: '2024_08_07'
CN_Honker_Webshell_udf_udf:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 168d7a6083d456aeb7c816a1392628ce
  Ruleset: securityonion-yara
  Summary: This rule detects a specific webshell file named `udf.php` from the CN Honker Pentest Toolset. The webshell contains unique PHP code snippets suspicious enough to warrant detection. These code snippets include markers such as PHP comments and patterns associated with file handling and URL decoding operations. The rule is triggered when a file smaller than 430KB matches all the specified patterns within the given code.
  Updated-Date: '2024_08_07'
CN_Honker_Webshell_wshell_asp:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 52a7d9d19f5782dd64c2663dcc73dd28
  Ruleset: securityonion-yara
  Summary: This rule detects a webshell associated with the CN Honker Pentest Toolset, specifically targeting the file wshell-asp.txt. The rule identifies the presence of this webshell by looking for specific code patterns within files smaller than 5KB. These patterns include commands to write and execute ASP script content such as clearing responses and invoking root, along with identifiable phrases "hello word !" and "root.asp". These indicators aim to capture the characteristic scripting behavior used by this particular webshell, which is used for unauthorized access or control over web servers.
  Updated-Date: '2024_08_07'
CN_Honker_Without_a_trace_Wywz:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b17312cbde69927aaa709ab627de522d
  Ruleset: securityonion-yara
  Summary: This rule detects a sample from the CN Honker pentest toolset, specifically the file Wywz.exe. It identifies the presence of this file by looking for specific strings within the file, including references to Norton Personal Firewall logs, a configuration file named config.ini with proxy settings, and the tool subinacl.exe, which is used for modifying registry permissions. The rule conditions are based on the file starting with the hexadecimal value 0x5a4d, which indicates a Windows executable, and having a file size of less than 1800KB.
  Updated-Date: '2024_08_07'
CN_Honker_WordpressScanner:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2e42c6d8bf9687e87ef9ae9628536548
  Ruleset: securityonion-yara
  Summary: This rule detects the CN Honker Wordpress Scanner, specifically the file "WordpressScanner.exe" used by the CN Honker pentesting group. It identifies the file by matching specific characteristics, including the presence of certain strings within the file, such as a recognizable user agent string ("Mozilla/4.0...Windows NT 5.0"), a reference URL ("http://www.eyuyan.com"), the function name "GetConnectString," and the code snippet "#if !defined(AFX_RESOURCE_DLL) || defined(AFX_TARG_CHS)." The rule ensures that these strings are found within a file that has a standard DOS header (indicated by 0x5a4d at the start) and a file size under 1000KB.
  Updated-Date: '2024_08_07'
CN_Honker_Xiaokui_conversion_tool:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 576f1ec588867731556cc52be6d90f64
  Ruleset: securityonion-yara
  Summary: This rule detects a sample from the CN Honker Pentest Toolset, specifically targeting the file "Xiaokui_conversion_tool.exe". It identifies the presence of this file by looking for specific strings, including an SQL update command that sets a user group ID, a wide string "To.exe", and the ASCII text "by zj1244". The rule triggers if the file starts with the 'MZ' signature for executable files, has a size smaller than 240KB, and at least two of the specified strings are found within it.
  Updated-Date: '2024_08_07'
CN_Honker__D_injection_V2_32_D_injection_V2_32_D_injection_V2_32:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f3195e46742e6a38101ce9329748228c
  Ruleset: securityonion-yara
  Summary: This rule detects a component of the CN Honker Pentest Toolset, specifically associated with the executable D_injection_V2.32.exe. It identifies malicious activity by searching for specific strings within a file, such as "upfile.asp", "[wscript.shell]", "XP_CMDSHELL", and the URL "http://d99net.3322.org". The rule triggers if the file starts with the common executable header (0x5a4d), is less than 10000KB in size, and contains at least four of the specified strings.
  Updated-Date: '2024_08_07'
CN_Honker__LPK_LPK_LPK:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 32b34c8364d0635a5ed0842a9d14368a
  Ruleset: securityonion-yara
  Summary: This rule detects a sample from the CN Honker Pentest Toolset, specifically targeting files named LPK.DAT. It looks for specific indicators such as the presence of strings related to "cmd.exe," error messages saying "Password error!", and filenames like "sathc.exe," "sothc.exe," and "lpksethc.bat." The rule triggers if the file starts with the hexadecimal value 0x5a4d, indicative of a Windows executable, has a file size of less than 1057KB, and contains all the listed strings.
  Updated-Date: '2024_08_07'
CN_Honker__PostgreSQL_mysql_injectV1_1_Creak_Oracle_SQLServer_inject_Creaked:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 228ba940a224e7cbca04a5a5e9dac857
  Ruleset: securityonion-yara
  Summary: This rule detects samples from the CN Honker Pentest Toolset, identifying potential PostgreSQL, MySQL, Oracle, and SQL Server injection attempts. It focuses on specific strings, such as "zhaoxypass@yahoo.com.cn," "Mozilla/3.0 (compatible; Indy Library)," and "ProxyParams.ProxyPort," which are associated with the toolset in question. The presence of these indicators in conjunction with a file header indicating a Windows executable (0x5a4d) triggers the detection.
  Updated-Date: '2024_08_07'
CN_Honker__builder_shift_SkinH:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0d1ead56965335e8f5e1f457fe526619
  Ruleset: securityonion-yara
  Summary: This rule detects samples from the CN Honker Pentest Toolset, specifically targeting files named builder.exe, shift.exe, and SkinH.exe. It checks for the presence of specific strings such as "lipboard," "uxthem," "ENIGMA," "UtilW0ndow," and "prog3am" within files. Additionally, it verifies that the file starts with the hexadecimal value 0x5a4d and is smaller than 6075KB in size.
  Updated-Date: '2024_08_07'
CN_Honker__lcx_HTran2_4_htran20:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 138d6f4ddfe3fc2ea561c9d66aa3d31b
  Ruleset: securityonion-yara
  Summary: This rule detects specific strings present in files associated with the CN Honker Pentest Toolset, specifically targeting the executables lcx.exe, HTran2.4.exe, and htran20.exe. It identifies characteristic phrases such as "[SERVER] connection to %s:%d error," "[+] OK! I Closed The Two Socket," and "[+] Start Transmit (%s:%d <-> %s:%d) ......". These strings, in conjunction with a file size under 440KB and a standard DOS header, indicate the presence of these known penetration testing tools.
  Updated-Date: '2024_08_07'
CN_Honker__wwwscan_wwwscan_wwwscan_gui:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2ba599eb58abf53362b25fb290606feb
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of specific pentesting tools from the CN Honker group, particularly the executables named wwwscan.exe and wwwscan_gui.exe. It identifies these tools by recognizing specific strings within the files, such as a particular HTTP GET request and a usage message indicating how to operate the tool. The rule checks that the file is a valid PE file (indicated by the "MZ" header) and ensures that its size is less than 200KB.
  Updated-Date: '2024_08_07'
CN_Honker_arp3_7_arp3_7:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3f9af3adeb0e2195e785b7bcd0a66555
  Ruleset: securityonion-yara
  Summary: This rule detects a sample from the CN Honker Pentest Toolset, specifically targeting the file named arp3.7.exe. It identifies the executable by checking for the presence of specific strings within the file, such as "CnCerT.Net.SKiller.exe" and "www.80sec.com", and ensures the file size is less than 4000 KB. Additionally, the rule confirms the file starts with the "MZ" header typical of executable files.
  Updated-Date: '2024_08_07'
CN_Honker_cleaner_cl_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b05c8ff3724d8bcde598e305daa27858
  Ruleset: securityonion-yara
  Summary: This rule detects the CN Honker Pentest Toolset, specifically targeting the file named "cl.exe." It uses distinct string patterns, such as "cl -eventlog All/Application/System/Security" and "clear iislog error!" to identify the presence of this tool. The file size condition is set to less than 50KB, ensuring only files of this size that match the specified patterns are detected.
  Updated-Date: '2024_08_07'
CN_Honker_cleaniis:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5888784a0b62032e8438cb1f2c656b5f
  Ruleset: securityonion-yara
  Summary: This rule detects the executable file "cleaniis.exe," which is part of the CN Honker Pentest Toolset. The file is identified by specific strings, such as "iisantidote <logfile dir> <ip or string to hide>" and "IIS log file cleaner by Scurt." This tool is used to clean IIS log files, potentially obscuring user activity from log analysis. The rule applies to files smaller than 200KB and those matching the defined conditions.
  Updated-Date: '2024_08_07'
CN_Honker_clearlogs:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1700bc2a5fb982b8ef508470caf7b241
  Ruleset: securityonion-yara
  Summary: This rule detects the execution of the "clearlogs.exe" file, part of the CN Honker Pentest Toolset. It identifies the presence of specific strings within the file, such as a URL reference to a logging tool and an error message related to the inability to clear logs. The rule specifically checks for a particular file header signature and ensures the file size is below 140KB.
  Updated-Date: '2024_08_07'
CN_Honker_dedecms5_7:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 10e224d8c58a0e3a82448f0cea2e40c2
  Ruleset: securityonion-yara
  Summary: This rule detects a specific sample from the CN Honker Pentest Toolset, specifically targeting a file named "dedecms5.7.exe". It identifies the file by checking for a combination of specific string patterns, including the presence of "/data/admin/ver.txt" and "SkinH_EL.dll" within the file. Additionally, the file must be less than 830KB in size and start with the 'MZ' header, indicative of a Windows executable, to meet the detection criteria.
  Updated-Date: '2024_08_07'
CN_Honker_dirdown_dirdown:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e854a5c5b413559e959d73224c0a5b28
  Ruleset: securityonion-yara
  Summary: This rule detects the file "dirdown.exe" from the CN Honker pentest toolset. It identifies the presence of specific strings within the file, such as paths to decompression files and related executables, using patterns associated with decompression routines and functions like "Get8Bytes." The detection is based on the file's characteristics, including having a specific file signature and a size less than 45KB.
  Updated-Date: '2024_08_07'
CN_Honker_exp_iis7:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: df92f278f69c1805bdb3997dff958567
  Ruleset: securityonion-yara
  Summary: This rule detects a file named "iis7.exe" associated with the CN Honker Pentest Toolset, characterized by specific strings such as "\\localhost", "iis.run", "Could not connecto %s", and "WinSta0\\Default" within an executable file smaller than 60KB. The file starts with the header value 0x5a4d and corresponds to a hash value of "0a173c5ece2fd4ac8ecf9510e48e95f43ab68978". These strings and file attributes collectively identify the malicious software used for penetration testing.
  Updated-Date: '2024_08_07'
CN_Honker_exp_ms11011:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b4c8b58142c32636b2a25f707418540c
  Ruleset: securityonion-yara
  Summary: This rule detects a specific pentest tool named "ms11011.exe" associated with the CN Honker toolset. It identifies the presence of distinctive strings embedded in the executable, including file paths like "\\i386\\Hello.pdb", messages such as "OS not supported." and "Not supported.", and references to common executable names like "cmd.exe". The rule also confirms that the file matches a particular hash and checks for conditions like file size being less than 100KB, ensuring a precise match for this tool.
  Updated-Date: '2024_08_07'
CN_Honker_exp_ms11046:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d2b6b50f305bbca71a798eedfc8a6815
  Ruleset: securityonion-yara
  Summary: This rule detects a file named ms11046.exe, which is part of the CN Honker Pentest Toolset. It identifies this file based on specific strings in the file's content, including commands and success messages related to system token manipulation and user account management. The identified strings suggest the file contains functionalities to execute system commands and manage user privileges, possibly adding users and assigning them to the Administrators group. The file size is restricted to be less than 300KB and has a specific hash value for additional verification.
  Updated-Date: '2024_08_07'
CN_Honker_exp_ms11080:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: bde4e03295e4111ee2d034302db94ad9
  Ruleset: securityonion-yara
  Summary: This rule detects the file "ms11080.exe," which is part of the CN Honker Pentest Toolset. It specifically searches for strings within the file that include messages indicating the addition of a user with the credentials "90sec 90sec" and a notification of successful addition to the Administrators group. These characteristics suggest the file is used for gaining elevated privileges or creating backdoor access during penetration testing activities. The detection is based on the file's hash, specific strings within the file, and its size being less than 840KB.
  Updated-Date: '2024_08_07'
CN_Honker_exp_win2003:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6ed93217ea99c677f5bd833eb33a7ae5
  Ruleset: securityonion-yara
  Summary: "This rule detects the presence of a file named \"win2003.exe,\" which is part of the CN Honker Pentest Toolset. The file is identified by a specific hash value and contains strings related to its usage and success messages. These strings include indications that it should run with the \u201Ccmd\u201D command and success messages for shell execution. It also includes a message indicating its incompatibility with non-Windows NT family operating systems. The rule ensures that the file size is less than 100KB and meets specific criteria to confirm its identity."
  Updated-Date: '2024_08_07'
CN_Honker_getlsasrvaddr:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d649046a199949b0174231b7977910d7
  Ruleset: securityonion-yara
  Summary: 'This rule detects the presence of the CN Honker Pentest Toolset, specifically the file named getlsasrvaddr.exe. The detection is based on various indicators within the file, including the presence of the string "pingme.txt" flagged in PEStudio''s blacklist, the path to a debugging file ".\\lsasrv.pdb", and the phrase "Addresses Found: ". It targets files with a particular hash value and size under 100KB, initiating with the ''MZ'' file header signature.'
  Updated-Date: '2024_08_07'
CN_Honker_hashq_Hashq:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 50d6b9250edafc6b09bed64286cb33d0
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the file "Hashq.exe" from the CN Honker Pentest Toolset by identifying specific strings within the file such as "Hashq.exe", "CnCert.Net", and "Md5 query tool". The rule is designed to ensure that the file starts with the PE header (indicated by the magic number 0x5a4d) and that the file size is less than 600KB.
  Updated-Date: '2024_08_07'
CN_Honker_hkmjjiis6:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a6239070deba6efc97325023646bf684
  Ruleset: securityonion-yara
  Summary: This rule detects a specific executable file, identified as part of the CN Honker Pentest Toolset, named hkmjjiis6.exe. It identifies the file by checking for certain ASCII strings within the file, such as "* FROM IIsWebInfo/r", "ltithread4ck/", and "LookupAcc=Sid#". Additionally, the file must have a specific header value (`0x5a4d`) and be smaller than 175KB in size.
  Updated-Date: '2024_08_07'
CN_Honker_hxdef100:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7ea8f3a90c8be4a9dcba077ce571de15
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a file associated with the CN Honker Pentest Toolset, specifically targeting the file "hxdef100.exe." It identifies this file by checking for the "BACKDOORSHELL" string, occurrences of "%tmpdir%" and "%cmddir%" within the file, ensuring all conditions are met, and verifying that the file is a Windows executable (indicated by the header 0x5a4d) with a size of less than 200KB.
  Updated-Date: '2024_08_07'
CN_Honker_lcx_lcx:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c8d1ad49e3d4bb1c720161897bd4b68b
  Ruleset: securityonion-yara
  Summary: This rule detects a file named "lcx.exe," part of the CN Honker Pentest Toolset, specifically associated with the HTRAN tool. HTRAN facilitates network traffic redirection, often used for tasks such as listening, transmitting, or operating as a slave mode in a pentesting or administrative context. Key indicators include specific strings within the file, such as command options (e.g., listen, tran, slave), logging directives, and references to the CN Honker community website. Additionally, it checks for a particular file size constraint and the presence of certain strings within an executable file to confirm its identity.
  Updated-Date: '2024_08_07'
CN_Honker_linux_bin:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 866fd3343178d49e28a10b70a60511f7
  Ruleset: securityonion-yara
  Summary: This rule detects a script from the disclosed CN Honker Pentest Toolset, specifically targeting a file named 'linux_bin'. It identifies distinct code strings related to setting network client port configurations and outputting a connection waiting message. These strings include `client.sin_port = htons(atoi(argv[3]));` and `printf("\\n\\n*********Waiting Client connect*****\\n\\n");`. The condition for detection is that the file must be smaller than 20KB and contain all these specified strings.
  Updated-Date: '2024_08_07'
CN_Honker_mafix_root:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: de169f7d87c35becfd73a1565330d9ec
  Ruleset: securityonion-yara
  Summary: This rule detects a script associated with the CN Honker Pentest Toolset, specifically targeting a file named "root." The script includes commands such as appending configuration data to temporary initialization files, copying TCP log files to a specified hidden directory, and checking for the existence of a specific binary file. These behaviors suggest activities related to system manipulation and potential unauthorized access or data exfiltration. The script's use of such commands and checks can be indicative of malicious or unauthorized pentesting activities.
  Updated-Date: '2024_08_07'
CN_Honker_mempodipper2_6:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7a5ef72f4428de6cfbb28c2144ecd809
  Ruleset: securityonion-yara
  Summary: This rule detects a sample from the CN Honker Pentest Toolset, specifically targeting the file `mempodipper2.6`. It looks for the presence of a specific string related to command-line operations that involve using `objdump`, `grep`, `head`, `cut`, and `sed` on the `/bin/su` binary. The condition is triggered if the file size is smaller than 30KB and the string is found.
  Updated-Date: '2024_08_07'
CN_Honker_ms10048_x64:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 45debd8204bbd76343899945fed8f362
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific executable file, "ms10048-x64.exe," which is part of the CN Honker Pentest Toolset. It identifies the executable based on distinct string signatures within the file, such as "[ ] Creating evil window" and "[+] Set to %d exploit half succeeded," alongside its file size being less than 125KB and the file header starting with the bytes 0x5a4d.
  Updated-Date: '2024_08_07'
CN_Honker_ms10048_x86:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5435481dabdc227de2f80175a6d3b3df
  Ruleset: securityonion-yara
  Summary: This rule detects the file "ms10048-x86.exe" associated with the CN Honker Pentest Toolset. It identifies specific exploits based on the presence of the string "[+] Set to %d exploit half succeeded," verifying the file through its 0x5a4d header and by ensuring the filesize is less than 30KB.
  Updated-Date: '2024_08_07'
CN_Honker_ms11080_withcmd:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a8d5ba4455e4929228bb163a1d881221
  Ruleset: securityonion-yara
  Summary: 'This rule detects the presence of a file named ms11080_withcmd.exe, part of the CN Honker Pentest Toolset. Specific indicators include the usage pattern "Usage : ms11-080.exe cmd.exe Command" and the error message "[>] create pipe error," both present in the file. The file must have a PE header (starting with 0x5a4d) and be smaller than 340KB in size.'
  Updated-Date: '2024_08_07'
CN_Honker_mssqlpw_scan:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7fba09009f89ede83c84b2697cd8590c
  Ruleset: securityonion-yara
  Summary: This rule detects a script from the disclosed CN Honker Pentest Toolset that scans for Microsoft SQL Server passwords. The specific indicators of compromise include strings that display a message indicating the successful retrieval of a password and another message confirming the process completion, including the processing time. The detection criteria apply to files smaller than 6KB containing these specific strings.
  Updated-Date: '2024_08_07'
CN_Honker_mysql_injectV1_1_Creak:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 281d09ee43c9739422861b1b84e27040
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific file, `mysql_injectV1.1_Creak.exe`, which is part of the CN Honker Pentest Toolset. It identifies the file by matching a predefined hash and specific string patterns, including a URL related to MySQL injection and the function name "OnGetPassword". The tool appears to be a penetration testing utility targeting MySQL databases.
  Updated-Date: '2024_08_07'
CN_Honker_nc_MOVE:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8f0f47d66f1098b20d0d74582f0b3a55
  Ruleset: securityonion-yara
  Summary: This rule detects a script from the disclosed CN Honker Pentest Toolset, specifically related to a file named MOVE.txt. It identifies specific patterns in the script, such as a destination URL "http://202.113.20.235/gj/images/2.asp", a host address "202.113.20.235", and an HTTP request "MOVE /gj/images/A.txt HTTP/1.1". The script's size must be under 1KB and must match all specified string patterns for the detection to trigger.
  Updated-Date: '2024_08_07'
CN_Honker_net_packet_capt:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2495933d8cdcf86b86520c60ba4cfdf9
  Ruleset: securityonion-yara
  Summary: This rule detects a network packet capturing tool named "net_packet_capt.exe" from the CN Honker Pentest Toolset. The rule identifies the executable based on specific string patterns such as "(*.sfd)", "GetLaBA", "GAIsProcessorFeature", "- Gablto", and "PaneWyedit". It also verifies that the file has a valid PE header (indicated by the magic number 0x5a4d) and a file size of less than 50KB.
  Updated-Date: '2024_08_07'
CN_Honker_net_priv_esc2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d8f41c88e7a826b8e0b1390c9360f449
  Ruleset: securityonion-yara
  Summary: This rule detects a specific file associated with the CN Honker Pentest Toolset, named "net-priv-esc2.exe". The detection criteria include the presence of specific ASCII strings such as "Usage:%s username password" and "<www.darkst.com>", as well as a file size smaller than 17KB and a PE file header indicated by the value 0x5a4d at the file's start.
  Updated-Date: '2024_08_07'
CN_Honker_no_net_priv_esc_AddUser:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e1d81907ed7ea1604045b4f6a07cb393
  Ruleset: securityonion-yara
  Summary: This rule detects a specific file named AddUser.dll, which is part of the CN Honker Pentest Toolset. The AddUser.dll is suspected to be related to privilege escalation activities. The rule identifies the file based on its characteristics, including strings like "PECompact2," "adduser," and "OagaBoxA," ensuring that the file matches these specific patterns and is below a certain size threshold. This helps in detecting this potentially harmful or unauthorized software component within a system.
  Updated-Date: '2024_08_07'
CN_Honker_passwd_dict_3389:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 166e1c16fc105a40ee4dba27e66653d3
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of specific strings commonly associated with weak or default passwords within files smaller than 1KB. It specifically searches for terms such as "654321," "admin123," "admin123456," "administrator," "passwd," "password," and "12345678." These strings are characteristic of the CN Honker Pentest Toolset, particularly a file named 3389.txt, which suggests usage aimed at exploiting or testing for common password vulnerabilities.
  Updated-Date: '2024_08_07'
CN_Honker_portRecall_bc:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8244e12edda35f2fdec8d73c1657e0c2
  Ruleset: securityonion-yara
  Summary: 'This rule detects the presence of a specific script named "bc.pl" from the CN Honker Pentest Toolset. It targets three specific ASCII strings within the script: a connection confirmation message to a remote host, a usage instruction message for the script, and a hostname resolving message. The rule applies to files smaller than 10KB and identifies the script based on these characteristic strings.'
  Updated-Date: '2024_08_07'
CN_Honker_portRecall_pr:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: aa91c6eeea530833939f2767d983e4cb
  Ruleset: securityonion-yara
  Summary: This rule detects a script from the CN Honker Pentest Toolset, specifically targeting a file named "pr". The script includes usage instructions analogous to the "lcx.exe" tool for Windows, mentions connectivity to a client, and describes packet redirection functionality for Linux. The detection is based on the presence of these specific strings within files smaller than 70KB in size.
  Updated-Date: '2024_08_07'
CN_Honker_pr_debug:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d64ee001c8f14e1b56232a5b66e61c37
  Ruleset: securityonion-yara
  Summary: This rule detects a file named "debug.exe" from the CN Honker Pentest Toolset. It identifies specific text strings within the file, including indications of Windows Management Instrumentation (WMI) process manipulation and an exploit that adds a temporary user with administrative privileges. The file's hash value and a size constraint of less than 820KB are part of the detection criteria.
  Updated-Date: '2024_08_07'
CN_Honker_safe3wvs_cgiscan:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 50ccb80911accead4893a7b707fdc2e5
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the file `cgiscan.exe` from the CN Honker Pentest Toolset. The detection is based on specific strings within the file, including "httpclient.exe" and "www.safe3.com.cn". The rule also checks that the file starts with the header value `0x5a4d` and is less than 357KB in size.
  Updated-Date: '2024_08_07'
CN_Honker_shell_brute_tool:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f095faf4388de80bb6f1ea4e6e68200d
  Ruleset: securityonion-yara
  Summary: This rule detects the shell_brute_tool.exe from the CN Honker Pentest Toolset. It identifies suspicious strings associated with the tool, including a URL ("http://24hack.com/xyadmin.asp") and a User-Agent string ("Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0)"). The file is recognized by its hash value "f6903a15453698c35dce841e4d09c542f9480f01" and is characterized by a specific file size and initial byte pattern.
  Updated-Date: '2024_08_07'
CN_Honker_sig_3389_2_3389:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b27e001954ad31f156a92acf9c9bfca6
  Ruleset: securityonion-yara
  Summary: This rule detects a file named "3389.exe" associated with the CN Honker Pentest Toolset. It identifies the file based on the presence of specific strings including "C:\\Documents and Settings\\Administrator\\", "net user guest /active:yes", and "\\Microsoft Word.exe". The file must have a PE header starting with "0x5a4d" and a size of less than 80KB.
  Updated-Date: '2024_08_07'
CN_Honker_sig_3389_3389:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: daac741d6915498dde444e80f7496ef5
  Ruleset: securityonion-yara
  Summary: This rule detects a script from the disclosed CN Honker Pentest Toolset, specifically targeting a file named "3389.vbs." The rule identifies a particular malicious action where the script takes ownership of the "sethc.exe" file in the SystemRoot system directory and executes commands with elevated privileges. The detection is based on the presence of specific strings within files smaller than 10KB.
  Updated-Date: '2024_08_07'
CN_Honker_sig_3389_3389_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 41cef0b480f296ad42f183e4c4ccdc22
  Ruleset: securityonion-yara
  Summary: This rule detects a script associated with the CN Honker Pentest Toolset, specifically targeting the file "3389.bat." It identifies the script through the presence of specific strings that indicate the deletion of the files "termsrvhack.dll" and "3389.txt" within the script. The rule applies to files smaller than 3KB and ensures that both identified strings are present.
  Updated-Date: '2024_08_07'
CN_Honker_sig_3389_3389_3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: fc84b5f3cbd9608ec592127cb6cc5f01
  Ruleset: securityonion-yara
  Summary: This rule detects a specific batch script from the disclosed CN Honker Pentest Toolset, known as file 3389.bat. The batch script manipulates registry settings to disable terminal service connection restrictions and change the port number for terminal services by appending specific registry modifications into a file named 3389.reg. It achieves this by creating entries such as "fDenyTSConnections" and "PortNumber" in the Windows Registry under the Terminal Server control settings. The detection is based on unique strings found within the script and targets files smaller than 2KB in size.
  Updated-Date: '2024_08_07'
CN_Honker_sig_3389_80_AntiFW:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 53976e6d859a0ff5cc3e94895778699d
  Ruleset: securityonion-yara
  Summary: This rule detects the executable file AntiFW.exe, which is a part of the CN Honker Pentest Toolset. It identifies specific strings within the file, such as "Set TS to port:80 Successfully!", "Now,set TS to port 80", "echo. >>amethyst.reg", "del amethyst.reg", and "AntiFW.cpp". The detection logic checks for the presence of these strings and ensures the file begins with the PE signature (0x5a4d) and has a size of less than 30KB.
  Updated-Date: '2024_08_07'
CN_Honker_sig_3389_DUBrute_v3_0_RC3_2_0:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f420348518ba0d15cc02cb4ad302a150
  Ruleset: securityonion-yara
  Summary: This rule detects a sample from the CN Honker Pentest Toolset, specifically the file named "2.0.exe." The detection focuses on identifying certain text strings within the file, such as "IP - %d; Login - %d; Password - %d; Combination - %d," "Create %d IP@Login;Password," and "UBrute.com." Additionally, the rule checks that the file's size is less than 980KB and that the file's header starts with the bytes corresponding to "0x5a4d." The purpose is to identify malicious or unauthorized use of this pentest tool, which is known to be associated with brute force attacks.
  Updated-Date: '2024_08_07'
CN_Honker_sig_3389_DUBrute_v3_0_RC3_3_0:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d5efc967c27253c69ec8cb939ad9cbf8
  Ruleset: securityonion-yara
  Summary: This rule detects a specific sample from the CN Honker Pentest Toolset associated with the file named "3.0.exe." The detection is based on the presence of certain strings within the file, including "explorer.exe http://bbs.yesmybi.net," "LOADER ERROR," and "CryptGenRandom." Additionally, the rule checks that the file has a DOS header (with a specific magic number) and a file size of less than 395KB.
  Updated-Date: '2024_08_07'
CN_Honker_sig_3389_mstsc_MSTSCAX:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 13b0b9463123a29869e329bc88a49e90
  Ruleset: securityonion-yara
  Summary: This rule detects a specific DLL file, MSTSCAX.DLL, associated with the CN Honker Pentest Toolset. The rule targets various distinct strings within the file, including "ResetPasswordWWWx", "Terminal Server Redirected Printer Doc", and "Cleaning temp directory". It validates the presence of these strings in conjunction with the DLL file's standard identifier and ensures the file size is less than 1000KB. This detection helps identify potentially malicious or unauthorized use of the MSTSCAX.DLL file within systems.
  Updated-Date: '2024_08_07'
CN_Honker_sig_3389_xp3389:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e7d0372c285714a7aed704d3a7d49e3d
  Ruleset: securityonion-yara
  Summary: This rule detects the xp3389.exe file, which is a sample from the CN Honker Pentest Toolset. It searches for specific strings that indicate modifications to the Windows registry, such as adding entries under the Terminal Server settings in the registry to enable certain configurations. The rule specifically looks for changes to the registry that allow remote connections and terminal server functionality.
  Updated-Date: '2024_08_07'
CN_Honker_smsniff_smsniff:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0c058754f55d7d196a30aa74e775cb99
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of "smsniff.exe," a component of the CN Honker Pentest Toolset, specifically designed for capturing network traffic. It identifies the executable file by matching certain strings such as "smsniff.exe" and "SmartSniff" within files smaller than 267KB that start with the "MZ" header.
  Updated-Date: '2024_08_07'
CN_Honker_struts2_catbox:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 20d7e3d232285caba263c4808b4f0358
  Ruleset: securityonion-yara
  Summary: This rule detects the file "catbox.exe" from the CN Honker Pentest Toolset. It looks for specific strings such as "'Toolmao box by gainover www.toolmao.com" and "{external.exeScript(_toolmao_bgscript[i],'javascript',false);}}" within the file, ensuring the file begins with the 'MZ' header and is less than 8160KB in size.
  Updated-Date: '2024_08_07'
CN_Honker_super_Injection1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1a6927a21bf0bc9ab212728396632e37
  Ruleset: securityonion-yara
  Summary: This rule detects a file named "super Injection1.exe," which is a component of the CN Honker Pentest Toolset. It identifies the file based on specific strings within it, such as a dependency string indicating the need for version 4.70 or greater of COMCTL32.DLL, a Mozilla user agent string mimicking Internet Explorer 6.0 on Windows NT 5.0, and a string related to a log file named "ScanInject.log." It ensures the file is a valid executable with a size less than 2000KB, verifying the presence of all specified strings.
  Updated-Date: '2024_08_07'
CN_Honker_syconfig:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b4e0c0dc6a68333f54f2b026c8fd6e9b
  Ruleset: securityonion-yara
  Summary: This rule detects a potentially malicious script associated with the CN Honker Pentest Toolset, specifically targeting the syconfig.dll file. The detection is based on a unique string, "Hashq.CrackHost+FormUnit," and is triggered if certain conditions related to the file's size and type are met.
  Updated-Date: '2024_08_07'
CN_Honker_termsrvhack:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: aa1976e6245c215bc8c619a64cce292f
  Ruleset: securityonion-yara
  Summary: This rule detects a DLL file, specifically "termsrvhack.dll," which is part of the CN Honker Pentest Toolset, by identifying distinctive strings embedded within the file. These strings include error messages related to terminal server client licenses and specific format strings, such as directory structures and identifiers, aiming to match the characteristics of the malicious DLL. The file's size and certain initial bytes are also considered to confirm its presence.
  Updated-Date: '2024_08_07'
CN_Honker_windows_exp:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 48fd18e9ca58d77c48239b536cf54972
  Ruleset: securityonion-yara
  Summary: This rule detects a specific executable file named "exp.exe," part of the CN Honker Pentest Toolset. It identifies the file based on the presence of particular strings such as a Windows system command path and a specific error message, which are indicative of this tool's malicious activities. The file is small, under 220KB, and starts with a specific file signature.
  Updated-Date: '2024_08_07'
CN_Honker_windows_mstsc_enhanced_RMDSTC:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 48a0e9673f27cac10336a82304599e2d
  Ruleset: securityonion-yara
  Summary: 'This rule detects a specific file named RMDSTC.exe, which is part of the CN Honker Pentest Toolset. The detection is based on two wide-string patterns: "zava zir5@163.com" and "By newccc". Additionally, the file must begin with the hexadecimal value 0x5a4d and be smaller than 400KB in size.'
  Updated-Date: '2024_08_07'
CN_Honker_wwwscan_1_wwwscan:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 593c091f8bac829901ad9e45fe8ceb78
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the wwwscan.exe file, which is part of the CN Honker Pentest Toolset. It identifies specific characteristics such as a unique hash and certain strings commonly associated with the tool, including network request templates and HTTP header structures. The file must have a specific magic number at the beginning and be smaller than 180KB for the rule to be applied.
  Updated-Date: '2024_08_07'
CN_Honker_wwwscan_gui:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 158d33dbc5420392db0066e1c63c3e60
  Ruleset: securityonion-yara
  Summary: This rule detects the executable file "wwwscan_gui.exe" from the CN Honker Pentest Toolset. It identifies this file by looking for specific strings, such as formatted target URLs and paths associated with administrative login pages. The rule also checks that the file size is under 280KB and verifies the file's header.
  Updated-Date: '2024_08_07'
CN_Packed_Scanner:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e96c09520b121ba213a57b25f589f7b0
  Ruleset: securityonion-yara
  Summary: This rule detects a suspiciously packed executable by searching for the presence of specific strings associated with system libraries and functions, such as "kernel32.dll," "CRTDLL.DLL," "__GetMainArgs," and "WS2_32.DLL," within files that are between 70KB and 180KB in size.
  Updated-Date: '2024_08_07'
CN_Tools_MyUPnP:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 33870bdb66b0d389c574801ade6896a7
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the "MyUPnP.exe" file associated with a Chinese hacktool set by identifying specific strings such as "<description>BYTELINKER.COM</description>", "myupnp.exe", and "LOADER ERROR" within an executable file. The rule is triggered if the file begins with the magic number "MZ" and its size is less than 1500KB, indicating the potential use of this hacktool.
  Updated-Date: '2024_08_07'
CN_Tools_PcShare:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4a00fe919fcebc761abebb7f4b1bcc3a
  Ruleset: securityonion-yara
  Summary: This rule detects a specific Chinese hacktool named PcShare, associated with the executable file PcShare.exe. It identifies the malware by checking for the presence of distinct strings within the file. These strings include a specific title format, a user-agent string mimicking Internet Explorer 6.0, a URL pointing to a password recovery page on the pcshares.cn domain, strings related to port and credential information, a file path pattern using .dat files, a reference to "pcinit.exe", and a URL linking back to the main pcshare.cn site. The file is validated as a PE file and must be under 6000KB in size, with at least three of the specified strings present for detection.
  Updated-Date: '2024_08_07'
CN_Tools_Shiell:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6648f223c940fc30332836986d54006a
  Ruleset: securityonion-yara
  Summary: This rule detects the Chinese hack tool "Shiell.exe" by identifying specific strings found within the code or related files. These strings include file paths and names likely associated with development and deployment environments, such as "C:\\Users\\Tong\\Documents\\Visual Studio 2012\\Projects\\Shift shell" and "C:\\Windows\\System32\\Shiell.exe". Additionally, it looks for the phrase "Shift shell.exe" and a specific registry command format. The rule applies when the file has a specific MZ header and a size less than 1500KB, with at least two of the identified strings present.
  Updated-Date: '2024_08_07'
CN_Tools_Temp:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0a3f558b41318202bc58ed5e4086ac4d
  Ruleset: securityonion-yara
  Summary: This rule detects a Chinese hacktool named Temp.war by identifying the presence of specific strings within the file, such as "META-INF/context.xml" with an XML declaration, "browser.jsp", "cmd.jsp", and "index.jsp". The condition for detection includes a file signature check for a particular file type and ensuring the file size is below 203KB.
  Updated-Date: '2024_08_07'
CN_Tools_VNCLink:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5213c8ed6afcb5dae9dd57b828a64e16
  Ruleset: securityonion-yara
  Summary: This rule detects a Chinese hacktool named VNCLink.exe, which is associated with malicious activities. The rule is based on identifying specific ASCII strings found within the file, such as log file paths and attribution text to a known hacker group. The condition also checks if the file has a specific header value and is under a certain size.
  Updated-Date: '2024_08_07'
CN_Tools_Vscan:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f10417a98e362f607e2a9d1455e6637d
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a Chinese hacktool named Vscan.exe. The tool is associated with a specific hash value and is known for its capability to bypass authentication in RealVNC versions up to 4.1.1. The detection is based on strings within the file that indicate its functionality, such as usage instructions for a VNC bypass authentication scanner, and example IP addresses for scanning. These conditions help to identify the file based on its contents and size, making it easier to flag this malicious software.
  Updated-Date: '2024_08_07'
CN_Tools_hscan:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 93d2a6dc765fcd2c7e94e799e951b882
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a file named "hscan.exe," which is identified as part of a Chinese Hacktool Set. The detection is made by searching for specific strings that include command line parameters, file paths, and log entries associated with network scanning and penetration activities, such as FTP scans, IP range scans, and the discovery of sensitive credentials like Cisco passwords. The rule checks for identifiable patterns that would only appear if the "hscan.exe" tool is present, targeting usage scenarios like generating reports in HTML format and log entries for scanning activities.
  Updated-Date: '2024_08_07'
CN_Tools_item:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 35177da364522684b7cc97c06bcc9ff9
  Ruleset: securityonion-yara
  Summary: This rule detects a specific file named "item.php" associated with a Chinese hacktool set. It looks for unique string patterns within the file that are indicative of this particular hacktool, such as URLs being constructed using variables like `$sURL` and `$sWget`, and the inclusion of an array named `$aURL` with elements "scheme", "host", and "path." The rule targets files smaller than 4KB that contain all these strings.
  Updated-Date: '2024_08_07'
CN_Tools_old:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c227fddc441afd998554675d13f2238f
  Ruleset: securityonion-yara
  Summary: This rule detects a specific old PHP file that is part of a Chinese hacktool set. The PHP file performs actions such as using wget to download files, constructing URLs from server and file names, changing file permissions, and generating a command to write to an output file. The detection is based on the presence of these particular strings within files smaller than 6KB.
  Updated-Date: '2024_08_07'
CN_Tools_pc:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 49ce4dcc35948ad61b78a05058616500
  Ruleset: securityonion-yara
  Summary: This rule detects a Chinese hacktool executable named "pc.exe". It targets a file with a specific hash and checks for characteristic strings associated with the hacktool, including references to "svchost.exe", a formatted string with "%s%08x.001", "Qy001Service", and "/.MIKY". Additionally, it verifies that the file starts with the "MZ" header, typical of Windows executables, and ensures the file size is less than 300KB.
  Updated-Date: '2024_08_07'
CN_Tools_srss:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d302e0adb889f2e03a5097be191101c1
  Ruleset: securityonion-yara
  Summary: This rule detects a specific Chinese hacktool set by identifying a batch file named "srss.bat". It looks for the presence of specific strings within a file, including commands that invoke "srss.exe" with various parameters related to IP and port configurations and log filtering. The rule applies to files smaller than 100 bytes and requires the presence of all specified strings for a match.
  Updated-Date: '2024_08_07'
CN_Tools_srss_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e86cb7a955919bdec75480836b095e4a
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a Chinese hacktool named srss.exe by checking for specific string patterns and file characteristics. It identifies the string "used pepack!" and specific API function names such as "KERNEL32.dll", "LoadLibraryA", "GetProcAddress", "VirtualProtect", "VirtualAlloc", "VirtualFree", and "ExitProcess" within the executable. Additionally, it verifies the file size is less than 14KB and matches a specific PE file signature.
  Updated-Date: '2024_08_07'
CN_Tools_xbat:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8721879fdff40dda1863537ca3c5aae5
  Ruleset: securityonion-yara
  Summary: This rule detects a specific file associated with a Chinese hacktool set known as xbat.vbs. It searches for indicators within the file, such as the presence of "ws.run \"srss.bat /start\",0 " and the creation of a Wscript Shell object. This detection focuses on files matching a particular hash and having specific characteristics in their content and file size.
  Updated-Date: '2024_08_07'
CN_Tools_xsniff:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 93bdf3873e6ba1fdeeee4885a6d3e166
  Ruleset: securityonion-yara
  Summary: This rule detects the Chinese hacktool called "xsniff," specifically targeting the executable file "xsniff.exe." The detection is based on various string patterns found within the file, including parameters for command-line execution such as logging credentials, network address configurations, and specific developer markers. The rule also checks for a valid executable format and file size constraints to ensure accuracy.
  Updated-Date: '2024_08_07'
CN_Toolset_LScanPortss_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: adaec3a1cbc4b85509135c9841b74dd9
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a Chinese hacktool named LScanPortss.exe. The detection is based on specific strings commonly associated with this tool, including "LScanPort.EXE", "www.honker8.com", "DefaultPort.lst", "Scan over.Used %dms!", "www.hf110.com", "LScanPort Microsoft", and "L-ScanPort2.0 CooFly". This tool is referenced from a known toolset and implicates scanning activities, potentially useful for malicious purposes as indicated by the associated web domains and file paths.
  Updated-Date: '2024_08_07'
CN_Toolset_NTscan_PipeCmd:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 180308e047e4e60ce1301fb3203e649e
  Ruleset: securityonion-yara
  Summary: This rule detects a Chinese hacktool known as PipeCmd.exe, which is part of a disclosed toolset. It identifies specific strings and patterns related to this tool, such as error messages and service names indicating its usage and operation. The rule looks for various forms of pipe communication commands, service execution references, and specific file names associated with PipeCmd.exe and its related service executable PipeCmdSrv.exe. The intention is to flag the presence of this hacktool based on these identifiable characteristics.
  Updated-Date: '2024_08_07'
CN_Toolset__XScanLib_XScanLib_XScanLib:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8d13b23c2982dbb2ea21ddda78617df0
  Ruleset: securityonion-yara
  Summary: This rule detects a Chinese hacktool from a disclosed toolset specifically targeting files named XScanLib.dll. It searches for specific strings within the files such as "Plug-in thread causes an exception, failed to alert user.", "PlugGetUdpPort", "XScanLib.dll", "PlugGetTcpPort", and "PlugGetVulnNum". The presence of these strings is used to identify the malicious nature of the DLL files associated with the hacktool.
  Updated-Date: '2024_08_07'
CN_Toolset_sig_1433_135_sqlr:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7e54b997ad2ad51a2b4ce36b3b8cbcdf
  Ruleset: securityonion-yara
  Summary: This rule detects a Chinese hacktool named sqlr.exe, which is part of a disclosed toolset. The rule identifies this malicious software by matching specific strings within the file. These strings indicate successful connection messages to an MSSQL server, commands involving the master database, execution of shell commands via xp_cmdshell, and SQL queries using OPENROWSET with a trusted connection.
  Updated-Date: '2024_08_07'
CN_disclosed_20180208_KeyLogger_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6b4f2b7a639909be8be57d6f1956afbf
  Ruleset: securityonion-yara
  Summary: This rule detects a specific type of keylogger malware within a disclosed Chinese malware set. The malware exhibits behaviors like attempting to acquire keylogger logs and executing commands to download and execute additional code. Indicative strings such as "Process already elevated," "GetKeyloggErLogsResponse," "get_encryptedPassword," "DoDownloadAndExecute," and "GetKeyloggeRLogs" are used to identify the presence of this malware. The target files are executable files smaller than 1000KB in size, and the initial bytes of the file match the standard "MZ" header, typically found in executable files.
  Updated-Date: '2024_08_07'
CN_disclosed_20180208_Mal1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b95144993fef40314bd722ae82c4a459
  Ruleset: securityonion-yara
  Summary: This rule detects malware from a disclosed malware set originating from China. It specifically identifies the malware through the presence of certain strings such as the filepath for a malicious DLL (`termsrvhack.dll`), a specific user-agent string linked to Internet Explorer 6.0, and various commands that terminate specific processes like `cmd.exe`, `mstsc.exe`, `taskmgr.exe`, `regedit.exe`, and `mmc.exe`. Additionally, it flags particular executable filenames, including `K7TSecurity.exe` and `ServUDaemon.exe`. The rule also checks for a specific import hash and ensures the file size is under 2000KB.
  Updated-Date: '2024_08_07'
CN_disclosed_20180208_Mal4:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 071162ba231320e4414124a2c918c43c
  Ruleset: securityonion-yara
  Summary: This rule detects malware from a specific disclosed CN malware set. It identifies files based on the presence of certain strings related to Microsoft .NET Framework and COM+ support and integration, such as "Microsoft .Net Framework COM+ Support" and "Microsoft .NET and Windows XP COM+ Integration with SOAP." Additionally, the file size must be under 3000KB, and the file must have a specific export function named "SPACE."
  Updated-Date: '2024_08_07'
CN_disclosed_20180208_Mal5:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0f3e15027f976e118ffb5e20466c4e1b
  Ruleset: securityonion-yara
  Summary: This rule detects a piece of malware from a known set of malicious software disclosed in 2018 and associated with CN. It identifies specific patterns that include a combination of terms related to .NET frameworks such as "System.Web.Services.Protocols.SoapHttpClientProtocol," "System.Windows.Forms.Form," and "My.Computer." Additionally, the rule checks for the presence of names like "Server.exe," "Stub.Resources.resources," and "MyTemplate" within files smaller than 300KB. The condition also ensures the targeted file starts with the hexadecimal value 0x5a4d, indicating it's a Windows executable.
  Updated-Date: '2024_08_07'
CN_disclosed_20180208_System3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 83cf961734c3695560517032d06aef26
  Ruleset: securityonion-yara
  Summary: This rule detects malware known as part of the disclosed CN malware set. It identifies the presence of the "WmiPrvSE.exe" executable with a specific file path, including portions of the paths such as "C:\\Users\\sgl\\AppData\\Local\\", "Temporary Projects\\WmiPrvSE\\", and a specific GUID-like string. The detection is triggered for files with a particular hash and size under 200KB.
  Updated-Date: '2024_08_07'
CN_disclosed_20180208_c:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c1646b3aee1268b9400d49bc0b58a749
  Ruleset: securityonion-yara
  Summary: This rule detects malware by identifying specific behavior patterns and string indicators commonly associated with a particular malware set disclosed from CN. It looks for commands that schedule tasks and execute scripts via `cmd.exe`, uses URLs related to file uploads, and interacts with Windows Management Instrumentation (WMI) to gather antivirus information and perform system shutdowns. The presence of triggers such as "winmgmts", "WmiPrvSE.exe", and "schtasks" are key indicators used in detecting this malware, focusing on executable files smaller than 100KB in size.
  Updated-Date: '2024_08_07'
CN_disclosed_20180208_lsls:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c9cd201d1f17e1f8049b8948ecc35e5c
  Ruleset: securityonion-yara
  Summary: This rule detects malware from a disclosed Chinese malware set by identifying a specific User-Agent string associated with Internet Explorer 10 on Windows systems. It searches for the presence of this User-Agent string in files smaller than 3000KB that start with the bytes 0x457f.
  Updated-Date: '2024_08_07'
COZY_FANCY_BEAR_Hunt:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9a2cae7faa65a6a691d8078147c109e8
  Ruleset: securityonion-yara
  Summary: This rule detects command and control server IP addresses associated with the Cozy Bear and Fancy Bear cyber espionage groups. It checks for the presence of specific IP addresses within a file, indicating potential communication with servers used by these adversary groups. Additionally, the rule verifies that the file format conforms to the PE (Portable Executable) standard by ensuring that the magic number at the beginning of the file is 0x5a4d.
  Updated-Date: '2024_08_07'
COZY_FANCY_BEAR_pagemgr_Hunt:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 141fcefbef8b8279959ff10617f06468
  Ruleset: securityonion-yara
  Summary: This rule detects a specific executable named "pagemgr.exe" associated with an intrusion into the Democratic National Committee, as reported by CrowdStrike. The rule identifies this executable by checking for a particular string and ensuring the file header matches the standard for executable files.
  Updated-Date: '2024_08_07'
CVE_2014_4076_Exploitcode:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2db099d62f4dd3af353377d86cbd4cc3
  Ruleset: securityonion-yara
  Summary: This rule detects an exploit code for the CVE-2014-4076 vulnerability, specifically looking for specific strings within a PE file smaller than 100KB. The strings include indicators of process creation, modifications to shellcode, system shell spawning, and references to the Microsoft vulnerability MS14-070.
  Updated-Date: '2024_08_07'
CVE_2015_1674_CNGSYS:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 539af00c7cab10657f624137c34a32fb
  Ruleset: securityonion-yara
  Summary: This rule detects exploits targeting CVE-2015-1674 by identifying specific characteristics associated with malicious files. It examines files smaller than 60KB for certain strings, such as "\\Device\\CNG", "GetProcAddress", "LoadLibrary", "KERNEL32.dll", and "ntdll.dll", which are commonly associated with this particular vulnerability. The condition further checks that the file starts with the hexadecimal value 0x5a4d, ensuring it matches a typical Windows executable format.
  Updated-Date: '2024_08_07'
CVE_2015_1701_Taihou:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 44f704f820306bf822952ac310d18dba
  Ruleset: securityonion-yara
  Summary: This rule detects the compiled exploit code for CVE-2015-1701, monitoring for specific strings and wide-character references associated with this exploit. It targets specific function names such as "VirtualProtect," "RegisterClass," "LoadIcon," "PsLookupProcessByProcessId," "LoadLibraryExA," and "gSharedInfo." Additionally, it seeks references to the library files "user32.dll" and "ntdll." The rule applies to files smaller than 160KB and initialized with the MZ header signature (0x5a4d), indicative of executable files.
  Updated-Date: '2024_08_07'
CVE_2017_11882_RTF:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d3f11d41af3dce0d019e69282e368a98
  Ruleset: securityonion-yara
  Summary: This rule detects suspicious Microsoft Equation OLE contents linked to CVE-2017-11882, specifically within RTF files. It identifies characteristics of Microsoft's MSHTA.EXE utility being invoked via HTTP, indicating potential exploitation. It also checks for ASCII strings related to Microsoft Equation 3.0 and Equation Native components, and a specific .hta file pattern. The detection applies to files less than 300KB in size, and matches specific conditions in the RTF file headers.
  Updated-Date: '2024_08_07'
Casper_Backdoor_x86:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 84f020ac918a8fc09bee87b4fc778435
  Ruleset: securityonion-yara
  Summary: This rule detects Casper Backdoor, a variant of French espionage malware known as Win32/ProxyBot.B. It targets specifically the x86 payload. Key indicators include the presence of specific process names such as "svchost.exe" and "firefox.exe," along with strings associated with Windows and Firefox profiles. It also checks for certain patterns related to cookies, HTTP requests, user directories, and specific browser user-agent strings. The rule applies conditions on file size and the presence of multiple specific strings to identify the malware.
  Updated-Date: '2024_08_07'
Casper_EXE_Dropper:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9e09b478bc84bb8898b3e1495ebac943
  Ruleset: securityonion-yara
  Summary: This rule detects the Casper espionage malware, specifically a dropper variant identified as Win32/ProxyBot.B. The detection criteria include strings found within the malicious executable, such as XML-like command tags, specific command-line structure indicators, and system call identifiers like "nKERNEL32.DLL" and "@ReturnValue". These patterns are present to ensure the malware dropper, which is designed to install additional malicious components onto the infected system, can be identified with high confidence.
  Updated-Date: '2024_08_07'
Casper_Included_Strings:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9b386558646ae86e1dfce1f9c502d528
  Ruleset: securityonion-yara
  Summary: "This rule detects the Casper espionage malware through multiple string matches within a file. The detection focuses on specific command-line patterns, including commands executed via `cmd.exe` and system information checks. It identifies filename indicators like `domcommon.exe` and `aiomgr.exe`, and other artifacts such as the temporary file `perfaudio.dat`, and the loaded module `Casper_DLL.dll`. The rule also checks for communication with a specific command and control server (`jpic.gov.sy`), a unique decryption key, and a mutex identifier `{4216567A-4512-9825-7745F856}` to ensure comprehensive detection of the malware\u2019s presence."
  Updated-Date: '2024_08_07'
Casper_SystemInformation_Output:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a328f5d6aee5ac3ec7f9edc9447a3804
  Ruleset: securityonion-yara
  Summary: 'This rule detects specific system information output from Casper, a French espionage malware. It identifies characteristic strings such as "***** SYSTEM INFORMATION ******", "***** SECURITY INFORMATION ******", and "Antivirus: " among others, which are indicative of the malware''s ability to gather and report detailed system and security settings, execution context, and user identity.'
  Updated-Date: '2024_08_07'
Casus15_php_php:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 454b9713ff6480c411b3fdac19395b80
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of specific strings within a PHP file named "Casus15.php.php.txt". The identified strings include commands for file operations and echo statements, which appear to be part of a malicious script. Specifically, these strings involve copying files and displaying text related to hacking activities. The condition for this detection is the presence of at least one of these strings.
  Updated-Date: '2024_08_07'
Chafer_Exploit_Copyright_2017:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: aeae03d95cbb56c20a22889bf1d613f6
  Ruleset: securityonion-yara
  Summary: This rule detects a specific instance of the Oilrig malware, also known as APT34, which is an Internet Server Extension identified by particular text strings, including "test3 Internet Server Extension" and "Copyright (C) 2017 Exploit". The rule targets files smaller than 700KB and specifically looks for the presence of certain ASCII strings such as "popen() failed!" and "cmd2cmd=". The malware exploits this extension to carry out its operations.
  Updated-Date: '2024_08_07'
Chafer_Mimikatz_Custom:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 680dd88faced5266e23eb8de36ea224b
  Ruleset: securityonion-yara
  Summary: This rule detects a custom version of the Mimikatz tool by identifying a specific file path ("C:\\Users\\win7p\\Documents\\mi-back\\") within the executable file's data, ensuring that the file starts with the "MZ" header and has a size of less than 3000KB. Mimikatz is a well-known post-exploitation tool used by attackers to extract plaintext passwords, hashes, PINs, and Kerberos tickets from memory.
  Updated-Date: '2024_08_07'
Chafer_Packed_Mimikatz:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e8f0d20a2af60f8327d201ee6261d2ef
  Ruleset: securityonion-yara
  Summary: This rule detects a variant of the malware known as Mimikatz, which is used for extracting Windows security credentials. Specifically, it identifies a packed version linked to the cyber espionage group Oilrig and also known as Chafer_WSC_x64. The detection is based on specific strings such as "Windows Security Credentials" and "Minisoft," as well as a file size constraint and a specific file header identifier.
  Updated-Date: '2024_08_07'
Chafer_Portscanner:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5951b2142d2ea99ae0e65bb1006c643b
  Ruleset: securityonion-yara
  Summary: This rule detects a custom portscanner used by the Oilrig hacking group. It identifies specific characteristics indicating the presence of the portscanner, including unique file paths, command-line options for scanning IPs and ports, and references to open ports of hosts. Additionally, it ensures that the file meets certain size constraints and starts with the expected "MZ" header for executable files.
  Updated-Date: '2024_08_07'
CheshireCat_Gen1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c93fecdd69b398052cb766e62cab1bb6
  Ruleset: securityonion-yara
  Summary: This rule detects the CheshireCat malware, which is identified by the presence of specific DLL files and mutex names within the infected system. It examines various filename strings such as "CAPESPN.DLL," "WINF.DLL," "NCFG.DLL," and "msgrthlp.dll," alongside unique mutex names formatted as globally unique identifiers (GUIDs). Additionally, the rule checks for strings related to icon handlers, shell icon cache, Windows specific registry paths, and certain formatting patterns in the file. It leverages conditions like file size and specific headers to confirm the presence of the malware.
  Updated-Date: '2024_08_07'
CheshireCat_Gen2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e0a65635c58b0defc4bfc763a5dd9883
  Ruleset: securityonion-yara
  Summary: This rule detects the Cheshire Cat malware by identifying specific attributes within executable files. It checks for particular string patterns related to Windows Shell Icon Handlers, CLSID information, and other unique markers within a file that signify the presence of this malware. The condition for detection includes verifying that the file's size is less than 200KB, that it starts with the "MZ" header characteristic of Windows executables, and that it contains a combination of these specific string patterns.
  Updated-Date: '2024_08_07'
CheshireCat_Sample2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2c0c13de29df07e90040a7a14c653266
  Ruleset: securityonion-yara
  Summary: 'This rule detects a specific malicious sample related to the CheshireCat malware. It targets a file named "mpgvwr32.dll" and includes strings indicative of error messages and parameter handling routines such as "Unexpected failure of wait! (%d)", "\"%s\" /e%d /p%s", "error in params!", "sscanf", and "<>Param : 0x%x". The rule checks for a PE file with a specified size constraint and validates the presence of several of these specific strings.'
  Updated-Date: '2024_08_07'
ChinaChopper_Generic:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4bcaf0136d756cc6b5aefd1bff74fabe
  Ruleset: securityonion-yara
  Summary: This rule detects China Chopper webshells, specifically targeting PHP and ASPX variants. It identifies malicious code patterns used by China Chopper, such as eval statements in PHP scripts and Jscript language usage in ASPX pages. The rule applies specific string matches indicative of these webshells while excluding certain benign patterns to reduce false positives.
  Updated-Date: '2024_08_07'
ChinaChopper_caidao:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a725ebf23e954182c9558cd7e01e7bbd
  Ruleset: securityonion-yara
  Summary: This rule detects the Chinese hacktool known as Caidao.exe. It identifies specific strings within a file, such as "Pass,Config,n{)", "phMYSQLZ", "\\DHLP\\.", "\\dhlp\\.", "SHAutoComple", and "MainFrame." Additionally, the file must start with the magic number 0x5a4d and be less than 1077KB in size. The rule aims to recognize this particular set of exploit tools by matching all specified criteria.
  Updated-Date: '2024_08_07'
ChinaChopper_one:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9658e5d582e0afc6d54c7f27095509f8
  Ruleset: securityonion-yara
  Summary: This rule detects a specific malicious ASP file associated with the China Chopper web shell. It identifies the presence of a particular malicious script in files smaller than 50 bytes by looking for the string "<%eval request(" within the file, which indicates potential exploit behavior aimed at executing server-side code through user-supplied inputs.
  Updated-Date: '2024_08_07'
ChinaChopper_temp:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 56907d3a44851ab60685c705110f20dc
  Ruleset: securityonion-yara
  Summary: This rule detects the China Chopper malware by identifying specific strings within files named "temp.asp". The rule looks for the presence of several VBScript-related terms and commands, such as creating an object named "o" with the "Server.CreateObject" function, setting the object language to "vbscript," and adding code from a request parameter ("Request(\"SC\")"). This malware is known for its small size and capability to allow remote control over infected web servers. The rule applies to files less than 1KB in size.
  Updated-Date: '2024_08_07'
ChinaChopper_temp_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 77789169ee8e04609bcf6222d984a407
  Ruleset: securityonion-yara
  Summary: This rule detects a malicious PHP file, named "temp.php," which is part of a Chinese hacktool set known as China Chopper. The rule identifies this malware by searching for a specific string pattern, "@eval($_POST[strtoupper(md5(gmdate(", within files smaller than 150 bytes.
  Updated-Date: '2024_08_07'
ChinaChopper_temp_3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9187f7197badc068d65288cf17f743e0
  Ruleset: securityonion-yara
  Summary: This rule detects a file named "temp.aspx" associated with the Chinese hack tool "China Chopper." It identifies specific script patterns within the file, including the presence of a Jscript declaration and an evaluation of a request item marked as "unsafe." The rule triggers if the file begins with a specific byte sequence, is smaller than 150 bytes, and contains all the defined strings.
  Updated-Date: '2024_08_07'
Chinese_Hacktool_1014:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 071bdfb6cf6aa1801f25ad0caef0a309
  Ruleset: securityonion-yara
  Summary: 'This rule detects a Chinese hacktool of unknown use. The rule identifies specific wide and ASCII string patterns within files, including "IEXT2_IDC_HORZLINEMOVECURSOR," "msctls_progress32," "Reply-To: %s," "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0)," and "html htm htx asp." All these string conditions must be met for the detection to be triggered.'
  Updated-Date: '2024_08_07'
ChromePass:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d994fe113012465deb07c4700ef12054
  Ruleset: securityonion-yara
  Summary: This rule detects the tool ChromePass.exe, which is used by APT groups to retrieve saved passwords from various web browsers. It identifies the presence of certain strings and patterns within the file, such as references to Chrome, Opera, and Yandex browsers' password storage directories and elements used in password recovery processes. The rule also looks for specific phrases related to encryption key retrieval and loading passwords from various sources, including different user profiles and external drives.
  Updated-Date: '2024_08_07'
CleanIISLog:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: fa080f0d46103b61aafa08358d3d408c
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a hacktool named CleanIISLog.exe, which is identified by specific string patterns related to its functionality. The tool appears to clear specified IP addresses from log files, process log files, and has identifiable messages indicating its version and errors. Key strings include prompts to specify IP addresses and log files, messages about service stoppages, log processing, and fatal errors, as well as version information and service names.
  Updated-Date: '2024_08_07'
CloudDuke_Malware:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ccecf0a02356b9531afaa1999e093d48
  Ruleset: securityonion-yara
  Summary: This rule detects the CloudDuke malware by identifying specific characteristics within a file. It searches for several unique strings, such as "ProcDataWrap", "imagehlp.dll", "dnlibsh", "%ws_out%ws", and "Akernel32.dll". Additionally, it looks for specific byte sequences (opcodes) that are indicative of this malware. The rule applies these checks to files with a Windows executable header and a size smaller than 720KB. Detecting four out of the five defined strings and one of the three specified opcode patterns are necessary criteria for identifying a potential CloudDuke malware file.
  Updated-Date: '2024_08_07'
CmdAsp_asp:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6563fe16367ae529ba1aacc6d81eae59
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific ASP file named "CmdAsp.asp" by searching for indicative strings. It identifies the creation of a "Scripting.FileSystemObject" using the `Server.CreateObject` method and checks for comments referencing temporary file usage as a makeshift pipeline. Additionally, it looks for a particular email address, "maceo @ dogmile.com", within the file. The detection is triggered when at least two of these strings are found together.
  Updated-Date: '2024_08_07'
CmdShell64:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c10de3fd8fe0da816fb3c5cc9ddc291f
  Ruleset: securityonion-yara
  Summary: This rule detects a malicious executable file named CmdShell64.exe, associated with a Chinese hacktool set. This tool likely operates within the Windows operating system environment. Key indicators include references to system paths such as "C:\Windows\System32\JAVASYS.EXE," specific service names like "ServiceCmdShell" and "ServiceSystemShell," and various unique strings like "[Root@CmdShell ~]#," "Hello Man 2015 !," and "CmdShell." The detection is further refined by checking the file size to be less than 30KB and ensuring that the file header matches specific criteria.
  Updated-Date: '2024_08_07'
Cmdshell32:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 88ed2536fb8e44e23ad214f890e23679
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of "Cmdshell32.exe," a tool associated with a Chinese hacktool set. It identifies the specific file by checking for the strings "cmdshell.exe," "cmdshell," and "[Root@CmdShell ~]#" within the file. Additionally, it ensures the file has the correct header signature and is smaller than 62KB in size.
  Updated-Date: '2024_08_07'
CobaltGang_Malware_Aug17_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f3ea1867350d995208c2b643df79f8b1
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific malware associated with the Cobalt Gang, characterized by several distinct strings within its code. These strings include references to "ServerSocket.EXE," error messages pertaining to WS2_32.dll, and instructions for connecting to and operating a server. The rule specifically identifies executable files smaller than 400KB that contain at least three of these distinctive strings.
  Updated-Date: '2024_08_07'
CobaltGang_Malware_Aug17_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0b57263d150c0910310d6249a2fa1e03
  Ruleset: securityonion-yara
  Summary: This rule detects a specific malware associated with the Cobalt Gang by identifying a particular user-agent string indicative of Internet Explorer 9 on Windows NT 6.1 within a file. The rule applies when the file starts with the header "0x5a4d" and is less than 80KB in size.
  Updated-Date: '2024_08_07'
CobaltStrike_C2_Encoded_XOR_Config_Indicator:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b620f0a15e2eaa0ee0395e796d5aa5d0
  Ruleset: securityonion-yara
  Summary: This rule detects configurations for CobaltStrike C2 servers that are encoded using XOR encryption. It identifies various XOR-encrypted byte patterns that are indicative of CobaltStrike's encoded configuration profiles, scanning for these specific patterns across data. The rule specifies multiple unique byte sequences and ensures that the deobfuscation process identifies these sequences by flagging them against the presence of decompiler-related signatures, which must not be present in valid matches.
  Updated-Date: '2024_08_07'
CobaltStrike_C2_Host_Indicator:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0f74c6dfa4c5ed7cd041b24339001cee
  Ruleset: securityonion-yara
  Summary: This rule detects artifacts associated with CobaltStrike Command and Control (C2) hosts. It searches for specific patterns in the host data while excluding false positives and certain false indicators based on specific hexadecimal values.
  Updated-Date: '2024_08_07'
CobaltStrike_CN_Group_BeaconDropper_Aug17:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 574393a90fbf274ea39b9b17ad5a895d
  Ruleset: securityonion-yara
  Summary: This rule detects a script dropper associated with the Cobalt Gang, which was utilized in August 2017. It identifies specific strings within the script that indicate actions such as creating a command to execute via "cmd /c" or "regsvr32," running environment commands, and manipulating Windows Scheduled Jobs. The presence of certain indicators, like "www.thyssenkrupp-marinesystems.org," paths indicating temporary file creation, or specific Office 365 references, are used as markers for this malicious activity. The rule operates on files smaller than 200KB and focuses on identifying at least one of these malicious strings to signal the presence of the dropper.
  Updated-Date: '2024_08_07'
CobaltStrike_MZ_Launcher:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f392e9f54bbaef0eb08a92bba7924b69
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the CobaltStrike ReflectiveLoader launcher by identifying a specific hexadecimal pattern associated with its MZ header.
  Updated-Date: '2024_08_07'
CobaltStrike_Resources_Artifact32_and_Resources_Dropper_v1_49_to_v3_14:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b02e79a61e409321ad4e9201c65b393a
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of Cobalt Strike payloads, specifically targeting the resources and artifacts such as `artifact32.exe`, `artifact32.dll`, `big.exe`, `big.dll`, and `dropper.exe` in versions 1.49 to 3.14. It identifies these payloads by recognizing a particular decoder function used to unpack the embedded data, which enables the detection of the associated malware.
  Updated-Date: '2024_08_07'
CobaltStrike_Resources_Artifact32_v3_14_to_v4_x:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9ebd2e3978ff5089421bfad46c9b1cd6
  Ruleset: securityonion-yara
  Summary: This rule detects specific versions of Cobalt Strike's resource artifacts, including DLL and executable files such as artifact32.dll, artifact32.exe, big.exe, big.dll, bigsvc.exe, artifact32svc.exe, and artifact32uac.dll. These artifacts are associated with versions 3.14 to 4.x of Cobalt Strike, a well-known penetration testing tool that is often misused by malicious actors for command and control purposes. The detection is based on the presence of certain hexadecimal patterns and a specific formatted string, indicating the characteristic signatures of these files.
  Updated-Date: '2024_08_07'
CobaltStrike_Resources_Artifact32_v3_1_and_v3_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 514a7e6a01823cfbbb44a0fdfbeaa18a
  Ruleset: securityonion-yara
  Summary: This rule detects specific signatures associated with Cobalt Strike's resource files, including various DLL and executable files, for versions 3.1 and 3.2. It identifies a particular function pattern used, involving operations such as moving values between registers, performing integer division, and manipulating memory, which are characteristic of the malware's implementation.
  Updated-Date: '2024_08_07'
CobaltStrike_Resources_Artifact32svc_Exe_v3_1_v3_2_v3_14_and_v4_x:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e6310f52785dffede82e586454771371
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific executable resource associated with Cobalt Strike's artifact32svc.exe in versions 3.1, 3.2, and some overlap with versions 3.14 through 4.x. It identifies a unique sequence of bytes linked to a decoding function within the executable, which includes a series of machine instructions used by the software.
  Updated-Date: '2024_08_07'
CobaltStrike_Resources_Artifact64_v1_49_v2_x_v3_0_v3_3_thru_v3_14:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8af86fadb458962a37cdf1634c5fc1a7
  Ruleset: securityonion-yara
  Summary: This rule detects specific Cobalt Strike artifacts by identifying unique code sequence patterns and resource file signatures used in various versions of the software, including v1.49, v2.x, v3.0, and v3.3 through v3.14. The rule uses a combination of hexadecimal byte patterns to match the structure and behavior of executable files such as .dll, .exe, big.exe, big.dll, bigsvc.exe, and big.x64.dll associated with Cobalt Strike.
  Updated-Date: '2024_08_07'
CobaltStrike_Resources_Artifact64_v3_14_to_v4_x:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6eaf2ac2435f930bf8c140fb62b2c5f4
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of specific artifacts related to Cobalt Strike, a commercially available software often used for post-exploitation activities during penetration testing but frequently abused by threat actors. The detection focuses on various binary formats (.exe, .dll, .x64.dll, etc.) corresponding to versions 3.14 through 4.x of Cobalt Strike. It looks for characteristic sequences of bytes, including a specific pattern in string formatting operations that are indicative of these Cobalt Strike artifacts.
  Updated-Date: '2024_08_07'
CobaltStrike_Resources_Artifact64_v3_1_v3_2_v3_14_and_v4_0:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c4559d177cfaf32ad0589d22b68ba6f4
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of specific resources and artifacts associated with Cobalt Strike versions 3.1 to 4.0, including various executable and DLL files. It recognizes these files by identifying a specific sequence of bytes that indicate the decoder function used within these artifacts. Cobalt Strike is a software tool used frequently for penetration testing and by threat actors, making this detection crucial for identifying potential misuse.
  Updated-Date: '2024_08_07'
CobaltStrike_Resources_Beacon_Dll_v1_44:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 73d87d5bd2e60b2d09eae0400e4c9805
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of Cobalt Strike's `resources/beacon.dll` Version 1.44 by matching specific hexadecimal patterns within the code, such as the switch-case sequence and decoding logic used in the DLL. These patterns are indicative of the behavior and structure of Cobalt Strike, a commercial penetration testing tool often repurposed by threat actors for command-and-control operations. The rule identifies the unique signatures in the assembly code to flag the presence of this specific version of the Cobalt Strike beacon DLL.
  Updated-Date: '2024_08_07'
CobaltStrike_Resources_Beacon_Dll_v1_45:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 58a291cb64ac1dab34699e7689100bd6
  Ruleset: securityonion-yara
  Summary: This rule detects a specific version (1.45) of Cobalt Strike's `resources/beacon.dll` file. Cobalt Strike is a widely used penetration testing tool that adversaries often exploit for command and control operations. The rule identifies unique byte patterns within the DLL file, including signature sequences related to certain assembly instructions that are characteristic of this specific version of Cobalt Strike's beacon.
  Updated-Date: '2024_08_07'
CobaltStrike_Resources_Beacon_Dll_v1_46:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8d19ffee73b030b64c0f20d8714c0c83
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of Cobalt Strike's `beacon.dll` Version 1.46 by identifying specific sequences of machine code instructions indicative of this particular version. The first sequence checks for an assembly code pattern that performs a comparison and a conditional jump, which is used in Cobalt Strike's internal logic. The second sequence decodes bytes using an XOR instruction, incrementing and comparing values, which is part of a known decryption routine within the `beacon.dll`. Both patterns together are used to reliably identify the presence of the `beacon.dll` file associated with Cobalt Strike, a penetration testing tool often repurposed by malicious actors for command-and-control operations.
  Updated-Date: '2024_08_07'
CobaltStrike_Resources_Beacon_Dll_v1_47:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c69976e0b86d3103c3bbd5875db99932
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of Cobalt Strike's resources/beacon.dll Version 1.47, a component used in cybersecurity threat simulations and often appropriated by malicious actors for command and control operations. The rule specifically identifies unique byte sequences associated with this version of the beacon DLL, including a distinctive pattern utilized in its switching logic and a characteristic decoding sequence.
  Updated-Date: '2024_08_07'
CobaltStrike_Resources_Beacon_Dll_v1_48:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: fe0cae5a1981bb904085c15cb01edbbb
  Ruleset: securityonion-yara
  Summary: This rule detects a specific version (1.48) of the Cobalt Strike beacon DLL, which is identified by unique patterns found in its executable code. Cobalt Strike is commonly used for post-exploitation activities by both security professionals and malicious actors. The rule aims to identify this particular version by searching for certain hexadecimal sequences that correspond to the operations and instructions specific to the beacon DLL, including a distinct version signature and decode sequence.
  Updated-Date: '2024_08_07'
CobaltStrike_Resources_Beacon_Dll_v1_49:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8083dbf6ae82e9b8696ff3abcecaa961
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of Cobalt Strike's resources/beacon.dll Version 1.49 by identifying unique code patterns within the file. These patterns include specific machine instructions that suggest the version signature and a decoder used in the software. The rule aims to identify this particular DLL by matching these code sequences, thus helping to flag the presence of Cobalt Strike, a tool commonly used for post-exploitation by threat actors.
  Updated-Date: '2024_08_07'
CobaltStrike_Resources_Beacon_Dll_v2_0_49:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a4bdaa2c574c6092b5b687cb5a567a4e
  Ruleset: securityonion-yara
  Summary: This rule detects a specific version of the Cobalt Strike Beacon DLL, specifically version 2.0.49. Cobalt Strike is a well-known penetration testing tool often repurposed by threat actors for malicious activities. The detection relies on identifying unique byte patterns within the Beacon DLL, including a specific comparison instruction sequence and a decoding routine characterized by several operations with exact byte values. These patterns are indicative of the presence of this particular version of Cobalt Strike's Beacon component.
  Updated-Date: '2024_08_07'
CobaltStrike_Resources_Beacon_Dll_v2_1_and_v2_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: cdd7b6b2e2529528db26166f4f0db0eb
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the beacon.dll component utilized in versions 2.1 and 2.2 of Cobalt Strike, which is penetration testing software that can be abused by threat actors for malicious activities. It checks for specific binary patterns within the file to identify the exact versions mentioned.
  Updated-Date: '2024_08_07'
CobaltStrike_Resources_Beacon_Dll_v2_3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3ddf9896946ae146746b17dc7f8bcee6
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of Cobalt Strike's beacon DLL version 2.3 by identifying specific code patterns associated with its operation. It checks for a unique sequence of instructions related to a switch jump mechanism and a decoder loop. These patterns include an `ECX` decrement operation followed by pushing register values and a jump based on a comparison, as well as a XOR encoding loop incrementing `EAX`. This detection is based on a known hash value and specifically targets the version mentioned to identify malicious activity leveraging this version of Cobalt Strike.
  Updated-Date: '2024_08_07'
CobaltStrike_Resources_Beacon_Dll_v2_4:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1d633379e2a9e3bb53fa9d81dc34241d
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of specific versions of Cobalt Strike's resource beacon.dll file, particularly version 2.4. It identifies this malware by matching two distinct byte patterns found in its code. One pattern involves a sequence related to a switch-case structure used in execution flow, while the other pertains to an XOR operation followed by a loop, indicative of malware payload decoding routines.
  Updated-Date: '2024_08_07'
CobaltStrike_Resources_Beacon_Dll_v2_5:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c73be8223a8b8b047be32379b6acb647
  Ruleset: securityonion-yara
  Summary: This rule detects a specific version (2.5) of the beacon.dll file used by Cobalt Strike, a legitimate penetration testing tool that is frequently misused by threat actors for malicious activities. It matches known bytes sequences in the executable code, including patterns related to function calls and conditional jumps that are characteristic of this particular version of the DLL file.
  Updated-Date: '2024_08_07'
CobaltStrike_Resources_Beacon_Dll_v3_0:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 604b37a9d885472529167dd2653d4001
  Ruleset: securityonion-yara
  Summary: This rule detects specific versions of the beacon.dll component used by Cobalt Strike, a penetration testing tool often abused by threat actors. The detection is based on unique sequences of bytes in the file, including patterns related to the decoding routine and characteristic instruction sequences that facilitate case switches within the code.
  Updated-Date: '2024_08_07'
CobaltStrike_Resources_Beacon_Dll_v3_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 516a29d1463a772eb1be527e0f7f4de0
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the beacon.dll from Cobalt Strike version 3.1 by identifying specific patterns in the assembly code. Cobalt Strike is a legitimate penetration testing tool that is often misused by threat actors for malicious purposes. The rule matches certain sequences within the codebase, including specific push, move, and call instructions that interact with functions like `gethostname` and `inet_ntoa`, and a unique decoder sequence involving a XOR operation followed by a comparison. This helps in differentiating version 3.1 from other versions by focusing on unique assembly instructions and function calls associated with this version.
  Updated-Date: '2024_08_07'
CobaltStrike_Resources_Beacon_Dll_v3_11:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 43360f9f09b9b701c0c54b82a8bac1c9
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific version (3.11) of Cobalt Strike's `beacon.dll` file by identifying unique code patterns within the file. Cobalt Strike is a well-known post-exploitation toolkit used by both security professionals and threat actors for command and control operations. The rule looks for specific sequences of bytecode in the file, including a signature sequence for version identification and a bytecode pattern used for decoding operations. These patterns help distinguish this particular version of the `beacon.dll` from other files and versions.
  Updated-Date: '2024_08_07'
CobaltStrike_Resources_Beacon_Dll_v3_11_bugfix_and_v3_12:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 19b0bcad2bc448466a0f3e674086a8d3
  Ruleset: securityonion-yara
  Summary: This rule detects specific versions of the Cobalt Strike software, particularly beacon.dll versions 3.11 (including its bugfix) and 3.12. The detection mechanism involves identifying specific byte sequences in the code that are indicative of these particular versions. This could include a signature associated with version control or a recognizable pattern used in the software's decoder functionality.
  Updated-Date: '2024_08_07'
CobaltStrike_Resources_Beacon_Dll_v3_13:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7e0553b6a93f46d8824b3a38f0ed2c14
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the "beacon.dll" file from Version 3.13 of Cobalt Strike by identifying specific code signatures. Cobalt Strike is a commercial penetration testing tool often misused by threat actors for command and control operations. The rule identifies the variant by matching unique patterns within the beacon.dll file, including a particular sequence of assembly instructions used in the decoder and version signatures.
  Updated-Date: '2024_08_07'
CobaltStrike_Resources_Beacon_Dll_v3_14:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8a994f64a238f6c98d3afb35a6c9d447
  Ruleset: securityonion-yara
  Summary: 'This rule detects Cobalt Strike''s beacon.dll version 3.14 by identifying specific signatures within the binary. Cobalt Strike is a penetration testing tool used for post-exploitation in network environments, commonly leveraged by threat actors for malicious activities. The detection hinges on two primary byte patterns: one associated with version signature and the other with the beacon''s decoder routine. These unique sequences within the code serve as identifiers for the specific version of the Cobalt Strike beacon being used.'
  Updated-Date: '2024_08_07'
CobaltStrike_Resources_Beacon_Dll_v3_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a235385fcbe8f450568f3b943c320431
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of Cobalt Strike's `beacon.dll` version 3.2, a post-exploitation toolkit common in offensive security testing and cyberattacks. It identifies specific byte sequences within the code that signify the particular version of the `dll` and differentiates it from version 3.1 using distinct signature patterns. The rule ensures accurate version detection by checking for unique opcodes and structure layouts within the binary, disregarding version 3.1 through a negating condition.
  Updated-Date: '2024_08_07'
CobaltStrike_Resources_Beacon_Dll_v3_3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3bf4c41fa82bccdf34dbb2c302d93413
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of Cobalt Strike's `resources/beacon.dll` version 3.3 by scanning for specific byte patterns within the file. It identifies the version signature through a series of hexadecimal values representing assembly instructions and conditional jumps, which are characteristic of this particular version of the beacon library. Additionally, it recognizes a sequence of bytes indicating the presence of a XOR-based decoding routine. The rule triggers if both patterns are found, indicating the file is likely associated with Cobalt Strike, a popular penetration testing software often misused by threat actors for malicious purposes.
  Updated-Date: '2024_08_07'
CobaltStrike_Resources_Beacon_Dll_v3_4:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 68542479ea025d6cdff585bf0f766741
  Ruleset: securityonion-yara
  Summary: This rule detects Cobalt Strike's `beacon.dll` file, specifically targeting version 3.4. Cobalt Strike is a penetration testing tool that is often used maliciously by threat actors to simulate network breaches and deploy payloads. The detection is based on specific sequences of bytes found in the file, which match known behaviors and structures within the DLL, such as switching cases and byte decoding logic.
  Updated-Date: '2024_08_07'
CobaltStrike_Resources_Beacon_Dll_v3_5_hf1_and_3_5_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7f9cb18839973894e39baa1cba427d80
  Ruleset: securityonion-yara
  Summary: This rule detects specific versions of the Cobalt Strike beacon DLL, specifically versions 3.5-hf1 and 3.5.1. The detection relies on unique byte sequences found within the binary, including patterns associated with certain instructions and operations. A specific signature based on the hash of the beacon DLL is also utilized to identify these versions. Cobalt Strike is a widely used penetration testing tool, which can be abused by threat actors for malicious purposes.
  Updated-Date: '2024_08_07'
CobaltStrike_Resources_Beacon_Dll_v3_6:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 63113c017b01164128b9619ea0d58147
  Ruleset: securityonion-yara
  Summary: This rule detects the Cobalt Strike beacon DLL version 3.6 by identifying specific byte sequences and patterns within the executable code. It recognizes a combination of instructions and operations, such as decrementing the eax register, manipulating the edi and ecx registers, handling switch cases, and performing certain conditional jumps. Additionally, the rule identifies code that performs XOR operations on memory locations and increments the eax register, ensuring all specified patterns are present to confirm the detection.
  Updated-Date: '2024_08_07'
CobaltStrike_Resources_Beacon_Dll_v3_7:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d6e47962abb5f68eb08f10b97fc664d8
  Ruleset: securityonion-yara
  Summary: 'This rule detects a specific version (3.7) of Cobalt Strike''s "beacon.dll" file based on unique signatures present in its bytecode. Cobalt Strike is a widely-used penetration testing tool that has also been leveraged by threat actors for malicious purposes. The rule identifies the DLL using two distinct bytecode patterns: a sequence involved in a switch-case structure and a decoder loop that includes an XOR operation.'
  Updated-Date: '2024_08_07'
CobaltStrike_Resources_Beacon_Dll_v3_8:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a9f5677e6eb0475496f4ddaf5c5a8f9e
  Ruleset: securityonion-yara
  Summary: This rule detects Cobalt Strike's beacon.dll version 3.8 by identifying a specific sequence of assembly instructions and patterns associated with its payload. It also seeks to minimize false positives by filtering out samples that include references to certain paths, such as a known source path for XMRig loaders, or specific command-and-control domains linked to XMRig. Assembly code signatures and XOR-encoded domain names are used to accurately identify and differentiate this particular version of the malware.
  Updated-Date: '2024_08_07'
CobaltStrike_Resources_Beacon_x64_v3_11:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c4618770c87e48f10fd1046ee2d8722c
  Ruleset: securityonion-yara
  Summary: This rule detects specific versions of Cobalt Strike's "beacon.x64.dll" file, particularly versions 3.11 and its subversions. Cobalt Strike is a popular penetration testing tool often leveraged for malicious purposes. The rule identifies the targeted file by matching unique byte sequences within the DLL. One pattern indicates the version-specific code signature, while the other pattern represents a known decoder routine. These signatures together ensure precise detection of the malicious beacon component used in Cobalt Strike.
  Updated-Date: '2024_08_07'
CobaltStrike_Resources_Beacon_x64_v3_12:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b1d401d5c8908565535f01df554ef889
  Ruleset: securityonion-yara
  Summary: This rule detects specific versions of Cobalt Strike's beacon, particularly the x64 DLL version 3.12. Cobalt Strike is a popular penetration testing tool often misused by threat actors for post-exploitation tasks. The rule identifies unique assembly code patterns and signatures within the beacon file to determine the presence of this specific version. The targeted code sequences involve common operations like moving and calling subroutines, followed by conditional jumps and data manipulation instructions.
  Updated-Date: '2024_08_07'
CobaltStrike_Resources_Beacon_x64_v3_13:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c2ce72c4578259b3abf8e18e19ac144f
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of Cobalt Strike's `sleeve/beacon.x64.dll` versions 3.13. It identifies specific byte patterns associated with the software's functions for data exfiltration and command execution, specifically referencing certain assembly instructions and sequences. The rule is designed to match against unique signature and decoder patterns that are characteristic of this version of Cobalt Strike's Beacon module.
  Updated-Date: '2024_08_07'
CobaltStrike_Resources_Beacon_x64_v3_14:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d2dd94a0ac22617dcd8ee3347f584dd3
  Ruleset: securityonion-yara
  Summary: This rule detects a specific version (3.14) of Cobalt Strike's beacon.x64.dll. Cobalt Strike is a legitimate penetration testing tool often misused by threat actors for malicious purposes, such as deploying beacons for command and control operations. The rule identifies the beacon.x64.dll by matching known code patterns, including a version signature and a decoder function. The patterns recognized by this rule help distinguish this specific version of Cobalt Strike's dynamic link library used in malicious activities.
  Updated-Date: '2024_08_07'
CobaltStrike_Resources_Beacon_x64_v3_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b00e651c0ae6d81808cd18ab8ce08d19
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of Cobalt Strike's beacon.x64.dll, specifically version 3.2, by looking for unique byte patterns. The beacon component is part of Cobalt Strike's toolkit used for post-exploitation activities, allowing threat actors to conduct command-and-control operations within compromised networks. The rule identifies specific sequences of assembly instructions that are characteristic of the beacon.x64.dll, including a distinct sequence for function calls and a bytecode decoder routine used by the malware.
  Updated-Date: '2024_08_07'
CobaltStrike_Resources_Beacon_x64_v3_3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c00a8ba68a26cbc4548e4dd688c9d42d
  Ruleset: securityonion-yara
  Summary: 'This rule detects the presence of the Cobalt Strike Beacon version 3.3, specifically targeting the beacon.x64.dll. Cobalt Strike is known for its usage in cyber-attacks, acting as a post-exploitation toolkit. The rule identifies this version of the Beacon through two specific code patterns: a sequence of instructions related to moving data and calling subroutines, and a decoding routine involving XOR operations and pointer arithmetic. These patterns help in flagging the malicious library in forensic or monitoring contexts.'
  Updated-Date: '2024_08_07'
CobaltStrike_Resources_Beacon_x64_v3_4:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c3d7db6e60549136469eda428ca05c02
  Ruleset: securityonion-yara
  Summary: This rule detects the Cobalt Strike beacon, specifically targeting the x64-based dynamic-link library (DLL) used in version 3.4. Cobalt Strike is a commercial penetration testing tool often misused by threat actors for Command and Control (C2) operations. The rule identifies patterns in machine code that are characteristic of the beacon's functionality, including specific sequences of move, call, and jump instructions, as well as a distinctive byte manipulation technique used in its decoder.
  Updated-Date: '2024_08_07'
CobaltStrike_Resources_Beacon_x64_v3_5_hf1_and_v3_5_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 37c75f60df13e7823063288a32428499
  Ruleset: securityonion-yara
  Summary: This rule detects specific versions (3.5-hf1 and 3.5.1) of the Cobalt Strike software, known for its use in post-exploitation activities by threat actors. It identifies characteristics of the associated DLL file, beacon.x64.dll, by recognizing unique sequences of operation codes and patterns, including instructions for data movement, function calls, and conditional jumps. The rule also detects a decoder pattern used by the software, involving XOR operations, incrementation, and comparison operations.
  Updated-Date: '2024_08_07'
CobaltStrike_Resources_Beacon_x64_v3_6:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0e02cbcc5898f7c3d66e36b96a98a1be
  Ruleset: securityonion-yara
  Summary: This rule detects the Cobalt Strike suite's Beacon, specifically the 64-bit DLL (beacon.x64.dll) version 3.6. This detection is based on unique binary sequences within the file, such as specific register manipulations, conditional jumps, and byte value manipulations. The rule identifies sequences that perform particular operations like moving values between registers, conditionally jumping to different locations based on comparisons, and executing XOR and increment operations. These sequences are characteristic of the specified version of Cobalt Strike Beacon, enabling accurate identification of this malicious software.
  Updated-Date: '2024_08_07'
CobaltStrike_Resources_Beacon_x64_v3_7:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e753395f55fd8091f5fbdf7e9b962d94
  Ruleset: securityonion-yara
  Summary: This rule detects the x64 version of Cobalt Strike's sleeve/beacon DLL version 3.7 by identifying unique code signatures. It looks for specific sequences of assembly instructions that match known patterns used in this version of Cobalt Strike's beacon component, including byte sequences for decoding routines and signature constants.
  Updated-Date: '2024_08_07'
CobaltStrike_Resources_Beacon_x64_v3_8:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 347fc4515de372def9b32f5a786faab6
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of Cobalt Strike's sleeve/beacon.x64.dll versions 3.8 by identifying specific code patterns associated with the software. It looks for a sequence of assembly instructions characteristic of this version, including a sequence of `mov`, `call`, `jmp`, and `xor` instructions, followed by a signature for a decoder function involving `xor`, `inc`, `cmp`, and `jl` instructions.
  Updated-Date: '2024_08_07'
CobaltStrike_Resources_Bind64_Bin_v2_5_through_v4_x:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 025b3f1e5bc51ce9496067de22397c9a
  Ruleset: securityonion-yara
  Summary: "This rule detects the presence of Cobalt Strike\u2019s `bind64.bin` component, used in versions 2.5 through 4.x, by identifying specific byte patterns in the binary code. It looks for an API locator pattern related to function calls like `xor`, `lodsb`, `ror`, `add`, `cmp`, `jnz`, `pop`, and `mov`, which are used for locating and executing API functions. Additionally, the rule detects signature patterns that distinguish the `bind64` behavior from other similar components, using specific `mov` and `call` instructions with constants indicative of Cobalt Strike\u2019s bind operations."
  Updated-Date: '2024_08_07'
CobaltStrike_Resources_Bind_Bin_v2_5_through_v4_x:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 31237451af6bb3bb7c6c5a92562dd753
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the Cobalt Strike payload `resources/bind.bin` from versions 2.5 to 4.x by identifying specific byte patterns and instruction sequences unique to this DLL. It looks for the distinct `apiLocator` sequence, which contains a series of low-level operations like `xor`, `lodsb`, `ror`, `add`, and various comparisons and memory moves. Additionally, the rule checks for specific bytes associated with the Windows socket library (`ws2_32`), indicating the use of network functionalities. Furthermore, the rule identifies instructions for `listen` and `accept` API calls, which are indicative of `bind.bin` listening for incoming connections, differentiating it from `reverse.bin`. The detection combines these patterns to accurately identify the `bind.bin` component of Cobalt Strike used for establishing remote control connections.
  Updated-Date: '2024_08_07'
CobaltStrike_Resources_Browserpivot_x64_Bin_v1_48_to_v3_14_and_Sleeve_Browserpivot_x64_Dll_v4_0_to_v4_x:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9b54f12506b240cce23d97070505e8fc
  Ruleset: securityonion-yara
  Summary: This rule detects specific versions of Cobalt Strike's executable and dynamic link library patterns. It identifies resources related to the "browserpivot.x64.bin" used in versions from 1.48 to 3.14 and "sleeve/browserpivot.x64.dll" ranging from version 4.0 up to at least version 4.4. The detection is achieved through a combination of unique byte sequences and an identifiable format string linked to the sscanf function. These patterns are representative of operations such as socket communication within the specified versions of the Cobalt Strike toolset, a penetration testing software often misused by threat actors for malicious activities.
  Updated-Date: '2024_08_07'
CobaltStrike_Resources_Bypassuac_Dll_v1_49_to_v3_14_and_Sleeve_Bypassuac_Dll_v4_0_to_v4_x:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a7d2de1dacea3b5aeede6790c6eb31b7
  Ruleset: securityonion-yara
  Summary: This rule detects specific versions of the DLL files associated with Cobalt Strike's UAC bypass methods, specifically the "resources/bypassuac(-x86).dll" from versions 1.49 to 3.14 (32-bit version) and "sleeve/bypassuac.dll" from version 4.0 to at least version 4.4. It identifies the presence of these files based on unique sequences of assembly instructions related to file operations such as file deletion and file copying, which are typical behaviors of these DLLs. The detection is based on matching these sequences against the known byte patterns in the Cobalt Strike bypass DLL files.
  Updated-Date: '2024_08_07'
CobaltStrike_Resources_Bypassuac_x64_Dll_v3_3_to_v3_14_and_Sleeve_Bypassuac_x64_Dll_v4_0_and_v4_x:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a6fbc20582deeb135168927fb7d25814
  Ruleset: securityonion-yara
  Summary: "This rule detects the presence of specific versions of Cobalt Strike\u2019s \"bypassuac-x64.dll\" from versions 3.3 to 3.14, as well as the \"sleeve/bypassuac.x64.dll\" from version 4.0 to at least version 4.4. These DLL files are associated with Cobalt Strike, a widely-used penetration testing tool that can be exploited by threat actors for malicious purposes. Specifically, the rule looks for patterns of the DeleteFile COM method and the CopyFile COM method within the DLL, which are indicative of the files' attempt to bypass User Account Control (UAC) on 64-bit systems. These string patterns help in identifying the suspicious activities performed by these DLLs."
  Updated-Date: '2024_08_07'
CobaltStrike_Resources_Bypassuactoken_Dll_v3_11_to_v3_14:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b8605589c52a32d067be148e43ac1dd8
  Ruleset: securityonion-yara
  Summary: This rule detects Cobalt Strike's resources bypassuactoken.dll from versions 3.11 to 3.14, specifically targeting the 32-bit version of the software. Cobalt Strike is a notorious post-exploitation toolkit used by threat actors for conducting advanced persistent threat (APT) activities and red team operations. The rule identifies specific API calls and string patterns associated with UAC (User Account Control) token manipulation and the execution of the task manager in an elevated context. By matching these particular sequences of instructions and hexadecimal values, it helps to identify the presence and use of this malicious DLL, which is commonly deployed to escalate privileges and execute tasks with elevated permissions within a compromised system.
  Updated-Date: '2024_08_07'
CobaltStrike_Resources_Bypassuactoken_x64_Dll_v3_11_to_v3_14:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a2051778fb9a92cd078f9d179bcb243d
  Ruleset: securityonion-yara
  Summary: 'This rule detects a specific 64-bit DLL used by Cobalt Strike, identified as `bypassuactoken.x64.dll` from versions 3.11 to 3.14. Cobalt Strike is a well-known post-exploitation toolkit often used by threat actors for executing various malicious activities. The rule utilizes pattern-matching techniques to identify two key sequences: one indicative of a high-integrity process and another related to the execution of `taskmgr.exe` through `ShellExecuteExW`. The high-integrity process sequence involves comparisons, memory allocations, and system calls that are characteristic of privilege escalation attempts. The execution sequence includes instructions for setting up and running `taskmgr.exe` with elevated privileges, suggesting the deployment of an elevated process to perform further malicious activities.'
  Updated-Date: '2024_08_07'
CobaltStrike_Resources_Command_Ps1_v2_5_to_v3_7_and_Resources_Compress_Ps1_v3_8_to_v4_x:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7f20c37d5c4b0ee7647dbd8246254528
  Ruleset: securityonion-yara
  Summary: This rule detects specific PowerShell scripts used by Cobalt Strike, a popular penetration testing tool often repurposed by threat actors. It targets the "command.ps1" script from versions 2.5 to 3.7 and the "compress.ps1" script from versions 3.8 to 4.x, which are functionally identical but were renamed in later versions. The rule looks for code that creates a new memory stream from a Base64 string and decompresses it using Gzip, then executes the decompressed code.
  Updated-Date: '2024_08_07'
CobaltStrike_Resources_Covertvpn_Dll_v2_1_to_v4_x:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3886c3f77c26218c88df0db882325162
  Ruleset: securityonion-yara
  Summary: This rule detects specific patterns indicative of Cobalt Strike, particularly focusing on the `covertvpn.dll` component across versions 2.2 to 4.4. Cobalt Strike is a known penetration testing tool frequently repurposed by threat actors for malicious intent. The rule identifies characteristic sequences in the code related to function calls and operations tied to process and module handling, file operations, and dropping components or activating drivers. Additionally, it monitors for particular filenames such as `npf.sys` and `wpcap.dll`.
  Updated-Date: '2024_08_07'
CobaltStrike_Resources_Covertvpn_injector_Exe_v1_44_to_v2_0_49:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b6dc9dc65647c4c5ee48a3369a6c7788
  Ruleset: securityonion-yara
  Summary: This rule detects the specific versions of Cobalt Strike's file `covertvpn-injector.exe` ranging from v1.44 to v2.0.49 based on predefined byte patterns and the presence of particular strings in the code. Cobalt Strike is a commercial penetration testing tool often misused by threat actors for Command and Control (C2) operations. The detection focuses on byte sequences indicative of dropping components, activating drivers, and creating or accessing files with specific attributes. Moreover, it identifies related files by searching for "npf.sys" and "wpcap.dll" within the executable.
  Updated-Date: '2024_08_07'
CobaltStrike_Resources_Dnsstager_Bin_v1_47_through_v4_x:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 53b0e721d82819232bb9f04b73ff5e31
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of Cobalt Strike's `dnsstager.bin` file, specifically from versions 1.47 to 4.x. Cobalt Strike is a penetration testing tool often misused by threat actors for command-and-control (C2) functions. The rule identifies specific byte patterns associated with the API locator and DNS stager components found within the `dnsstager.bin` file, thus helping in distinguishing these samples from other potential stagers.
  Updated-Date: '2024_08_07'
CobaltStrike_Resources_Elevate_Dll_v3_0_to_v3_14_and_Sleeve_Elevate_Dll_v4_x:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 37b48b91413920c6e2201da29667549e
  Ruleset: securityonion-yara
  Summary: This rule detects specific versions of Cobalt Strike's `resources/elevate.dll` ranging from v3.0 to v3.14, as well as the `sleeve/elevate.dll` in v4.x. Cobalt Strike is a widely used penetration testing tool that can be abused by threat actors for command and control operations. The rule identifies a unique sequence of instructions within these DLL files, which involve operations such as pushing specific values onto the stack, moving data into memory, and calling the `PostMessageA` function.
  Updated-Date: '2024_08_07'
CobaltStrike_Resources_Elevate_X64_Dll_v3_0_to_v3_14_and_Sleeve_Elevate_X64_Dll_v4_x:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f6a042ce7df04ba0272edef8aebe6543
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of specific DLL signatures associated with Cobalt Strike's elevate.x64.dll component, spanning versions 3.0 to 3.14, and the sleeve/elevate.x64.dll component from version 4.x. By matching a sequence of crucial instruction patterns and byte sequences within the DLL files, including comparisons, memory operations, and PostMessageA calls, the rule aims to identify these particular components, which are often leveraged within malicious activity frameworks like Cobalt Strike.
  Updated-Date: '2024_08_07'
CobaltStrike_Resources_Httpsstager64_Bin_v3_2_through_v4_x:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e9c45110107c6b893b954249f0290ac8
  Ruleset: securityonion-yara
  Summary: This rule detects specific signatures associated with Cobalt Strike's payload, specifically targeting the `httpsstager64.bin` file used in versions 3.2 to 4.x. The detection is based on known patterns and sequences of instructions in the binary, including an API locator signature comprised of `xor`, `lodsb`, `ror`, `add`, and other assembly instructions. Additionally, it identifies the use of the `InternetSetOptionA` call, which is characteristic of these payloads, by matching specific byte patterns related to this function. These elements combined allow for the identification of malicious activity related to this Cobalt Strike payload.
  Updated-Date: '2024_08_07'
CobaltStrike_Resources_Httpsstager_Bin_v2_5_through_v4_x:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ae93a67d3f52764549678d875bdb175a
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of Cobalt Strike's HTTPS stager binary, specifically for versions 2.5 through 4.x. Cobalt Strike is a penetration testing tool that can be abused by malicious actors for adversarial operations. The detection is based on a specific sequence of byte patterns found in the binary, including operations related to manipulating registers and memory, as well as the inclusion of the `InternetSetOptionA` API call, which is a distinguishing feature of this binary. The presence of these characteristics in a file indicates it could be a sample of the Cobalt Strike HTTPS stager.
  Updated-Date: '2024_08_07'
CobaltStrike_Resources_Httpstager64_Bin_v3_2_through_v4_x:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: af62a2df239b0f8d996753deddf54d39
  Ruleset: securityonion-yara
  Summary: 'This rule detects the presence of Cobalt Strike''s HTTP stager for 64-bit systems (httpstager64.bin) across versions 3.2 to 4.x by identifying specific byte sequences and patterns in the code. It focuses on two main indicators: an API locator pattern which includes a sequence of hexadecimal bytes corresponding to common assembly instructions such as XOR, ADD, CMP, and MOV operations, and a pattern following the InternetOpenA function call, which checks for expected jumps and calls typical in this malware''s behavior. This combination helps identify malicious activity associated with this version of Cobalt Strike.'
  Updated-Date: '2024_08_07'
CobaltStrike_Resources_Httpstager_Bin_v2_5_through_v4_x:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c6be831f2780e2b6293c06bf45b03c58
  Ruleset: securityonion-yara
  Summary: This rule detects Cobalt Strike's HTTP stager binary resources for versions 2.5 to 4.x. It identifies specific hexadecimal patterns related to the API locator and downloader loop used by the payload during execution, which include XOR, LODSB, ROR, ADD, CMP, JNZ, MOV, and POP instructions, among others. This signature also differentiates between the HTTP stager and HTTPS stager based on the flags passed to the WinInet API and their control over the download loop.
  Updated-Date: '2024_08_07'
CobaltStrike_Resources_Reverse64_Bin_v2_5_through_v4_x:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f87325e130e3e3e0bcd6a27712847a1e
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of Cobalt Strike's `reverse64.bin` file, specifically targeting versions 2.5 through 4.x. It identifies distinctive patterns in the file's code, such as specific sequences of operations and function calls, including API hashing and the absence of additional calls found in other payloads like `bind64`. The aim is to pinpoint the use of Cobalt Strike's reverse shell functions, focusing on unique constants and operation sequences that remain consistent across these versions.
  Updated-Date: '2024_08_07'
CobaltStrike_Resources_Reverse_Bin_v2_5_through_v4_x:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5ec44e02bf6869f27d7a06884b327172
  Ruleset: securityonion-yara
  Summary: This rule detects specific signatures associated with Cobalt Strike's resources, particularly focusing on versions 2.5 through 4.x. It identifies distinctive patterns in the binary, including sequences that manipulate and compare registers, pop values, and move data using specific opcodes. Additionally, it looks for particular byte sequences related to the ws2_32.dll library, which is indicative of network functionalities. This encompasses specific operations such as pushing values onto the stack and ASCII representations of key strings. The rule also identifies the presence of a hash associated with the "connect" API, which is integral in distinguishing reverse shell binaries, as these typically initiate outbound connections, contrasting with bind shells which wait for incoming connections. The combination of these distinctive byte patterns and API calls helps accurately identify instances of Cobalt Strike's reverse.bin payload.
  Updated-Date: '2024_08_07'
CobaltStrike_Resources_Smbstager_Bin_v2_5_through_v4_x:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 17b2402a3670feaba75abeb5cd98ccab
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of Cobalt Strike's smbstager binary, specifically targeting versions from 2.5 to 4.x. It identifies the characteristic sequence of instructions used in the program, including specific patterns that help distinguish it from other similar tools, such as Metasploit. By looking for distinct byte sequences and code blocks, the rule aims to accurately pinpoint and differentiate the smbstager component of Cobalt Strike.
  Updated-Date: '2024_08_07'
CobaltStrike_Resources_Template_Py_v3_3_to_v4_x:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 738b1a16cd13152b3d027d59caef3382
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of specific Python code signatures used in Cobalt Strike versions 3.3 to 4.x. It identifies strings related to system architecture detection, memory allocation, and manipulation functions such as "platform.architecture()", "ctypes.windll.kernel32.VirtualAlloc", "ctypes.windll.kernel32.RtlMoveMemory", "ctypes.windll.kernel32.CreateThread", and "ctypes.windll.kernel32.WaitForSingleObject". Cobalt Strike is a commercial penetration testing tool that has been repurposed by threat actors for malicious activities. The rule aims to identify these unique code features to help detect and mitigate the misuse of this tool in cyber attacks.
  Updated-Date: '2024_08_07'
CobaltStrike_Resources_Template_Sct_v3_3_to_v4_x:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3e7bf483a3a1ec5d510f499c8fba7807
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of Cobalt Strike's `template.sct` file, indicating usage of versions v3.3 to v4.x. It identifies various scriptlet components within the file's structure, such as script start and end tags, registration-related terms, VBScript language declarations, and CDATA sections. These elements are checked to appear in a specific order, signaling the formatting typical of Cobalt Strike scriptlets used for malicious purposes.
  Updated-Date: '2024_08_07'
CobaltStrike_Resources_Template__x32_x64_Ps1_v1_45_to_v2_5_and_v3_11_to_v3_14:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 95738e45899d2441384c6699da6f959f
  Ruleset: securityonion-yara
  Summary: This rule detects PowerShell scripts associated with different versions of Cobalt Strike, specifically targeting resources/template.x64.ps1 and resources/template.x32 from versions 3.11 to 3.14, as well as resources/template.ps1 from versions 1.45 to 2.5. The detection relies on identifying specific strings within the scripts that correspond to invoking Windows API functions like VirtualAlloc, CreateThread, and WaitForSingleObject through DLL imports. Additionally, it looks for the instantiation of objects from the CSharpCodeProvider class and the setup of compiler parameters for in-memory code generation and compilation.
  Updated-Date: '2024_08_07'
CobaltStrike_Resources_Template_x64_Ps1_v3_0_to_v4_x_excluding_3_12_3_13:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c444ebc392f8d2250ea4e70d9c83d4cb
  Ruleset: securityonion-yara
  Summary: This rule detects specific versions of Cobalt Strike's PowerShell templates used for 64-bit and hinted shellcode from version 3.0 to 4.x, excluding versions 3.12 and 3.13. It identifies unique strings within the templates, including indicators such as "[AppDomain]::CurrentDomain.DefineDynamicAssembly", "InMemoryModule", "MyDelegateType", "New-Object System.Reflection.AssemblyName('ReflectedDelegate')", and Base64 encoded byte arrays. Additionally, it detects patterns specific to 64-bit systems and certain mandatory property settings.
  Updated-Date: '2024_08_07'
CobaltStrike_Resources_Template_x86_Vba_v3_8_to_v4_x:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ddfa04ebb9344090221056bb1d6c878d
  Ruleset: securityonion-yara
  Summary: "This rule detects the specific VBA script signatures used by Cobalt Strike's resources or templates for x86 systems, specifically targeting versions 3.8 to 4.x. It identifies functions associated with creating remote threads, allocating virtual memory, writing to a process's memory, and creating processes, all using the Windows kernel32 library. Additionally, it checks for variables related to memory allocation and specific function calls that match the behavior of Cobalt Strike\u2019s tools."
  Updated-Date: '2024_08_07'
CobaltStrike_Resources_Xor_Bin__64bit_v3_12_to_v4_x:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ac5fb92c1278715da3c3b46dad508b7e
  Ruleset: securityonion-yara
  Summary: This rule detects specific signatures within the "resource/xor64.bin" files of Cobalt Strike versions 3.12 through 4.x. Cobalt Strike is a legitimate penetration testing tool that is often misused by threat actors for deploying malware and conducting cyber attacks. The detection method involves extracting stubs from these files, comparing them byte by byte, and generating a mask where mismatched nibbles are turned into wildcards. This approach ensures that variations within the same size categories are accurately detected.
  Updated-Date: '2024_08_07'
CobaltStrike_Resources_Xor_Bin_v2_x_to_v4_x:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b0f5cb21acaed1a55683992b108a0812
  Ruleset: securityonion-yara
  Summary: "This rule detects Cobalt Strike\u2019s resource payloads specifically encoded within the xor.bin files used in versions 2.x through 4.x. It identifies unique byte patterns, known as stubs, which are extracted from the Java archive files associated with Cobalt Strike. These stubs are sorted by size and then compared at the nibble level to create a distinct signature mask, with mismatched nibbles turned into wildcard characters. This method allows for precise detection of the payload resources within the specified versions."
  Updated-Date: '2024_08_07'
CobaltStrike_Resources__Template_Vbs_v3_3_to_v4_x:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 089f0c282dd58a80d44e9687b70f9327
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific script associated with Cobalt Strike, focusing on the "resources/btemplate.vbs" file signature for versions 3.3 to 4.x. The indicators include references to "Excel.Application" and settings related to making Excel invisible, manipulating the Windows Script Host via "Wscript.Shell", modifying registry keys under "HKEY_CURRENT_USER\Software\Microsoft\Office\", and specific method calls like ".RegWrite" and ".CodeModule.AddFromString". The signature also checks for hex-encoded segments and disabling alerts via ".DisplayAlerts".
  Updated-Date: '2024_08_07'
CobaltStrike_Sleep_Decoder_Indicator:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f8394cc46915c2b93ceabcc40bca5881
  Ruleset: securityonion-yara
  Summary: "This rule detects the presence of a specific sleep_mask decoder associated with CobaltStrike, a popular penetration testing tool used by security professionals and threat actors alike. The detection is based on a distinctive sequence of hexadecimal bytes that is indicative of the decoder\u2019s functionality within the CobaltStrike framework."
  Updated-Date: '2024_08_07'
CobaltStrike_Sleeve_BeaconLoader_HA_x64_o_v4_3_v4_4_v4_5_and_v4_6:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0db36f849dc1a0afaf47482c1b7bc3a1
  Ruleset: securityonion-yara
  Summary: "This rule detects the presence of Cobalt Strike\u2019s BeaconLoader, specifically the versions identified within iterations 4.3 through 4.6, based on a distinctive sequence of byte movements that spells out \"HeapAlloc\" in memory. Cobalt Strike is a penetration testing tool that can be misused for malicious purposes. This rule highlights the specific byte pattern related to the HeapAlloc function used within the mentioned versions, enabling the identification of this malware variant across these versions."
  Updated-Date: '2024_08_07'
CobaltStrike_Sleeve_BeaconLoader_HA_x86_o_v4_3_v4_4_v4_5_and_v4_6:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 046daf80a2fb410ebd8768359679e26d
  Ruleset: securityonion-yara
  Summary: This rule detects Cobalt Strike's sleeve or BeaconLoader.HA.x86.o malware, specifically targeting versions 4.3 through at least 4.6. It looks for a distinct sequence of hexadecimal character movements and assignments into memory that represent the string "HeapAlloc." These memory patterns are used to identify and confirm the presence of this malware variant in the system.
  Updated-Date: '2024_08_07'
CobaltStrike_Sleeve_BeaconLoader_MVF_x64_o_v4_3_v4_4_v4_5_and_v4_6:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: bfa12aa429681f11997911f5a0150469
  Ruleset: securityonion-yara
  Summary: "This rule detects the presence of Cobalt Strike\u2019s BeaconLoader, specifically targeting versions 4.3 through 4.6. The detection is based on a specific sequence of byte patterns associated with the \"MapViewOfFile\" function, which is indicative of this malware family. Cobalt Strike is a well-known penetration testing tool that is often misused by threat actors for malicious purposes. The provided byte patterns serve as a unique signature to identify this particular behavior within executable files."
  Updated-Date: '2024_08_07'
CobaltStrike_Sleeve_BeaconLoader_MVF_x86_o_v4_3_v4_4_v4_5_and_v4_6:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: dc762ee8159b431aa1c3506269b488d0
  Ruleset: securityonion-yara
  Summary: This rule detects Cobalt Strike's BeaconLoader variant using the MapViewOfFile technique, specifically targeting versions 4.3 through at least 4.6. It identifies the malware by matching a unique sequence of hexadecimal values that correspond to specific instructions for string manipulation in memory.
  Updated-Date: '2024_08_07'
CobaltStrike_Sleeve_BeaconLoader_VA_x64_o_v4_3_v4_4_v4_5_and_v4_6:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: aac2f4286a141f629bfe08a6186bd22f
  Ruleset: securityonion-yara
  Summary: This rule detects the Cobalt Strike's sleeve/BeaconLoader malware, specifically the VirtualAlloc version ranging from 4.3 to at least 4.6. The rule identifies sequences of hexadecimal values associated with string manipulations representing the term "VirtualAlloc" and a deobfuscation routine that involves multiple operations such as moves, increments, comparisons, and logical operations on registers and memory locations, typical of the malware's activities.
  Updated-Date: '2024_08_07'
CobaltStrike_Sleeve_BeaconLoader_VA_x86_o_v4_3_v4_4_v4_5_and_v4_6:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 13c1062bfa355f8891604460791b1561
  Ruleset: securityonion-yara
  Summary: This rule detects Cobalt Strike's sleeve/BeaconLoader.VA.x86.o malware versions 4.3 through at least 4.6. Cobalt Strike, a popular post-exploitation tool frequently misused by threat actors, leverages VirtualAlloc to allocate memory for executing payloads. Specific byte sequences are identified indicative of the malware's operations, including the inscription of "VirtualAlloc" into memory and the presence of a deobfuscation routine in the code.
  Updated-Date: '2024_08_07'
CobaltStrike_Sleeve_BeaconLoader_x64_o_v4_3_v4_4_v4_5_and_v4_6:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 23e0080a1ca19cfc6b32efddfe379aa7
  Ruleset: securityonion-yara
  Summary: This rule detects the Cobalt Strike Beacon Loader for 64-bit systems, belonging to versions 4.3 through 4.6. It identifies key patterns within the executable's binary code, specifically looking for sequences of instructions that involve common operations such as XOR, CMP, MOV, and JNZ. These operations are utilized to confirm and manage specific values and memory addresses within the loader. The rule excludes detection if another distinct pattern, associated with a deobfuscation technique, is found. This exclusion helps to distinguish between the actual Cobalt Strike Beacon Loader and other similar, yet benign, code sequences.
  Updated-Date: '2024_08_07'
CobaltStrike_Sleeve_BeaconLoader_x86_o_v4_3_v4_4_v4_5_and_v4_6:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3e4196c504009b46e338b641b77dbf6f
  Ruleset: securityonion-yara
  Summary: This rule detects specific versions of Cobalt Strike's BeaconLoader for x86 architecture, ranging from version 4.3 to at least 4.6. It identifies a unique sequence of byte-level operations that directly manipulate memory locations to assemble a recognizable pattern. The rule includes checks for a series of instructions that load specific values into particular memory addresses, forming a distinct signature that is characteristic of the BeaconLoader. Additionally, it differentiates this pattern from a common deobfuscation routine, ensuring accurate detection by excluding sequences associated with standard deobfuscation processes.
  Updated-Date: '2024_08_07'
CobaltStrike_Sleeve_Beacon_Dll_v4_0_suspected:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 91d9c9f50587c45443500184837db926
  Ruleset: securityonion-yara
  Summary: This rule detects a suspected version of Cobalt Strike's beacon.dll, specifically version 4.0. The rule identifies distinctive patterns in the assembly code, including sequences used for a switch case handling and another sequence that appears to be related to a XOR-based decoding mechanism. The matching patterns include byte sequences which push and compare register values, manage jump tables, and a sequence that performs byte-wise XOR operations followed by comparison and increment instructions. This detection helps identify potential traces of the Cobalt Strike malware, which is commonly used by threat actors for command and control, post-exploitation, and lateral movement in compromised environments.
  Updated-Date: '2024_08_07'
CobaltStrike_Sleeve_Beacon_Dll_v4_1_and_v4_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a5e63f330f5ca38c2f6bcae76786dfd1
  Ruleset: securityonion-yara
  Summary: This rule detects specific versions of Cobalt Strike's sleeve/beacon DLL files, specifically versions 4.1 and 4.2. Cobalt Strike is a popular penetration testing tool often misused by threat actors to simulate advanced persistent threats. The rule identifies these DLL files through unique byte patterns in their code, including a distinct switch-case structure and a decryption routine pattern.
  Updated-Date: '2024_08_07'
CobaltStrike_Sleeve_Beacon_Dll_v4_3_v4_4_v4_5_and_v4_6:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: abe2e84d833b0c64d820147cad2b7530
  Ruleset: securityonion-yara
  Summary: This rule detects specific versions of Cobalt Strike's sleeve/beacon.dll, specifically versions 4.3, 4.4, 4.5, and 4.6. Cobalt Strike is a widely used penetration testing tool that has also been adopted by threat actors for malicious purposes. The rule identifies the binary by looking for a specific sequence of bytes indicative of certain behaviors in the code, such as instruction patterns and the way functions are called or processed.
  Updated-Date: '2024_08_07'
CobaltStrike_Sleeve_Beacon_Dll_v4_7_suspected:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 93e849e80d31fe8563b9ac1f81148669
  Ruleset: securityonion-yara
  Summary: This rule detects a potentially suspected variant of Cobalt Strike's sleeve/beacon.dll version 4.7. Cobalt Strike is a popular post-exploitation toolkit frequently abused by threat actors for its robust capabilities in command and control operations. The rule identifies specific hexadecimal byte patterns indicative of this DLL variant through both a version signature and a decoding sequence. These patterns include a specific sequence of operations in assembly language, such as push, dec, and mov commands, followed by comparisons and jumps, that are characteristic of this version of the Cobalt Strike DLL.
  Updated-Date: '2024_08_07'
CobaltStrike_Sleeve_Beacon_Dll_x86_v4_0_suspected:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1d07e8391a2f513bad4f3be3a1716bcb
  Ruleset: securityonion-yara
  Summary: This rule detects a suspected version of the Cobalt Strike tool, specifically the sleeve/beacon.x64.dll file from version 4.0. It identifies the presence of this file through a unique byte sequence signature and a characteristic decoder pattern in the code. Cobalt Strike is a widely-used penetration testing toolkit that can be abused by threat actors to perform post-exploitation tasks, such as command execution, payload delivery, and data collection on compromised systems.
  Updated-Date: '2024_08_07'
CobaltStrike_Sleeve_Beacon_x64_v4_1_and_v_4_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8a7e4a53d9410454ab27bf6228183094
  Ruleset: securityonion-yara
  Summary: This rule detects the x64 DLL versions 4.1 and 4.2 of Cobalt Strike's sleeve and beacon modules. Cobalt Strike is a security tool used by penetration testers and threat actors to simulate advanced persistent threat (APT) scenarios. The rule identifies specific byte sequences and assembly instructions unique to these versions of Cobalt Strike, enabling recognition of this software based on its code patterns and behavior.
  Updated-Date: '2024_08_07'
CobaltStrike_Sleeve_Beacon_x64_v4_3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5c1529e0901bbbeda65852b3800a94b5
  Ruleset: securityonion-yara
  Summary: This rule detects the Cobalt Strike's sleeve/beacon.x64.dll version 4.3 by identifying specific byte patterns within the code. The first pattern relates to a sequence of instructions used to move data and adjust the stack pointer, followed by a conditional jump. The second pattern identifies a sequence involving an XOR operation, an increment of the RAX register, and a comparison against a threshold. These patterns collectively help in identifying the presence of this specific Cobalt Strike component.
  Updated-Date: '2024_08_07'
CobaltStrike_Sleeve_Beacon_x64_v4_4_v_4_5_and_v4_6:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0cddd020c1ff709e07af61ceff832ec5
  Ruleset: securityonion-yara
  Summary: This rule detects specific versions of the Cobalt Strike's Beacon component, specifically the sleeve/beacon.x64.dll versions 4.4 through at least 4.6. Cobalt Strike is a legitimate post-exploitation tool that is often leveraged by threat actors for malicious purposes. The rule identifies unique bytecode sequences and patterns within the binaries to flag these specific versions, aiming to help security teams recognize and mitigate potential misuse of the software.
  Updated-Date: '2024_08_07'
CobaltStrike_Sleeve_Beacon_x64_v4_5_variant:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 339cd2945eb5108419a9ad83f10ddb54
  Ruleset: securityonion-yara
  Summary: "This rule detects a variant of Cobalt Strike\u2019s sleeve/beacon x64 dynamic-link library (DLL) version 4.5. The rule identifies the malware by looking for specific hexadecimal patterns in the code, including sequences related to moving and adding register values, jump instructions, and a call to a command function. Additionally, it uses a unique sequence to detect a particular byte XOR operation, increment instruction, and compare operation within the memory. These patterns are indicative of the malicious behavior exhibited by the Cobalt Strike tool, which is often used by threat actors for post-exploitation activities such as command and control."
  Updated-Date: '2024_08_07'
CobaltStrike_Unmodifed_Beacon:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d5b687e1f9b80397bd211555060a0ea5
  Ruleset: securityonion-yara
  Summary: This rule detects an unmodified Cobalt Strike beacon DLL by identifying specific strings such as "ReflectiveLoader" and "beacon.dll" within the file.
  Updated-Date: '2024_08_07'
CobaltStrike__Resources_Browserpivot_Bin_v1_48_to_v3_14_and_Sleeve_Browserpivot_Dll_v4_0_to_v4_x:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 052a0b144d0321ee6937d655b37fcb9d
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of specific versions of Cobalt Strike software, particularly resources/browserpivot.bin from versions 1.48 to 3.14, and sleeve/browserpivot.dll from version 4.0 to at least version 4.4. The detection is based on pattern matching with characteristic sequences of bytes related to certain functions like socket receive operations and distinctive format strings used within the software. Cobalt Strike is a commercial penetration testing tool often misused by malicious actors for command and control in cyber-attacks.
  Updated-Date: '2024_08_07'
Cobaltbaltstrike_Beacon_Encoded:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0d7d703e74a8878ac8ccd1415a5048cd
  Ruleset: securityonion-yara
  Summary: This rule detects CobaltStrike payloads by matching a variety of encoded string patterns across different encoding methods and architectures. These patterns include hexadecimal, base64, base64 with XOR encryption, base64 in utf16, and VBA/VBS/veil formats for both x86 and x64 architectures. The presence of specific sequences in these encoded forms allows for the identification of CobaltStrike payloads commonly used in cyber threats.
  Updated-Date: '2024_08_07'
Cobaltbaltstrike_Beacon_XORed_x64:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 00622569ca5010868e28359fc4778871
  Ruleset: securityonion-yara
  Summary: This rule detects 64-bit CobaltStrike payloads by identifying the presence of specific machine code patterns associated with XOR decryption loops. It looks for sequences of hexadecimal bytes that characterize the decryption process used by these payloads. Additionally, it checks for variations in byte sequences corresponding to typical XOR-based decryption outputs that align with specific hexadecimal values indicative of executable file headers or code padding.
  Updated-Date: '2024_08_07'
Cobaltbaltstrike_Beacon_XORed_x86:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 514f263513618a7eb3a055c8be4efbbb
  Ruleset: securityonion-yara
  Summary: This rule detects CobaltStrike payloads by identifying specific patterns in the x86 architecture that are part of XOR decryption loops used in the payload. It looks for characteristics in two variants (52-byte and 56-byte) of the XOR decryption loop and examines additional unique byte sequences that indicate the presence of CobaltStrike's encrypted data. The rule uses precise conditions to ensure accurate detection, focusing on bitwise operations to distinguish between legitimate and malicious activity.
  Updated-Date: '2024_08_07'
Cobaltbaltstrike_Beacon_x64:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ff1659ea8ecfdfb569dce263154809bf
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of CobaltStrike Beacon payloads on x64 systems by identifying specific byte patterns. It looks for a characteristic MZ header, as well as specific patterns found in decoded and XOR-obfuscated configuration blobs used by various versions of CobaltStrike.
  Updated-Date: '2024_08_07'
Cobaltbaltstrike_Beacon_x86:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 38c471411f5d35d66dc52af51a5e56a1
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of Cobalt Strike payloads specifically for x86 architecture. It identifies an executable by searching for a default MZ header, and it also looks for patterns in the decoded and encoded configuration blobs characteristic of different versions of Cobalt Strike payloads. Patterns for both decoded and XORed configuration blobs in versions 3 and 4 are identified to trigger a match.
  Updated-Date: '2024_08_07'
Cobaltbaltstrike_Payload_Encoded:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 82b8dccf4b9bb2ad147de5e1149e65b5
  Ruleset: securityonion-yara
  Summary: This rule detects CobaltStrike payloads by identifying specific string patterns used in the payloads. Various encoding methods, including ASCII, wide-character, hexadecimal, base64, and VBA or VBS scripting formats, are considered to match characteristic values for both x86 and x64 architectures. The strings monitored include sequences within memory allocations, base64 encodings, their variations with XOR obfuscation, and scripting array formats representing key aspects of the payload structures. This comprehensive approach ensures the identification of the payloads regardless of the format or obfuscation technique applied.
  Updated-Date: '2024_08_07'
Cobaltbaltstrike_RAW_Payload_TCP_Bind_x64:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: fed4f136707dcfe5fb94ed6d41cbd763
  Ruleset: securityonion-yara
  Summary: This rule detects CobaltStrike payloads by identifying a specific x64 configuration. Using a predefined hexadecimal string pattern and verifying defined API call offsets, the rule checks for functions related to kernel32.dll and ws2_32.dll, including LoadLibraryA, WSAStartup, WSASocketA, bind, listen, accept, closesocket, recv, and VirtualAlloc.
  Updated-Date: '2024_08_07'
Cobaltbaltstrike_RAW_Payload_TCP_Bind_x64_UTF16:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 529f98699c8cf053d0ccd9d0404f218d
  Ruleset: securityonion-yara
  Summary: This rule detects CobaltStrike payloads by identifying specific hexadecimal patterns in the payload's UTF-16 encoded x64 binaries, particularly focusing on a default encoded object pointer (EOP). The detection relies on precise sequence matches at various offsets within the payload.
  Updated-Date: '2024_08_07'
Cobaltbaltstrike_RAW_Payload_TCP_Bind_x86:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d820328107ee3a24f83a061f16792328
  Ruleset: securityonion-yara
  Summary: This rule detects CobaltStrike payloads by identifying specific byte patterns and hash values associated with the API functions used within the payload. The rule matches a particular sequence of operations and includes checks for several kernel32.dll and ws2_32.dll API functions, such as LoadLibraryA, WSAStartup, WSASocketA, bind, listen, accept, closesocket, ExitProcess, VirtualAlloc, and recv. The identified API calls are essential for the payload's behavior, enabling network communication and managing system resources.
  Updated-Date: '2024_08_07'
Cobaltbaltstrike_RAW_Payload_TCP_Bind_x86_UTF16:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d1748cda259c5d2b930cf3a77449b9d2
  Ruleset: securityonion-yara
  Summary: This rule detects CobaltStrike payloads, specifically targeting the x86 UTF-16 format of the raw TCP bind payload. It identifies malicious activity by checking for a specific hex pattern in the payload and verifying a sequence of conditions based on the hexadecimal values located at different offsets within the payload.
  Updated-Date: '2024_08_07'
Cobaltbaltstrike_RAW_Payload_TCP_Reverse_x64:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c363ea84870417f623c96e50c74e3b3e
  Ruleset: securityonion-yara
  Summary: This rule detects malicious payloads associated with CobaltStrike, a post-exploitation tool commonly used for adversary simulation and red teaming. It specifically identifies payloads by matching a unique sequence of bytes found in the x64 version of the default end-of-payload marker. Additionally, the rule verifies the presence of specific API function hashes loaded from various DLLs such as `kernel32.dll` and `ws2_32.dll`. The identified APIs include `LoadLibraryA`, `WSAStartup`, `WSASocketA`, `connect`, `recv`, `VirtualAlloc`, and `closesocket`, providing further confirmation of the payload's characteristics.
  Updated-Date: '2024_08_07'
Cobaltbaltstrike_RAW_Payload_TCP_Reverse_x64_UTF16:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: cb8cd37663e03ba72ccda9af13bcd84b
  Ruleset: securityonion-yara
  Summary: This rule detects CobaltStrike payloads by identifying specific patterns of hexadecimal values within the payload's structure, particularly focusing on the UTF-16 encoded x64 assembly sequence. These patterns are checked at various offsets to confirm the presence of the CobaltStrike reverse TCP payload commonly used for command and control operations.
  Updated-Date: '2024_08_07'
Cobaltbaltstrike_RAW_Payload_TCP_Reverse_x86:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c22dabc44583fa052fac86082f196aeb
  Ruleset: securityonion-yara
  Summary: This rule detects CobaltStrike payloads by identifying specific byte sequences and verifying hash values corresponding to API functions commonly used in the payload's execution flow. The detected functions include various essential APIs from kernel32.dll and ws2_32.dll, such as LoadLibraryA, WSAStartup, WSASocketA, connect, ExitProcess, VirtualAlloc, and recv. These functions play a role in loading libraries, network communication, memory allocation, and process termination.
  Updated-Date: '2024_08_07'
Cobaltbaltstrike_RAW_Payload_TCP_Reverse_x86_UTF16:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: bb7a953c3d0522c77bd615d706a4c272
  Ruleset: securityonion-yara
  Summary: This rule detects payloads associated with CobaltStrike, a commercial penetration testing framework often exploited by threat actors for post-exploitation tasks. Specifically, it identifies x86 payloads within TCP reverse shell communications encoded in UTF-16 format. The rule matches certain hexadecimal patterns and checks specific offsets within the payload to validate the presence of distinctive characteristics aligned with CobaltStrike infrastructure.
  Updated-Date: '2024_08_07'
Cobaltbaltstrike_RAW_Payload_dns_stager_x86:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 761a89ebeb5aa4d55f0132b46e607f52
  Ruleset: securityonion-yara
  Summary: This rule detects CobaltStrike payloads by identifying specific patterns and hash values associated with various API calls used in the payload. It looks for an x86 default end-of-payload marker sequence and checks for specific hash values at designated offsets within the payload. These hash values correspond to important functions such as `kernel32.dll_VirtualAlloc`, `kernel32.dll_LoadLibraryA`, `dnsapi.dll_DnsQuery_A`, `kernel32.dll_ExitProcess`, `kernel32.dll_Sleep`, and `kernel32.dll_lstrlenA`, which are indicative of the CobaltStrike DNS stager payload.
  Updated-Date: '2024_08_07'
Cobaltbaltstrike_RAW_Payload_dns_stager_x86_UTF16:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3185ba0225def1ee170b94c1d906af33
  Ruleset: securityonion-yara
  Summary: This rule detects CobaltStrike payloads by identifying specific hexadecimal patterns in a 32-bit executable that employs UTF-16 encoding. CobaltStrike, a well-known post-exploitation toolkit often used in cyber attacks, uses these payloads for various malicious activities. The rule matches the payloads based on defined byte sequences and specific conditions that ensure the precise characteristics of the executable are met before triggering detection.
  Updated-Date: '2024_08_07'
Cobaltbaltstrike_RAW_Payload_http_stager_x64:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3212d45a392872154747e94a8e322b0f
  Ruleset: securityonion-yara
  Summary: This rule detects CobaltStrike payloads by identifying a specific sequence of hexadecimal bytes commonly found in x64 systems. It cross-references the payload's API list against known hash values and their corresponding API names, such as functions from kernel32.dll and wininet.dll, to confirm the presence of the CobaltStrike stager payload.
  Updated-Date: '2024_08_07'
Cobaltbaltstrike_RAW_Payload_http_stager_x64_UTF16:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d8d5623aa1a89dd328967277f26eee87
  Ruleset: securityonion-yara
  Summary: This rule detects CobaltStrike payloads by identifying a specific series of hexadecimal byte sequences commonly found in the x64 stager payloads encoded in UTF-16 format. The rule checks for precise values at various offsets within the sequence to confirm the presence of the malign code, which allows for the identification of these payloads typically utilized for malicious activity.
  Updated-Date: '2024_08_07'
Cobaltbaltstrike_RAW_Payload_http_stager_x86:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0f02a1aa54cf75090bf4f74c82112cf3
  Ruleset: securityonion-yara
  Summary: This rule detects CobaltStrike payloads by identifying specific hexadecimal patterns in the memory and verifying the presence of various API functions such as kernel32.dll_LoadLibraryA, wininet.dll_InternetOpenA, wininet.dll_InternetConnectA, wininet.dll_HttpOpenRequestA, wininet.dll_HttpSendRequestA, kernel32.dll_GetLastError, user32.dll_GetDesktopWindow, wininet.dll_InternetErrorDlg, kernel32.dll_ExitProcess, kernel32.dll_VirtualAlloc, and wininet.dll_InternetReadFile. These functions are typically associated with the behavior of CobaltStrike, a well-known penetration testing tool often used for malicious activities by threat actors.
  Updated-Date: '2024_08_07'
Cobaltbaltstrike_RAW_Payload_http_stager_x86_UTF16:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5e89aee45de2f9c71789667cbd42eff7
  Ruleset: securityonion-yara
  Summary: This rule detects CobaltStrike payloads by searching for a specific UTF-16 encoded x86 payload pattern. The pattern includes a series of hexadecimal byte sequences, and it validates the presence of these sequences at precise offsets within the payload. CobaltStrike is a penetration testing tool often misused by attackers for command and control, and this rule aims to identify its presence based on its unique payload characteristics.
  Updated-Date: '2024_08_07'
Cobaltbaltstrike_RAW_Payload_https_stager_x64:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3f11cd897a09f36b6c91273cf3219044
  Ruleset: securityonion-yara
  Summary: This rule detects CobaltStrike payloads by identifying specific hexadecimal patterns and corresponding hash values within the code, which are associated with particular API calls. These APIs include kernel32.dll's LoadLibraryA, ExitProcess, and VirtualAlloc, as well as several functionalities from wininet.dll, such as InternetOpenA, InternetConnectA, HttpOpenRequestA, InternetSetOptionA, HttpSendRequestA, and InternetReadFile. The detection relies on these distinctive functionalities being present within the specified offsets in the memory of the examined binary.
  Updated-Date: '2024_08_07'
Cobaltbaltstrike_RAW_Payload_https_stager_x64_UTF16:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 310eabb152c3c5fc429927462555e58d
  Ruleset: securityonion-yara
  Summary: This rule detects CobaltStrike payloads, specifically targeting x64 architecture with a UTF-16 encoding. It identifies a series of hexadecimal patterns within the payload, checking specific offsets for unique values that are characteristic of the CobaltStrike malware's staging and execution process. This method ensures that the identified payload matches the structure and behavior expected from a typical CobaltStrike malicious payload.
  Updated-Date: '2024_08_07'
Cobaltbaltstrike_RAW_Payload_https_stager_x86:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ff1c31cd89513c495d9984c8c01098f5
  Ruleset: securityonion-yara
  Summary: This rule detects CobaltStrike payloads by identifying unique byte sequences and specific API call hashes within the executable. The payload includes API calls to multiple functions from `kernel32.dll`, `wininet.dll`, and `user32.dll`. These functions are essential for various malicious operations, such as loading libraries, opening internet connections, sending HTTP requests, setting internet options, handling errors, allocating virtual memory, and performing cleanup tasks before exiting the process. The presence of these specific API calls and their respective hashed values at predetermined offsets within the payload is indicative of CobaltStrike activity.
  Updated-Date: '2024_08_07'
Cobaltbaltstrike_RAW_Payload_https_stager_x86_UTF16:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7e06cb3923c5e2bf0314d407590575e1
  Ruleset: securityonion-yara
  Summary: This rule detects CobaltStrike payloads by searching for specific patterns in UTF-16 encoded x86 instructions. It identifies unique byte sequences that are characteristic of the CobaltStrike HTTP stager payload, validating multiple checksums at specified offsets to ensure precise detection.
  Updated-Date: '2024_08_07'
Cobaltbaltstrike_RAW_Payload_smb_stager_x86:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 04c806ca5349b9af7f30e8dbc3fc2f79
  Ruleset: securityonion-yara
  Summary: This rule detects CobaltStrike payloads by identifying a specific byte sequence associated with the payload's default end-of-process routine for x86 architecture. It verifies the presence of multiple hashed API calls within the payload, such as kernel32.dll's VirtualAlloc, CreateNamedPipeA, ConnectNamedPipe, ReadFile, DisconnectNamedPipe, CloseHandle, and ExitProcess, to confirm the presence of the CobaltStrike payload.
  Updated-Date: '2024_08_07'
Cobaltbaltstrike_RAW_Payload_smb_stager_x86_UTF16:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 024584bf442596f1033904d8e8ddb0ad
  Ruleset: securityonion-yara
  Summary: This rule detects CobaltStrike payloads specifically targeting x86 systems through SMB stager techniques encoded in UTF-16. It identifies the malicious payloads using a sequence of hexadecimal patterns and validates their presence by checking specific values at defined offsets within the sequence, ensuring the precise identification of the CobaltStrike payload.
  Updated-Date: '2024_08_07'
Cobaltbaltstrike_strike_Payload_XORed:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a20759f3efe2f14ad1b4f462051511fc
  Ruleset: securityonion-yara
  Summary: This rule detects CobaltStrike payloads which may be either x86 or x64 executables, as well as distinct x86 and x64 beacons and a NOP slide. The detection is based on specific XORed 32-bit values at defined offsets within the payload or beacon data.
  Updated-Date: '2024_08_07'
Cobaltgang_PDF_Metadata_Rev_A:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 95b003e4f1b0db42cf989e3a2ec5b973
  Ruleset: securityonion-yara
  Summary: This rule detects PDF documents that may have been created using a potential Cobalt Gang PDF template. It identifies these documents by searching for a specific document ID embedded in the metadata, which is indicative of the Cobalt Gang's PDF creation methods.
  Updated-Date: '2024_08_07'
Codoso_CustomTCP:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d9440408758e2055bf0e26ead659132e
  Ruleset: securityonion-yara
  Summary: This rule detects the Codoso CustomTCP malware, which is identified by specific ASCII strings such as "wnyglw," "WorkerRun," "boazdcd," "wayflw," and "CODETABL." The presence of these strings, combined with a file signature check for a PE file header (0x5a4d) and a file size limit under 405KB, triggers the detection criteria.
  Updated-Date: '2024_08_07'
Codoso_CustomTCP_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8a507f2e41f7153cdc6e33ea71097a96
  Ruleset: securityonion-yara
  Summary: This rule detects Codoso APT CustomTCP malware by identifying the presence of specific strings within a file, such as "varus_service_x86.dll" and various command-line arguments and command executions like "net start %%1", "ping 127.1 > nul", and "net stop %%1". Additionally, it checks for specific functions and identifiers such as "McInitMISPAlertEx" and "B_WKNDNSK^". The rule ensures the targeted file has a particular file signature (0x5a4d) and is smaller than 406KB in size.
  Updated-Date: '2024_08_07'
Codoso_CustomTCP_3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a65f44a8e6d10cd1296cd4ef44f0ba36
  Ruleset: securityonion-yara
  Summary: This rule detects Codoso APT CustomTCP malware by identifying key strings and patterns within executable files. It searches for specific indicators like the presence of "DnsApi.dll," certain registry paths, HTTP connection patterns, user-agent strings, and references to "iphlpapi.dll" as well as system directories and authorization methods. It also looks for patterns in the CLSID registry entries. The rule triggers if certain conditions regarding file size and string occurrence are met.
  Updated-Date: '2024_08_07'
Codoso_CustomTCP_4:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c3765496d054bc43b95231fd074775e8
  Ruleset: securityonion-yara
  Summary: This rule detects the Codoso APT CustomTCP malware by identifying specific characteristics associated with this threat. It looks for a particular DLL filename and specific command strings related to network service management and process execution. The rule checks for certain conditions within executable files, such as a specific header value, file size constraints, and the presence of defined strings, to successfully identify the malicious software.
  Updated-Date: '2024_08_07'
Codoso_Gh0st_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f8c0112c9cfa731288f045617fa33b3e
  Ruleset: securityonion-yara
  Summary: This rule detects the Codoso APT Gh0st malware, which is known for its advanced persistent threat capabilities. The rule identifies specific malicious activities like the execution of commands using `cmd.exe` and `rundll32.exe`. It also monitors for suspicious strings related to administrative elevation and key system interactions indicating potential compromise. Detection is based on the presence of known filenames associated with malicious processes and common system tools potentially used for exploitation. Key indicators include attempts to launch specific executables and certain global event names associated with the malware's behavior. The malware is identified by specific patterns in file headers and behaviors consistent with Codoso APT Gh0st activities.
  Updated-Date: '2024_08_07'
Codoso_Gh0st_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 43b722bbafedee941c01181dc1c93911
  Ruleset: securityonion-yara
  Summary: This rule detects the Codoso Advanced Persistent Threat (APT) Gh0st malware. It identifies specific strings associated with the Codoso malware's behaviors, such as command execution through "cmd.exe" and "rundll32.exe", references to administrative elevation, and specific debugging and service driver patterns. The rule applies these criteria, combined with the file size and a particular file signature, to accurately pinpoint the presence of this malware.
  Updated-Date: '2024_08_07'
Codoso_Gh0st_3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ae8b082f03ec5c4dc9b97dbb0ba27792
  Ruleset: securityonion-yara
  Summary: This rule detects the Codoso APT Gh0st malware. It identifies the presence of specific indicators associated with this malware, including the string "RunMeByDLL32" and the occurrence of known malicious and well-known legitimate file names and versions, such as "svchost.dll," "server.dll," "MSVCP60.DLL," and others. The rule triggers if the file size is less than 195KB and matches the specified hash or any four of the listed indicators.
  Updated-Date: '2024_08_07'
Codoso_PGV_PVID_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7532626358334cbd60263dee08398a2e
  Ruleset: securityonion-yara
  Summary: 'This rule detects Codoso APT PGV PVID malware, a piece of malicious software. It identifies specific patterns in files, such as references to drivers and directories associated with the operating system, including "DRIVERS\ipinip.sys" and "%SystemRoot%\System32\wiaservc.dll". It also looks for specific web paths like "/selfservice/microsites/search.php?%016I64d" and other identifiable strings such as "Microsoft Chart ActiveX Control" and "Cookie: pgv_pvid=". The rule leverages checks on file headers and occurrences of these specific strings to confirm the presence of the Codoso APT PGV PVID malware.'
  Updated-Date: '2024_08_07'
Codoso_PGV_PVID_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 71b8a3191242e92562ed446d4dee2663
  Ruleset: securityonion-yara
  Summary: This rule detects Codoso APT PGV PVID malware by identifying specific strings and conditions within Windows systems. It looks for registry paths and commands associated with "SvcHost" and "regsvr32.exe" as well as phrases like "Help and Support," "netsvcs," "winlogon," and common system service paths. Additionally, the rule checks for the presence of a specific header at the beginning of the file and ensures the file size is less than 907KB.
  Updated-Date: '2024_08_07'
Codoso_PGV_PVID_3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 93a6aac0bfda27752963bb37783f63f6
  Ruleset: securityonion-yara
  Summary: This rule detects the Codoso APT PGV PVID malware by identifying a specific string in its code. The string, "Copyright (C) Microsoft Corporation. All rights reserved.(C) 2012," is checked within the software's binary to confirm the presence of the malware. This detection strategy leverages unique textual fingerprints embedded within the malware code.
  Updated-Date: '2024_08_07'
Codoso_PGV_PVID_4:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3b2195001db00d7a29e6b7679cf06846
  Ruleset: securityonion-yara
  Summary: This rule detects the Codoso APT PlugX malware. It flags executable files smaller than 900KB that start with the hexadecimal value 0x5a4d. The rule looks for several specific strings within the file, including various mentions of the word "dropper" in different formats and case variations. Additionally, it searches for strings associated with legitimate Microsoft Windows system components and configurations, such as the "Microsoft Windows Manager Utility" and certain registry paths. The detection requires at least two occurrences of the strings related to "dropper" and two of the legitimate system strings.
  Updated-Date: '2024_08_07'
Codoso_PGV_PVID_5:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f2bb7fbc208de40cf2acdf486875f15f
  Ruleset: securityonion-yara
  Summary: This rule detects Codoso APT PGV PVID Malware, specifically designed to identify malicious files by their unique string patterns and specific file characteristics. It searches for a couple of distinct ASCII strings, including command lines used by the malware and specific manifest file names. The rule applies to executable files that start with the "MZ" header and are smaller than 500KB in size, ensuring a thorough and precise detection mechanism targeting this specific type of malware.
  Updated-Date: '2024_08_07'
Codoso_PGV_PVID_6:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e9e58e0c9039310ab7dfc906f0f883c0
  Ruleset: securityonion-yara
  Summary: This rule detects the Codoso APT PGV_PVID malware by identifying specific string patterns and conditions that match known behaviors of this threat. These behaviors include the use of a specific command involving "rundll32" and another command structure that pings a local address and deletes a file. The rule is tailored to files under 6000KB in size that begin with the "MZ" header, characteristic of executable files.
  Updated-Date: '2024_08_07'
Codoso_PlugX_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 80602fd60b61502125f12ae3eae0e745
  Ruleset: securityonion-yara
  Summary: This rule detects Codoso APT PlugX malware, a sophisticated threat often associated with targeted attacks. It identifies specific text strings frequently found within this malware, such as "GETPASSWORD1", "NvSmartMax.dll", and "LICENSEDLG". The rule triggers if these strings are present in files smaller than 800KB that start with the hexadecimal value 0x5a4d, indicative of executable files.
  Updated-Date: '2024_08_07'
Codoso_PlugX_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d3750871312d00703aaaf59a363e7f1f
  Ruleset: securityonion-yara
  Summary: This rule detects the Codoso APT PlugX malware, which is associated with the Advanced Persistent Threat (APT) Codoso group. It identifies specific strings related to the malware's behavior and file structure, such as references to "hid.dll," "SOUNDMAN.exe," and "%TEMP%\\HID." The rule conditions include validating the file's header and size, ensuring it is likely a valid executable file.
  Updated-Date: '2024_08_07'
Codoso_PlugX_3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5e272219b4536908f9928fa8e7ce1077
  Ruleset: securityonion-yara
  Summary: This rule detects the Codoso APT PlugX malware by matching specific characteristics in files. It identifies the presence of certain strings such as error messages related to folder creation and decryption failure, the filenames "mcs.exe" and "McAltLib.dll," and references to "WinRAR self-extracting archive." Additionally, the rule checks that the file begins with the ASCII characters "MZ" (indicating a Windows executable) and that its size is less than 1200KB.
  Updated-Date: '2024_08_07'
CookieTools:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2b98b27246a9cea8693ca20bbe118d9a
  Ruleset: securityonion-yara
  Summary: This rule detects a Chinese hacktool executable named "CookieTools.exe" by looking for specific strings within the file. These strings include URLs such as "http://210.73.64.88/doorway/cgi-bin/getclientip.asp?IP=" and "http://www.chinesehack.org/", as well as various error messages and terms indicative of network operations and password handling. The file must have a specific hash and meet size and format criteria to be detected.
  Updated-Date: '2024_08_07'
CookieTools2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 04422c5b42fff8583373dc0f29ef3282
  Ruleset: securityonion-yara
  Summary: This rule detects a Chinese hacktool set known as CookieTools2, specifically targeting the executable file named CookieTools2.exe. Key indicators include the presence of certain strings within the file, such as URLs ("www.gxgl.com&www.gxgl.net"), a specific string related to IP addresses ("ip.asp?IP="), a user-agent string ("MSIE 5.5;"), and a reference to Borland software in the registry. The executable must also start with the 'MZ' header (which indicates a DOS executable) and be smaller than 700KB in size.
  Updated-Date: '2024_08_07'
CoreImpact_sysdll_exe:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 75670695152de5404781f8b77de9113b
  Ruleset: securityonion-yara
  Summary: This rule detects a malware sample named sysdll.exe associated with the Rocket Kitten Advanced Persistent Threat (APT) group. The rule identifies this particular threat by looking for specific strings within files, including development paths, user-agent strings resembling Mozilla/5.0, URLs containing index.php with certain parameters, local IP addresses (127.0.0.1), files named info.dat, the term "needroot," and directories named plugins. The presence of these strings suggests the activity of the sysdll.exe malware.
  Updated-Date: '2024_08_07'
CorkowDLL:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 04b617e3e60c336c5084d17604a3ebf1
  Ruleset: securityonion-yara
  Summary: This rule detects the Corkow malware's DLL files by identifying specific binary patterns that are commonly found in them. Corkow is a banking Trojan known for its modular architecture, allowing for various functionalities, including information stealing and remote access. The rule targets the file headers and specific DLL export functions such as "Control_RunDLL", "ServiceMain", and "DllGetClassObject", which are indicative of the Corkow malware's typical behavior and structure.
  Updated-Date: '2024_08_07'
Crackmapexec_EXE:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5c917ef3176d59e3164356576705e078
  Ruleset: securityonion-yara
  Summary: This rule detects the CrackMapExec hack tool, which is used for post-exploitation activities in a network environment. It specifically looks for instances where certain strings associated with CrackMapExec are present in a file, such as "core.scripts.secretsdump(", "core.scripts.samrdump(", and "core.uacdump(". Additionally, it checks that the file starts with the typical header for executable files and that the file size is less than 10,000 KB.
  Updated-Date: '2024_08_07'
CredTheft_MSIL_ADPassHunt_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ae7dcb95cc675bc44274880570cd76c2
  Ruleset: securityonion-yara
  Summary: This rule detects .NET PE files that contain a specific ProjectGuid linked to the public ADPassHunt project, indicating possible credential theft. It searches for the TypeLibGUID present in .NET binaries, which corresponds to the ProjectGuid found in the '.csproj' file of a .NET project, to identify potential threats related to the ADPassHunt credential theft tool.
  Updated-Date: '2024_08_07'
CredTheft_MSIL_ADPassHunt_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 091af7ff4cf7539d9f75213dff73b6d2
  Ruleset: securityonion-yara
  Summary: This rule detects ADPassHunt, a tool used in Windows environments to search for Active Directory accounts with specific password attributes. It looks for various strings and paths associated with ADPassHunt, such as references to its usage, and attributes like msSFU30Password and userpassword. The rule aims to identify this credential theft software by checking for specific binary signatures and strings related to its password searching functions.
  Updated-Date: '2024_08_07'
CredTheft_MSIL_CredSnatcher_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 32f00076ffd0442b229ef3f6fb66cd23
  Ruleset: securityonion-yara
  Summary: This rule detects .NET PE files associated with the 'CredSnatcher' project by identifying a specific ProjectGuid embedded within the file. This unique identifier, derived from a TypeLibGUID, is used to pinpoint files that correlate directly with the malicious 'CredSnatcher' software, facilitating the identification of this particular credential theft tool.
  Updated-Date: '2024_08_07'
CredTheft_MSIL_TitoSpecial_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: eb5cb83f7b6786cdc2e6883bf622afe8
  Ruleset: securityonion-yara
  Summary: This rule detects .NET Portable Executable (PE) files associated with various method names found in the TitoSpecial code. It specifically looks for a set of strings that are characteristic of this code, including terms like "Minidump," "WriteProcessMemory," "OpenProcess," and "LoadLibrary," among others. These terms are indicative of functionalities typically used to interact with system processes and memory, which can suggest potential malicious activity such as credential theft or process manipulation within the software.
  Updated-Date: '2024_08_07'
CredTheft_MSIL_TitoSpecial_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2ddc334f6aa956b185a314d236451c26
  Ruleset: securityonion-yara
  Summary: This rule detects .NET PE files that contain a specific ProjectGuid corresponding to the TitoSpecial project. The TypeLibGUID present in these binaries is mapped directly from the ProjectGuid found in a .NET project's '.csproj' file, and the rule accounts for both x86 and x64 versions of the tool using different GUIDs.
  Updated-Date: '2024_08_07'
CredTheft_MSIL_WCMDump_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1b8139785cb742a3a15041060bf34756
  Ruleset: securityonion-yara
  Summary: This rule detects .NET PE files that contain a specific ProjectGuid ('21e322f2-4586-4aeb-b1ed-d240e2a79e19') associated with the 'WCMDump' project. It identifies these files by checking for the presence of the TypeLibGUID string within the binary, which maps directly to the ProjectGuid found in the '.csproj' file of a .NET project.
  Updated-Date: '2024_08_07'
CredTheft_Win_EXCAVATOR_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 94576e47c67d6965db6b5c7dce947cd4
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the 'Inject' method associated with the Excavator malware's primary executable file. The rule identifies specific binary signatures present in the Portable Executable (PE) format of the file and matches specific byte patterns to confirm the presence of this malicious method. Excavator is known for its capabilities in credential theft, and this detection rule aims to identify its injection technique by analyzing the structural and behavioral composition of its executable file.
  Updated-Date: '2024_08_07'
CredTheft_Win_EXCAVATOR_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: cee7431eb5a08c63094ee2b319492431
  Ruleset: securityonion-yara
  Summary: "This rule detects the binary signature of a routine that invokes the `PssFreeSnapshot` function found in the Excavator-Reflector DLL. The signature consists of multiple sequences of hexadecimal bytes used to identify the targeted routine within executable files. The detection technique leverages specific byte patterns in the binaries to identify the presence of this function call, ensuring it matches certain criteria that align with the known characteristics of the Excavator-Reflector DLL\u2019s implementation."
  Updated-Date: '2024_08_07'
CredentialStealer_Generic_Backdoor:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 88916f65d457cbaaa1696dcaf86d85ef
  Ruleset: securityonion-yara
  Summary: This rule detects a generic credential-stealing backdoor by identifying multiple strings associated with accessing password stores. It looks for specific code patterns that retrieve login data from various web browsers including Opera, Internet Explorer, Chrome, and Firefox. The targeted files and database entries include paths and SQL queries associated with user credentials storage. The purpose is to identify malicious activities involving the extraction of sensitive login information from these applications.
  Updated-Date: '2024_08_07'
CrimsonRAT_Mar18_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3d1b2294b623a9285fe5b3dda088daf5
  Ruleset: securityonion-yara
  Summary: This rule detects CrimsonRAT malware by identifying specific characteristics within the code. It searches for registry path modifications related to Windows startup processes, references to a debug path string, commands used to gather system information, and various functionalities like taking screenshots, restarting the target PC, and logging key files. Additionally, it checks for functions related to key state detection and software-specific strings, all while ensuring the file size is under 400KB and excluding certain copyright software indications.
  Updated-Date: '2024_08_07'
CrowdStrike_Shamoon_DroppedFile:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1501ede1ad2d52864b5bd56cd889aedc
  Ruleset: securityonion-yara
  Summary: This rule detects the Shamoon malware by identifying specific strings such as "test123," "test456," "test789," and "testdomain.com" in a file. Additionally, it looks for the execution of a command that pings a local IP address while suppressing output. The presence of these strings and command patterns together indicate the presence of the Shamoon malware.
  Updated-Date: '2024_08_07'
CrunchRAT:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7f3cf4f5904761946d344923a9027232
  Ruleset: securityonion-yara
  Summary: This rule detects CrunchRAT, a remote access Trojan (RAT) identified by the presence of specific strings within its executable file, CrunchRAT.exe. Indicators include debug and release version paths containing the term "CrunchRAT," as well as commands such as "runCommand," embedded actions for downloading and uploading, specific content disposition fields for form-data actions, and references to an update.php script. The rule triggers when the file meets specific size and file format criteria.
  Updated-Date: '2024_08_07'
Customize:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: dfc83f519259c56df9d626501b2f4379
  Ruleset: securityonion-yara
  Summary: This rule detects a Chinese hack tool named Customize.aspx, which is associated with the deployment of malicious administrative tools. The tool is identified through specific patterns in its code, including database commands and file stream operations. It uses SQL commands to execute and manage database activities, manipulates process execution settings, and handles file streams for creating files. Additionally, it generates specific response messages indicating successful execution. The rule triggers when the file size is less than 24KB and all identified code patterns are present.
  Updated-Date: '2024_08_07'
Customize_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5b09cb82bc75b27942953e8969d425dc
  Ruleset: securityonion-yara
  Summary: This rule detects a specific Chinese hacktool associated with a file named "Customize.jsp." It identifies the presence of the hacktool based on particular strings related to Java Server Pages (JSP) code, used for reading input and parameter handling within a web application. The rule specifically looks for Java code patterns involving reading lines from a buffered reader and parameter encryption, all within files smaller than 30KB.
  Updated-Date: '2024_08_07'
DKShell_f0772be3c95802a2d1e7a4a3f5a45dcdef6997f3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: cede46fb139b693044e0ff305b412720
  Ruleset: securityonion-yara
  Summary: This rule detects a web shell by identifying specific PHP code patterns and structure associated with malicious scripts. It looks for PHP files that start with certain byte values and are smaller than 300KB in size. The rule includes string checks for common elements found in web shells, such as disabling error reporting and constructing functions from pieces of strings. These characteristics are typical in backdoors used to compromise web servers.
  Updated-Date: '2024_08_07'
DK_Brute:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 73debf8e50d10bde3b4c1b7506e6821f
  Ruleset: securityonion-yara
  Summary: This rule detects a file named DK Brute.exe, which is associated with a Point-of-Sale (PoS) scammer toolbox. It identifies specific strings within the file, such as "get_CrackedCredentials," "Same port used for two different protocols," "coded by fLaSh," and "get_grbToolsScaningCracking," to determine the presence of this malicious software.
  Updated-Date: '2024_08_07'
DLL_Injector_Lynx:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c98f3df546c9f24ff5232f75c880b113
  Ruleset: securityonion-yara
  Summary: This rule detects the Lynx DLL Injector, a malicious tool used to inject payloads into target processes. The rule focuses on identifying specific wide string patterns indicative of this injector's operations, including command-line arguments for targeting processes and payloads, success and failure messages regarding payload injection, as well as references to the tool itself. The conditions for detection include specific file characteristics such as file size and header values, ensuring accurate identification of the Lynx DLL Injector activities.
  Updated-Date: '2024_08_07'
DTool_Pro_php:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: dc41e4587e07e78c53578aeab95f0195
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a PHP file associated with the "DTool Pro" tool by looking for specific strings within the content. The targeted strings include messages and commands executed by the DTool Pro software, such as references to an opcode directory, command handling messages, and exclusive DTool Pro command notifications. These patterns help identify files related to this particular tool based on its unique behaviors and outputs.
  Updated-Date: '2024_08_07'
DTools2_02_DTools:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4fa46efaed1f96baa040470cbd828f75
  Ruleset: securityonion-yara
  Summary: This rule detects a Chinese hacktool known as DTools, specifically targeting the file DTools.exe. It identifies the tool through a combination of specific string patterns found within the file, such as references to "kernel32.dll" and various forms with distinctive names like "TSETPASSWORDFORM" and "TGETNTUSERNAMEFORM". The rule ensures these patterns are all present in a file smaller than 2000KB and begins with the typical executable file signature.
  Updated-Date: '2024_08_07'
DUBrute_DUBrute:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 06beb2f3b8b24e25d92537a3f0dd1a7a
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a Chinese hacktool named DUBrute, specifically targeting the executable file DUBrute.exe. It identifies specific strings related to IP addresses, login credentials, and a particular website reference ("UBrute.com"). Additionally, it checks that the file has a certain size and format.
  Updated-Date: '2024_08_07'
DarkComet_Keylogger_File:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 187b39cead81f11e8864bd46c9047f30
  Ruleset: securityonion-yara
  Summary: This rule detects keylogger files potentially created by the DarkComet malware. It identifies these files through specific patterns, including entries starting with double colons followed by an uppercase letter and timestamps formatted with hour, minute, second, and AM or PM notation. The rule triggers when there are numerous matches for both patterns, indicating the possibility of keylogging activity by DarkComet, which is a known remote access tool (RAT).
  Updated-Date: '2024_08_07'
DarkEYEv3_Cryptor:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 941986cd8989312cb8adaddcfd3f03a8
  Ruleset: securityonion-yara
  Summary: This rule detects DarkEYEv3 encrypted executables, which are often associated with malware. The detection is based on a specific string pattern, "DarkEYEV3-", and a particular file header value, 0x5a4d.
  Updated-Date: '2024_08_07'
DarkSecurityTeam_Webshell:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9dcbe0af27b4ae357d7e9db7d746c34f
  Ruleset: securityonion-yara
  Summary: This rule detects a web shell associated with the Dark Security Team. The web shell functionality is identified through a specific HTML form structure that includes hidden input fields and executes server-side session variables. The form leverages the Server.MapPath method to encode and retrieve the directory path on the server, indicating malicious activity and unauthorized remote command execution capabilities.
  Updated-Date: '2024_08_07'
DarkSpy105:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d3c00b7c1436b95ddbc75bb105478a78
  Ruleset: securityonion-yara
  Summary: 'This rule detects the presence of the DarkSpy105.exe file, a type of webshell. The detection is based on identifying a specific string within the file that states: "Sorry, DarkSpy got an unknown exception, please re-run it, thanks!" This string serves as an indicator of the webshell''s activity, allowing for effective identification and response.'
  Updated-Date: '2024_08_07'
Daserf_Nov1_BronzeButler:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 58634a25eddff037501725aad3c2d67c
  Ruleset: securityonion-yara
  Summary: This rule detects the Daserf malware, associated with the threat group Bronze Butler. It identifies the presence of specific executable files and HTTP user-agent strings, such as "mstmp1845234.exe" and known variants of Mozilla user-agent strings. Additionally, it looks for particular proxy and registry string patterns common in the malware's configurations, including references to Internet Explorer and various Windows registry paths. The rule is designed to catch executable files smaller than 700KB with specific characteristics indicative of Daserf malware infection.
  Updated-Date: '2024_08_07'
Datper_Backdoor:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 07bc37cb9be10759c3eba3e8967a4e9e
  Ruleset: securityonion-yara
  Summary: This rule detects the Datper backdoor malware by looking for specific characteristics in a file. It checks if the file starts with the 'MZ' header and if its size is less than 300KB. The rule then inspects the file for specific import hash values and searches for particular ASCII strings and identifiers within the file that correspond to known traits of the Datper malware. The detection methods include matching the import hashes or finding combinations of the specified ASCII strings and identifiers.
  Updated-Date: '2024_08_07'
Debug_BDoor:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7475c7e096890dc55c62f4757bfd3a71
  Ruleset: securityonion-yara
  Summary: This rule detects a specific webshell file named BDoor.dll by identifying occurrences of the string "\BDoor\" and a reference to the Windows registry key "SOFTWARE\Microsoft\Windows\CurrentVersion\Run". These indicators suggest the presence of this particular webshell, commonly associated with backdoor access.
  Updated-Date: '2024_08_07'
Debug_cress:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ad0e5159126fbecfe62d089dbd2bb229
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a webshell named "cress.exe," targeting its specific auto-generated characteristics. It identifies strings such as "\\Mithril" and "Mithril.exe" within the file.
  Updated-Date: '2024_08_07'
Debug_dllTest_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6c164cced8d8ec20678b4a2283981c38
  Ruleset: securityonion-yara
  Summary: This rule detects a potentially malicious webshell file named "dllTest.dll" by searching for specific strings within the file. It looks for the presence of the debug path "\\Debug\\dllTest.pdb" and the phrase "--list the services in the computer," which may indicate suspicious activity related to service enumeration.
  Updated-Date: '2024_08_07'
DeepPanda_Trojan_Kakfum:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b82d6bb28166a809b4ead15ebc5fb645
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the Deep Panda Trojan identified as Trojan.Kakfum, specifically targeting the sqlsrv32.dll file. The rule looks for specific string patterns including references to common Windows paths and filenames associated with the malware, such as "%SystemRoot%\\System32\\svchost.exe -k sqlserver," "%s\\sqlsrv32.dll," and "%s\\sqlsrv64.dll." It also identifies the strings "ServiceMaix," "sqlserver," and various temporary file paths "%s\\%d.tmp." Matching these strings indicates the presence of the targeted malicious activity.
  Updated-Date: '2024_08_07'
DeepPanda_htran_exe:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5a18ff3ae15a64585dfc4c4526f42311
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the htran executable associated with the Deep Panda hacking group. It identifies specific patterns and strings related to htran's functionality, such as command-line options for modes like listen, tran, and slave, error messages, logging details, and connection handling. These strings are consistent with htran's role in facilitating communication between compromised systems for data transmission or other malicious activities.
  Updated-Date: '2024_08_07'
DeepPanda_lot1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: aa171b65ac48efab80eb923f4790d981
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of Deep Panda hacking activities, specifically related to a file named "lot1.tmp-pwdump". It focuses on identifying error messages and strings associated with password dumping attempts by monitoring various indicative texts. The rule looks for specific phrases such as difficulties opening target processes, deletion issues of target executables, failures in loading SAM functions, errors in writing test files, service creation and starting failures, and specific references to the executable file "PwDump.exe". Additionally, it detects patterns involving pipe creation and usage failures, indicating attempts to access and manipulate logon sessions.
  Updated-Date: '2024_08_07'
DeepPanda_sl_txt_packed:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2b4cf3d29ce554dffa9bb7cac0b516d2
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of Deep Panda malware by identifying specific characteristics of a port scanning tool known as ScanLine. It looks for indicators such as strings related to "Command line port scanner," the filename "sl.exe," and references to "CPports.txt." Additionally, it checks for HTTP GET requests and references to Foundstone Inc., including specific year markers and ICMP timestamps.
  Updated-Date: '2024_08_07'
DefaceKeeper_0_2_php:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 949240e377ca00af5409a955357ad25a
  Ruleset: securityonion-yara
  Summary: 'This rule detects a PHP script named DefaceKeeper_0.2.php. It identifies this script by looking for specific strings: an HTML input field targeting the "index.php" file, a Base64-encoded string that decodes to an "eval" command, and a specific image URL from a hosting service, likely used for defacement purposes. These markers suggest the script is designed to alter or deface web page content.'
  Updated-Date: '2024_08_07'
Derusbi_Backdoor_Mar17_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2c870a5d8bff163266076f4fc909dfa2
  Ruleset: securityonion-yara
  Summary: This rule detects a variant of the Derusbi backdoor, a type of malware used for unauthorized remote access and control. It identifies the presence of specific file paths and patterns, such as system and DLL files like "wiaservc.dll," "pchsvc.dll," and "OfficeUt32.dll," as well as custom named pipes ("\\.\pipe\usb%so" and "\\.\pipe\usb%si"). Additionally, it checks for certain expressions related to "rundll32.exe" executions. The rule triggers when the conditions are met, particularly if the file size is less than 400KB and contains any of the specified string patterns at offset 0x5a4d.
  Updated-Date: '2024_08_07'
Derusbi_Code_Signing_Cert:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6c53f241f8cf1df3aee89ab2a793e2db
  Ruleset: securityonion-yara
  Summary: This rule detects executables signed with certificates known to be associated with the Derusbi Trojan, specifically looking for those issued by "Fuqing Dawu Technology Co.,Ltd.," "XL Games Co.,Ltd.," or "Wemade Entertainment co.,Ltd.," within files smaller than 800KB.
  Updated-Date: '2024_08_07'
Derusbi_Kernel_Driver_WD_UDFS:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8196ac3ae392300937004f474fec2d85
  Ruleset: securityonion-yara
  Summary: This rule detects the Derusbi Kernel Driver by identifying specific patterns and indicators associated with this malware. It looks for unique strings and registry paths within files smaller than 800KB that begin with the "MZ" header, indicating a Windows executable. The criteria include pipe names used by the malware, specific registry entries related to internet settings and WMI, file names like "Update.dll," and particular text patterns such as "$$$--Hello" and "Wrod--$$$". These elements combined help to accurately identify the presence of the Derusbi Kernel Driver in a system.
  Updated-Date: '2024_08_07'
Destructive_Ransomware_Gen1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 822d0fba7f84700a176977e0a23d7a6d
  Ruleset: securityonion-yara
  Summary: This rule detects destructive ransomware based on specific patterns in the malware's code. These patterns include commands for modifying boot status policies to ignore all failures, disabling recovery, and deleting shadow copies and catalogs quietly. The malware signature is identified by its file characteristics and specific command sequences aimed at compromising system recovery options and deleting backup data to ensure maximum damage and hinder restoration efforts.
  Updated-Date: '2024_08_07'
Dexter_Malware:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2a57bc68b20830f184f2fa62ccbfbfb2
  Ruleset: securityonion-yara
  Summary: This rule detects the Dexter Trojan, a malware known for targeting point-of-sale systems. It identifies the presence of specific strings in a file, such as "Java Security Plugin," "%s\\%s\\%s.exe," "Sun Java Security Plugin," and "\\Internet Explorer\\iexplore.exe." By looking for these indicators, it can determine if the Dexter Trojan is present on the system.
  Updated-Date: '2024_08_07'
Disclosed_0day_POCs_InjectDll:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 09df5be1d038c2134225970fd6554657
  Ruleset: securityonion-yara
  Summary: "This rule detects a Proof-of-Concept (POC) code designed for injecting dynamic link libraries (DLLs) within the context of a disclosed 0-day hacktool set. It identifies specific strings within the targeted file, such as paths to PDB files used during development (\u201C\\\\Release\\\\InjectDll.pdb\u201D), command-line usage instructions (\u201CUsage: InjectDll -l|pid PathToDll\u201D), status messages indicating successful DLL injection into a process (\u201CInjecting DLL: %ls into PID: %d\u201D), and error messages when adjusting privileges (\u201CError adjusting privilege %d\u201D). The file header and size constraints further refine the detection criteria."
  Updated-Date: '2024_08_07'
Disclosed_0day_POCs_exploit:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ae4d7c9cf1344dc4bc32084b5e41c5b0
  Ruleset: securityonion-yara
  Summary: This rule detects proof-of-concept (POC) code associated with a set of disclosed zero-day exploitation tools. It specifically looks for the presence of certain strings, such as "\\Release\\exploit.pdb" in ASCII format and "\\favorites\\stolendata.txt" in wide format, within executable files that are smaller than 200KB in size and have a DOS header (indicated by the hexadecimal value 0x5a4d).
  Updated-Date: '2024_08_07'
Disclosed_0day_POCs_injector:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d825291c11b6780dd14a30cb07befa6f
  Ruleset: securityonion-yara
  Summary: This rule detects proof-of-concept (POC) code from a disclosed 0-day hacktool set, specifically focusing on an injector tool. The rule identifies specific strings related to this injector, such as file paths, error messages during shellcode or DLL injection processes, and outcomes of memory operations. It also checks for specific phrases associated with the injector's usage, including the inability to obtain certain privileges and success notifications for copying shellcode into memory. This detection framework highlights characteristics and behaviors typical of this malicious injector utility.
  Updated-Date: '2024_08_07'
Disclosed_0day_POCs_lpe:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3db7183cbe295b96ab894ae9c3d5dd33
  Ruleset: securityonion-yara
  Summary: This rule detects proof-of-concept (POC) code from a set of disclosed zero-day hacktools. It identifies strings indicative of exploitation activities such as executing commands through "msiexec" to install payloads from specific download paths, references to batch files such as "bat.bat," and installation of files like "payload.msi" with options for silent execution. Additionally, it looks for system driver files like "WindowsTrustedRTProxy.sys" and various payload directories. This rule specifically searches for these indicators within executables smaller than 70KB.
  Updated-Date: '2024_08_07'
Disclosed_0day_POCs_lpe_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 54976b7f66d17a47b08842a7509f5471
  Ruleset: securityonion-yara
  Summary: This rule detects Proof-of-Concept (POC) code associated with a disclosed 0-day hacktool set. The rule specifically looks for POC code involving local privilege escalation (LPE) by identifying specific strings within files. These strings include a command line calling "cmd.exe" with specific parameters, a path related to a source code directory for UAC (User Account Control) exploitation, and a wide string indicating a created folder. The condition checks for the presence of these strings within a file that starts with a specific header and is less than 700KB in size.
  Updated-Date: '2024_08_07'
Disclosed_0day_POCs_payload_MSI:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 74e7666069b1d5aaf4e34b63c2f1c257
  Ruleset: securityonion-yara
  Summary: This rule detects proof-of-concept (POC) code associated with disclosed zero-day hack tools. It identifies specific strings such as "WShell32.dll," the phrase "Target empty, so account name translation begins on the local system," and the path "\\custact\\x86\\AICustAct.pdb" within Windows Installer (MSI) files smaller than 1000KB.
  Updated-Date: '2024_08_07'
Disclosed_0day_POCs_shellcodegenerator:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: dc25bb48eafbd696fc4de2060b8296e9
  Ruleset: securityonion-yara
  Summary: This rule detects proof-of-concept (POC) code associated with a disclosed 0day hacktool set. Specifically, it identifies files containing the string "\Release\shellcodegenerator.pdb" with a condition that the file starts with the hexadecimal value 0x5a4d (indicating an executable file) and is smaller than 40KB in size.
  Updated-Date: '2024_08_07'
Dive_Shell_1_0___Emperor_Hacking_Team_php:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 466b03de7f784bdbe4e69e37ff9da08a
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of Dive Shell 1.0 malware, associated with the Emperor Hacking Team. It identifies specific strings in a PHP file, such as "Emperor Hacking TEAM", "Simshell", a regular expression pattern involving the `cd` command, and a form submission script using `$_SERVER['PHP_SELF']`, to ascertain the malicious script's presence.
  Updated-Date: '2024_08_07'
DkShell_4000bd83451f0d8501a9dfad60dce39e55ae167d:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b61fee12d2e84fce669f33d209453ced
  Ruleset: securityonion-yara
  Summary: This rule detects a web shell by identifying specific strings and patterns commonly found in malicious scripts. It looks for particular phrases such as "DK Shell - Took the Best made it Better..!!," a peculiar use of the `preg_replace` function with base64 encoding, and a diagnostic echo statement displaying server information through `php_uname`. Additionally, it searches for HTML form elements related to file uploading and script execution via GET parameters. The rule is triggered if certain conditions based on these strings are met, indicating the presence of a web shell under 200KB in size.
  Updated-Date: '2024_08_07'
DllInjection:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9240af848d25ab4ad82f5b7b369f5f8b
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a file named DllInjection.exe associated with webshells. It identifies the file by matching the specific string "\\BDoor\\DllInjecti".
  Updated-Date: '2024_08_07'
Dll_LoadEx:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1b7728744731645010883dd3ff870a24
  Ruleset: securityonion-yara
  Summary: This rule detects a Chinese hack tool known as Dll_LoadEx.exe, recognizing it by specific strings embedded in the file. These strings include identifiers such as "WiNrOOt@126.com," "Dll_LoadEx.EXE," messages like "You Already Loaded This DLL ! :(" and "Can't Load This Dll ! :(", and other unique text patterns. The rule targets files with an initial hexadecimal value of 0x5a4d, commonly indicating a Windows executable (PE format), and a file size of less than 120KB.
  Updated-Date: '2024_08_07'
Docm_in_PDF:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2b016130a885cf02aba9f1fac54b5c05
  Ruleset: securityonion-yara
  Summary: This rule detects embedded DOCM files within a PDF document that uses the OpenAction feature. It identifies such combinations by searching for specific indicators, including the pattern of names typical of DOCM files, the "OpenAction" keyword, and references to "JavaScript". The rule is designed to trigger only if all these elements are found within the first few bytes of a file that begins with the standard PDF file header.
  Updated-Date: '2024_08_07'
DomainScanV1_0:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9291a8123dad2bd9e59e798eec30d9f2
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the executable file DomainScanV1_0.exe by identifying specific string patterns within the file. These strings include unique sequences like "dIJMuX$aO-EV," "XELUxP\"-\\," and "KaR\"U'}-M,." It also looks for error messages such as "Decompress error," "Can't load library," and "Can't load function," as well as the string "com0tl32:.d." All these strings combined help in identifying and flagging the DomainScanV1_0.exe file.
  Updated-Date: '2024_08_07'
Dorkbot_Injector_Malware:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 01514d24561f3f4b240706ccf4459604
  Ruleset: securityonion-yara
  Summary: This rule detects the Dorkbot Injector malware by identifying specific ASCII strings within a file, such as "Enter an integer, a real number, a character and a string:", "ready to finish", "EYEnpw", "somewhere i belong", "Not all fields were assigned", "take down", and "real number = %f". The condition for detection is based on the presence of these ASCII strings along with the file matching a particular format and size, specifically having a 0x5a4d header and a filesize of less than 500KB.
  Updated-Date: '2024_08_07'
Dos_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0f137e3c6a58e403440671c381c69b43
  Ruleset: securityonion-yara
  Summary: This rule detects a file associated with a Chinese hack tool known as "Churrasco." It is used to execute commands with SYSTEM privileges on a Windows operating system. The rule identifies the file by specific ASCII strings related to its usage instructions and success messages, ensuring it is a Windows executable smaller than 1000KB. The rule is specific to a file named "1.exe" with a particular SHA-1 hash.
  Updated-Date: '2024_08_07'
Dos_Down32:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1518b84f3ae69214f3501bec0f060e5a
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a Chinese hacktool named Down32.exe. It searches for specific characteristics including a reference to the file path "C:\Windows\Temp\Cmd.txt," a file named "down.exe," and the string "get_Form1." The rule also checks if the file starts with the hexadecimal value 0x5a4d and ensures the file size is less than 137KB.
  Updated-Date: '2024_08_07'
Dos_Down64:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: baf31d3fe52f3853a15247edcb46fa5f
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the Chinese hacktool identified by the file Down64.exe. It searches for specific indicators including file paths such as "C:\\Windows\\Temp\\Down.txt," "C:\\Windows\\Temp\\Cmd.txt," and "C:\\Windows\\Temp\\"; as well as strings like "ProcessXElement," "down.exe," and "set_Timer1." The rule ensures that the file's initial bytes correspond to the typical executable header and confirms the file size is less than 150KB.
  Updated-Date: '2024_08_07'
Dos_NtGod:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5c3ada7189a8075f314d73cfa98db853
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the Chinese hack tool named "NtGod.exe." It specifically identifies strings associated with the tool, such as "\\temp\\NtGodMode.exe," "NtGodMode.exe," "ntgod.bat," and "sfxcmd". The detection is based on certain conditions, including the file size being less than 250KB and the presence of specific hexadecimal values in the file header.
  Updated-Date: '2024_08_07'
Dos_c:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 36a60c6afdd6b761b04cc888e4bf107e
  Ruleset: securityonion-yara
  Summary: This rule detects a Chinese hacktool named "c.exe". It identifies the presence of this malicious software using specific string patterns embedded in the executable. These patterns include markers such as "!Win32 .EXE.", ".MPRESS1", ".MPRESS2", and "XOLEHLP.dll". Additionally, it searches for HTML closing tags and function names like "DtcGetTransactionManagerExA" and "GetUserNameA" commonly found in benign software but contextually relevant. The rule specifically targets files smaller than 100 KB with a particular starting byte pattern, ensuring accurate detection of the targeted hacktool.
  Updated-Date: '2024_08_07'
Dos_ch:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1ad6b106ec8a4d380df11bcb7398d60f
  Ruleset: securityonion-yara
  Summary: This rule detects a Chinese hacktool named "ch.exe," designed to perform various malicious activities. Key indicators include specific ASCII strings such as usage instructions for "Churraskito.exe," an error message related to locating the WMI process PID, a token discovery message, reference to the executable "wmiprvse.exe," a query for web information, and a common goodware string "WinSta0\\Default." The detection is based on particular file characteristics, ensuring it triggers for files matching the known hash and specified conditions.
  Updated-Date: '2024_08_07'
Dos_fp:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 333382f7a05ea73299170c6ba49b412e
  Ruleset: securityonion-yara
  Summary: This rule detects the Chinese hacktool identified as 'fp.exe'. It searches for specific strings within files, including a command to use 'fpipe' for network communication, the filename 'FPipe.exe', and a URL belonging to Foundstone. Additionally, it checks for an error message indicating a port address conflict. The rule applies to executable files smaller than 65KB that begin with the "MZ" signature, indicating a DOS header.
  Updated-Date: '2024_08_07'
Dos_iis:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6cffadf9a6f2d8cb83dcef09099d0aa6
  Ruleset: securityonion-yara
  Summary: 'This rule detects a malicious tool named "iis.exe," identified as part of a Chinese hacktool set. It looks for specific strings within executable files, such as "comspec," "program terming," "WinSta0\\Defau," "* FROM IIsWebInfo," "www.icehack.," "wmiprvse.exe," and "Pid: %d." The rule is triggered if the file''s size is less than 70KB and starts with the "MZ" header, indicating a Windows executable. By matching all these conditions, the rule effectively identifies the presence of the "iis.exe" file associated with hacking activities.'
  Updated-Date: '2024_08_07'
Dos_iis7:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c9ae0151458adbcbe86b7c0c7a702516
  Ruleset: securityonion-yara
  Summary: This rule detects a Chinese hacktool named "iis7.exe" by identifying specific strings and conditions within the file. The key indicators include the presence of expressions such as "\\localhost", "iis.run", and "WHOAMI". Additionally, it checks for a specific error message format ">Could not connecto %s" and a common substring "WinSta0\\Default". The tool's file size must be less than 140KB and start with the header "0x5a4d". The rule targets malicious activities associated with this specific executable file.
  Updated-Date: '2024_08_07'
Dos_lcx:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b1263614c5ab1368801cd1dac903b53e
  Ruleset: securityonion-yara
  Summary: This rule detects a Chinese hacking tool named "lcx.exe," which is known to include various network operations such as server-client connections and data transmission redirection. The tool contains specific strings indicative of its function and origin, including file paths, error messages, connection logs, and developer credits pointing to the Chinese hacker community "cnhonker.com." Additionally, it requires the file to match a certain hash for verification and have a size less than 100KB.
  Updated-Date: '2024_08_07'
Dos_look:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0f884a7d998781e1a6cc19d7c1bd9804
  Ruleset: securityonion-yara
  Summary: This rule detects a specific Chinese hacktool named "look.exe." It identifies the presence of this tool by checking the file's characteristics, including its hash value and specific strings within the content. Notable strings include "<description>CHKen QQ:41901298</description>", "version=\"9.9.9.9\"", and "name=\"CH.Ken.Tool\"". The rule also ensures that the tool file size is less than 40KB and has a header signature matching a common file format.
  Updated-Date: '2024_08_07'
Dos_netstat:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 400e2b12495525178d528cee07cd1757
  Ruleset: securityonion-yara
  Summary: This rule detects a specific variant of the netstat.exe executable associated with a Chinese hacktool set. It identifies this file by matching specific strings within the executable, including references to "w03a2409.dll" and several strings related to network diagnostics. The file must have a specific DOS header and a file size of less than 150KB.
  Updated-Date: '2024_08_07'
DragonFly_APT_Sep17_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 930c884722f96629a07a60ae0475aa8b
  Ruleset: securityonion-yara
  Summary: This rule detects malware associated with the DragonFly APT, which targets the Western energy sector. It identifies the presence of specific strings within files, such as a path related to "Update\Temp\ufiles.txt," a timestamp format, and a pattern involving "pass" in filenames. Additionally, the file must conform to certain characteristics, including starting with the hexadecimal value 0x5a4d and being less than 100KB in size.
  Updated-Date: '2024_08_07'
DragonFly_APT_Sep17_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4b3db082cfb3d1978fa50336b2198533
  Ruleset: securityonion-yara
  Summary: This rule detects malware associated with the DragonFly Advanced Persistent Threat (APT) group, which targets sectors such as the western energy sector. It identifies the presence of specific malware by looking for certain strings in files. These strings include references to paths and files associated with browser and user credential storage, such as Opera, Mozilla Firefox, Google Chrome, and Internet Explorer credential locations, as well as specific SQL queries related to retrieving stored login data. The rule triggers if the file size is less than 3000KB, starts with a specific header, and contains at least three of the identified strings.
  Updated-Date: '2024_08_07'
DragonFly_APT_Sep17_3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 387139bbcbf4d7a9cc1135def06cc406
  Ruleset: securityonion-yara
  Summary: This rule detects malware associated with the DragonFly advanced persistent threat (APT) group, targeting the energy sector. It identifies the malware by checking for the presence of specific strings, including "kernel64.dll," "ws2_32.dQH," "HGFEDCBADCBA," and "AWAVAUATWVSU," within the file. Additionally, the rule ensures the file's authenticity by verifying that it begins with the "MZ" header (a common indicator of a Windows executable) and that its size is less than 40KB. The rule also cross-references the PE import hash to match a specific value indicative of the targeted malware.
  Updated-Date: '2024_08_07'
DragonFly_APT_Sep17_4:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2da604ecdd0d80c1a1eab3161f43d8d0
  Ruleset: securityonion-yara
  Summary: This rule detects malware associated with the DragonFly Advanced Persistent Threat (APT) group, specifically targeting the energy sector. It identifies the presence of several distinctive strings within executable files, such as "screen.exe", "PlatformInvokeUSER32", "GetDesktopImageF", "PlatformInvokeGDI32", "GetDesktopImage", and a message indicating "Too many arguments, going to store in current dir". The condition checks that the file has a specific header and is smaller than 60KB in size.
  Updated-Date: '2024_08_07'
Dridex_Trojan_XML:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8beb42680477f080f02098614331ad9e
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of Dridex malware within an XML document by identifying specific strings associated with malicious behavior. The key indicators include the presence of XML version declarations, Word document application tags, indications that macros are present, binary data sections, and specific Office object properties like the number of characters and lines. These elements collectively signify the use of macros within XML files to propagate the Dridex banking Trojan.
  Updated-Date: '2024_08_07'
DropBear_SSH_Server:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: cb10422af5dc2d5ee7ca58601951b446
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the DropBear SSH Server, a software tool used to maintain remote access to systems. It searches for specific strings associated with DropBear, such as version information, error messages indicating an unsupported algorithm, and file paths related to DropBear keys. The rule checks for a particular file header and ensures the file size is below 1000KB, confirming the presence of DropBear SSH Server.
  Updated-Date: '2024_08_07'
Dropper_DeploysMalwareViaSideLoading:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4158e4fbe4cd1cd677939f6e8049cf4f
  Ruleset: securityonion-yara
  Summary: 'This rule detects a dropper used to deploy an implant via side loading. This dropper has been specifically observed in association with two malware families: REDLEAVES and PlugX. The rule identifies the presence of a unique string pattern related to ".lnk" files in proximity to "avpui.exe" and a specific function that generates a pseudo-random string of 100 characters, indicating the presence of this particular dropper.'
  Updated-Date: '2024_08_07'
Dropper_HTA_WildChild_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: eb59762cc3acaa69688523768123d5a4
  Ruleset: securityonion-yara
  Summary: This rule detects specific strings found in unobfuscated HTML Application (HTA) files generated by the WildChild builder. It identifies these HTAs by searching for key terms such as "processpath," ".NET version identifiers like "v4.0.30319" and "v2.0.50727," and terms related to .NET framework functionalities like "FromBase64Transform," "MemoryStream," and "DynamicInvoke." Additionally, it checks for the presence of "COMPLUS_Version," "entry_class," and "Sendoff," along with an HTML script header at the beginning of the file. These characteristic strings help identify malicious scripts crafted to execute unauthorized activities on a system.
  Updated-Date: '2024_08_07'
Dropper_LNK_LNKSmasher_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: dc5353f9554032ee70500446ca89b4bc
  Ruleset: securityonion-yara
  Summary: This rule detects LNK files generated by the LNKSmasher project. LNKSmasher creates customized LNK files that include consistent artifacts such as the Drive Serial Number, the File Droid GUID, and the GUID CLSID. Specific hexadecimal patterns are searched within the initial part of the file to identify its presence.
  Updated-Date: '2024_08_07'
Dubnium_Sample_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: cbdb2209bf370e8dcaad9e390a5b29b7
  Ruleset: securityonion-yara
  Summary: This rule detects a specific malware sample associated with the Dubnium cyber espionage group. The detection is based on unique ASCII strings and a PE file signature, with a file size limit of under 2000KB.
  Updated-Date: '2024_08_07'
Dubnium_Sample_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 682a1fab7f37077720d0652e2920a4dd
  Ruleset: securityonion-yara
  Summary: 'This rule detects a specific malware sample referenced in the Dubnium Report. It identifies the malware by checking for certain string patterns: ":*:::D:\\:c:~:" and "SPMUVR," both in full word and ASCII format. Additionally, it ensures that the file is a PE executable (indicated by the "0x5a4d" byte sequence at the beginning of the file) and that the file size is less than 2000KB.'
  Updated-Date: '2024_08_07'
Dubnium_Sample_3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 667fa87ac059c2b57d72825130b9cdd4
  Ruleset: securityonion-yara
  Summary: This rule detects a malware sample associated with the Dubnium cyber espionage group, documented in the Dubnium Report. The rule identifies specific file manipulation commands and strings within a file, such as copying files, deleting files using force, and conditional existence checks. It looks for multiple textual patterns that indicate the presence of the malicious activities typically performed by Dubnium-related malware, including handling of shortcut (.lnk) files and specific keywords like "Dropped." The rule targets executable files smaller than 2000KB.
  Updated-Date: '2024_08_07'
Dubnium_Sample_5:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: fb9a75be075e68269af60f8cc4cb40c7
  Ruleset: securityonion-yara
  Summary: This rule detects a specific sample referenced in the Dubnium Report. It identifies files based on various SHA-256 hashes and specific ASCII string patterns. The detection criteria include ensuring that the file starts with the "0x5a4d" signature, which is typical for executable files, and that the file size is less than 9MB. This rule helps in detecting related samples based on predefined hash values and string patterns indicative of the Dubnium malware.
  Updated-Date: '2024_08_07'
Dubnium_Sample_6:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7ee198123ec13e232b4a4fbd445962d8
  Ruleset: securityonion-yara
  Summary: This rule detects a sample associated with the Dubnium malware, as detailed in the Dubnium Report. It identifies the malicious sample based on specific string patterns. The strings include a combination of alphanumeric characters and special symbols, and two instances of obfuscated strings. The malware sample is further verified by checking its file size to ensure it is below 4000KB, and confirming that the file starts with the 'MZ' header typically found in executable files. Detection is based on the presence of all specified patterns.
  Updated-Date: '2024_08_07'
Dubnium_Sample_7:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 50491a8b8b76ba94b5c6c931a3a1026f
  Ruleset: securityonion-yara
  Summary: This rule detects a particular sample mentioned in the Dubnium Report. It identifies the presence of this sample by checking for specific file hashes and string patterns within files smaller than 9000KB. The file must begin with the hexadecimal value 0x5a4d to trigger this detection.
  Updated-Date: '2024_08_07'
Dubnium_Sample_SSHOpenSSL:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1c0574a3e3b94725fad162798a2e105f
  Ruleset: securityonion-yara
  Summary: This rule detects a sample mentioned in the Dubnium Report, specifically targeting a file associated with SSH key generation and OpenSSL fatal errors. The detection is based on identifying exact matches to specific hash values, strings indicating "sshkeypairgen.exe," and OpenSSL fatal error messages. The rule applies to files starting with the magic number 0x5a4d and ensures the file size is below 9000KB.
  Updated-Date: '2024_08_07'
Duqu1_5_modules:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f3e41c0c7cb069161b2f3f3079bd6d67
  Ruleset: securityonion-yara
  Summary: 'This rule detects the presence of Duqu 1.5 modules by identifying specific string patterns and byte sequences. It looks for the format string "%s(%d)disk(%d)fdisk(%d)," a wide string "\\Device\\Floppy%d," and another wide string "BrokenAudio." Additionally, the rule checks for two distinct byte sequences: one starting with "81 3F E9 18 4B 7E" and the other with "81 BC 18 F8 04 00 00 B3 20 EA B4." Duqu 1.5 is a version of the Duqu malware, which is known for espionage and collecting information from targeted systems.'
  Updated-Date: '2024_08_07'
Duqu2_Generic1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 15f487691d46f42fe89e45246fab2fe8
  Ruleset: securityonion-yara
  Summary: This rule detects the Duqu 2 malware, known for its advanced persistence mechanisms and targeting capabilities. Duqu 2 is related to the Duqu family of malware and has been involved in sophisticated espionage operations. The rule identifies specific strings and checksums associated with the malware, ensuring detection of its presence based on unique identifiers such as "Global\\{B54E3268-DE1E-4c1e-A667-2596751403AD}" and API function calls like "SetSecurityDescriptorSacl". It verifies that the file begins with the standard 'MZ' header and is under 150KB in size, encompassing all defining characteristics to assert its detection.
  Updated-Date: '2024_08_07'
Duqu2_Sample1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8106105738f48c32b99bf8718b61ed91
  Ruleset: securityonion-yara
  Summary: This rule detects the Duqu 2 malware, a sophisticated cyberespionage tool that shares features with IronTiger malware and Derusbi. The rule triggers upon finding a specific SQL query string in a binary file, a reference to "MSI.dll", and verifying that the file is an executable with a certain size constraint. The rule also includes several file hashes associated with known Duqu 2 samples for cross-matching purposes.
  Updated-Date: '2024_08_07'
Duqu2_Sample2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0e6692c47c4d8aa4f0c135a435291184
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of Duqu2 malware by identifying unique string patterns and specific hash values associated with known Duqu2 samples. It checks for particular ASCII string sequences within executable files that match the signs of Duqu2 and also verifies that the file size is less than 50KB. Additionally, the executable files must have a specific header value to confirm the detection.
  Updated-Date: '2024_08_07'
Duqu2_Sample3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 05ab90c72b1e06aea33c61d230533ee2
  Ruleset: securityonion-yara
  Summary: This rule detects Duqu2 malware by identifying specific patterns within files. It looks for an executable file marker (0x5a4d), ensures the file size is less than 50KB, and searches for a specific wide string pattern related to SQL queries within the file contents.
  Updated-Date: '2024_08_07'
Duqu2_Sample4:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1364a85411574795d275e1049969f4e0
  Ruleset: securityonion-yara
  Summary: This rule detects the Duqu2 malware by identifying specific database queries and string patterns used by the malware. It looks for the presence of certain SQL queries that interact with tables such as 'Binary' and 'CustomUserAccounts', which involve retrieving data, usernames, passwords, and attributes. Additionally, it searches for the string "ProcessUserAccounts". The rule is designed to trigger based on either the presence of these specific queries and strings or by identifying a file with a certain size and format.
  Updated-Date: '2024_08_07'
Duqu2_UAs:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: af81764c4a62b1f1094288865bbbf1a4
  Ruleset: securityonion-yara
  Summary: This rule detects the Duqu 2 malware by identifying specific user agents within the executable file. The rule looks for user agent strings associated with various browsers such as Firefox, Chrome, and Internet Explorer. These strings include certain details like the browser type and version, operating system, architecture, and additional parameters indicative of the Duqu 2 malware. The detection criteria include ensuring the file starts with the 'MZ' header, confirming it's an executable, and checking the file size to be less than 800KB while matching all specified user agent strings.
  Updated-Date: '2024_08_07'
DxShell_php_php:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2e869f09613464b32561c7082924c94c
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a potentially malicious PHP script named "DxShell" that may be used for executing PHP code through eval statements. The specific indicators include printable strings typically used for generating HTML output and tips on how to view the file in a specific manner.
  Updated-Date: '2024_08_07'
Dx_php_php:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f75ac7633845e3683ab38a645646c7d6
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific PHP file that could potentially belong to a malicious actor or be used in an unauthorized manner. It identifies characteristic strings within the file, such as those involving HTML links for viewing files, definitions of TCP port services, and random number generation combined with HTTP server headers. These strings can help in recognizing PHP scripts that might be used for suspicious activities.
  Updated-Date: '2024_08_07'
EFSO_2_asp:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 99a2f6467e59689408a4794efaf3d16d
  Ruleset: securityonion-yara
  Summary: 'This rule detects the presence of a file named "EFSO_2.asp.txt" by searching for specific strings within the file. It triggers if at least two of the identified strings are found. The first string is "Ejder was HERE," and the second is a complex sequence of characters: "*~PU*&BP[_)f!8c2F*@#@&~,P~P,~P&q~8BPmS~9~~lB~X`V,_,F&*~,jcW~~[_c3TRFFzq@#@&PP,~~." The rule aims to identify files that may be associated with specific custom content or signatures, likely indicative of a unique marker or a form of obfuscation.'
  Updated-Date: '2024_08_07'
EQGRP_1212:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ae2ecb3aef0c6578169be69e84b589b5
  Ruleset: securityonion-yara
  Summary: This rule detects a tool from the EQGRP toolset specifically associated with the file named "1212.pl". It identifies distinctive strings in the file, such as variable assignments and functions related to parsing and converting hexadecimal values to ports, as well as certain error messages regarding invalid ports. The detection is based on the presence of these strings within files smaller than 6KB.
  Updated-Date: '2024_08_07'
EQGRP_1212_dehex:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 04abad68e9a76a185e9f02d705cc1b61
  Ruleset: securityonion-yara
  Summary: This rule detects a specific tool from the EQGRP toolset, particularly from files named 1212.pl and dehex.pl. The rule identifies strings within a file that indicate error messages related to invalid addresses, issues with filename or hex representation arguments, and operations involving byte tables and IP address conversion. The presence of specific patterns related to these functionalities, combined with the file size being less than 6 KB, triggers detection.
  Updated-Date: '2024_08_07'
EQGRP_BARPUNCH_BPICKER:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8eea1ff7065de8dcede90ec440b80d50
  Ruleset: securityonion-yara
  Summary: This rule detects specific strings and conditions associated with the EQGRP Toolset Firewall, particularly from files named BARPUNCH-3110 and BPICKER-3100. It identifies command patterns and status messages used by the toolset, such as those related to command execution parameters, module persistence, and logging directories. The rule checks for specific keywords and phrases in the target file to determine if it relates to the identified EQGRP tools, looking at both the file's signature and its contents while ensuring the file size is under 6000KB.
  Updated-Date: '2024_08_07'
EQGRP_BBALL:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: cad813a66371a92cf62aeef584a3c483
  Ruleset: securityonion-yara
  Summary: This rule detects the EQGRP Toolset Firewall file named BBALL_E28F6-2201.exe, associated with the EQGRP (Equation Group) malware. It identifies specific strings within the file including paths and function names related to BIOS modules and cmos read operations, such as "Components/Modules/BiosModule/Implant/E28F6/../e28f640j3_asm.S" and "handler_readBIOS". Additional strings indicate functionality for reading BIOS and performing checksum operations. The detection condition is based on specific file properties and the presence of multiple identifying strings, ensuring accurate identification of the tailored malware component.
  Updated-Date: '2024_08_07'
EQGRP_BBALL_M50FW08_2201:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 21bd2e20366b55e2371f38c92088eefa
  Ruleset: securityonion-yara
  Summary: This rule detects an EQGRP (Equation Group) toolset firewall file named "BBALL_M50FW08-2201.exe." It identifies the file by looking for specific patterns within its contents, including the strings ".got_loader," "LOADED," "pageTable.c," "_start_text," "handler_readBIOS," and "KEEPGOING" in combination with a particular file size and header value. The file size must be under 40KB, and the header must match a specific hexadecimal value to trigger detection.
  Updated-Date: '2024_08_07'
EQGRP_BBANJO:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2cbd47f7aa7710473a40d80ac96a5006
  Ruleset: securityonion-yara
  Summary: This rule detects a specific executable file named BBANJO-3011.exe associated with the EQGRP Toolset Firewall. The detection is based on multiple unique ASCII string patterns found within the file, including terms like "get_lsl_interfaces," "encryptFC4Payload," ".got_loader," "beacon_getconfig," "LOADED," "FormBeaconPacket," and "beacon_reconfigure." Additionally, the file must have a size of less than 50KB and a certain header value at the beginning of the file to match the rule.
  Updated-Date: '2024_08_07'
EQGRP_BFLEA_2201:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9b0a7131c881d9549981b847460124ff
  Ruleset: securityonion-yara
  Summary: This rule detects a specific EQGRP toolset file known as BFLEA-2201.exe, which is associated with firewall operations. The identification is based on several unique strings found within the file, such as ".got_loader", "LOADED", "readFlashHandler", "KEEPGOING", "flashRtnsPix6x.c", "fix_ip_cksum_incr", and "writeFlashHandler". The rule utilizes these characteristics to ascertain the presence of the file, provided its size is less than 30KB and either a combination of these patterns or all of them are present.
  Updated-Date: '2024_08_07'
EQGRP_BICECREAM:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 46ffbcc0c586a8f847128deafc88a0da
  Ruleset: securityonion-yara
  Summary: This rule detects a specific EQGRP toolset firewall file known as BICECREAM-2140 by looking for unique string patterns within files of up to 5000KB in size. The rule identifies several distinctive ASCII strings related to error messages, command execution details, script execution on specific NetScreen devices, and execution confirmation prompts. These strings suggest activities like connecting to a target device, validating command data sizes, and executing scripts or code with specified arguments. Such patterns are characteristic of this particular malware or tool, enabling its detection through these identifiable text sequences.
  Updated-Date: '2024_08_07'
EQGRP_BLIAR_BLIQUER:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8c6cf65ef2ba81f84084fe988a57c804
  Ruleset: securityonion-yara
  Summary: This rule detects EQGRP toolset firewall activity by identifying specific indicative strings and file patterns consistent with the BLIAR and BLIQUER tools. It looks for prompts and messages related to implant activation, absence, and interaction, such as "Do you wish to activate the implant that is already on the firewall?" and "There is no implant present on the firewall." Additionally, it searches for references to files and functions associated with the persistent backdoor (PBD) like "PBD_GetVersion" and "pbd/pbdEncrypt.bin." This rule aims to catch traces of these EQGRP tools based on the presence of these specific strings and patterns within the file.
  Updated-Date: '2024_08_07'
EQGRP_BPATROL_2201:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 816f901259ed0a679c967b13f1e865f5
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific tool related to the EQGRP Toolset Firewall, identified as BPATROL-2201.exe. It identifies this file by its unique characteristics, including certain strings within the file's code such as "dumpConfig," "getstatusHandler," ".got_loader," "xtractdata," and "KEEPGOING." Additionally, the file has a specific hash value and must meet certain conditions related to its file format and size, ensuring that the detection is accurately focused on this particular tool.
  Updated-Date: '2024_08_07'
EQGRP_BPIE:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 074a0226150f2029a505cd3e2999137d
  Ruleset: securityonion-yara
  Summary: This rule detects the EQGRP Toolset's firewall component identified by the executable file "BPIE-2201.exe." It searches for specific strings such as "profProcessPacket," ".got_loader," "getTimeSlotCmdHandler," "getIpIpCmdHandler," "LOADED," "profStartScan," "tmpData.1," and "resetCmdHandler" within files smaller than 70KB. The rule triggers when at least six of these distinctive strings are present and verifies the file's initial bytes to match specific values.
  Updated-Date: '2024_08_07'
EQGRP_BUSURPER_2211_724:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 88ec42180a285e897ce8fbebe495938b
  Ruleset: securityonion-yara
  Summary: This rule detects the EQGRP Toolset Firewall file known as "BUSURPER-2211-724.exe." The detection strings include specific terms such as ".got_loader," "_start_text," "IMPLANT," "KEEPGOING," and "upgrade_implant," all of which must be present in the file for the rule to trigger.
  Updated-Date: '2024_08_07'
EQGRP_BUSURPER_3001_724:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e2742be0c6ea28c1fa4b697b72ecb453
  Ruleset: securityonion-yara
  Summary: This rule detects a file named BUSURPER-3001-724.exe, which is part of a toolset associated with EQGRP (Equation Group). The detection is based on specific strings within the executable such as "IMPLANT," "KEEPGOING," and "upgrade_implant." Additionally, the rule checks that the file has a particular signature and size constraints, ensuring that the file is under 200KB.
  Updated-Date: '2024_08_07'
EQGRP_BananaAid:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6742846a07886a5c48971932aa0de1d9
  Ruleset: securityonion-yara
  Summary: This rule detects specific text strings associated with the EQGRP BananaAid firewall tool from their toolset. It looks for phrases like instructions to delete a key in the ~/.ssh/known_hosts file on a Linux box, scp commands, and references to a clean bootloader version, indicating the presence of this software.
  Updated-Date: '2024_08_07'
EQGRP_BananaUsurper_writeJetPlow:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: defa60943938225b4f05dcb1ec0f107d
  Ruleset: securityonion-yara
  Summary: This rule detects elements related to the EQGRP Toolset Firewall, specifically from files named BananaUsurper-2120 and writeJetPlow-2130. It identifies indicators such as specific error messages and implant version-specific values. The condition checks for files with a specific header value, a file size less than 2000KB, and the presence of one or more distinctive string patterns within the files.
  Updated-Date: '2024_08_07'
EQGRP_BpfCreator_RHEL4:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 123c2493b400fcd351151bbdc35944d1
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the EQGRP Toolset's BpfCreator-RHEL4 file. It identifies specific strings associated with this tool, which is used for firewall operations and handling packet capture files. Key indicators include error messages related to reading dump files, handling truncated files, unsupported link-layer types in saved files, and device support issues for certain Data Link Types (DLTs). The rule targets files with a specific binary signature and size constraints to accurately identify the BpfCreator-RHEL4 file.
  Updated-Date: '2024_08_07'
EQGRP_EPBA:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9a6c3efe7035f74f6320ae1fe51c04dd
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the EQGRP toolset firewall EPBA.script, associated with Epicbanana and related tools. The rule identifies specific command-line strings used in the script, including options for target IP addresses, protocols such as SSH, usernames and passwords, destination ports, and specific target versions of PIX or ASA devices. It also looks for other recognizable script components like local and remote port specifications, and mentions of BananaGlee, a part of the installation process. The detection condition includes checks for file size and the presence of specific strings to identify the malicious activity.
  Updated-Date: '2024_08_07'
EQGRP_Extrabacon_Output:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 80b9e6e90d1b325a705e964a8aac26a4
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the Extrabacon exploit output associated with the EQGRP Toolset Firewall. It identifies specific ASCII strings that are likely to appear in outputs or logs, such as messages relating to SNMP responses and various stages of exploit generation and execution, including payload building and execution commands like "extrabacon" and "AAAADMINAUTH_ENABLE". These indicators help to recognize activities tied to the Extrabacon exploit targeting firewall software.
  Updated-Date: '2024_08_07'
EQGRP_Implants_Gen1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ee91374875880086f4678b06049a896f
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the EQGRP Toolset Firewall by identifying specific string patterns in executable files that pertain to its operation. These strings include warnings about sessions not being closed, processing of EXEC packets, failure to insert commands into lists, sending excessive data, payload size issues, and unknown received packets. Such detections are targeted at identifying specific anomalies in data handling and packet processing, indicative of the EQGRP firewall toolset's operations. The rule applies to executable files of less than 6000KB in size.
  Updated-Date: '2024_08_07'
EQGRP_Implants_Gen2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 144a99bb5db0e30678b7bd1ab15938bb
  Ruleset: securityonion-yara
  Summary: This rule detects specific strings and patterns associated with the EQGRP toolset, which pertains to firewall-related operations. The rule monitors for phrases indicative of module persistence activities, such as success and failure messages related to writing or removing persistence files, as well as errors encountered during these processes. Additionally, it looks for command-line structures, interface information retrieval attempts, and specific error messages, ensuring robust identification by matching a combination of these textual patterns within files smaller than 3000KB.
  Updated-Date: '2024_08_07'
EQGRP_Implants_Gen3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 54eb6faabcf56e2138f639eac0454d75
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the EQGRP Toolset Firewall by identifying specific strings within files smaller than 6000KB. These strings include error messages related to receiving an error from the target, issues fetching the address for the get_uptime_secs function for the OS version, and failures in the upload, activate, de-activate, remove, or cmd functions. The rule uses a combination of these string detections and file size checks to identify the firewall toolset developed by the EQGRP (Equation Group).
  Updated-Date: '2024_08_07'
EQGRP_Implants_Gen4:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a0a9d9a05732554a7c19192d0f373de6
  Ruleset: securityonion-yara
  Summary: This rule detects the EQGRP toolset targeting firewall software, identifying specific files associated with designated hashes. It looks for strings related to command execution and domain beaconing activities, specifically targeting Cisco PIX and ASA devices. The conditions include checks on file signature and size, ensuring the presence of key strings before flagging the file as malicious.
  Updated-Date: '2024_08_07'
EQGRP_Implants_Gen5:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 446445f2920b4055f3b87439a0f02628
  Ruleset: securityonion-yara
  Summary: This rule detects the EQGRP Toolset Firewall, which is associated with multiple specific file hashes and textual patterns. It identifies this firewall by checking for certain ASCII strings, such as error messages about module and implant compatibility and specific log file naming formats. The condition also includes a check for a specific value pattern at the beginning of the file.
  Updated-Date: '2024_08_07'
EQGRP_Implants_Gen6:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: aa5203c7d2b32198b9dd4bf16cb250d1
  Ruleset: securityonion-yara
  Summary: This rule detects a specific toolset related to EQGRP, known as the EQGRP Toolset Firewall. The detection focuses on particular string patterns such as error messages, command-related functions, and module interface-related terms within files that are less than 6000KB in size. The rule targets unique textual markers including "pixSecurity - Improper number of bytes read in Security/Interface Information," "showCommands," and "killCmdList," among others, to identify instances of suspected malicious activity or unauthorized security manipulation within the toolset's scope.
  Updated-Date: '2024_08_07'
EQGRP_MixText:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: dc8895a5405890c9ad8e8179d82cd837
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the "MixText.py" file, which is part of the EQGRP toolset used for firewall management. It identifies the file by looking for the specific string "BinStore enabled implants." in its content.
  Updated-Date: '2024_08_07'
EQGRP_RC5_RC6_Opcode:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3ff68ad491bb52f334ead6290f1fc783
  Ruleset: securityonion-yara
  Summary: This rule detects a specific operation sequence used in the EQGRP Toolset Firewall related to RC5 and RC6 opcodes. It looks for a unique sequence of assembly instructions that manipulates values in registers, which serves as an indicator of the presence of this particular toolset. The specific instructions include movement, subtraction, storage, incrementation, and comparison operations, which are characteristic of the EQGRP's coding practices.
  Updated-Date: '2024_08_07'
EQGRP_SecondDate_2211:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: bc65c10b812bd7e532b91b2f15a4d41e
  Ruleset: securityonion-yara
  Summary: This rule detects a specific file named "SecondDate-2211.exe" that is part of the EQGRP Toolset Firewall. The rule identifies this executable by checking for unique string patterns within the file, such as "SD_processControlPacket," "Encryption_rc4SetKey," and ".got_loader." Additionally, it searches for HTTP GET requests typically used in web traffic. The file is verified by matching against a specific hash and checking that its filesize is below 200KB, along with ensuring the correct file header.
  Updated-Date: '2024_08_07'
EQGRP_StoreFc:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ef671a25fa71fbc974d3dd0cf4250266
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the EQGRP toolset firewall component, specifically the file StoreFc.py. The file is identified by specific strings, including usage instructions referring to argument inputs for configuration and implant files, as well as an exception message indicating the necessity of supplying both file types. Additionally, the rule looks for a distinctive comment within the script mentioning its use as a wrapper for Store.py by "FELONYCROWBAR."
  Updated-Date: '2024_08_07'
EQGRP_Unique_Strings:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ff7b63089991babeb25f88860db846bc
  Ruleset: securityonion-yara
  Summary: 'This rule detects unique strings associated with the EQGRP toolset, particularly targeting firewall-related components. It identifies the presence of specific substrings, such as "/BananaGlee/ELIGIBLEBOMB" and a message indicating the necessity for protocol specification as either HTTP or HTTPS, for example, "Protocol must be either http or https (Ex: https://1.2.3.4:1234)".'
  Updated-Date: '2024_08_07'
EQGRP_bc_parser:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 02f88340fef8df568e15f25e6f067512
  Ruleset: securityonion-yara
  Summary: "This rule detects a tool called \"bc-parser\" from the EQGRP toolset. It specifically targets files that exhibit certain characteristics, such as specific ASCII strings indicating the tool\u2019s examination of a target's susceptibility to \"FALSEMOREL.\" The detection relies on recognizing these strings and a specific file format identifier at the beginning of the file."
  Updated-Date: '2024_08_07'
EQGRP_bo:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 062b4d434ec6ac256e2fc7c83838f2a3
  Ruleset: securityonion-yara
  Summary: This rule detects the EQGRP Toolset Firewall file, focusing on specific filename and error messages. It identifies strings related to errors opening a file, starting the main library of the GNU C Library (GLIBC), displaying serial numbers, error messages from GLIBC, and mapping memory errors. The detection targets executable files smaller than 20KB.
  Updated-Date: '2024_08_07'
EQGRP_callbacks:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 70004d7bfd9f5ef13c9426c79279b54c
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of specific callback addresses associated with the EQGRP Toolset Firewall. The focus is on identifying traffic or connections to the IP address "30.40.50.60" on port "9342," which is relevant to certain known firewall operations.
  Updated-Date: '2024_08_07'
EQGRP_config_jp1_UA:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8c54a2af4d016e15e96815ca66450a5c
  Ruleset: securityonion-yara
  Summary: This rule detects a specific configuration file used by the EQGRP Toolset Firewall, named "config_jp1_UA.pl". The detection focuses on identifying strings within the file that are indicative of configuration settings for a JETPLOW Userarea file. Key indicators include the presence of text outlining the program's purpose, error messages related to implant configuration, operational assumptions about directory paths, and default IP addresses for beacon destinations.
  Updated-Date: '2024_08_07'
EQGRP_create_dns_injection:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: faea21bd50017b122207fc18c1487639
  Ruleset: securityonion-yara
  Summary: This rule detects the EQGRP Toolset Firewall's file named "create_dns_injection.py." It identifies specific string patterns that indicate DNS manipulation activities, such as references to hostnames and CNAME records linked to potentially malicious domains. The rule searches for content suggesting DNS hijacking attempts or configuration alterations involving known suspicious domains.
  Updated-Date: '2024_08_07'
EQGRP_create_http_injection:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c2ad07e365237974fc2154355baf599e
  Ruleset: securityonion-yara
  Summary: This rule detects the EQGRP toolset component "create_http_injection.py," used in firewall configurations. It identifies specific strings within the script, such as references to SECONDDATE, an output filename instruction, HTML content for reloading a web page via an iframe, and version and usage information for the script. This detection is triggered if the file begins with specific hex values, is smaller than 3KB, and contains certain unique strings, ensuring accurate identification of this particular tool.
  Updated-Date: '2024_08_07'
EQGRP_dn_1_0_2_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 857a9982c31881547e7c6a714dc9fdda
  Ruleset: securityonion-yara
  Summary: 'This rule detects a specific tool from the EQGRP toolset, targeting the file named dn.1.0.2.1.linux. The identification is based on certain unique strings within the file, such as command prompts ("Valid commands are: SMAC, DMAC, INT, PACK, DONE, GO"), error messages ("invalid format suggest DMAC=00:00:00:00:00:00"), and format specifications ("SMAC=%02x:%02x:%02x:%02x:%02x:%02x"). Furthermore, the file must meet criteria such as having a specific signature (uint16 value of 0x457f), being less than 30KB in size, and matching at least two of the specified strings.'
  Updated-Date: '2024_08_07'
EQGRP_durablenapkin_solaris_2_0_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 82f8cb4224d62bd1201a209338f034da
  Ruleset: securityonion-yara
  Summary: This rule detects the tool named "durablenapkin.solaris.2.0.1.1" from the EQGRP (Equation Group) toolset, used within Solaris operating systems. It identifies the presence of this specific tool by searching for unique string patterns related to service errors, message handling, and port definitions that are characteristic of the tool. The rule triggers if certain conditions involving these strings and file properties (such as the file size being less than 40KB and specific file header characteristics) are met.
  Updated-Date: '2024_08_07'
EQGRP_eligiblebombshell_generic:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e730657be19d5d6ceafac40e3168e383
  Ruleset: securityonion-yara
  Summary: This rule detects the EQGRP Toolset Firewall software by identifying specific string patterns within Python files named "eligiblebombshell_1.2.0.1.py." The conditions for detection include the presence of certain error logging messages in the code, combined with file size constraints. The rule checks for specific phrases such as "Perhaps you should run with --scan?" and various error logging statements. Detection is triggered if at least two of these strings are found, provided the file size is under 70KB, or if all specified strings are present regardless of the file size.
  Updated-Date: '2024_08_07'
EQGRP_eligiblecandidate:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2d3939896130efd0bee87f7b37f5f2f9
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a Python script named "eligiblecandidate.py" associated with the EQGRP Toolset Firewall. It identifies specific strings indicative of debug messages and function definitions related to building an exploit payload, suggesting functionalities used in network communications and exploit execution.
  Updated-Date: '2024_08_07'
EQGRP_epicbanana_2_1_0_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 63aa44cca683c134795bd08b52e3af8a
  Ruleset: securityonion-yara
  Summary: This rule detects specific indicators associated with the EQGRP Toolset Firewall, particularly focusing on the "epicbanana_2.1.0.1.py" file. It searches for particular error messages within the file, such as "failed to create version-specific payload" and "(are you sure you did 'make [version]' in versions?)", to identify the presence of this specific Python script used by the EQGRP toolkit.
  Updated-Date: '2024_08_07'
EQGRP_extrabacon:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 38de9586f75ff030e84d0742bbf4c235
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific EQGRP toolset component called "extrabacon," which is a Python script targeting firewall software to disable password checking and manipulate version-specific shellcode. It searches for distinctive strings related to importing shellcode, target version mismatches, and error messages within the script.
  Updated-Date: '2024_08_07'
EQGRP_false:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2c9879825aa580a0236840404d7fbdcd
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific tool called "false.exe" associated with the EQGRP toolset, which is linked to cybersecurity threat actor operations. The detection is based on a unique byte pattern within the file and other characteristics such as the file starting with the hexadecimal value 0x5a4d and having a size of less than 50KB.
  Updated-Date: '2024_08_07'
EQGRP_hexdump:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 46a4806fee1d77bd5dd38470fba0da4e
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the EQGRP toolset's firewall component by identifying a specific Python script named `hexdump.py`. It does so by looking for distinctive code snippets within files smaller than 1KB. The targeted strings include a function definition for `hexdump`, print statements that format the output in hexadecimal, and specific syntax used in the script's output function. The combination of these patterns serves to accurately identify the associated script.
  Updated-Date: '2024_08_07'
EQGRP_installdate:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d195ebb9329a541c3ff4634321c355bd
  Ruleset: securityonion-yara
  Summary: This rule detects a tool from the EQGRP toolset named "installdate.pl". It identifies specific code patterns and strings present in Perl scripts that process input related to installation dates. The detection is based on particular phrases used in the script, such as handling hex input, checking for the keyword "InstallDate," and specific print statements. The rule applies conditions to ensure the file being analyzed is less than 2KB in size and matches the defined patterns to trigger a detection.
  Updated-Date: '2024_08_07'
EQGRP_jetplow_SH:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2442c483defe9545e4b80a15fd71e0b3
  Ruleset: securityonion-yara
  Summary: This rule detects a firewall tool associated with the EQGRP toolset, specifically related to the file named "jetplow.sh." The detection relies on specific strings, including references to file paths and directories within a firewall installation structure, instructional messages for user actions, and symbolic link creation commands. These strings serve as indicators of the presence of the JetPlow software, which is used within the operational framework of the specified firewall environment.
  Updated-Date: '2024_08_07'
EQGRP_morel:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: afa875e8af11325c179d19327c7f32a8
  Ruleset: securityonion-yara
  Summary: This rule detects a specific tool named morel.exe from the EQGRP toolset. The detection is based on the presence of specific ASCII string patterns within a file smaller than 60KB that starts with the hexadecimal value 0x5a4d. This pattern suggests the file format and characteristics significant to identifying morel.exe.
  Updated-Date: '2024_08_07'
EQGRP_networkProfiler_orderScans:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f39ee6af2199f7712b469d8aa76a3173
  Ruleset: securityonion-yara
  Summary: This rule detects a specific script associated with the EQGRP Toolset, designed to manage firewall operations. The script, named networkProfiler_orderScans.sh, reorders network profiler scans to appear sequentially in the log profile and attempts to save the predefined scans directory, alerting if unsuccessful.
  Updated-Date: '2024_08_07'
EQGRP_noclient_3_0_5:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 60f757c19198e63e66553599008190ab
  Ruleset: securityonion-yara
  Summary: This rule detects the EQGRP tool named "noclient-3.0.5.3" by identifying specific ASCII strings within its code. It looks for unique phrases and commands such as connection parameters, error messages, and command-line operations that are characteristic of this particular tool. Among the targeted strings are command patterns to local addresses, network diagnostics outputs, and specific error texts. The tool's compiled binary format and size restrictions also help in the identification.
  Updated-Date: '2024_08_07'
EQGRP_pandarock:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ca6505316de52861c3bd49efdcac8dca
  Ruleset: securityonion-yara
  Summary: This rule detects the EQGRP Toolset, specifically its firewall component, using identifiable textual patterns from the files named "pandarock_v1.11.1.1.bin" and "pit." The targeted strings include messages related to command execution, script termination, command processing, command history navigation, and logging. It also identifies specific function names associated with command processing and target port handling within the software. The rule ensures detection by looking for certain error messages and operational prompts that indicate the software's presence.
  Updated-Date: '2024_08_07'
EQGRP_payload:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 870d2d2af4656847d90d7b911ff71a1d
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a Python file, referenced as "payload.py," associated with the EQGRP (Equation Group) Toolset Firewall. It specifically looks for the ASCII string "can't find target version module!" and the declaration "class Payload:" within the file, suggesting it is part of a malicious payload script.
  Updated-Date: '2024_08_07'
EQGRP_screamingplow:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 72e2986bc90e75731b8515204e156c5e
  Ruleset: securityonion-yara
  Summary: This rule detects the EQGRP Toolset Firewall specifically targeting the file "screamingplow.sh". It identifies the tool by looking for unique strings such as "What is the name of your PBD:" and "You are now ready for a ScreamPlow."
  Updated-Date: '2024_08_07'
EQGRP_shellcode:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5ab2c160afbe6dab24568b0efa449b0f
  Ruleset: securityonion-yara
  Summary: This rule detects specific patterns of shellcode associated with an EQGRP toolset, particularly found within the file named "shellcode.py." It identifies three distinct sequences of ASCII and hexadecimal representations of shellcode. The first sequence involves a post-execution code sequence, the second is related to ELF executable headers, and the third sequence contains shellcode for authentication. The condition for detection is the presence of at least one of these patterns.
  Updated-Date: '2024_08_07'
EQGRP_sniffer_xml2pcap:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: fddf4eb913647919d922d52ac6b0d4f1
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a file associated with the EQGRP toolset, specifically the sniffer_xml2pcap utility. The utility is used to convert XML files, generated by the BLATSTING sniffer module, into pcap capture files. The rule identifies the file based on specific strings, including command-line arguments for specifying source IP addresses and descriptions of the file conversion process.
  Updated-Date: '2024_08_07'
EQGRP_sploit:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5d06faf43b539b0fd5559b32927977fa
  Ruleset: securityonion-yara
  Summary: This rule detects specific strings and conditions associated with the EQGRP toolset, particularly related to a Python script named sploit.py. The defined strings include messages and debug information such as "Connecting to", overridable method declarations, handling exceptions, and printing keyboard interrupts and debug information. The rule triggers if a file starting with a specific header and size is under 90KB, and it matches at least one of the defined strings or a combination of four different strings.
  Updated-Date: '2024_08_07'
EQGRP_sploit_py:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 97efbe7dd5e54193e924095749d21b12
  Ruleset: securityonion-yara
  Summary: This rule detects a specific file named "sploit.py" associated with the EQGRP toolset, which appears to be targeting firewall systems. It looks for particular strings within the file that indicate its functionality, such as options for IP spoofing and responses concerning target crashes or health checks.
  Updated-Date: '2024_08_07'
EQGRP_ssh_telnet_29:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7a293da28940a8177e30a57546db1d44
  Ruleset: securityonion-yara
  Summary: This rule detects specific indicators associated with the EQGRP toolset firewall, focusing on activities from files named ssh.py and telnet.py. It identifies unique strings within the file, such as logged prompts, unsuccessful login attempts, command sends, and various received statuses including network address translation (NAT) results and Address Resolution Protocol (ARP) outcomes. The rule captures these elements based on specific conditions related to file size and the presence of multiple specified strings.
  Updated-Date: '2024_08_07'
EQGRP_teflondoor:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5f57bb8407e563c6b3a0385271b905aa
  Ruleset: securityonion-yara
  Summary: 'This rule detects the EQGRP tool called teflondoor.exe, which is part of the EQGRP toolset. It identifies specific strings within the executable file that indicate its presence, such as "%s: abort. Code is %d. Message is ''%s''", "no winsock", and "peer: connect." The detection criteria include the executable starting with the "MZ" header (common to Windows PE files), a file size of less than 30KB, and the presence of certain distinctive strings.'
  Updated-Date: '2024_08_07'
EQGRP_teflonhandle:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 340044e9546a59249e8d3291ec07267d
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the file teflonhandle.exe, a tool from the EQGRP toolset. It searches for specific ASCII strings within files that are less than 20KB in size and start with the "MZ" header, indicating a PE file format. Notable strings include file processing messages, a hex key input pattern, overwrite confirmations, and completion notifications indicating bytes written and file conversions.
  Updated-Date: '2024_08_07'
EQGRP_tinyexec:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6b2ffeadf544c8c263593cf2ed7c1697
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the EQGRP toolset known as "tinyexec," which is associated with firewall operations. It identifies specific hex string patterns within files smaller than 270 bytes and ensures the ELF file header starts with the appropriate bytes to confirm the file type.
  Updated-Date: '2024_08_07'
EQGRP_tinyhttp_setup:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9cdd00eba944b344928f8b728cdb4664
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a script named "tinyhttp_setup.sh" used by the EQGRP Toolset Firewall. It specifically looks for certain strings within the script, such as commands to launch a local web server that serves a page accessible via Firefox on localhost, prompt for an implant's name, terminate the thttpd service, and copy files from a specified IP address to a local flash storage. The file is also characterized by a specific starting byte sequence and a small file size of less than 2KB.
  Updated-Date: '2024_08_07'
EQGRP_tunnel_state_reader:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 526a90e81783b7dfd480cd614c54ee79
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific EQGRP toolset component called "tunnel_state_reader." This tool is associated with managing active connections for a tunnel, ensuring they are maintained by displaying a message including a timeout period. It also indicates compatibility with "BLATSTING version 1.2," suggesting its interoperability with this specific version of the software.
  Updated-Date: '2024_08_07'
EQGRP_uninstallPBD:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c9b47690fbfcf93efb03e282452b3967
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a batch file named "uninstallPBD.bat" associated with the EQGRP Toolset Firewall. It identifies specific strings within the file, including "memset 00e9a05c 4 38845b88", "_hidecmd", and "memset 013abd04 1 0d". These strings are likely indicative of commands and operations performed by the uninstall script.
  Updated-Date: '2024_08_07'
EQGRP_userscript:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 965b54e2e6bba69b20b06a76c6ce244c
  Ruleset: securityonion-yara
  Summary: This rule detects a specific toolset used by the Equation Group, focusing on a firewall configuration file named "userscript.FW". It identifies this file through a distinctive string containing a warning message about NETSCREEN firewalls and the term "BANANALIAR".
  Updated-Date: '2024_08_07'
EQGRP_workit:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 37422946ec696f407eabd093cdc1686b
  Ruleset: securityonion-yara
  Summary: This rule detects the presence or execution of the file "workit.py," which is associated with the EQGRP Toolset Firewall. It identifies specific strings used in commands within this file, such as commands to manipulate the .netrc file in the /tmp directory, commands involving the use of `wget` for data fetching, and commands for configuring FTP sessions. Additionally, it looks for traces of commands setting permissions on the .netrc file, and other related shell and CLI commands indicative of this tool's operations.
  Updated-Date: '2024_08_07'
EXPL_CVE_2021_1647_Apr21_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f30e5ad59c65ed19834e01f763f8f675
  Ruleset: securityonion-yara
  Summary: This rule detects samples that exploit CVE-2021-1647, a Microsoft Windows Defender zero-day vulnerability. The rule identifies specific binary sequences indicative of the exploit, targeting files within a size range of 10KB to 10000KB.
  Updated-Date: '2024_08_07'
EXPL_CVE_2021_31166_Accept_Encoding_May21_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 00b994d820c5866d4c697c43c2b07ac2
  Ruleset: securityonion-yara
  Summary: This rule detects a malformed "Accept-Encoding" header field, which is characteristic of an exploit targeting CVE-2021-31166. The specific pattern involves variations in the casing of "Accept-Encoding," followed by a sequence that includes certain alphabetic characters, hyphens, and spaces within specified lengths.
  Updated-Date: '2024_08_07'
EXPL_CVE_2021_40444_Document_Rels_XML:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9e5785e499f99ad4c4791f6ba4f28498
  Ruleset: securityonion-yara
  Summary: This rule detects weaponized documents that exploit CVE-2021-40444 by identifying specific patterns within the document's relationships XML. It looks for indicators such as "/relationships/oleObject" and "/relationships/attachedTemplate" in ASCII, alongside references to externally sourced content like "Target=\"mhtml:http," "!x-usc:http," and "TargetMode=\"External\"". The rule applies to files smaller than 10KB and checks if they start with the hexadecimal value 0x6D783F3C.
  Updated-Date: '2024_08_07'
EXPL_Exploit_TLB_Scripts:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d35ae8fb7af742084b5531ee9d8805a2
  Ruleset: securityonion-yara
  Summary: This rule detects malicious Type Library (TLB) files that may be delivered via Visual Studio projects. The detection is based on the presence of specific strings such as ".sct," "script," "scriptlet," "soap," and "winmgmts" within files smaller than 100KB, which start with a hexadecimal value of 0x4D534654.
  Updated-Date: '2024_08_07'
EXPL_Follina_CVE_2022_30190_Msdt_MSProtocolURI_May22:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5ae349f70c3e87350f423612dadc5412
  Ruleset: securityonion-yara
  Summary: This rule detects the malicious usage of the ms-msdt URI associated with the exploitation of CVE-2022-30190, also known as the Follina vulnerability. This vulnerability allows remote code execution through the usage of a specially crafted ms-msdt URL, potentially embedded within files of sizes ranging from 3KB to 100KB.
  Updated-Date: '2024_08_07'
EXPL_GitLab_CE_RCE_CVE_2021_22205:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b65c2b6279296523017f876d716375b9
  Ruleset: securityonion-yara
  Summary: This rule detects signs of exploitation related to a remote code execution vulnerability in GitLab Community Edition, specifically CVE-2021-22205. It identifies base64-encoded strings associated with the methods `User.find_by(username)`, `user.admin`, and `user.save!`, which could signify malicious attempts to exploit this vulnerability. These specific functions aim to manipulate user data within the GitLab application, potentially granting unauthorized admin access or saving malicious changes, which poses a significant security threat.
  Updated-Date: '2024_08_07'
EXPL_GitLab_CE_RCE_Malformed_JPG_CVE_2021_22204:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a83d47e9d95ec3cc09f5faae116004d2
  Ruleset: securityonion-yara
  Summary: This rule detects malformed JPG files that exploit an EXIF vulnerability identified as CVE-2021-22204. These files are associated with the exploitation of a GitLab vulnerability, CVE-2021-22205. The rule identifies JPG files that are less than 10KB in size and contain specific byte patterns and regular expressions indicative of this exploit.
  Updated-Date: '2024_08_07'
EXPL_HKTL_macOS_Switcharoo_CVE_2022_46689_Dec22:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1eb83412c33f05522096e9e927a9e0f6
  Ruleset: securityonion-yara
  Summary: This rule detects proof-of-concept (POC) exploits targeting a privilege escalation vulnerability, specifically CVE-2022-46689, on macOS. The rule identifies specific strings and byte patterns related to the exploitation process, including system messages indicating modified memory mappings, specific command executions, and race conditions. The described conditions also involve checks on file size to ensure relevance to the exploit scenario. The included hashes correspond to known files associated with these POC exploits.
  Updated-Date: '2024_08_07'
EXPL_JNDI_Exploit_Patterns_Dec21_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e5b7f918c838332e70514d108b80fda8
  Ruleset: securityonion-yara
  Summary: This rule detects patterns associated with the JNDI Exploit Kit in files, specifically targeting various command executions, reverse shells, and memory shells related to server software such as Tomcat, Jetty, WebLogic, JBoss, WebSphere, and Spring. Additionally, it identifies deserialization attacks involving URL DNS lookup, CommonsCollections, CommonsBeanutils, and vulnerabilities in older Java Runtime Environment versions. It also covers Tomcat and WebSphere bypass techniques that feature DNS logging, command execution, and shell uploads. The rule excludes hits if certain HTML patterns are present.
  Updated-Date: '2024_08_07'
EXPL_Keepass_CVE_2023_24055_Jan23:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ac0f4439808219c4eb6c504f0acc76de
  Ruleset: securityonion-yara
  Summary: This rule detects suspicious entries in the Keepass configuration file, which could indicate the exploitation of CVE-2023-24055. It identifies specific strings related to KeePass triggers and parameters, as well as potential signs of PowerShell execution methods that might be used to manipulate or exfiltrate data from the configuration file. Conditions are set to trigger when the file size is less than 200KB and the specified patterns are present.
  Updated-Date: '2024_08_07'
EXPL_LOG_Cacti_CommandInjection_CVE_2022_46169_Dec22_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f0ecd8c248af1360eca71232daa96c44
  Ruleset: securityonion-yara
  Summary: This rule detects potential exploitation attempts targeting the Cacti Command Injection vulnerability (CVE-2022-46169). It identifies malicious patterns in web requests to "remote_agent.php" that include common command injection strings such as "whoami," "/bin/bash," "/bin/sh," "wget," "powershell," "cmd /c," or "cmd.exe /c." These patterns indicate attempts to execute arbitrary commands on the server, which is characteristic of exploitation activity related to this specific vulnerability.
  Updated-Date: '2024_08_07'
EXPL_LOG_ProxyNotShell_OWASSRF_PowerShell_Proxy_Log_Dec22_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f9e41728052f4ca9206f3885c982b400
  Ruleset: securityonion-yara
  Summary: This rule detects traces of exploitation activity related to ProxyNotShell vulnerabilities in Microsoft Exchange Server, specifically CVE-2022-41040 and CVE-2022-41082. It searches for specific strings associated with exploitation attempts, such as paths to PowerShell within Outlook web application URLs, and certain HTTP status codes and request methods. Additionally, it filters out certain benign strings related to client information and backend probes to reduce false positives.
  Updated-Date: '2024_08_07'
EXPL_LOG_ProxyNotShell_OWASSRF_PowerShell_Proxy_Log_Dec22_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 61dd4e4baa3b4cd4d2aead4106def032
  Ruleset: securityonion-yara
  Summary: This rule detects traces of exploitation activity related to ProxyNotShell Microsoft Exchange vulnerabilities, specifically CVE-2022-41040 and CVE-2022-41082. It identifies certain patterns in HTTP requests to the Outlook Web Access (OWA) path that may indicate an attempt to execute PowerShell commands maliciously. The detection criteria include specific URL patterns and HTTP status codes, while excluding known legitimate client information strings.
  Updated-Date: '2024_08_07'
EXPL_LOG_ProxyNotShell_OWASSRF_PowerShell_Proxy_Log_Dec22_3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2bda5daaf3d39aff1e38e46fa319cc77
  Ruleset: securityonion-yara
  Summary: This rule detects traces of exploitation activity related to ProxyNotShell vulnerabilities (CVE-2022-41040 and CVE-2022-41082) in Microsoft Exchange, specifically looking for PowerShell POST requests followed by a specific HTTP status code pattern and excluding known legitimate client identifiers.
  Updated-Date: '2024_08_07'
EXPL_LOG_ProxyNotShell_PowerShell_Proxy_Log_Dec22_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b556ccde2cd5895a5802df0068fa6715
  Ruleset: securityonion-yara
  Summary: This rule detects traces of exploitation activity related to ProxyNotShell vulnerabilities in Microsoft Exchange, specifically CVE-2022-41040 and CVE-2022-41082. It identifies suspicious patterns in log files that indicate potential malicious activity using PowerShell commands combined with Kerberos authentication, and only flags these patterns if certain benign strings, such as "ClientInfo," "Microsoft WinRM Client," and "Exchange BackEnd Probes," are not present.
  Updated-Date: '2024_08_07'
EXPL_Log4j_CVE_2021_44228_Dec21_OBFUSC:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6fa912844ea97a967cfdde89a3eeb326
  Ruleset: securityonion-yara
  Summary: This rule detects obfuscated indicators in server logs that signify an attempt to exploit CVE-2021-44228, a critical vulnerability in Apache Log4j. The rule identifies various obfuscated patterns commonly used in exploitation attempts, including encoded and nested strings related to Java Naming and Directory Interface (JNDI) lookups. It specifically looks for these obfuscated indicators while ensuring they do not falsely trigger on benign HTML content.
  Updated-Date: '2024_08_07'
EXPL_Log4j_CVE_2021_44228_JAVA_Exception_Dec21_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1b71bcac93cbd7fee93eca911cfca3d8
  Ruleset: securityonion-yara
  Summary: This rule detects specific exceptions found in server logs that indicate an attempted exploitation of the Log4j vulnerability identified as CVE-2021-44228. It looks for the presence of certain error messages related to `BadAttributeValueException`, `.log4j.core.net.JndiManager.lookup`, and errors in searching for JNDI resources.
  Updated-Date: '2024_08_07'
EXPL_Log4j_CallBackDomain_IOCs_Dec21_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 851a7a9d73ca29604ff24f6930ad6b09
  Ruleset: securityonion-yara
  Summary: This rule detects indicators of compromise (IOCs) related to Log4Shell incidents that suggest exploitation attempts of the vulnerability identified as CVE-2021-44228. The rule captures specific patterns in URLs that utilize the ldap or rmi protocols in conjunction with domain names such as bingsearchlib.com and interact.sh, as well as IPv4 addresses. These URLs are often associated with malicious activities like exploitation callbacks, user agent manipulation, and other exploit-related actions.
  Updated-Date: '2024_08_07'
EXPL_MAL_MalDoc_OBFUSCT_MHTML_Sep21_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: fc70a1b593a6bd70ad3081d92495c584
  Ruleset: securityonion-yara
  Summary: This rule detects malicious Microsoft Office files that reference obfuscated MHTML content, potentially exploiting a known vulnerability identified as CVE-2021-40444. The rule triggers when it finds an XML declaration in combination with a specific encoded MHTML string within a file smaller than 25KB in size.
  Updated-Date: '2024_08_07'
EXPL_ManageEngine_CVE_2022_47966_Jan23_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e1f170a92e926a5244b92e529485ee62
  Ruleset: securityonion-yara
  Summary: This rule detects indicators of exploitation of a ManageEngine vulnerability, specifically targeting the error message related to a "Signature validation failed" exception in the SAML authentication process.
  Updated-Date: '2024_08_07'
EXPL_POC_SpringCore_0day_Indicators_Mar22_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e68b289b24c9a7e0fbca4e42c5ec9b73
  Ruleset: securityonion-yara
  Summary: This rule detects specific indicators associated with the exploitation attempts of SpringCore, particularly those found in related proof-of-concept (POC) scripts. It looks for distinct strings, including URL-encoded Java code snippets, specific command and parameter combinations (such as checking for a password parameter and executing the 'whoami' command), and patterns indicative of malicious activity within the application's class loader and resource context. These indicators collectively help identify potential exploitation activities targeting the SpringCore framework.
  Updated-Date: '2024_08_07'
EXPL_POC_SpringCore_0day_Webshell_Mar22_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b5e2eab95ef450a44bbb3233e03ad328
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a webshell that likely appears after exploitation attempts against SpringCore. It identifies malicious code snippets typically found in Proof of Concept (POC) scripts, including specific Java code patterns associated with webshell activities, such as handling input streams, checking for a password parameter, and executing system commands via runtime execution. The rule applies to files smaller than 200KB and triggers if at least one of the identified strings is found.
  Updated-Date: '2024_08_07'
EXPL_POC_VMWare_Workspace_ONE_CVE_2022_22954_Apr22:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: fff384f61537b4c6ab2bc28a53df5752
  Ruleset: securityonion-yara
  Summary: This rule detects a payload used in proof-of-concept code to exploit CVE-2022-22954, which is a server-side template injection vulnerability in VMware Workspace ONE Access's Freemarker engine. It identifies specific string patterns related to the exploitation of this vulnerability, which allows for the execution of arbitrary code through Freemarker template utilities.
  Updated-Date: '2024_08_07'
EXPL_Strings_CVE_POC_May19_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7a1b37bfdc3e6bb9c9210fe24247fe1c
  Ruleset: securityonion-yara
  Summary: This rule detects specific strings associated with a proof-of-concept (POC) exploit related to a vulnerability first noted in May 2019. It identifies strings referring to debug and release paths for a POC related to CVE-20, as well as error messages indicating allocation failures for fake tags. The detection criteria include checking for a valid PE file header and ensuring the file size is less than 400KB.
  Updated-Date: '2024_08_07'
EXPL_XML_Encoded_CVE_2021_40444:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 75415bf107c4cfc02d41556122c8dba5
  Ruleset: securityonion-yara
  Summary: This rule detects potential exploitation of CVE-2021-40444, specifically targeting the presence of XML encoding patterns. The rule aims to identify files under 500KB that contain specific XML markers and encoded representations of the term "Target" and "TargetMode" in ASCII, wide characters, HTML entities, and hexadecimal notation. This vulnerability is linked to a particular type of exploit where an attacker can execute arbitrary code by crafting a malicious document.
  Updated-Date: '2024_08_07'
EXPL_Zoho_RCE_Fix_Lines_Dec21_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1ea51b1d85968031839d7bc272246f9d
  Ruleset: securityonion-yara
  Summary: This rule detects specific log lines within Zoho software products that indicate remote code execution (RCE) fixes. It searches for instances where evidence of an RCE attack may have been silently removed, by looking for key indicators in the logs such as the string "RCEF=" and phrases indicating an active attack status ("\"attackStatus\":\"active\""). Additionally, it identifies scenarios where files supposedly deleted during the RCE fix did not have a deleted count of zero, which may suggest that the fix has removed malicious files. The rule is constrained to log files smaller than 6MB in size.
  Updated-Date: '2024_08_07'
EXPL_macOS_Switcharoo_Indicator_Dec22:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b070386176a5e4d0678e9d4b6a9c623c
  Ruleset: securityonion-yara
  Summary: This rule detects modifications indicative of the exploitation of CVE-2022-46689 in macOS systems, specifically targeting the presence of the string "auth       sufficient     pam_permit.so" in files smaller than 1KB.
  Updated-Date: '2024_08_07'
EXP_DriveCrypt_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d11b44c4f58ef97caf60485aeb29b8ce
  Ruleset: securityonion-yara
  Summary: This rule detects an exploit related to DriveCrypt, a disk encryption software. It identifies the presence of specific files such as "x64passldr.exe," "DCR.sys," and "amd64\\x64pass.sys" within an executable file smaller than 700KB. Additionally, the file must have the characteristic signature matching the specified hash and starting bytes.
  Updated-Date: '2024_08_07'
EXP_DriveCrypt_x64passldr:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f26d63ec8b3c8277dc2430ae7ece381b
  Ruleset: securityonion-yara
  Summary: This rule detects an exploit related to DriveCrypt, a software used for encrypting data on hard drives. Specific indicators include the presence of certain strings such as "\\x64\\x64passldr.pdb," "\\amd64\\x64pass.sys," and "\\\\.\\DCR," among others. Additionally, it looks for specific phrases like "Open SC Mgr Error," "thing is ok," and "x64pass." The condition to trigger detection requires that the file begins with the bytes 0x5a4d, is smaller than 200KB, and contains at least three of the specified strings.
  Updated-Date: '2024_08_07'
EXP_Libre_Office_CVE_2018_16858:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8a81a90fd657322a88a912ad6ea7a2ae
  Ruleset: securityonion-yara
  Summary: This rule detects a remote code execution vulnerability in LibreOffice associated with a crafted ODT file. The vulnerability, identified as CVE-2018-16858, is triggered by specific malicious strings within the file, such as an xlink reference pointing to a Python script and the presence of a temporary file pager string. The condition for detecting this exploit involves checking for these characteristic strings and specific XML file markers at the beginning of the document.
  Updated-Date: '2024_08_07'
EXP_potential_CVE_2017_11882:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: cc87029652cce4470a92f768d9a35d9f
  Ruleset: securityonion-yara
  Summary: This rule detects Microsoft Office documents exploiting CVE-2017-11882, a vulnerability in the Microsoft Equation Editor. It identifies the document format through specific file headers and checks for the presence of related keywords such as "Equation Native" and "Microsoft Equation 3.0". Additionally, it searches for common scripting and command execution patterns like "mshta", "http", "https", "cmd", "powershell", and ".exe". Finally, it includes specific address patterns to confirm the presence of the exploit.
  Updated-Date: '2024_08_07'
EXT_APT32_goopdate_installer:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1bd24de02d0325d0de0433ab6a4171f6
  Ruleset: securityonion-yara
  Summary: This rule detects the APT32 installer which utilizes the goopdate.dll file for side-loading malicious activities. It identifies specific patterns within the installer files, including certain hexadecimal byte sequences and API function names such as "GetProcAddress", "FindNextFileW", and "Process32NextW". The rule applies to both 32-bit and 64-bit PE files.
  Updated-Date: '2024_08_07'
EXT_APT32_osx_backdoor_loader:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: bb8104c7a259824ee345272180c70dc0
  Ruleset: securityonion-yara
  Summary: This rule detects the APT32 backdoor loader on OSX systems. The detection mechanism involves checking for specific hexadecimal patterns ($a1 and $a2) and encrypted data ($e1, $e2, $e3, and $e4) associated with known malicious activities. The encrypted data decodes to specific file paths, API names, and commands, such as the string '/tmp/panels,' the API name 'ArchaeologistCodeine,' and the command 'ifconfig -l.' This rule aims to identify traces of the APT32 group, known for using sophisticated backdoor loaders to compromise systems.
  Updated-Date: '2024_08_07'
EXT_APT_Bitter_Win32k_0day_Feb21:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9c089a0397d0848b261a1a8bda561892
  Ruleset: securityonion-yara
  Summary: This rule detects code that exploits a Windows 0day vulnerability targeted by the Bitter APT group. It identifies specific strings and hexadecimal patterns associated with the exploitation process within a file, including functions like "NtUserConsoleControl," "NtCallbackReturn," "CreateWindowEx," and "SetWindowLong." The rule checks for indications of the 0day exploit by validating the presence of these strings and at least one of several defined byte sequences, ensuring accurate detection of the malicious activity.
  Updated-Date: '2024_08_07'
EXT_HKTL_Nighthawk_RAT:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: cb109da3ba00eea87069b540e8c2e8e5
  Ruleset: securityonion-yara
  Summary: This rule detects Nighthawk RAT, a remote administration tool, by identifying specific hexadecimal patterns and file characteristics consistent with this malware. The rule checks for particular byte sequences within a file and verifies that certain sections like ".profile", ".detourc", and ".detourd" are present in the PE file structure. Additionally, it ensures the file's size is under 2MB and that it starts with the "MZ" header, typical of executable files.
  Updated-Date: '2024_08_07'
EXT_MAL_SystemBC_Mar22_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8f1e6cf7c6d98c6a89b7d0e8726d058b
  Ruleset: securityonion-yara
  Summary: This rule detects an unpacked SystemBC module that was used by Emotet in March 2022. The module is identified through specific strings including hidden PowerShell command flags, HTTP request format, and certain keywords like "BEGINDATA" and "User-Agent." It also checks for the PE file header and ensures the file size is less than 30KB.
  Updated-Date: '2024_08_07'
EXT_NK_GOLDBACKDOOR_generic_shellcode:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4e978cc285ea93498480a813553e0ce6
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of generic shellcode associated with the deployment of the GOLDBACKDOOR malware. It identifies specific sequences of bytes within a binary that are characteristic of the shellcode used to install this backdoor, thereby indicating potential attempts to introduce the GOLDBACKDOOR into a system.
  Updated-Date: '2024_08_07'
EXT_NK_GOLDBACKDOOR_inital_shellcode:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 84d62cd9109406b63281cc02a22f15a4
  Ruleset: securityonion-yara
  Summary: This rule detects the initial shellcode loader associated with deploying the GOLDBACKDOOR malware. The rule identifies specific hexadecimal byte patterns that are characteristic of the shellcode used to initialize and load the malicious functionality of GOLDBACKDOOR. These patterns include sequences related to import loaders and other critical routines that facilitate the execution of the backdoor's activities, marking its presence within a compromised system.
  Updated-Date: '2024_08_07'
EXT_NK_GOLDBACKDOOR_injected_shellcode:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 06bb786ca48c3a4eb83bfd9b7eeb4a3e
  Ruleset: securityonion-yara
  Summary: This rule detects injected shellcode associated with the GOLDBACKDOOR malware, which primarily focuses on identifying specific patterns and routines used to decode and execute the shellcode. Key indicators include a decoding routine pattern, a function call to `RtlFillMemory`, and a distinctive log file name structure. These signatures help in recognizing the presence of GOLDBACKDOOR's malicious activities.
  Updated-Date: '2024_08_07'
EXT_SUSP_OBFUSC_macOS_RootHelper_Obfuscated:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 33877951e85f96e666d6fe4cbb254d5a
  Ruleset: securityonion-yara
  Summary: This rule detects the macOS tool 'roothelper,' which is publicly available and used by the malware XCSSET. It identifies specific debug strings present when the software is compiled in debug mode, function names such as "rmarg," "chkenv," "untraceable," "arc4," "stte," and "with_file," as well as unique opcode sequences related to key functionalities like 'key,' 'stte,' and 'chkenv.' Additionally, it looks for specific 32-bit header values indicative of Mach-O binaries, ensuring that multiple patterns of debug strings, function names, and opcodes align to confirm the presence of the obfuscated 'roothelper' tool.
  Updated-Date: '2024_08_07'
EditKeyLog:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1ca1a73991240a55af86a7d2536bd7eb
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the hacktool executable file "EditKeyLog.exe" by looking for specific ASCII strings within the file. These strings include "Press Any Ke," "Enter 1 O," "Bon >0 & <65535L," and "--Choose ". The detection is based on the match of all these specified strings, which are indicative of the particular hacktool.
  Updated-Date: '2024_08_07'
EditKeyLogReadMe:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5e65a9fdaaaf881f72a672d0823d2074
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of an old disclosed hacktool set, particularly looking for a file named EditKeyLogReadMe.txt. It identifies this by searching for specific strings within the file, such as "editKeyLog.exe KeyLog.exe," "WinEggDrop.DLL," "nc.exe," "KeyLog.exe," "EditKeyLog.exe," and "wineggdrop." Detection is triggered if any three of these strings are found.
  Updated-Date: '2024_08_07'
EditServer:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c9bc6846c97eb0e31c92543334d154ea
  Ruleset: securityonion-yara
  Summary: This rule detects a disclosed hacktool named EditServer.exe, which is an old tool used to configure various server settings. The detection focuses on identifying specific strings within the executable, such as patterns related to server configuration parameters like server name, port number, and server password limits. It also looks for an identifier related to "WinEggDrop Shell Congirator." These indicators suggest the tool's purpose in setting up and managing server-related services.
  Updated-Date: '2024_08_07'
EditServer_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2681e21f6385263c13fe04034dcc0278
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a webshell associated with the file EditServer.exe by identifying specific strings within the file, such as "@HOTMAIL.COM", "Press Any Ke", and "glish MenuZ".
  Updated-Date: '2024_08_07'
EditServer_EXE:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 82cd624ae8b17fb6d603ddc2dd59bfeb
  Ruleset: securityonion-yara
  Summary: "This rule detects the presence of the file \u201CEditServer.exe,\u201D indicative of potentially malicious activity, by identifying specific strings within the file. These strings include phrases such as \"Server %s Have Been Configured,\" \"The Server Password Exceeds 32 Characters,\" and \"9--Set Process Name To Inject DLL.\" The rule ensures all these strings must be present to trigger an alert, signaling that the file might be used as a webshell or for unauthorized server configuration and DLL injection."
  Updated-Date: '2024_08_07'
EldoS_RawDisk:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e0574d189a3b0fd3cd6432c17f98888e
  Ruleset: securityonion-yara
  Summary: This rule detects the EldoS RawDisk device driver, a commercial driver used for raw disk access. Notably, it played a role in the cyber operation known as Shamoon 2.0. The detection criteria focus on specific wide, fullword strings such as "g\system32\", "ztvttw", "lwizvm", "FEJIKC", "INZQND", "IUTLOM", and "DKFKCK". It also includes particular byte sequences (e.g., 94 35 77 73 03 40 eb e9). The rule applies to files that start with the magic number 0x5a4d and are smaller than 2000KB, requiring at least four of the defined strings or patterns to match for detection.
  Updated-Date: '2024_08_07'
Elise_Jan18_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 83d4eb88db01cbc5d3b35a34586b9588
  Ruleset: securityonion-yara
  Summary: This rule detects the Elise malware, specifically targeting samples that disguise themselves as a fake Norton Security "NavShExt.dll" file. It identifies files less than 250KB in size with a specific PE import hash or containing certain strings such as "NavShExt.dll" and "Norton Security" in wide string format, and "donotbotherme" in ASCII format, beginning with the typical "MZ" header for executable files.
  Updated-Date: '2024_08_07'
Emdivi_Gen1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 98b4e7e400a4d766be4bac88b97cb840
  Ruleset: securityonion-yara
  Summary: This rule detects Emdivi malware, which is identified through specific string indicators and patterns associated with the malware's operations. Notable indicators include commands for clearing event logs, deleting temporary files, a reference to "userControl-v80.exe", and network access identifiers mimicking legitimate software behavior (like simulating an HTTP request to "http://www.msftncsi.com"). The rule also looks for traces of commands involving proxy settings, batch scripts, and configuration files. The identified binary files are compared against known hash values indicative of Emdivi malware. The executable must match the identified characteristics and be less than 800KB in size to trigger detection.
  Updated-Date: '2024_08_07'
Emdivi_Gen2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 32060f435b8d99a67733116ceb789400
  Ruleset: securityonion-yara
  Summary: This rule detects Emdivi malware, which is identified through specific strings and patterns such as references to temporary directories, executable names like "MSPUB.EXE" and "NOTEPAD.EXE," as well as specific date-time format strings. The condition checks for a particular file signature and ensures the file size is less than 1300KB, requiring at least six of the identified patterns to match.
  Updated-Date: '2024_08_07'
Emdivi_Gen4:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2d3a82c80bbb8e44b91a5bdb721c9f1c
  Ruleset: securityonion-yara
  Summary: 'This rule detects Emdivi malware, which appears to be associated with the Blue Termite Advanced Persistent Threat (APT) group. The detection criteria include specific strings related to HTTP settings and error messages such as ".http_port," "UserAgent: ", "AUTH FAILED," "INVALID FILE PATH," ".autoconfig_url," "FAILED TO WRITE FILE," ".proxy," "AuthType: ", and ".no_proxies_on." The rule triggers when the file starts with the signature ''MZ'' (indicating a Windows executable) and is smaller than 853KB, ensuring all specified strings are present.'
  Updated-Date: '2024_08_07'
Emdivi_SFX:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 48740145afa4aab64ba2caf411c9746a
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of Emdivi malware within a Self-Extracting Archive (SFX). Emdivi is a type of malware associated with the Blue Termite APT group. The rule identifies the malware by searching for specific executable file names, such as "unsecess.exe" and "leassnp.exe", and specific strings within the archive, including prompts for encrypted file passwords, comments indicating SFX script commands, and references to temporary file paths. The rule is designed to match files with a DOS MZ header and a size smaller than 740KB, ensuring an accurate detection of these malicious characteristics.
  Updated-Date: '2024_08_07'
Emissary_APT_Malware_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 67238fa68fab9403f443e8f3077ee450
  Ruleset: securityonion-yara
  Summary: This rule detects Emissary malware, specifically identifying samples known as A08E81B411.DAT and ishelp.dll. It looks for unique behaviors associated with the malware, such as command execution through "cmd.exe" and "rundll32.exe" as well as specific error messages related to file download and upload processes. The rule also captures distinct strings used by the malware and checks the presence of these within files smaller than 250KB in size.
  Updated-Date: '2024_08_07'
Empire_Agent_Gen:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e5aebda281ffddadcfee6afa0f3fecef
  Ruleset: securityonion-yara
  Summary: This rule detects components of the Empire framework, specifically the files labeled as agent.ps1. The detection logic relies on identifying specific strings within files that are associated with Empire agents, such as user-agent header modifications and agent delay calculations. The rule is designed to recognize these elements within files smaller than 100KB.
  Updated-Date: '2024_08_07'
Empire_Exploit_JBoss:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0fc10a1d146c5d29aef41c64717bd396
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the Empire exploit component specifically targeting JBoss application servers through the file named "Exploit-JBoss.ps1". It identifies unique strings within the file, such as specific URL patterns and references to JBoss service operations, indicating its exploit functionality. The rule triggers if these detectable strings appear within a file that has certain binary characteristics and is relatively small in size, highlighting attempts to exploit JBoss systems for potential unauthorized deployments.
  Updated-Date: '2024_08_07'
Empire_Exploit_Jenkins:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9d87a55696651df5924caba014a02e4f
  Ruleset: securityonion-yara
  Summary: This rule detects the Empire component referred to as "Exploit-Jenkins.ps1." It identifies specific patterns within the PowerShell file that are characteristic of commands used to exploit Jenkins via Empire. The detected strings indicate the presence of script commands, HTTP requests to a specified URL, and URL encoding of commands, which are commonly used by this exploit to manipulate Jenkins processes.
  Updated-Date: '2024_08_07'
Empire_Get_GPPPassword:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: cf117c2874245c7116cd84794646d488
  Ruleset: securityonion-yara
  Summary: This rule detects the Empire framework's component Get-GPPPassword.ps1 based on specific string patterns. The identified strings suggest that the script decodes Base64 strings, recursively searches through SYSVOL directories on Domain Controllers, and contains a function designed to decrypt a credential password from Group Policy Preferences. The conditions set for detection involve specific file characteristics, including a file size less than 30KB and the presence of certain strings.
  Updated-Date: '2024_08_07'
Empire_Get_Keystrokes:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f10728ff40597aee764f35e28521a924
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the "Get-Keystrokes.ps1" file, a component of the Empire framework. This script is used for logging keystrokes in Windows environments. The detection mechanism involves checking for specific strings within the file, including keystroke monitoring methods, and validating file characteristics such as its size and structure.
  Updated-Date: '2024_08_07'
Empire_Get_SecurityPackages:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4b1acacbba3b070d29e4f01349625b4c
  Ruleset: securityonion-yara
  Summary: This rule detects the Empire component named "Get-SecurityPackages.ps1," a PowerShell script associated with the Empire post-exploitation framework. It identifies specific strings within the file that define certain security package flags, utilizing predefined security protocol identifiers. The rule considers these strings and file characteristics such as its size and hexadecimal patterns to match and accurately determine the presence of the particular script used by Empire.
  Updated-Date: '2024_08_07'
Empire_Install_SSP:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 06bc91e97dfeb2442a286b900d7e8ec4
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the Empire component known as "Install-SSP.ps1." This specific file is associated with the Empire framework, which is often utilized for post-exploitation activities in penetration testing or cyber-attack scenarios. The rule identifies a particular string within the file that references the installation of "mimilib.dll," a known library involved in various malicious activities. The detection condition is based on the presence of this string combined with specific file characteristics.
  Updated-Date: '2024_08_07'
Empire_Invoke_BypassUAC:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7a2540737291719a3ba9040d63d7ac4e
  Ruleset: securityonion-yara
  Summary: This rule detects a PowerShell post-exploitation script named Invoke-BypassUAC.ps1, associated with the Empire framework. It specifically looks for strings within files that suggest the use of the WriteProcessMemory function from kernel32.dll, execution of hidden processes like notepad.exe, and modifications involving the Invoke-PatchDll function, particularly changing "ExitThread" to "ExitProcess". Additionally, it checks for the presence of UNICODE encoded bytes for DLL paths. The rule targets files smaller than 1200KB and triggers if at least three of these indicative strings are found.
  Updated-Date: '2024_08_07'
Empire_Invoke_CredentialInjection_Invoke_Mimikatz_Gen:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b70d59571c51f0bbc709cd2ce69c1323
  Ruleset: securityonion-yara
  Summary: This rule detects the Empire components from the files `Invoke-CredentialInjection.ps1` and `Invoke-Mimikatz.ps1`. It identifies specific patterns in the code, such as certain variable assignments and function calls, related to the `Invoke-MemoryLoadLibrary` function used for loading PE files into memory. This is typically employed by malware for executing payloads without writing them to disk, which aids in evading detection by traditional security measures.
  Updated-Date: '2024_08_07'
Empire_Invoke_DllInjection:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 61486aec49a87e7da56398e567a56f0f
  Ruleset: securityonion-yara
  Summary: This rule detects a specific component of the post-exploitation framework Empire, specifically the script file "Invoke-DllInjection.ps1". The detection is based on the presence of the string "-Dll evil.dll" and certain file characteristics, such as its file size being less than 40KB and the file header starting with the value 0x7566. This script is used for injecting DLL files into processes for malicious purposes.
  Updated-Date: '2024_08_07'
Empire_Invoke_EgressCheck:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 54d4af138d33a5574851e071ae2db06a
  Ruleset: securityonion-yara
  Summary: This rule detects a component of the Empire post-exploitation framework, specifically the file "Invoke-EgressCheck.ps1". The detection focuses on identifying a distinctive string pattern within the script that checks for outbound connections using parameters such as IP address, port, delay, and protocol. The rule ensures that the script's file type and size are as expected, further confirming its presence by matching key elements indicative of the Empire tool's methodology.
  Updated-Date: '2024_08_07'
Empire_Invoke_Gen:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e09584113d673de785c3acedc0868216
  Ruleset: securityonion-yara
  Summary: This rule detects components of the Empire framework, specifically focusing on the files Invoke-DCSync.ps1, Invoke-PSInject.ps1, and Invoke-ReflectivePEInjection.ps1. Empire is a post-exploitation and adversary emulation framework, and the rule identifies its presence by matching specific characteristic strings and certain conditions related to file properties.
  Updated-Date: '2024_08_07'
Empire_Invoke_InveighRelay_Gen:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4419f20fe375e70113baef196a1f9ab5
  Ruleset: securityonion-yara
  Summary: This rule detects a component of the Empire framework from the files Invoke-InveighRelay.ps1. Empire is a post-exploitation framework used by attackers for PowerShell agent deployment and lateral movement within a network. Specifically, it identifies strings within the file related to NTLM challenge-response elements and SMB relay activities, which are indicative of activity when the script is utilized for network exploitation through NTLM relay attacks.
  Updated-Date: '2024_08_07'
Empire_Invoke_MetasploitPayload:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b4208324346c99bb850b109ac15063c5
  Ruleset: securityonion-yara
  Summary: This rule detects the Empire component through the file named Invoke-MetasploitPayload.ps1. It identifies this specific file by looking for distinct strings that indicate its presence, such as specific PowerShell arguments and paths related to PowerShell execution. The condition for the rule includes checking the file size and verifying certain content criteria within the file.
  Updated-Date: '2024_08_07'
Empire_Invoke_Mimikatz:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1f37a9b21a54d4f776c3586079851b01
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the PowerShell post-exploitation agent, Empire, specifically targeting the file named Invoke-Mimikatz.ps1. The detection is based on specific strings within the file, such as encoded base64 byte sequences and PowerShell commands that manipulate memory and shellcode, often associated with malicious activities and credential extraction efforts. The file must be smaller than 2500KB and contain at least two of the specified strings to trigger this detection.
  Updated-Date: '2024_08_07'
Empire_Invoke_Mimikatz_Gen:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: da1fc5ba2be46b76046d5494e501eee6
  Ruleset: securityonion-yara
  Summary: This rule detects a specific component of the Empire framework, specifically the "Invoke-Mimikatz.ps1" file. It identifies the file by checking for a unique file hash and certain ASCII string sequences commonly found within the script, which is used for invoking commands related to the Mimikatz tool. The conditions for detection include verifying certain bytes at the beginning of the file and ensuring the file size is less than 4000 KB, with any of the defined strings present or all of them needed to confirm the match.
  Updated-Date: '2024_08_07'
Empire_Invoke_Portscan_Gen:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2036e3c765c45b5cc732014e15f7a0c1
  Ruleset: securityonion-yara
  Summary: This rule detects a component of the Empire post-exploitation framework, specifically targeting the files Invoke-Portscan.ps1. Empire is an open-source PowerShell and Python-based remote administration and post-exploitation framework. The rule identifies distinctive strings related to port scanning activities, such as setting hosts, threads, and timeout variables for scanning. The condition for triggering the detection involves a combination of file size constraints and the presence of specific hex values and strings in the file.
  Updated-Date: '2024_08_07'
Empire_Invoke_PostExfil:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a7f3b84478fe264ee3fb6ce2ecef1e39
  Ruleset: securityonion-yara
  Summary: This rule detects a component of Empire, specifically the PowerShell script file Invoke-PostExfil.ps1. Empire is a post-exploitation framework commonly used for penetration testing and adversary simulation. The script manages file uploads to a specified exfiltration URI, indicative of data exfiltration activities. The rule identifies this script based on specific textual signatures within the file and file size constraints.
  Updated-Date: '2024_08_07'
Empire_Invoke_PowerDump:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ced38e1f2b948553c9e6a1ff11233b89
  Ruleset: securityonion-yara
  Summary: This rule detects the Empire component, specifically the file "Invoke-PowerDump.ps1," which is associated with the PowerShell script used for post-exploitation activities by the Empire framework. The script contains specific strings related to hash dumping processes, such as obtaining a post-hashdump script, decrypting hashes, and computing RC4 keys. These characteristics help identify the use of Empire's "Invoke-PowerDump" functionality, indicating potential unauthorized access and credential dumping activities.
  Updated-Date: '2024_08_07'
Empire_Invoke_PsExec:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: bf845ca256c48d10d41358c03e5b2099
  Ruleset: securityonion-yara
  Summary: This rule detects a component of the Empire framework, specifically the file named "Invoke-PsExec.ps1." Empire is a post-exploitation and adversary simulation tool often used for penetration testing. The rule identifies the presence of this script through specific strings, such as "Invoke-PsExecCmd," a message indicating the execution of a service, and a command that references the COMSPEC environment variable and writes output to a temporary directory. This detection is based on file size constraints and specific byte patterns within the file.
  Updated-Date: '2024_08_07'
Empire_Invoke_SMBAutoBrute:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4500c8d78e8541e0dbe6d87685d3298e
  Ruleset: securityonion-yara
  Summary: This rule detects a component of the Empire framework, specifically the "Invoke-SMBAutoBrute.ps1" script, which is used for brute-forcing SMB credentials. The detection is based on specific strings found in the script, including a log message format and a function for retrieving user password attempt counts within a domain environment. The script's hash value is also used for identification.
  Updated-Date: '2024_08_07'
Empire_Invoke_SSHCommand:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5fcaf323fe5ba5bdb1fc86c0440b2748
  Ruleset: securityonion-yara
  Summary: This rule detects the Empire framework component associated with the file Invoke-SSHCommand.ps1, which is a PowerShell script utilized for performing SSH commands. The rule identifies specific strings such as a base64 encoded section, a sample command execution with SSH parameters, and an error message indicating a fault in loading a DLL file. These patterns help pinpoint the activity of the script, which is designed for command execution over SSH in network environments.
  Updated-Date: '2024_08_07'
Empire_Invoke_Shellcode:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2ccfa44358bee64eaade19c7ba207401
  Ruleset: securityonion-yara
  Summary: This rule detects the Empire framework's "Invoke-Shellcode" technique from the file Invoke-Shellcode.ps1, which is a PowerShell-based post-exploitation tool. This technique involves injecting shellcode into a remote process, enabling further actions such as creating a reverse HTTPS Meterpreter payload. Specific strings used to identify this activity include invoking shellcode into a process, allocating memory for shellcode injection, and constructing payload parameters like process IDs, hosts, and ports.
  Updated-Date: '2024_08_07'
Empire_Invoke_ShellcodeMSIL:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e4da783bbd8b31e272f874375cfeeebb
  Ruleset: securityonion-yara
  Summary: This rule detects the Empire component known as Invoke-ShellcodeMSIL.ps1. Empire is a post-exploitation framework used for executing payloads and managing compromised systems. The rule looks for specific string patterns such as "$FinalShellcode.Length," a method invocation involving shellcode, and arrays of hexadecimal values representative of machine instructions. The presence of these patterns within a file smaller than 30KB triggers detection, indicating the potential presence of the Invoke-ShellcodeMSIL.ps1 script.
  Updated-Date: '2024_08_07'
Empire_Invoke_SmbScanner:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e12430dbd7495daac30d94698d8ea518
  Ruleset: securityonion-yara
  Summary: This rule detects a file associated with the Empire framework, specifically targeting the Invoke-SmbScanner.ps1 script. It identifies the presence of this file by checking for specific ASCII strings, such as "$up = Test-Connection -count 1 -Quiet -ComputerName $Computer" and "$out | add-member Noteproperty 'Password' $Password". The rule also includes a hash value for verification purposes and ensures the file size is less than 10KB with particular header bytes. Empire is known for being a post-exploitation framework used for penetration testing and Red Team operations.
  Updated-Date: '2024_08_07'
Empire_KeePassConfig:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0de00e20f77e9ef8b99664ea93c0b3b0
  Ruleset: securityonion-yara
  Summary: This rule detects a specific component of the Empire framework, specifically a file named KeePassConfig.ps1. It looks for a unique string related to the usage of user master key files in a PowerShell script and verifies the file's characteristics, including its initial bytes and size, to identify potential matches. This detection is aimed at recognizing scripts used within the Empire post-exploitation framework, which is employed for adversary simulations, red teaming, and post-compromise operations in cybersecurity assessments.
  Updated-Date: '2024_08_07'
Empire_KeePassConfig_Gen:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 017855622d6971a6701c050d4bdb0a92
  Ruleset: securityonion-yara
  Summary: This rule detects a component of the Empire toolkit, specifically associated with files named "KeePassConfig.ps1." It identifies a PowerShell command that loads an XML configuration file for KeePass, a popular password manager, by looking for a particular string pattern within files smaller than 80KB. This string is indicative of an Empire script that processes KeePass XML data.
  Updated-Date: '2024_08_07'
Empire_Out_Minidump:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 843e08b6b8416315990f6f2e017384b3
  Ruleset: securityonion-yara
  Summary: This rule detects a component of the Empire framework, specifically a file named Out-Minidump.ps1. Empire is a post-exploitation and penetration testing framework utilized for simulating advanced persistent threat actors. The rule identifies the PowerShell script by matching specific text strings related to the script's functionality, which involves invoking the MiniDumpWriteDump function and generating dump files based on process handles and IDs.
  Updated-Date: '2024_08_07'
Empire_Persistence:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5718dad2e0ba5561b996191bdf0f91f0
  Ruleset: securityonion-yara
  Summary: This rule detects the PowerShell post-exploitation agent known as Empire, specifically focusing on the script file Persistence.psm1. The rule identifies potential malicious activities by looking for specific strings associated with persistence mechanisms in Empire, such as adding persistence script blocks, commands to remove user-level persistent payloads, and the manipulation of persistent script names for execution. The targeted file size for detection is less than 108KB.
  Updated-Date: '2024_08_07'
Empire_PowerShell_Framework_Gen1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 60c9b19c428dc9af66f362c8b227c99f
  Ruleset: securityonion-yara
  Summary: This rule detects components of the Empire framework, a post-exploitation tool commonly used for executing PowerShell scripts. It identifies specific strings related to memory manipulation and shellcode execution within a file, such as "Write-BytesToMemory -Bytes $Shellcode" and a command involving "Add-SignedIntAsUnsigned" operations associated with shellcode handling. These detections are aimed at recognizing potentially malicious activities linked to the Empire framework based on unique code patterns.
  Updated-Date: '2024_08_07'
Empire_PowerShell_Framework_Gen2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 22462da17a2966be9d1e9f8c40c925aa
  Ruleset: securityonion-yara
  Summary: This rule detects components of the Empire framework by identifying specific strings and conditions within files. Empire is a post-exploitation agent used to aid penetration testers in simulating adversary actions. The detection criteria include a check for a specific hexadecimal value at the beginning of a file, the file size being less than 4000KB, and the presence of key strings such as a reference to `DllMain` and a comment indicating shellcode.
  Updated-Date: '2024_08_07'
Empire_PowerShell_Framework_Gen3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4f88b7af6773386e06f04d0014f0a40a
  Ruleset: securityonion-yara
  Summary: This rule detects components of the Empire framework, specifically those related to PowerShell. Empire is a post-exploitation tool used for executing PowerShell agents and performing remote command execution. The rule identifies suspicious activity by looking for specific code patterns related to DLL file type checks and remote DLL injection within files smaller than 4000KB in size.
  Updated-Date: '2024_08_07'
Empire_PowerShell_Framework_Gen4:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 28ca7c9dcb8fa365656fb884657b7028
  Ruleset: securityonion-yara
  Summary: This rule detects components of the Empire framework, a post-exploitation tool used for executing PowerShell agents, which can load varied payloads and modules. The detection is based on specific PowerShell command strings and assembly instructions indicative of the Empire framework's execution process. The rule identifies these components by checking for unique textual patterns and command constructs within the code, ensuring the presence of framework-specific operations such as module handling and reflection-based assembly creation.
  Updated-Date: '2024_08_07'
Empire_PowerShell_Framework_Gen5:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d544995f59286ac22cfc8cce9194a0bb
  Ruleset: securityonion-yara
  Summary: This rule detects a component of the Empire framework, a post-exploitation tool used for penetration testing and red team engagements. The detection relies on specific strings found within the PowerShell scripts, such as certain conditional checks and assignments related to the execution arguments of reflective binaries. It also incorporates file size and file header criteria to ensure accurate identification.
  Updated-Date: '2024_08_07'
Empire_PowerUp_Gen:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 36c5d42db681e5d6b4a92cbf68db974e
  Ruleset: securityonion-yara
  Summary: This rule detects a component of the Empire framework, specifically from the PowerUp.ps1 script. It identifies suspicious behavior associated with manipulating Windows services, such as changing the binary path or pausing the service using sc.exe commands. The detection is based on specific string patterns within files under 2000KB that match well-known indicators of this Empire module's activities.
  Updated-Date: '2024_08_07'
Empire_ReflectivePick_x64_orig:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7d28b1781f58752d4894cb242ccd261e
  Ruleset: securityonion-yara
  Summary: This rule detects the Empire component named ReflectivePick_x64_orig.dll, specifically targeting a PowerShell-based post-exploitation framework. It looks for significant patterns such as the presence of "PowerShellRunner.pdb" and "PowerShellRunner.dll" strings, and the term "ReflectivePick." The rule is applied to files with a size less than 400KB and checks for a valid PE file header.
  Updated-Date: '2024_08_07'
Empire_Write_HijackDll:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1a1ba6ae6626ee9701d652b56f54f684
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific file associated with Empire, a post-exploitation framework that primarily utilizes PowerShell. It targets a script named `Write-HijackDll.ps1`. The detection is based on distinct strings such as a PowerShell command to patch DLL bytes, a specific base64 string sequence, and the conversion of this base64 string into byte array format. The condition is met if the file size is under 500KB and at least two specified strings are found within the file.
  Updated-Date: '2024_08_07'
Empire_dumpCredStore:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8d89f46bce21b9d000c3ce745a8f9dfd
  Ruleset: securityonion-yara
  Summary: This rule detects a component of Empire, specifically a PowerShell script named dumpCredStore.ps1, designed to handle credential store enumeration and dumping. It identifies specific strings related to API calls to Advapi32.dll for credential reading functions, along with messages indicating failures in enumerating the credentials store for a user. The detection is based on identifying one or all specified strings within a file smaller than 40KB in size.
  Updated-Date: '2024_08_07'
Empire_invoke_wmi:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3c289ccf6818a57309cae897a366996b
  Ruleset: securityonion-yara
  Summary: This rule detects the use of Empire, a PowerShell post-exploitation framework, by identifying specific patterns in a file named invoke_wmi.py. The detection is based on certain strings that indicate credential handling, script execution on remote hosts, and the use of secure string conversion for passwords in PowerShell. The rule triggers if the file size is less than 20KB and at least two of the specified patterns are present.
  Updated-Date: '2024_08_07'
Empire_lib_modules_credentials_mimikatz_pth:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 974861a4299b4ddeca50e91a9f4ad5ff
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a file related to Empire, which is a pure PowerShell post-exploitation agent. Specifically, it identifies the `pth.py` file used in the Empire's credential modules. This file contains code that retrieves and manipulates credentials, including user names, passwords, and other relevant security information. The rule looks for specific strings in the file, such as one that handles credentials with `self.mainMenu.credentials.get_credentials` and another that sets up a command for Mimikatz's "Pass the Hash" functionality. The detection criteria are based on file size and the presence of these targeted strings.
  Updated-Date: '2024_08_07'
Empire_lib_modules_trollsploit_message:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 87693af4b0b01407716fe83f7f32b1f7
  Ruleset: securityonion-yara
  Summary: This rule detects a file related to "Empire," a pure PowerShell post-exploitation agent. It specifically targets the file "message.py" using a combination of unique string patterns to identify it. These patterns include the construction of script commands, conditional checks on string values, error message declarations, and specific text indicating a lost contact with the Domain Controller. The detection triggers if the file size is less than 10KB and at least three of these unique strings are present.
  Updated-Date: '2024_08_07'
Empire_portscan:
  Created-Date: '2024_08_06'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 12e3e4d36703503b040ea86aed208201
  Ruleset: securityonion-yara
  Summary: This rule detects the Empire post-exploitation framework specifically by identifying the presence of the file "portscan.py," which is a PowerShell script used for network port scanning operations. The detection focuses on specific strings within the script that indicate the use of the "Invoke-PortScan" function and the formatting of scan results using "Out-String." The script retrieves information about open ports on targeted hosts and provides details about hostnames and open port numbers by joining and formatting the output.
  Updated-Date: '2024_08_06'
Empire_skeleton_key:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: fa3e70e08c1cb5e6b4a1a9607e0fbcd7
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the file `skeleton_key.py` associated with Empire, a PowerShell post-exploitation agent. It specifically looks for strings that suggest the use of the Invoke-Mimikatz command to implant a "skeleton key" and set a password for access, which is particularly relevant in domain controller environments.
  Updated-Date: '2024_08_07'
Enfal_Malware_Backdoor:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8b7fbc5ef9a9abe732fa22120c39537e
  Ruleset: securityonion-yara
  Summary: This rule detects the Enfal malware, specifically targeting its backdoor functionalities. It identifies suspicious strings such as misspelled or manipulated names and services like "Micorsoft Corportation" and "IM Monnitor Service," as well as filenames like "imemonsvc.dll" and "iphlpsvc.tmp." Additionally, the rule looks for certain keywords like "urlmon" and function names such as "XpsRegisterServer" and "XpsUnregisterServer." The presence of a specific GUID "{53A4988C-F91F-4054-9076-220AC5EC03F3}" is also scrutinized. The rule initiates detection when these conditions are matched within a file that starts with the "MZ" header, characteristic of executable files.
  Updated-Date: '2024_08_07'
EnigmaPacker_Rare:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 33a7a42438852d9c24a7c3a32c50902a
  Ruleset: securityonion-yara
  Summary: This rule detects an executable file that has been packed using the ENIGMA packer. It identifies such files by searching for specific string patterns, including "P.rel$oc$" and "ENIGMA," in the file's content. Additionally, it checks that the file starts with the "MZ" header (indicative of a Windows executable) and ensures the file size is less than 4000KB.
  Updated-Date: '2024_08_07'
Enigma_Protected_Malware:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c8e61d67e8f75c0ea3f50da3913d2f4d
  Ruleset: securityonion-yara
  Summary: This rule detects malware samples that are packed using Enigma Protector. It identifies specific hexadecimal sequences within the file and checks that the file starts with the "MZ" header, which is typically indicative of a Windows executable. Additionally, the file size must be less than 2000KB. The detection is triggered if all specified hexadecimal patterns are found in the file.
  Updated-Date: '2024_08_07'
Enigma_Protected_Malware_May17_RhxFiles:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8b9559681eb8c3a8e01969add3dd9616
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a potentially harmful file named RhxFiles.dll based on specific hexadecimal string patterns within the file. The file is identified by a particular hash value and must meet conditions such as having a specific magic number and being below a certain file size limit. The patterns used for detection include sequences of bytes that are unique to this file, helping to identify it accurately.
  Updated-Date: '2024_08_07'
EquationDrug_CompatLayer_UnilayDLL:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f243f2e0e7bcad46c3de32b5e69e6992
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the "unilay.dll" file associated with EquationDrug, a component of the Equation Group's espionage platform. It specifically searches for the string "unilay.dll" and checks if the file has a valid Windows executable header, indicated by the signature 0x5a4d.
  Updated-Date: '2024_08_07'
EquationDrug_FileSystem_Filter:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 33dc782edc4ef84c2d30e1d3ad150650
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the EquationDrug malware's filesystem filter driver, specifically targeting "volrec.sys" and "scsi2mgr.sys" files. It identifies these drivers by searching for specific strings within the files, including "volrec.sys," "volrec.pdb," and the descriptor "Volume recognizer driver."
  Updated-Date: '2024_08_07'
EquationDrug_HDDSSD_Op:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 64aabf72179a7ef90ed40e41e2b5ab7e
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the "nls_933w.dll" file associated with EquationDrug, a sophisticated espionage platform. This malware can perform operations on HDD/SSD firmware and has unique characteristics identified by a specific hash.
  Updated-Date: '2024_08_07'
EquationDrug_KernelRootkit:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: bc0d841a30eaa3501103dc18ffc9e231
  Ruleset: securityonion-yara
  Summary: This rule detects the EquationDrug kernel mode stage 0 and rootkit targeting Windows operating systems from Windows 2000 onwards. The malicious component, identified as "msndsrv.sys," modifies specific registry paths and operates under various predefined strings related to the operating system and device paths. The detection focuses on identifying unique strings within the malware that indicate its presence and activity in the system.
  Updated-Date: '2024_08_07'
EquationDrug_Keylogger:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d5a0cbf1aeb6f7440cd2c1bd7db00989
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the EquationDrug keylogger, specifically the driver named "msrtvd.sys". It identifies registry paths and device names associated with the keylogger, highlighting its attempt to monitor and capture keystroke and clipboard data on infected systems.
  Updated-Date: '2024_08_07'
EquationDrug_MS_Identifier:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: dc00cc7ea8593a52271f85b7c2f0ae52
  Ruleset: securityonion-yara
  Summary: This rule detects the use of a specific Microsoft identifier in the EquationDrug malware platform, paired with a PE timestamp later than January 1, 2000.
  Updated-Date: '2024_08_07'
EquationDrug_NetworkSniffer1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 88e002d0666ad5db990647e7dda1324c
  Ruleset: securityonion-yara
  Summary: This rule detects the EquationDrug backdoor, which is driven by a network sniffer embedded in either "mstcp32.sys" or "fat32.sys" files. It identifies specific strings related to these files, such as "Microsoft(R) Windows (TM) Operating System", "mstcp32.sys", and registry and device paths associated with these components. The rule is designed to match on key phrases that are indicative of the EquationDrug malware, which is known for its sophisticated espionage capabilities.
  Updated-Date: '2024_08_07'
EquationDrug_NetworkSniffer2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4921054f28983ce5ceb382cde0ae36e3
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the EquationDrug Network Sniffer, specifically targeting the `tdip.sys` file. It identifies various strings within the file, including references to "Microsoft(R) Windows (TM) Operating System," "IP Transport Driver," "tdip.sys," "sys\\tdip.dbg," and "dip.sys." Additionally, it matches device and DosDevice paths encapsulated by specific formatting specifiers. This helps in identifying the network sniffing capabilities utilized by the EquationDrug espionage platform.
  Updated-Date: '2024_08_07'
EquationDrug_NetworkSniffer3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d3703a8c9346ffeaf5b7ecf68b108810
  Ruleset: securityonion-yara
  Summary: This rule detects the EquationDrug espionage platform's network sniffer component, specifically targeting the driver file "tdip.sys." It identifies this malicious software by matching specific strings within the file, including references to "Corporation. All rights reserved." in a wide format, "IP Transport Driver" in a wide format, "tdip.sys" in a wide format, and "tdip.pdb" in an ASCII format.
  Updated-Date: '2024_08_07'
EquationDrug_NetworkSniffer4:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4b2dbb97160082b66a6de865a02e0ddf
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a network-sniffer/patcher malware identified as the EquationDrug, specifically focusing on the atmdkdrv.sys driver. It searches for specific strings within the system, such as references to RAVISENT Technologies Inc., common system file paths, and specific device names that are indicative of the infected driver. The targeted strings also include mentions of "CineMaster C 1.1 WDM," which suggests the driver's association with multimedia or other high-level system functions. The detection is designed to identify this malware through a combination of unique text patterns likely to be found in its code.
  Updated-Date: '2024_08_07'
EquationDrug_NetworkSniffer5:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 78f42af3d55c9bf11492e0d857d023ab
  Ruleset: securityonion-yara
  Summary: This rule detects the "EquationDrug" espionage platform's network-sniffer module. Specifically, it targets the atmdkdrv.sys driver file. The rule identifies this component by looking for specific strings within the codebase, such as references to "Microsoft(R) Windows (TM) Operating System," various registry paths, and device names associated with the driver.
  Updated-Date: '2024_08_07'
EquationDrug_PlatformOrchestrator:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9f883f5d2ee0806062858f7ca75558b2
  Ruleset: securityonion-yara
  Summary: This rule detects the EquationDrug espionage platform's platform orchestrator components, specifically targeting the files mscfg32.dll and svchost32.dll. It identifies these components by looking for specific strings associated with the Windows operating system, such as "SERVICES.EXE," "\\command.com," "Microsoft(R) Windows (TM) Operating System," and "LSASS.EXE." Additionally, it checks for the presence of "Windows Configuration Services" and "unilay.dll." This combination of strings is used to confirm the presence of these malicious components.
  Updated-Date: '2024_08_07'
EquationDrug_VolRec_Driver:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 109922dcd321f7af33b8a1ddfc6ce0ea
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the EquationDrug espionage platform, specifically focusing on a collector plugin related to the file "msrstd.sys". The rule identifies strings associated with the driver, including "msrstd.sys", "msrstd.pdb", and "msrstd driver", in both wide and ASCII formats.
  Updated-Date: '2024_08_07'
EquationGroup_Auditcleaner:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d98a85380ebbe08389b9a8b99be1cd0a
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the Auditcleaner hack tool associated with the Equation Group, a cyber threat group known for advanced cyber espionage activities. Auditcleaner is designed to manipulate audit logs on targeted systems by performing actions such as copying, truncating, and removing specific log files, as indicated by strings found in its code. This includes directives to redirect log file outputs, execute cleanup operations, and manage temporary copies of log files. This tool is part of a set of malicious software tools reportedly leaked by the group ShadowBrokers.
  Updated-Date: '2024_08_07'
EquationGroup_DUL:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1f3a1df484baa07419c9ac94d1313f27
  Ruleset: securityonion-yara
  Summary: This rule detects a hack tool associated with the Equation Group, which was leaked by ShadowBrokers and referred to as file DUL. The rule identifies the presence of specific textual strings within the file, including a usage instruction for a shellcode and a message indicating the presence of a decoder, encoded decoder, and payload. It checks for a specific file signature and ensures the file size is less than 80KB.
  Updated-Date: '2024_08_07'
EquationGroup_DXGHLP16:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 808ed993b7597d3602268d3572843691
  Ruleset: securityonion-yara
  Summary: This rule detects the EquationGroup malware, specifically targeting the file named DXGHLP16.SYS. It identifies several signatures associated with this malware, including specific strings found within the file such as "DXGHLP16.SYS", "P16.SYS", paths referencing the Windows registry and device directories, and a debug file path. Additionally, it looks for patterns indicating a TCP/IP driver. It ensures the file starts with the characteristic "MZ" header and has a size less than 200KB, indicating it is likely a Windows executable.
  Updated-Date: '2024_08_07'
EquationGroup_EquationDrug_Gen_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9bc08d4d20bb755fa7f6a7b8fe50b684
  Ruleset: securityonion-yara
  Summary: This rule detects the EquationDrug malware, which is associated with the notorious Equation Group. It identifies specific strings related to injection library failures, such as inability to get the address of functions in Kernel32.DLL, and failure to open a requested process. The detection is based on a combination of these strings and file characteristics, including a specific file header and size constraints.
  Updated-Date: '2024_08_07'
EquationGroup_EquationDrug_Gen_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a5b5ffd188cc5284c66454f53fbb6160
  Ruleset: securityonion-yara
  Summary: This rule detects the file "PortMap_Implant.dll" associated with the EquationGroup malware. It does this by checking if the file starts with the common "MZ" header signature (indicating a Windows executable) and ensuring the file size is less than 250KB. The rule then identifies specific byte patterns within the file indicative of the malware's presence.
  Updated-Date: '2024_08_07'
EquationGroup_EquationDrug_Gen_3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6394ab2bb0bbf1a4563d07c98d97937d
  Ruleset: securityonion-yara
  Summary: This rule detects the EquationDrug malware associated with the Equation Group by identifying the specific file "mssld.dll". It targets distinctive byte sequences within the file and ensures the presence of these particular patterns, coupled with a common header value and file size constraint, to ascertain the presence of the malware.
  Updated-Date: '2024_08_07'
EquationGroup_EquationDrug_Gen_4:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e5f96e99239b5dc24ea431a12b848568
  Ruleset: securityonion-yara
  Summary: This rule detects malware associated with the Equation Group, specifically targeting the file named "PC_Level4_flav_dll." It employs a series of hexadecimal string patterns, verifying their presence within files while ensuring certain criteria are met, such as a specific file signature and the file size being less than 300KB.
  Updated-Date: '2024_08_07'
EquationGroup_EquationDrug_Gen_5:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 58871d9ec7eb33893a6133be557c4002
  Ruleset: securityonion-yara
  Summary: This rule detects a specific malware file named "PC_Level3_http_dll" associated with the EquationGroup, a known cyber threat actor. The detection is based on the presence of strings within the file, such as "Psxssdll.dll", "Posix Server Dll", "itanium", and a Microsoft copyright notice. The file must also have a particular signature indicating a Windows executable and be smaller than 300KB in size.
  Updated-Date: '2024_08_07'
EquationGroup_EquationDrug_Gen_6:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e92d2d2a35daf238ab756ae452438ba2
  Ruleset: securityonion-yara
  Summary: This rule detects the EquationGroup malware, specifically the file "PC_Level3_dll_x64". It examines files that are less than 300KB in size, contain the string "Psxssdll.dll", the string "Posix Server Dll", and the string "Copyright (C) Microsoft" in full word wide format. These indicators are characteristic of the malware associated with EquationGroup, a known advanced persistent threat actor.
  Updated-Date: '2024_08_07'
EquationGroup_EquationDrug_msgkd:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d2486048fb62d85d6b5efb20028a2152
  Ruleset: securityonion-yara
  Summary: This rule detects a specific malware file named "msgkd.ex_" associated with the EquationGroup, known for its advanced cyber espionage tools and techniques. The detection relies on both unique string patterns "KEysud" and "XWWWPWS" within the file and the presence of a standard MZ header with a file size of less than 300KB.
  Updated-Date: '2024_08_07'
EquationGroup_EquationDrug_mstcp32:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 64378d69a91682ca3a32f55606eec690
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the EquationGroup malware, specifically targeting the file named "mstcp32.sys." It identifies this threat by searching for specific strings within a file, such as "mstcp32.sys," "p32.sys," and various registry and device paths like "\\Registry\\User\\CurrentUser\\" and "\\DosDevices\\%ws". Other indicators include strings like "sys\\mstcp32.dbg" and "TCP/IP driver". The rule checks for these strings in files smaller than 200KB, evaluating the presence of multiple string matches to confirm the detection. The primary purpose is to recognize and identify the malicious activity related to the EquationGroup's use of the "mstcp32.sys" file.
  Updated-Date: '2024_08_07'
EquationGroup_EquationDrug_ntevt:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3aff5fa742b4a6b685f7cc2e08364261
  Ruleset: securityonion-yara
  Summary: This rule detects a specific piece of malware associated with the EquationGroup, targeting the malicious file named ntevt.sys. It identifies the file by checking for the presence of certain strings within the file, specifically "ntevt.sys" and the file path "c:\\ntevt.pdb". The detection criteria are based on the file's format signature (indicated by the hexadecimal value 0x5a4d) and its size being less than 500KB.
  Updated-Date: '2024_08_07'
EquationGroup_EquationDrug_tdi6:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 002d629ec3d7d3d63449a759a5c5fe2b
  Ruleset: securityonion-yara
  Summary: This rule detects the malware component known as "tdi6.sys" utilized by the EquationGroup, which is a sophisticated threat actor. The rule identifies specific strings within the file, such as "tdi6.sys," "TDI IPv6 Wrapper," "Corporation. All rights reserved.," and "FailAction." It further specifies conditions related to the file's characteristics, including its size being less than 100KB and having a particular header value.
  Updated-Date: '2024_08_07'
EquationGroup_EventLogEdit_Implant:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 200ceea823964aab750274959ed64a37
  Ruleset: securityonion-yara
  Summary: This rule detects a specific malicious file named EventLogEdit_Implant.dll associated with the EquationGroup malware. It identifies the malware by matching specific strings within the file, including system registry paths, DLL references, and function names. The file must also meet certain conditions, such as having a particular file signature and being less than 100KB in size. This combination of characteristics helps accurately identify and flag the malicious file.
  Updated-Date: '2024_08_07'
EquationGroup_GetAdmin_Lp:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3e241706ac58b30becd1c64107b3cf02
  Ruleset: securityonion-yara
  Summary: This rule detects a specific file associated with the Equation Group malware, known as GetAdmin_Lp.dll. The detection is based on the presence of a particular string, "Current user is System -- unable to join administrators group," which must be found in the file in wide character format. Additionally, the file must have a specific header signature (0x5a4d) and be smaller than 300KB in size.
  Updated-Date: '2024_08_07'
EquationGroup_LSADUMP_Lp:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6d6f84b5ecfcd89919d262a35a6e9e35
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a malicious file named LSADUMP_Lp.dll associated with the EquationGroup malware. The detection is based on the file's specific hash and the presence of the string "LSADUMP - - ERROR - - Injected" within the file, in a wide string format. The rule is applicable to files that begin with the hexadecimal value 0x5a4d and have a file size of less than 300KB.
  Updated-Date: '2024_08_07'
EquationGroup_ModifyGroup_Lp:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a2fb2e7314ff63979c11df78b5a2b88b
  Ruleset: securityonion-yara
  Summary: This rule detects the EquationGroup malware associated with the file ModifyGroup_Lp.dll. It identifies the presence of specific text strings within the file, such as "Modify Privileges failed" and "Given privilege name not found." The rule applies to files starting with the hex value 0x5A4D, which signifies a Windows executable file format, and it targets files smaller than 300KB in size.
  Updated-Date: '2024_08_07'
EquationGroup_PC_Level3_http_flav_dll:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1f39c6e588f406f88ab33f2634143f76
  Ruleset: securityonion-yara
  Summary: This rule detects the EquationGroup malware specifically associated with the "PC_Level3_http_flav_dll" file. It identifies the malware by searching for specific strings such as "Psxssdll.dll", "Posix Server Dll", "itanium", "RHTTP/1.0", and a copyright notice "Copyright (C) Microsoft" within files that are less than 300KB in size and start with the hex value 0x5a4d.
  Updated-Date: '2024_08_07'
EquationGroup_PC_Level3_http_flav_dll_x64:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 681e2d983071bf096d3b94eeeada553c
  Ruleset: securityonion-yara
  Summary: This rule detects a specific malware file associated with the Equation Group, named "PC_Level3_http_flav_dll_x64." The detection is based on several identifying strings found within the file, including "Psxssdll.dll," "Posix Server Dll," ".?AVOpenSocket@@," "RHTTP/1.0," and "Copyright (C) Microsoft." The file is recognized as a potential threat due to its unique characteristics, such as its PE header signature and a file size of less than 400KB.
  Updated-Date: '2024_08_07'
EquationGroup_PC_Level4_flav_dll_x64:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: eb41fc4cc3694f240918cd9678fa286e
  Ruleset: securityonion-yara
  Summary: 'This rule detects a specific variant of EquationGroup malware identified by its association with the file named "PC_Level4_flav_dll_x64." The conditions for detection include the presence of the string "wship.dll," along with other specific ASCII text like "   IP:      " and "\\\\.\\%hs" within a file that starts with the hexadecimal value 0x5a4d and has a file size of less than 200KB.'
  Updated-Date: '2024_08_07'
EquationGroup_PC_Level4_flav_exe:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b0db9d975fb710603b9add0169155c40
  Ruleset: securityonion-yara
  Summary: "This rule detects a specific malware file associated with the Equation Group, named \"PC_Level4_flav_exe\". It identifies the malicious executable based on multiple strings found within its code, such as \"Extended Memory Runtime Process\", \"memess.exe\", \"\\\\\\\\.\\\\%hs\", \".?AVOpenSocket@@\", \"Corporation. All rights reserved.\" and \"itanium\". The detection is triggered if the file meets specific conditions, including a file size of less than 200KB and the presence of these exact strings or patterns, with the additional check that the file\u2019s initial bytes correspond to a standard executable format."
  Updated-Date: '2024_08_07'
EquationGroup_PassFreely_Lp:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c8a335dbafbbd8323123977da0c8afcf
  Ruleset: securityonion-yara
  Summary: This rule detects the EquationGroup malware file PassFreely_Lp.dll. It identifies specific malicious behavior by searching for distinct string patterns within files, such as messages related to unexpected values in memory, successful modification of Oracle process memory, and issues resetting the memory protection mask. The rule applies to files with an initial MZ header, an indicative file size of less than 300KB, and matches any one of the defined string signatures.
  Updated-Date: '2024_08_07'
EquationGroup_PortMap_Lp:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: accd47a4695ed0c49bb1af78a46a822d
  Ruleset: securityonion-yara
  Summary: This rule detects the EquationGroup malware, specifically targeting the file PortMap_Lp.dll. It identifies unique string patterns associated with the malware's operation, such as error messages related to privilege elevation, portmap termination, and invalid parameters. The detection relies on specific file header values and the size of the file, ensuring that at least two of the defined strings are present in a file smaller than 300KB.
  Updated-Date: '2024_08_07'
EquationGroup_ProcessHide_Lp:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1c5e004b5af9987ba654ad885a66aa80
  Ruleset: securityonion-yara
  Summary: This rule detects a malware component named ProcessHide_Lp.dll used by the Equation Group. It searches for specific error messages within the file, including phrases like "Invalid flag. Can only hide or unhide," "Process elevation failed," "Unknown error hiding process," "Invalid process links found in EPROCESS," "Unable to find SYSTEM process," "Process hidden, but EPROCESS location lost," and "Invalid EPROCESS location for given ID." These strings are indicative of the malware's functionality related to process manipulation and hiding techniques, aiming to identify the specific malicious DLL used by this threat group. Conditions are set to match these messages within executable files smaller than 300KB, ensuring accurate detection of the malware component.
  Updated-Date: '2024_08_07'
EquationGroup_ProcessOptions_Lp:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a29b90431ce36c31253209ac7f412b75
  Ruleset: securityonion-yara
  Summary: This rule detects the EquationGroup malware, specifically identifying a DLL file named ProcessOptions_Lp.dll. It focuses on a unique string within the file that reads "Invalid parameter received by implant" and checks for specific file attributes, such as a particular file size and a starting signature.
  Updated-Date: '2024_08_07'
EquationGroup_RunAsChild_Lp:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 09760ce3a73722fb52235b8b31e01b0f
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the EquationGroup malware file known as RunAsChild_Lp.dll. It identifies specific error messages within the file that indicate privilege elevation failures, inability to open a parent process, and invalid inputs to a function named lpRunAsChildPPC. The file must meet certain criteria, including being a Windows executable and having a size of less than 300KB, for the detection to be triggered.
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17_ActiveDirectory_Target:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1961127032de9221ac1fe57f1046f8d5
  Ruleset: securityonion-yara
  Summary: This rule detects a specific tool associated with the EquationGroup, targeting Active Directory environments. The indicators include strings related to Active Directory queries, identifying user objects by categories and user class. The condition for detection is based on the file starting with a specific signature (0x5a4d), being less than 200KB in size, and containing all defined strings.
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17_AdUser_Implant:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f18b29b6d5cd6103e456b44ec621bab4
  Ruleset: securityonion-yara
  Summary: This rule detects a specific tool used by the Equation Group, known from an April leak, by searching for two distinct strings within executable files smaller than 40KB. The first string is a specific sequence ".?AVFeFinallyFailure@@", and the second string is an LDAP query indicating the presence of an Active Directory user object.
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17_Architouch_1_0_0:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 06c890e5a815f2ddd0ac8cf42f16641b
  Ruleset: securityonion-yara
  Summary: This rule detects a specific toolset used by the Equation Group, known from the April 2017 leak. It identifies the tool by looking for the presence of a particular string, "[+] Target is %s", within files that are less than 300KB in size and have a specific header value of 0x5a4d.
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17_Architouch_Eternalsynergy_Smbtouch:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3bbf4be910e1fd6f3ce3fc1b95873e53
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of tools associated with the Equation Group, specifically targeting the Architouch, Eternalsynergy, and Smbtouch programs. It identifies these tools based on various unique strings and a specific byte sequence found in the binaries. The rule focuses on binaries starting with a particular signature (0x5a4d) and restricts its scope to files smaller than 600KB, requiring at least two string matches to confirm detection.
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17_Banner_Implant9x:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 36fae324f475212bc9c69a1ae6769b17
  Ruleset: securityonion-yara
  Summary: "This rule detects the presence of a specific toolset attributed to the Equation Group, known from the April leaks. It identifies the tool through the presence of a particular ASCII string \u201C.?AVFeFinallyFailure@@\u201D and a specific sequence of opcodes within executable files that are less than 20KB in size. The rule aims to identify binary files starting with the typical DOS header signature (0x5a4d)."
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17_DS_ParseLogs:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 243341e106a031c6dfa42d51cb7e2729
  Ruleset: securityonion-yara
  Summary: This rule detects a specific tool associated with the Equation Group, which was leaked in April. It identifies the tool by scanning for particular strings within files smaller than 100KB that begin with the "MZ" header. These strings include error messages and usage instructions related to capturing files and locating headers within them.
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17_Darkpulsar_1_1_0:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4cda0793627b6a07080baae17e46a105
  Ruleset: securityonion-yara
  Summary: This rule detects the EquationGroup Toolset, specifically a component from the DarkPulsar backdoor, by identifying error message strings related to DLL architecture mismatches and shellcode construction errors within executable files smaller than 100KB and having an MZ header signature.
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17_DiBa_Target:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 129ce1534c990db88f09a06fe956eb83
  Ruleset: securityonion-yara
  Summary: This rule detects a specific tool associated with the Equation Group, a notorious cyber-espionage group known for highly sophisticated malware. The detection is based on the presence of particular byte sequences and file characteristics, such as the file's header beginning with "MZ" and a file size less than 2000KB. The tool's detection relies on matching several defined opcode patterns.
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17_DiBa_Target_2000:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1f1181b343cc1e3a063b2586b52e251a
  Ruleset: securityonion-yara
  Summary: This rule detects a tool from the EquationGroup, a threat actor linked to cyber espionage activities, specifically targeting a leak from April 2017. It identifies the presence of this malicious tool by searching for particular ASCII strings and a series of hexadecimal patterns within executables smaller than 1000KB, which start with the header bytes `0x5a4d` indicating a Windows executable.
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17_DiBa_Target_BH:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b532de73a11bf4b13ba93daf6f5f9063
  Ruleset: securityonion-yara
  Summary: This rule detects the EquationGroup Toolset from the April 2017 leak, specifically targeting a binary with a specified hash. It identifies the presence of this toolset by searching for specific opcode sequences within an executable file smaller than 2000KB, which starts with the common 'MZ' header.
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17_DiBa_Target_BH_2000:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6d8b58781fb35547d71d0459ecce62d8
  Ruleset: securityonion-yara
  Summary: This rule detects a tool from the EquationGroup, known to be associated with an April 2017 leak. It identifies the presence of this tool by searching for specific string patterns within files smaller than 2000KB. Notable strings used in detection include a base64 encoded string "3U5gZu" and the full word "SPRQWV". The condition also checks for a specific file header value, ensuring precise identification.
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17_DllLoad_Target:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9bddd7af37158ac9cb0c923913259156
  Ruleset: securityonion-yara
  Summary: This rule detects a specific DLL file associated with the EquationGroup toolset, which was leaked in April 2017. The rule identifies the file through unique ASCII string patterns and distinctive byte sequences present within the file. The file must start with the "MZ" header signature for executable files, be smaller than 200 kilobytes, and match all defined patterns. The detection targets one particular hash value linked to the malicious toolset.
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17_DmGz_Target:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: abdde1fbc4e5604896b5a03e51391245
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of specific tools used by the EquationGroup, an advanced cyber-espionage group linked to sophisticated malware operations. The detection focuses on files smaller than 80KB which contain specific ASCII strings and a particular file header that indicates the presence of this toolset.
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17_DmGz_Target_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 05e741e254393375e7aff151202bc793
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the Equation Group's toolset linked to the April 2017 leak. The detection relies on specific string and byte patterns found within the file, such as unique string paths and precise hexadecimal sequences. Additionally, the rule targets executable files smaller than 100KB in size and verifies their structure by checking for the 'MZ' header.
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17_DoubleFeatureDll_dll_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3f100c927497d30381f3d74f44b3a083
  Ruleset: securityonion-yara
  Summary: This rule detects a specific DLL associated with the Equation Group toolset related to the April leak. It identifies the presence of the DLL by searching for particular ASCII strings within the file, such as ".dllfD," "Khsppxu," and "D$8.exe." Additionally, the file must start with the "MZ" header, indicative of executable files, and be less than 1000KB in size.
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17_Doublepulsar_1_3_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7fe14b3a2c58f5938d65898f5a3bac45
  Ruleset: securityonion-yara
  Summary: This rule detects a toolset component from the Equation Group, identified in an April leak, that interacts with the Doublepulsar malware. The detection hinges on specific textual indicators found within the file, such as messages related to pinging target architecture, sending shellcode to inject a DLL, and errors setting the shellcode file name. The file must have a "MZ" header and be less than 100KB in size.
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17_Dsz_Implant:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0957354098a54f87c90ec82af39f76f2
  Ruleset: securityonion-yara
  Summary: This rule detects a toolset from the EquationGroup, specifically targeting an implant named Dsz that was part of a leak in April. The detection focuses on Windows executable files less than 1000KB in size with the MZ header. It includes a string pattern resembling a timestamp format that is characteristic of this implant.
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17_EXPA:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: dce0fb61be59555d7382f126aab33a36
  Ruleset: securityonion-yara
  Summary: This rule detects a specific toolset attributed to the Equation Group, linked to an April leak. The detection is based on unique strings found within the tool, including indications of attacks targeting IIS 6.0, shellcode configuration errors, and specific command-line arguments related to language and service packs. The rule checks for these strings in files that begin with the 'MZ' header and are smaller than 12,000 KB.
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17_Easybee_1_0_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2cf8075cf4fe0b831c1aa6fb46e86823
  Ruleset: securityonion-yara
  Summary: This rule detects an EquationGroup tool involved in an April leak. It identifies the presence of specific strings within a file, indicating it might be one used by the EquationGroup, a sophisticated cyber-espionage group. The rule looks for a command related to message file operations and a string associated with logging out of a WebAdmin interface, signaling potential malicious activities by this toolset. The detection is limited to files smaller than 200KB and starts with a specific header signature.
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17_Easypi_Explodingcan:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c7b3ed88cc9b37336d708cb8997e512b
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a toolset associated with the Equation Group, specifically targeting files that match attributes associated with the "Explodingcan" exploit. The detection is based on specific strings indicating actions such as exploitation of the target and encoding issues with the exploit payload. The rule also checks for the specific PE file header and a file size constraint to identify the malicious payload.
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17_Eclipsedwing_Rpcproxy_Pcdlllauncher:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c48c8e47779561c2fd54d5092c992e91
  Ruleset: securityonion-yara
  Summary: This rule detects the EquationGroup toolset known as Eclipsedwing, specifically targeting the Rpcproxy component. It identifies this toolset by looking for specific strings within files smaller than 100KB, including error messages and status updates related to payload preparation, shellcode offsets, and authentication codes from exploits. The rule employs hash values to further verify the presence of this particular malware used by EquationGroup.
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17_Eclipsedwingtouch_1_0_4:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ef1999cac4a8525a6f3ff9891d16dc11
  Ruleset: securityonion-yara
  Summary: This rule detects a specific toolset used by the Equation Group, referred to as the "April Leak" which was leaked by the Shadow Brokers. The toolset is identified by specific ASCII strings indicating whether a target is vulnerable or not. It applies to executable files starting with the signature 0x5a4d and having a file size of less than 50KB.
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17_Educatedscholar_1_0_0:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 32bca81b586f3f83f9b846b67ad20c4f
  Ruleset: securityonion-yara
  Summary: This rule detects a tool from the Equation Group, associated with the April leak, by identifying specific strings within executable files smaller than 150KB. These strings include indicators like "[+] Shellcode Callback %s:%d" and "[+] Exploiting Target," suggesting the tool's functionality in shellcode callback operations and exploiting targets. The detection method includes verifying if the file begins with the "MZ" header identifier for executable files.
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17_Educatedscholartouch_1_0_0:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a4691e5972db63a7b37435c5c2a3aae1
  Ruleset: securityonion-yara
  Summary: This rule detects the EquationGroup Tool, specifically related to an April leak. It identifies specific ASCII strings within a file that indicate vulnerability checks, such as messages stating if a target is vulnerable or not. The condition for detection relies on a specific file signature and file size being less than 30KB, along with the presence of one of the specified strings.
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17_Englishmansdentist_1_2_0:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 58a8f6d10feef3913df96983f96408fd
  Ruleset: securityonion-yara
  Summary: This rule detects the EquationGroup's Englishmansdentist toolset, which was part of the April 2017 leak by the Shadow Brokers. It identifies specific plaintext strings related to credential checking and error messages associated with socket connections. The rule is triggered if these strings are found within a file smaller than 200KB that starts with the "MZ" header, indicating a Windows executable.
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17_EpWrapper:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4099778ba8d5964caa556cb18426c072
  Ruleset: securityonion-yara
  Summary: This rule detects the EquationGroup toolset, specifically targeting the April 2017 leak. It identifies the presence of the tool by searching for specific wide strings within files smaller than 20KB, such as error messages related to TCP socket addressing failures, missing 'LPStart' exports, and a specific usage message involving parameters for log directories, DLL paths, and sockets. The detection hinges on the PE file signature and the inclusion of these particular text patterns.
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17_Erraticgopher_1_0_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: aa1cfa44e02550538a308d33f10cf737
  Ruleset: securityonion-yara
  Summary: This rule detects a tool associated with the Equation Group, characterized by specific plaintext strings related to error and success messages embedded within the code. These strings include indications of issues appending shellcode buffers, payload size errors, successful exploit payload dispatch, and interaction with the Dimsvc service during an exploit request. The binary file is identified by an initial 0x5a4d magic number and a filesize below 150KB, confirming the presence of this tool.
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17_Erraticgophertouch_1_0_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 955eeaf3ab797260054e4159fc00bf66
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a toolset from the Equation Group, associated with an April leak. It specifically identifies a tool by examining certain ASCII strings within files smaller than 30KB that start with the magic number indicating an executable file. The strings include messages indicating whether a target is vulnerable or not to certain named pipe and RPC syntax conditions, which are characteristic of the tool's operation.
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17_Esteemaudit_2_1_0:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5f37b420dfe454ef8260696b8af3186f
  Ruleset: securityonion-yara
  Summary: This rule detects the Esteemaudit tool, part of the EquationGroup toolset revealed in the April leak. It identifies specific strings within files, including connection status messages and exploit function calls, in executables under 200KB in size. The tool likely targets remote connections and executes exploits on x64 architecture systems.
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17_Esteemaudittouch_2_1_0:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2ce7ddba5704a6ef0d3a483143de8eb2
  Ruleset: securityonion-yara
  Summary: "This rule detects a tool associated with EquationGroup, specifically from the April Leak, by examining files that present specific textual strings related to operation failures. The strings include error messages like \"[-] Touching the target failed!\" and \"[-] OS fingerprint not complete - 0x%08x!\u201D. It targets files smaller than 200KB with a particular header signature, identifying potential indicators of EquationGroup tool usage."
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17_Eternalromance:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 97dd5b529cc0fbdf6cf18e28bc992298
  Ruleset: securityonion-yara
  Summary: 'This rule detects the EquationGroup Toolset, specifically the Eternalromance exploit, by identifying strings associated with error messages and target architecture indicators. These include statements like "Exploit choice not supported for target OS," "Target machine out of NPP memory (VERY BAD!!) - Backdoor removed," "Error: Backdoor not present on target," and "TARGET ARCHITECTURE IS X64." The rule applies to files beginning with the magic number 0x5a4d and having a size of less than 200KB.'
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17_Eternalromance_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: bbfd8559ef17eb4e8f478061442b670b
  Ruleset: securityonion-yara
  Summary: This rule detects the EquationGroup's Eternalromance toolset, specifically targeting the presence of backdoor shellcode and an exploit attempt message within files smaller than 600KB, identified by particular ASCII strings.
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17_Explodingcantouch_1_2_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9afb33bab3765577c2867e61bf3fe776
  Ruleset: securityonion-yara
  Summary: This rule detects a specific toolset attributed to the EquationGroup, often associated with cyber espionage activities. It identifies artifacts from a leaked toolkit dating back to April 2017. It matches strings in application logs, such as error messages related to TCP connections and HTTP requests, indicating the potential presence of this sophisticated cyber tool in a system.
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17_GangsterThief_Implant:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 99c0c62ce7c1b54becd36919a21dbe8b
  Ruleset: securityonion-yara
  Summary: This rule detects an implant tool associated with the Equation Group, which is identified based on specific strings indicating errors and file statuses, such as "\\\\.\\%s:", "raw_open CreateFile error", "-PATHDELETED-", "(deleted)", and "NULLFILENAME". The rule triggers if the file being examined is a PE file (starting with the "MZ" header, identified by the value 0x5a4d) and its size is less than 300KB, matching at least three of the specified strings.
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17_Gen1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 783bd4316df60ed5fa5ae147c91f1313
  Ruleset: securityonion-yara
  Summary: This rule detects a tool associated with the Equation Group, disclosed in the April 2017 leak by analyzing specific strings within executable files smaller than 80KB. It searches for phrases related to network protocol, port targeting, account handling issues, password targeting, and CURL connection creation, indicative of the tool's functionality and behavior.
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17_Gen2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 671ae0c768309cf25965f80884a4cb7b
  Ruleset: securityonion-yara
  Summary: This rule detects a toolset associated with the Equation Group that was leaked in April 2017. It identifies specific strings and operation patterns within executable files to determine the presence of this toolset. The notable strings include messages related to password setting, SMB negotiation, payload configuration, and listener connection, suggesting the tool's functionalities in managing network interactions and executing payloads. Additionally, certain binary patterns are matched to further confirm the detection. This toolset is indicative of sophisticated offensive cyber capabilities.
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17_Gen3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ead2641eb6f054e6c459aeabe90ebf1f
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the EquationGroup Tool, which was part of an April leak. It identifies specific files based on multiple hash values and checks for certain strings within the file, such as error messages related to Kerberos ticket validation and credential type setting. It also looks for a specific byte sequence (op1) in the file, and applies its detection criteria to files that are executable (indicated by a PE file header) and under 150KB in size.
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17_Gen4:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1d27487fbf2f8d1d483be56586b90295
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the EquationGroup toolset leaked in April 2017. It matches specific file hashes and searches for particular characteristics such as file size and strings related to network configurations and completion messages within the file, as well as a distinctive byte pattern. The rule focuses on files smaller than 150KB, beginning with an 'MZ' header, indicative of executable files.
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17_GenKey:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 82e7d3dde4355b59dbf686ba8e409ed9
  Ruleset: securityonion-yara
  Summary: This rule detects a specific toolset associated with the Equation Group, known from an April leak. The detection focuses on a particular error message "* PrivateEncrypt -> PublicDecrypt FAILED" and checks that the file starts with the "MZ" header found in PE files, has a file size of less than 80KB, and contains the identified string.
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17_GetAdmin_LSADUMP_ModifyPrivilege_Implant:
  Created-Date: '2024_08_06'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b80335e307188ba03e1fb101955a7de8
  Ruleset: securityonion-yara
  Summary: This rule detects an implant associated with the EquationGroup Toolset, specifically targeting the LSADUMP component used to modify privileges. It identifies the presence of certain strings and byte sequences within a file, which are characteristic of the malicious behavior observed in the EquationGroup's "GetAdmin" tool, part of a broader leak disclosed in April 2017. The rule focuses on files smaller than 80KB that start with the "MZ" header, typically indicating a Windows executable, and contain specific code patterns or filenames linked to the exploit.
  Updated-Date: '2024_08_06'
EquationGroup_Toolset_Apr17_GrDo_FileScanner_Implant:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 296803b71abc7596ef716b2422b507b2
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of an implant associated with the EquationGroup Toolset based on specific characteristics found within a file. It identifies files that start with the hexadecimal value 0x5a4d, are less than 400KB in size, and contain the strings "system32\\winsrv.dll," "raw_open CreateFile error," and "\\dllcache\\" in their specific formats (wide and ascii). The presence of these strings and file properties suggest that the file may be part of the malicious software tools leaked by the group known as the Shadow Brokers.
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17_Ifconfig_Target:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 42cd48798d75cc87920ac78a7cc3a632
  Ruleset: securityonion-yara
  Summary: This rule detects a toolset attributed to the Equation Group, specifically related to a leak in April, by identifying certain system registry strings and hexadecimal patterns indicative of the tool's presence. The rule focuses on the "Tcpip" parameters within the system services registry and checks for specific opcode sequences, ensuring the file is an executable file (indicated by the "0x5a4d" MZ header) and is less than 100KB in size.
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17_Iistouch_1_2_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3a9542de00d795f5ff3d7bd7c2b6bfbc
  Ruleset: securityonion-yara
  Summary: This rule detects the EquationGroup toolset associated with an April leak. It identifies specific string patterns related to IIS (Internet Information Services) targeting and redirection messages within files smaller than 60KB with a particular file header signature.
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17_KisuComms_Target_2000:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d24d23d761d7e2705eefdadcf33c596c
  Ruleset: securityonion-yara
  Summary: This rule detects a specific tool used by the Equation Group, a cyber-espionage group associated with advanced and sophisticated malware. The tool in question was part of a data leak that occurred in April 2017. The detection method involves specific sequences of characters and opcode patterns found within the tool's binary code. The rule targets files that begin with the common "MZ" header, which identifies them as executable files, and are smaller than 200KB in size.
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17_Mcl_NtMemory_Std:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2b92f15ff03a73763c66b922a9e0998f
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of an EquationGroup tool from the April 2017 leak, identified through specific byte sequences within files smaller than 300KB. The tool's signature includes several distinct hexadecimal patterns, ensuring precise identification in memory.
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17_Mofconfig_1_0_0:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d372465f93af0692696992d937e81075
  Ruleset: securityonion-yara
  Summary: This rule detects a tool from the EquationGroup leak, specifically targeting a piece of software that contains the error message "[-] Get RemoteMOFTriggerPath error." The file must begin with the hexadecimal value 0x5a4d, be smaller than 50KB in size, and match the provided hash.
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17_Namedpipetouch_2_0_0:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e3be8b0f283e9c0a192c6d92edd5e11e
  Ruleset: securityonion-yara
  Summary: This rule detects an EquationGroup tool associated with the April Leak. The tool is identified by specific strings in its code, including log messages indicating the number of pipes found, the testing of pipes, and errors during SMB startup. Additionally, a particular hexadecimal string and a distinct opcode sequence are also indicative of this tool's presence. The rule targets files matching these features, provided they are PE files smaller than 40KB.
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17_Oracle_Implant:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 313145cef6bff64b71f126a32bf21ab3
  Ruleset: securityonion-yara
  Summary: This rule detects an EquationGroup tool known as the Oracle Implant, which was part of an April leak. It identifies specific binary patterns within files smaller than 500KB, using unique hexadecimal sequences associated with the tool's signature.
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17_PC_Exploit:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0abf2904f741630284e70fee0ed1656e
  Ruleset: securityonion-yara
  Summary: This rule detects a toolset associated with the Equation Group, specifically identified in an April leak. It searches for specific wide-character strings indicative of the tool's behavior, such as references to pipe reuse and socket duplication failures, within files under 20KB that start with the 'MZ' header commonly associated with executables.
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17_PC_LP:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b95a1d3e59045bb9991dcff1bb909e47
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the EquationGroup Toolset from the April 2017 leak through specific strings found within an executable file. It targets executables smaller than 200KB in size that start with the 'MZ' header, indicative of a Windows Portable Executable (PE) file. The rule looks for error messages and format strings related to connection information and command formatting, which are signatures characteristic of this particular toolset.
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17_PC_Level3_Gen:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c306491f978367d49eaa8345cf1ef4c1
  Ruleset: securityonion-yara
  Summary: This rule detects malicious activity associated with the Equation Group toolset that was leaked in April 2017. It specifically identifies files by looking for certain string patterns and byte sequences, including references to Microsoft and specific hexadecimal operations, within executable files smaller than 400KB.
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17_PC_Level3_http_exe:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 18337317c76cd4cd8bbdc26858fbe645
  Ruleset: securityonion-yara
  Summary: This rule detects a toolset associated with the EquationGroup, specifically from an April leak in 2017. It looks for certain characteristics in executable files, including a specific copyright string attributed to Microsoft and particular hexadecimal sequences in the file's data. The rule applies to files that begin with the hex value 0x5a4d, a typical signature of PE executables, and are smaller than 400KB in size.
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17_PC_Level_Generic:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5fbd6adfd46b1a12509de537e579caea
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a toolset associated with the Equation Group, which was part of a leak disclosed in April 2017. The detection is based on specific strings and byte patterns found within files under 400KB in size that start with the 'MZ' header, indicative of a Windows executable. The rule triggers if certain references to Windows Socket functions, formatted device paths, or specific ASCII and wide-text strings related to network connections and a corporation's reserved rights appear within the scanned file. The toolset's identification utilizes multiple unique hash values from the leaked files for precise detection.
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17_PacketScan_Implant:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: abaf55ae0f54f11ef6b3f3cedb2e6d0d
  Ruleset: securityonion-yara
  Summary: This rule detects a specific implant tool associated with the Equation Group. It identifies the tool by matching certain hexadecimal patterns within the file's structure, and only triggers if the file begins with the 'MZ' header, is smaller than 30KB, and contains all specified byte sequences. Such implants are typically linked to high-profile cybersecurity threats or espionage activities orchestrated by sophisticated actors.
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17_ParseCapture:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c3bb272dec45aedb484ccf33aabc29a1
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific tool associated with the Equation Group, identified in the April 2017 leak. The tool is characterized by strings related to encrypted logs and decryption keys. It scans files smaller than 50KB with a specific initial byte sequence to identify the tool based on the presence of any of the defined strings.
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17_Processes_Target:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 916ec733d7b604d180d69a3a31a99524
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a tool from the Equation Group, known for its sophisticated cyber espionage activities, based on specific string patterns within processes. The targeted tool, part of an April leak, communicates using WMI (Windows Management Instrumentation), as indicated by strings related to querying Windows processes and directory paths in the CIMv2 namespace. The condition checks for the presence of these strings in portable executable files under 200KB, verifying that the file's signature corresponds to a Windows executable.
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17_Regread_1_1_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b3012ec5fbe8c38a07145e6949b7f6e1
  Ruleset: securityonion-yara
  Summary: This rule detects a tool from the Equation Group, specifically identified in the leak from April 2017. The tool in question interacts with the Windows Registry Service, evidenced by a specific string indicating a successful connection to the service and a particular ASCII string representing a SHA-1 hash value. The detection criteria include the presence of certain characteristics, such as the file beginning with the "MZ" header and having a size of less than 80KB, along with at least one of the specified strings being found in the file.
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17_RemoteCommand_Lp:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: bd5e3331ed11cfce9e6f84bf5f09ccc9
  Ruleset: securityonion-yara
  Summary: This rule detects the EquationGroup Toolset from an April leak, specifically targeting a remote command utility. It identifies specific wide strings within the file, such as error messages related to command parsing and TCP listen port issues. The rule applies to files beginning with the 'MZ' header and with a filesize of less than 200KB.
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17_RemoteExecute_Implant:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d8d9fbcea47a55c788617481563dd542
  Ruleset: securityonion-yara
  Summary: This rule detects an implant associated with the Equation Group toolset, specifically the RemoteExecute module leaked in April 2017. It searches for specific hexadecimal patterns within files smaller than 40KB, which include sequences indicative of the Schedule Service, SecondaryLogon, and related identifiers used by the malware. This detection is based on the presence of characteristic strings found in the implant's executable code.
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17_RemoteExecute_Target:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: dc1ef589e40ddd510134052864152b53
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the EquationGroup's toolset from the April leak. It is designed to identify specific behavioral patterns and strings associated with the remote execution functionality of this toolset, targeting processes and system management structures typical of malicious activity. The rule looks for particular strings like "Win32_Process" and "\\\\%ls\\root\\cimv2", along with a specific binary sequence, to confirm the presence of this malware within executable files smaller than 200KB.
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17_Rpctouch_2_1_0:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1b6a8e4acc0b7bf869e2fc01f4c6f081
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a tool from the Equation Group's April leak, specifically identifying `Rpctouch 2.1.0`. The detection is based on certain ASCII strings found within the file, such as error messages related to OS or Service Pack detection, and SMB string logging. The file must be a Windows executable with a size below 80KB to match the criteria.
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17_SendPKTrigger:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2756aa67b035919afddf0db7520c703c
  Ruleset: securityonion-yara
  Summary: This rule detects a toolset component from the Equation Group, specifically related to an April data leak. It identifies files starting with the "MZ" header characteristic of Windows executables and having a size under 300KB. The detection relies on the presence of a unique string, "----====**** PORT KNOCK TRIGGER BEGIN ****====----," formatted as a full word in wide character encoding.
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17_SetCallback:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5431ce1e66d1864e180f2a891e9afbd6
  Ruleset: securityonion-yara
  Summary: 'This rule detects the EquationGroup tool from the April leak, focusing on identifying the SetCallback component. The rule searches for specific strings within files, such as "NOTE: This version of SetCallback does not work with PeddleCheap versions prior" and "USAGE: SetCallback <input file> <output file>". It applies to files with an MZ header (indicating a Windows executable) that are smaller than 100KB in size.'
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17_SetCallbackPorts:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4cc6ff28b363f443aa44322337eed6d4
  Ruleset: securityonion-yara
  Summary: This rule detects a tool associated with the Equation Group, identified from an April 2017 leak. It looks for a specific executable file signature that starts with the "MZ" header and is smaller than 100KB in size. The rule triggers on files that contain strings related to usage instructions for setting callback ports, allowing the specification of multiple ports as input parameters.
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17_SetOurAddr:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b0a0c472d676871b0946dad13d1d0d5c
  Ruleset: securityonion-yara
  Summary: This rule detects a tool from the EquationGroup, known as "SetOurAddr," which was part of an April leak. It looks for specific ASCII strings within a file, such as usage instructions and messages indicating the replacement of a default IP address with a local IP address. The rule applies to files beginning with the "MZ" header and having a size of less than 100KB.
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17_SetPorts:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 40ee86ce698c687a39ec906c329b16e4
  Ruleset: securityonion-yara
  Summary: This rule detects the EquationGroup tool based on specific usage patterns and version details in the tool's strings. It identifies usage instructions and valid versions for setting port configurations, ensuring detection by checking for specific ASCII strings related to these parameters in files smaller than 100KB that start with the identifier 0x5a4d.
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17_SetResourceName:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7766dae8fa51cbed0fc69f174a7d93b3
  Ruleset: securityonion-yara
  Summary: This rule detects a specific toolset associated with the Equation Group, a sophisticated threat actor linked to advanced cyber-espionage activities. The primary focus is on identifying tools leaked in April, which update the name of a DLL or executable in resource files. Notable strings include an advisory that the SetResourceName function is incompatible with certain versions and details of executable levels such as "appinit.dll" and "spcss32.exe". This identification is based on a defined file size and the presence of specific markers within the file header.
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17_Shares_Target:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f14776f7be61ce944763cf8ffef41717
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the EquationGroup Toolset, specifically related to an April 2017 leak. It identifies strings commonly used in the toolset, such as SQL queries targeting Windows shares and specific network paths. To confirm the detection, the rule checks if the file begins with the "MZ" header (indicative of a Windows executable) and if the file size is under 200KB, ensuring that all specified strings are present within the executable file.
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17_SlDecoder:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e6dd79fc7abc7d7d3798cec71c324e42
  Ruleset: securityonion-yara
  Summary: This rule detects a toolset associated with the Equation Group, specifically the SlDecoder executable. It identifies indicators within files that exhibit specific strings like an error message involving `SlDecoder.exe` and references to `KeyLogger_Data`. The rule targets files smaller than 200KB with an initial `MZ` header characteristic of executable files.
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17_Smbtouch_1_1_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ad7ce840499c1528c90dad1ceb030f46
  Ruleset: securityonion-yara
  Summary: This rule detects a specific tool from the EquationGroup, identified in the April leak. It looks for files smaller than 400KB and containing the string "[+] Target is vulnerable to %d exploit%s", which indicates software used to assess vulnerabilities in a target system. This particular signature helps identify a potentially harmful tool intended for exploitation.
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17_Windows_Implant:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 17fc19d4c59b1c48887acf6c7c3a7f3e
  Ruleset: securityonion-yara
  Summary: This rule detects a Windows implant associated with the Equation Group's toolset, specifically from an April 2017 leak. It identifies the presence of the implant by checking for a specific sequence of characters in the file and ensures that the file starts with the characteristic "MZ" header signature common to Windows executables and has a size of less than 50KB.
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17__AddResource:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0af4815cd13960cc631712f14431f530
  Ruleset: securityonion-yara
  Summary: This rule detects the EquationGroup toolset, which is linked to the April 2017 leak. It identifies the presence of specific strings related to operations for adding resources to a PE (Portable Executable) binary, such as specified paths to binaries and data files, and error messages related to path retrieval. It triggers when two or more of these strings are found within files smaller than 300KB, starting with the common PE file header identifier.
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17__DoubleFeatureReader_DoubleFeatureReader_0:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 163744750b54ccf875fa423ce8b21bf7
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the DoubleFeatureReader component from the EquationGroup toolset, specifically targeting the DoubleFeatureReader executable. It identifies the executable by looking for specific ASCII strings related to the program's operation and process, such as commands for using an AES key and logging features, and markers like "Double Feature Target Version" and "DoubleFeature Process ID." Additionally, a particular byte sequence in the file is used to facilitate detection.
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17__EAFU_ecwi_ESKE_EVFR_RPC2_4:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b0f900a26f37085aca793f97231b3cc8
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of specific artifacts and string patterns associated with the Equation Group's toolset leaked in April 2017. The rule targets specific error messages and response codes found within the tool's binaries, such as "WsaErrorTooManyProcesses," "NtErrorMoreProcessingRequired," "Connection closed by remote host (TCP Ack/Fin)," and "ServerErrorBadNamePassword." Additionally, it checks for a particular pattern related to a Listening Post DLL. The detection criteria include verifying if the file's size is less than 2000 KB, the file's header matches certain hexadecimal values, and the presence of these specific strings or patterns in the binary.
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17__ELV_ESKE_13:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 63e0e131a74e27461c4be11e608b0a49
  Ruleset: securityonion-yara
  Summary: This rule detects an Equation Group tool known from an April leak, identified by specific strings within the executable. The strings include messages about skipping a call to package a payload due to prior completion and an error related to a null payload implementation. The rule targets files smaller than 600KB, starting with the typical Windows MZ header.
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17__ELV_ESKE_ETBL_ETRE_EVFR_11:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f21b40feec33b45383b337933f4d3289
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of specific tools linked to the Equation Group, a sophisticated threat actor associated with high-profile cyber incidents. It identifies files that contain specific strings indicating whether a target is vulnerable, suggesting the tools' use in assessing the vulnerability of systems. The rule applies to executable files smaller than 2000KB that start with the 'MZ' header, a common characteristic of Windows executable files.
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17__ELV_ESKE_EVFR_16:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a31e4c26fa3b79dfcc522eec82a3b0f4
  Ruleset: securityonion-yara
  Summary: This rule detects specific indicators within the EquationGroup Tool, which was part of a significant data leak in April 2017. It focuses on identifying payloads associated with exploit encoding failures, exception handling during exploit execution, implant payload sending processes, and errors related to operating system vulnerability checks. Upon analyzing files smaller than 2000KB, the rule searches for specific ASCII strings associated with error messages and payload processing within the tool's executable.
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17__ELV_ESKE_EVFR_RPC2_15:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d4f9dc27e7f9d3928d1d334af6482245
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a toolset associated with Equation Group, specifically targeting software leaked in April 2017. It identifies files less than 2000KB in size that contain specific ASCII strings related to exception handling and RPC interface binding over named pipes. These strings serve as indicators of the particular toolset used by Equation Group, which is known for complex cyber-attack operations.
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17__ELV_ESKE_EVFR_RideArea2_12:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 026cf3b291031e259252b962d99e18fb
  Ruleset: securityonion-yara
  Summary: This rule detects a specific toolset associated with the Equation Group, known for a significant leak in April 2017. It identifies the presence of the tool by searching for a particular string pattern "** CreatePayload ** - EXCEPTION_EXECUTE_HANDLER" within executable files smaller than 2000KB and starting with the "MZ" header, which indicates a Windows executable. The rule highlights identifying characteristics such as specific hash values related to known samples of the tools.
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17__ESKE_RPC2_8:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5aa190882e5098b9bdbe9dc8fc74a10d
  Ruleset: securityonion-yara
  Summary: This rule detects components of the EquationGroup toolset known as ESKE_RPC2_8, which was leaked in April 2017. It identifies specific error messages related to packet size and SMB (Server Message Block) read operations that are characteristic of this toolset, within executable files that start with the MZ header and have a file size of less than 700KB.
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17__ETBL_ETRE_10:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 529c8e9ee7c4d9b00a18161c09ded8d5
  Ruleset: securityonion-yara
  Summary: This rule detects a tool used by EquationGroup, a sophisticated cyber espionage group linked to high-profile leaks in April 2017. Specifically, it identifies software by checking for unique strings in files smaller than 200KB with a "MZ" header, which indicates a Windows executable. The rule flags content indicative of the tool's operations, such as usage instructions for network probing, exception handling during exploitation, and log messages related to implanting payloads.
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17__ETBL_ETRE_SMBTOUCH_17:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: dd93808b1b5a988b2bc31c0cfad154a1
  Ruleset: securityonion-yara
  Summary: This rule detects a toolset associated with the Equation Group, specifically targeting the SMBTOUCH component from the April leak. It identifies certain error messages within a Windows executable file that is less than 300KB in size, with messages indicating connection termination by the target and unresponsiveness over a specified time.
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17__Emphasismine:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 39f5aadc509130ff1284126af256d59e
  Ruleset: securityonion-yara
  Summary: 'This rule detects the EquationGroup toolset from an April leak by identifying specific text patterns related to shellcode operations and error messages indicating compatibility issues. It looks for markers such as "Error: Could not calloc() for shellcode buffer," "Generating shellcode," and email logout completion messages. Additionally, it checks for conditions like file size being under 100KB and the presence of DOS headers to confirm the file''s nature.'
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17__LSADUMP_Lp_ModifyPrivilege_Lp_PacketScan_Lp_put_Lp_RemoteExecute_Lp_Windows_Lp_wmi_Lp_9:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 550bb3bbd2d728c718f30a5e7915062b
  Ruleset: securityonion-yara
  Summary: This rule detects a set of tools associated with the Equation Group, particularly those leaked in April 2017. The tools identified include LSADUMP and mention various processes such as modifying privileges, packet scanning, remote execution, and Windows management instrumentation (WMI) operations. The rule targets files with specific hashes and identifies them based on unique strings related to injection libraries and error messages from LSADUMP. It focuses on executable files with a size less than 300KB that meet specific criteria to flag potentially malicious activities linked to this sophisticated threat group.
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17__NameProbe_SMBTOUCH_14:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 091ebfe7f28fc3d7a6de233bba7487bb
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of specific strings associated with the EquationGroup toolset, notably the tool known as SMBTOUCH, which was part of an April 2017 leak. It looks for several distinct ASCII strings related to network services and name servers within executables smaller than 300KB that begin with the "MZ" header, indicating they are Windows PE files.
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17__SendCFTrigger_SendPKTrigger_6:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3bb837b82c93e4df03e25251d074d325
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of specific toolset components associated with the EquationGroup, a notorious hacking group. The rule identifies anomalies in executable files, specifically those containing error messages related to connection failures or address conversion issues. It targets files under 400KB with a particular file header signature, indicating potential malicious activity linked to the EquationGroup's operations, as leaked in April 2017.
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17__ecwi_ESKE_EVFR_RPC2_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5ca4ce0f07d86c4c56d3f931f480d51b
  Ruleset: securityonion-yara
  Summary: This rule detects a specific toolset associated with the Equation Group, notably part of an April leak. It identifies malicious software by matching it against predefined hash values and distinct strings found within the executable. Key strings include phrases related to network operations, such as "Target is share name," "Could not make UdpNetbios header -- bailing," and "Request non-NT session key." The targeted file must have a 'MZ' header and a size less than 2000KB for the conditions to be met.
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17__vtuner_vtuner_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9c5af849a5c467ca59bc2f1a263cdfab
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of specific malicious tools from the EquationGroup, which were part of a leak disclosed in April 2017. The detection is based on unique strings and byte sequences found in the toolset, including error messages related to "-w hash" and "-w provider," as well as distinctive hexadecimal patterns. The rule targets files with a specific starting signature and a size below 2000KB, ensuring that at least two of the identified patterns are present.
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17_clocksvc:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: cd1003376b220c336540667778b167fe
  Ruleset: securityonion-yara
  Summary: This rule detects the EquationGroup toolset associated with the April Leak. The specific indicators include the presence of the file "~debl00l.tmp", specific mailslot paths "\\\\.\\mailslot\\c54321" and "\\\\.\\mailslot\\c12345", and the string "nowMutex". Additionally, it looks for the registry path "System\\CurrentControlSet\\Services\\MSExchangeIS\\ParametersPrivate" and hexadecimal data strings indicating potential unique identifiers or encrypted data blocks. The heuristic conditions for detection check if the file starts with the "MZ" header, indicative of executable files, is smaller than 200KB, and matches key string patterns.
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17_drivers_Implant:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e4621ee3706adfa07e517093b909bb19
  Ruleset: securityonion-yara
  Summary: This rule detects the EquationGroup toolset drivers related to an April leak. It identifies specific artifacts such as the string ".?AVFeFinallyFailure@@" and the function "hZwLoadDriver" within executable files smaller than 30KB that start with the "MZ" header. The rule also checks for a particular sequence of bytes as part of its conditions.
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17_greatdoc_dll_config:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9da860da0f050fb825ee9af2ee08cd81
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a tool from the EquationGroup, specifically from the April leaks associated with "GREATERDOCTOR." It identifies this tool based on specific strings found in the binary, including file paths and command-line argument configurations, which hint at its internal project structure and usage. The condition for this rule triggers if the file starts with the characters "MZ" (indicating a Windows executable) and is smaller than 200KB in size, with at least one of the specified strings present in the file.
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17_lp_mstcp:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1ff0019b6e05850f8d3370c3a4a71d2d
  Ruleset: securityonion-yara
  Summary: "This rule detects a specific toolset associated with the Equation Group, referencing a leak from April. It identifies files that start with the 'MZ' header (indicating a DOS executable) and are smaller than 100KB in size. The detection is based on specific strings and hex patterns that are indicative of this toolset\u2019s registry and function operation behavior."
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17_msgkd_msslu64_msgki_mssld:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 961e7cf50e3597e60271a2d65f7cb20e
  Ruleset: securityonion-yara
  Summary: This rule detects specific components of the EquationGroup toolset, which were leaked in April 2017. The detection focuses on identifying particular strings and hexadecimal patterns in the binaries, including "PQRAPAQSTUVWARASATAUAVAW" and operations represented by sequences such as {0c 80 30 02 48 83 c2 01 49 83 e9 01 75 e1 c3 cc}. The condition checks for a specific file signature and size, ensuring that files smaller than 1000KB and featuring certain string or operation patterns are flagged, indicating potential use of this sophisticated toolset linked to EquationGroup.
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17_msgks_mskgu:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2eafedf83b5625b6404e704b9f43c655
  Ruleset: securityonion-yara
  Summary: This rule detects the EquationGroup toolset, part of an April leak, by identifying specific byte sequences within a file. It looks for predefined hexadecimal patterns and checks that the file's size is less than 300KB and starts with the 'MZ' header, typically indicating a Windows executable.
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17_mstcp32_DXGHLP16_tdip:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 70cf544613e6efb08eab72d9d039b84a
  Ruleset: securityonion-yara
  Summary: This rule detects a toolset associated with the Equation Group, identified in an April data leak. It specifically looks for certain strings within the Windows Registry path, device paths, an ASCII reference to a debug file named `mstcp32.dbg`, and certain patterns related to the TCP/IP driver. These indicators are used to identify the presence of the potentially malicious toolset in a file that begins with the typical Windows executable header (`0x5a4d`) and is less than 200KB in size.
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17_ntevt:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 79a14c038e504165067ab6fe2721b04e
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the EquationGroup toolset from an April leak. It identifies specific strings and byte sequences associated with the tool, including file paths and hexadecimal patterns in the malware's code. The detection focuses on the presence of a particular PDB path ("c:\\ntevt.pdb"), a specific ASCII string ("ARASPVU"), and several hexadecimal byte patterns found within the tool's binary structure. These indicators help identify malicious software attributed to the EquationGroup, a known advanced persistent threat group.
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17_ntfltmgr:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 533fae62b2a943eb1512faede1e5b4cc
  Ruleset: securityonion-yara
  Summary: This rule detects the Equation Group toolset associated with an April 2017 leak. It focuses on identifying specific string patterns and opcodes within binaries. The condition checks for a PE file signature (0x5a4d) and ensures the file size is less than 100KB, triggering an alert if four of the identified patterns match.
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17_promiscdetect_safe:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8614029d01f009a1d8766945c09a5127
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a toolset associated with the Equation Group, specifically from an April leak. It identifies this toolset by searching for specific strings within the file, such as "running on this computer!", "- Promiscuous (capture all packets on the network)", and "Active filter for the adapter:". The rule is triggered if the file being examined starts with the header value 0x5a4d, has a file size less than 80KB, and contains all the specified strings.
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17_put_Implant9x:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b3bdbc95e2520c3965c9b2b67c19c73e
  Ruleset: securityonion-yara
  Summary: This rule detects an implant toolset associated with the Equation Group, specifically from a leak in April 2017. It identifies this malicious software by looking for specific strings and opcode patterns within files that are less than 20KB in size and have a particular file header.
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17_pwd_Implant:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: bfaa7c3842002207019d5e9673c5f37b
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of an implant associated with the EquationGroup toolset, specifically from a leak that occurred in April. It identifies the implant by searching for a specific ASCII string and a particular sequence of hexadecimal bytes within executable files smaller than 20KB that start with the standard MZ header.
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17_rc5:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 64bf93107eb054c4e511d88ab5469ac3
  Ruleset: securityonion-yara
  Summary: This rule detects a tool from the Equation Group, as leaked in April 2017. The tool uses specific strings related to usage instructions for encryption and decryption modes, indicating it operates by taking a session key and ciphertext in hexadecimal format and can switch between decrypt and encrypt modes. This detection focuses on executable files smaller than 200KB that contain at least two of these unique strings, which help to identify the presence of the Equation Group's malware or toolset.
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17_regprobe:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 95524a64801a0a6c73649c0d64dbb9e2
  Ruleset: securityonion-yara
  Summary: This rule detects the EquationGroup toolset from the April 2017 leak, specifically focusing on identifying usage and error message strings associated with the tool. It searches for specific ASCII strings related to command usage patterns, non-existent keys, and proxy configuration within files smaller than 100KB that start with the hexadecimal value 0x5a4d.
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17_renamer:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a5497427768bcccebfbad64705cc38b0
  Ruleset: securityonion-yara
  Summary: This rule detects a specific toolset attributed to the Equation Group, which was leaked in April 2017. It identifies files related to the Equation Group's tool by searching for the presence of the strings "FILE_NAME_CONVERSION.LOG" and "Log file exists. You must delete it!!!" within executable files that start with the "MZ" header and are smaller than 80KB in size.
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17_scanner:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c52332cea0bc5eaee1212bec9796573a
  Ruleset: securityonion-yara
  Summary: This rule detects the EquationGroup toolset from April 2017, specifically targeting leaked network scanning utilities. It identifies unique strings associated with the toolset, such as commands and logging details related to daemon versions, system processor data, and network scanning activities. The rule applies to executable files smaller than 90KB, ensuring precise detection by using a combination of specific ASCII string matches and header checks.
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17_st_lp:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f8ff583ed7f31efc2eb19022d33af8d5
  Ruleset: securityonion-yara
  Summary: This rule detects specific characteristics of the EquationGroup Toolset related to the April leak. It identifies particular strings within a file smaller than 300KB that indicate activities such as setting injection processes, handling secondary injection processes, spoofing IP source addresses, and executing commands on an implant. The rule specifically looks for the presence of these distinct text patterns in an executable file format.
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17_svctouch:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5e31066966aab887e274744bcbe2ca2a
  Ruleset: securityonion-yara
  Summary: 'This rule detects a tool from the EquationGroup that was part of an April leak. It identifies the presence of this tool by looking for a specific error message: "Causes: Firewall,Machine down,DCOM disabled\not supported,etc." in ASCII format within executable files smaller than 10KB that start with the characters "MZ".'
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17_tacothief:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 47aefffc2c4144c7506ebb04cc295d3e
  Ruleset: securityonion-yara
  Summary: This rule detects the "EquationGroup Toolset April Leak," specifically targeting a tool known as 'tacothief'. It identifies the presence of this software by checking if the file starts with a DOS MZ header (indicating a Windows executable), ensuring the file size is less than 100KB, and contains the specific ASCII string "File too large!  Must be less than 655360 bytes."
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17_wmi_Implant:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0bfa37116194b6fa72097f1b5ee37385
  Ruleset: securityonion-yara
  Summary: This rule detects a specific tool from the Equation Group, known for its cyber intrusion activities, that was leaked in April 2017. The tool is identified by examining a particular string pattern related to probing system processes (retrieving ProcessId, Description, and ExecutablePath from Win32_Process), combined with certain file attributes such as a specific header signature and file size constraints.
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17_xxxRIDEAREA:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d22eb904a6a7edba8c760ab8d090441c
  Ruleset: securityonion-yara
  Summary: This rule detects a specific EquationGroup tool from the April Leak, recognizable by certain phrases in its code. It identifies strings related to usage instructions, payload size output, error messages involving file writing failures, and commands to load and execute implants in existing threads. The rule triggers if the file format is a Windows executable (indicated by the "MZ" header) and the file size is under 200KB.
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17_yak:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0facd39b7dcf3cd4c662b4ff8819515e
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of specific tools associated with the EquationGroup by identifying particular strings and patterns within a file. The strings indicate command-line options and tokens used by tools in the leaked toolset, such as commands to dump archive data and store it in a file, or to display special characters. The rule is activated if the file meets certain conditions, including a specific file header and a size limitation under 800KB.
  Updated-Date: '2024_08_07'
EquationGroup_Toolset_Apr17_yak_min_install:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d392c2be68bcaff784ef7bdedba7337a
  Ruleset: securityonion-yara
  Summary: 'This rule detects a specific tool associated with the Equation Group, known for its involvement in high-profile cyber espionage activities. It identifies the presence of this tool by looking for specific strings within files that are less than 300KB in size and start with the characters "MZ," which is a common indicator of executable files. The strings it searches for include "driver start," "DeviceIoControl Error: %d," and "Phlook," which are indicative of the tool''s operations or error messages, helping to pinpoint its usage within a system.'
  Updated-Date: '2024_08_07'
EquationGroup__ftshell:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d1b16f58f3437e8df253de973e362548
  Ruleset: securityonion-yara
  Summary: This rule detects the Equation Group's hack tool known as "ftshell," which was leaked by ShadowBrokers. It identifies specific strings within files related to this tool, such as command processing and global variable declarations, to confirm its presence. The detection is based on certain characteristics, including the file's initial bytes, size, and the presence of specific substrings.
  Updated-Date: '2024_08_07'
EquationGroup__ftshell_ftshell_v3_10_3_0:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2c661709378a03acd5421aef207a23c9
  Ruleset: securityonion-yara
  Summary: This rule detects a hack tool named FTShell, which is attributed to the Equation Group and was leaked by ShadowBrokers. The tool is related to file transfer operations, as indicated by the presence of command strings associated with remote upload command setting, conditional checks for Bash shell environments, and system commands for file removal. The detection is based on specific string patterns within the file, focusing on commands and annotations likely associated with FTShell's functionality.
  Updated-Date: '2024_08_07'
EquationGroup__funnelout_v4_1_0_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c1f039a1c66bbe09a280e858ef13826c
  Ruleset: securityonion-yara
  Summary: This rule detects the "funnelout" hack tool version 4.1.0.1, which was allegedly used by the Equation Group and leaked by ShadowBrokers. The tool's presence is identified by specific strings found in its code, such as commands involving HTTP header modification, pattern matching for proxy hosts, decrement operations on specific variables, and user existence checks within a database script. The rule matches these strings under certain conditions related to file type and size.
  Updated-Date: '2024_08_07'
EquationGroup__ghost_sparc_ghost_x86_3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 09aa2d8af18f224239a78b05d5a43e73
  Ruleset: securityonion-yara
  Summary: This rule detects a hack tool associated with the Equation Group that was leaked by the ShadowBrokers. The tool contains strings suggesting functionalities like sending shellcode as part of an open command and checking for the ability to run shellcode. It identifies the tool through multiple string patterns and verifies specific file characteristics, such as file size and a particular header value.
  Updated-Date: '2024_08_07'
EquationGroup__jparsescan_parsescan_5:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: abceec8a69578b7d27bebccf59b75644
  Ruleset: securityonion-yara
  Summary: This rule detects the Equation Group hacking tool that was leaked by ShadowBrokers, specifically from files named "jparsescan" and "parsescan." It identifies unique signatures associated with this tool, including specific strings such as "# default is to dump out all scanned hosts found" and "$bool .= \" -r \" if (/mibiisa.* -r/);," among others. The rule checks for these markers in files smaller than 40KB, which helps to affirm their identification in the context of this particular hack tool.
  Updated-Date: '2024_08_07'
EquationGroup__magicjack_v1_1_0_0_client:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e07a3ab309671eba84fbc38493143247
  Ruleset: securityonion-yara
  Summary: This rule detects the Equation Group's hacking tool, MagicJack version 1.1.0.0 client, which was leaked by the ShadowBrokers. The detection involves identifying specific strings within the code, such as bitwise operations and variable assignments involving `temp`, `right`, and `num`. The detection conditions necessitate the file signature starting with `0x2123`, having a file size less than 80KB, and the presence of at least three predetermined strings or all of them.
  Updated-Date: '2024_08_07'
EquationGroup__pclean_v2_1_1_pclean_v2_1_1_4:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 869507599b04ae6f1f58a44c80dcb881
  Ruleset: securityonion-yara
  Summary: 'This rule detects the Equation Group hack tool, which was leaked by the ShadowBrokers and is identified through specific files, namely "pclean.v2.1.1.0-linux-i386" and "pclean.v2.1.1.0-linux-x86_64". The tool can be recognized by notable strings within the code, such as command name matching with "strncmp()" searches and phrase patterns like "e.g.: -n 1-1024,1080,6666,31337". The rule specifies that the tool''s file characteristics include a particular header value and a file size under 50KB.'
  Updated-Date: '2024_08_07'
EquationGroup__scanner_scanner_v2_1_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d90c8362c9d814727c1b5079438f6bf7
  Ruleset: securityonion-yara
  Summary: This rule detects the Equation Group's network scanning tool, specifically version 2.1.2, which was leaked by the ShadowBrokers. The tool includes functionalities for port scanning and SSH version scanning. The rule identifies specific strings within the tool's code, such as welcome messages for the network scanning tool, notifications about scanning specific ports, paths used in command output directories, and details about scanning SSH versions and services. The file targeted by this rule must be under 100KB in size and have a specific header value.
  Updated-Date: '2024_08_07'
EquationGroup_calserver:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6ad649e1be2c8c41d2be1ba89bce6403
  Ruleset: securityonion-yara
  Summary: This rule detects a specific hack tool named "calserver" associated with the Equation Group and leaked by ShadowBrokers. It identifies the tool based on specific ASCII strings indicative of its functionality, such as commands for executing files on a target host and reading, moving, and writing data. The tool must have a particular file signature and be smaller than 30KB for detection.
  Updated-Date: '2024_08_07'
EquationGroup_charm_saver_win2k_v_2_0_0:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 04eb483f463ec6c33864d2948170ac6f
  Ruleset: securityonion-yara
  Summary: This rule detects the Equation Group hack tool set by identifying specific characteristics in a file, such as a recognizable pattern of hexadecimal characters and certain opcode sequences. The rule applies to files with a Windows executable header, ensuring the file size is less than 400KB.
  Updated-Date: '2024_08_07'
EquationGroup_cmsd:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7bfbe19aaaa7fd6f54c0df23bb6f28b8
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific hack tool known as "cmsd," which is associated with Equation Group and was leaked by the ShadowBrokers. The rule identifies the tool by searching for distinct string patterns within files smaller than 30KB, including specific usage instructions, error messages, port connection success messages, and a placeholder string. The tool is referenced with a notable hash value and its specific characteristics are leveraged to determine its presence based on these identifiers.
  Updated-Date: '2024_08_07'
EquationGroup_cmsex:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b4989ef5afcdcd7f909ed3c94e8edcee
  Ruleset: securityonion-yara
  Summary: This rule detects the Equation Group's cmsex tool, a Solaris RPC-based remote root exploit leaked by the ShadowBrokers. It identifies specific strings related to the tool's usage instructions and notes about choosing target types for exploiting vulnerabilities. The detection logic involves checking for matching file signatures and specific phrases within the file content.
  Updated-Date: '2024_08_07'
EquationGroup_cryptTool:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2c211b6b48f93f3eb778c417a3fd04f8
  Ruleset: securityonion-yara
  Summary: This rule detects a hack tool known as "cryptTool" associated with the Equation Group, which was leaked by the ShadowBrokers. It identifies this tool by looking for the presence of specific strings within the file, such as "The encryption key is" and "___tempFile2.out," and by checking that the file size is less than 200KB and that the file starts with the hexadecimal value 0x457f.
  Updated-Date: '2024_08_07'
EquationGroup_curseflower_mswin32_v_1_0_0:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0121f58fb298005bd21ac23efa551427
  Ruleset: securityonion-yara
  Summary: This rule detects a hack tool set associated with the Equation Group, a cyberattack group known for sophisticated malware and cyber espionage operations. It identifies specific opcode patterns and string signatures within executable files, targeting files that commence with the "MZ" header commonly found in Windows executable files and are less than 300KB in size.
  Updated-Date: '2024_08_07'
EquationGroup_cursehappy_win2k_v_6_1_0:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b5a34042c8c115899f6951850afb7d58
  Ruleset: securityonion-yara
  Summary: This rule detects the Equation Group's hack toolset, specifically targeting a tool used on Windows 2000 with version 6.1.0. It identifies specific opcodes within executable files that start with the 'MZ' header and are less than 400KB in size, utilizing known bytes sequences to recognize the malicious tool.
  Updated-Date: '2024_08_07'
EquationGroup_cursehelper_win2k_i686_v_2_2_0:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 54baba2094d5f819352443cc8aabe2e7
  Ruleset: securityonion-yara
  Summary: This rule detects a specific hacking tool set, known as "curseghelper," used by the Equation Group, targeting Windows 2000 systems on x86 architecture, specifically version 2.2.0. It looks for a combination of encoding patterns in string data, ASCII characters, and certain sequences of machine code instructions (opcodes) within executable files. The detection criteria include the presence of a standard DOS header (MZ header) and a file size smaller than 500KB.
  Updated-Date: '2024_08_07'
EquationGroup_curseroot_win2k_v_2_1_0:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ec2b70274b0f17e88d2f083389945363
  Ruleset: securityonion-yara
  Summary: "This rule detects the Equation Group's hacking tool set, specifically targeting a Windows 2000 toolset version 2.1.0. It uses specific character strings and opcodes unique to this software. The detection parameters include a particular string and a combination of operational codes, alongside the file\u2019s size being less than 400KB and starting with the \"MZ\" header."
  Updated-Date: '2024_08_07'
EquationGroup_cursesleepy_mswin32_v_1_0_0:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a3f63b610b31ca8bdcb717a9a50e8e8f
  Ruleset: securityonion-yara
  Summary: This rule detects a hack tool set known as "Equation Group cursesleepy mswin32." It identifies specific strings and opcodes within executable files that include a unique string "A}%j,R" and sequences of bytes represented by the provided opcodes. The detection focuses on files smaller than 200KB and checks for a 'MZ' header, which is common in Windows executable files.
  Updated-Date: '2024_08_07'
EquationGroup_cursetingle_2_0_1_2_mswin32_v_2_0_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c22ad1ade6e194e8fb5958d13e18def9
  Ruleset: securityonion-yara
  Summary: This rule detects a hack tool set associated with the Equation Group, identifying specific patterns in Windows PE files. The tool is characterized by a string format resembling "[%.2u%.2u%.2u%.2u%.2u%.2u]" and a set of characters "0123456789abcdefABCEDF:", with conditions requiring the file to start with the "MZ" header and be smaller than 300KB in size.
  Updated-Date: '2024_08_07'
EquationGroup_cursewham_curserazor_cursezinger_curseroot_win2k:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 76ef96d116362e70d2be36714bfdb90f
  Ruleset: securityonion-yara
  Summary: This rule detects specific hack tools associated with the malicious framework used by the Equation Group. It identifies unique strings and machine instruction patterns present in these tools, including particular sequences of base64 characters, formatting strings, and specific machine code opcodes. The detection criteria indicate the presence of these tools in executables less than 400KB in size, preceded by the standard executable file header.
  Updated-Date: '2024_08_07'
EquationGroup_curseyo_win2k_v_1_0_0:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 48db7da3c99014f2708ba9fdd375a7b3
  Ruleset: securityonion-yara
  Summary: This rule detects the Equation Group's hacking tools targeting Windows 2000 versions. It identifies files by searching for specific strings and opcode patterns within the file, including a combination of hexadecimal characters and specific opcode sequences. The detection criteria include verifying the file has a 'MZ' header signature and ensuring the file size is less than 200KB.
  Updated-Date: '2024_08_07'
EquationGroup_cursezinger_linuxrh7_3_v_2_0_0:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9df7c3cefb8ae91ce1ccd3114f7d55e6
  Ruleset: securityonion-yara
  Summary: This rule detects a set of hacking tools known to be associated with the Equation Group, specifically targeting Linux systems running Red Hat 7. It identifies the presence of these tools by looking for specific string patterns and certain internal function names within files smaller than 400KB. These indicators suggest the presence of the malicious toolset on the affected system.
  Updated-Date: '2024_08_07'
EquationGroup_dumppoppy:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6228080c4b5c83bb6a066ee72d61b309
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the Dumppoppy tool associated with the Equation Group, allegedly leaked by ShadowBrokers. The tool is identified by specific ASCII strings within files smaller than 20KB. Key identifiers include text related to handling RETR commands and specific warning messages about file transfers being terminated by a "Connection closed by foreign host" message.
  Updated-Date: '2024_08_07'
EquationGroup_ebbisland:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6e8dbef524347b4153b8dd427cd64792
  Ruleset: securityonion-yara
  Summary: This rule detects a hacking tool known as "ebbisland," which is associated with the Equation Group and was leaked by ShadowBrokers. The tool includes specific strings related to command usage, errors in shellcode, warnings about core file wiping, and notation for shellcode addresses. The rule identifies the tool based on these unique strings within files that are smaller than 250KB.
  Updated-Date: '2024_08_07'
EquationGroup_ebbshave:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 12b3dcafacb3512a7ccfdcc9da536300
  Ruleset: securityonion-yara
  Summary: This rule detects the Equation Group hack tool associated with the file "ebbshave.v5," which was leaked by the ShadowBrokers. It identifies specific strings related to the tool, such as commands for executing ebbnew_linux and its wrapper, instructions for using different options, and descriptions referring to it as an exploit for Sparc Solaris RPC services. The detection criteria include specific binary signatures and a condition based on the presence of these strings within a file smaller than 20KB.
  Updated-Date: '2024_08_07'
EquationGroup_eggbasket:
  Created-Date: '2024_08_06'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: baa6cd00af31279d85dc23f3c7aed190
  Ruleset: securityonion-yara
  Summary: 'This rule detects a malicious tool attributed to the Equation Group, known as "eggbasket", which was leaked by ShadowBrokers. It identifies files with specific characteristics, such as a particular ELF file header and content size less than 90KB. The rule searches for distinct strings within the file: one indicating shellcode construction, another resembling a command for executing a remote xterm session, and a final one signaling the start of an exhaustive attack. These markers help in pinpointing the presence of this specific hack tool.'
  Updated-Date: '2024_08_06'
EquationGroup_eh_1_1_0:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6fa4720a2841076538a46ec16c88dc2f
  Ruleset: securityonion-yara
  Summary: This rule detects a specific hacking tool attributed to the Equation Group that was leaked by the ShadowBrokers. The tool facilitates various actions including setting target IPs, utilizing certificate and key files, specifying FTP paths, logging file locations, saving MAC times, and defining server ports. Indicators such as particular ASCII strings associated with usage instructions and file transfer parameters are used to identify the presence of this tool in files smaller than 100KB and starting with certain byte sequences.
  Updated-Date: '2024_08_07'
EquationGroup_elatedmonkey_1_0_1_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 601b74573fdd55571a8b4ae248e27e17
  Ruleset: securityonion-yara
  Summary: "This rule detects a specific hack tool known as elatedmonkey, which was leaked by the ShadowBrokers group and attributed to the Equation Group. The rule identifies the tool by searching for distinctive strings within files under 15KB. These strings include usage instructions, commands for executing shell operations, setting PHP script paths, and network connection commands, all indicative of the tool\u2019s functionalities. The presence of at least two of these strings in a file triggers detection, suggesting it is the elatedmonkey tool."
  Updated-Date: '2024_08_07'
EquationGroup_electricslide:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 939db654ce4955c345e1928d74cf7bba
  Ruleset: securityonion-yara
  Summary: This rule detects the "ElectricSlide" hack tool associated with the Equation Group, which was leaked by the ShadowBrokers. It looks for specific ASCII strings within a file, such as instructions and commands related to its usage, for example, references to port targeting, command payload reception, and usage guidelines. It also checks for the file's size and ensures the file begins with a specific signature indicating it is a valid executable.
  Updated-Date: '2024_08_07'
EquationGroup_elgingamble:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 82caebf7b79a2d1099e3871a69826966
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a hack tool known as "elgingamble" leaked by the hacking group ShadowBrokers, which is associated with the Equation Group. The detection focuses on specific string patterns indicating potential malicious activities, such as commands to change file ownership to root and set root privileges, messages indicating whether a kernel is vulnerable or not, and failures in spawning a shell. These identifiers suggest the tool aims to exploit vulnerabilities and gain unauthorized root access.
  Updated-Date: '2024_08_07'
EquationGroup_emptycriss:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 97eb6798d89c3f4dc10029a467a0a435
  Ruleset: securityonion-yara
  Summary: This rule detects the Equation Group hack tool known as "emptycriss," which was leaked by the ShadowBrokers. The detection is based on specific strings within the file, including command usage and prompts related to telnet and environmental variable definitions. The file size considered for this rule is less than 50KB.
  Updated-Date: '2024_08_07'
EquationGroup_envisioncollision:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ea1eb420c00df42f45fa955373460bf3
  Ruleset: securityonion-yara
  Summary: This rule detects a hacking tool associated with the Equation Group, a sophisticated cyber-espionage entity, which was leaked by ShadowBrokers. The detection focuses on specific patterns in the tool, including MySQL command syntax, network communication via netcat, a user agent string typical of Internet Explorer 6.0 on Windows NT 5.0, and a URL used for administrative functionalities in the context of web applications. The rule specifies conditions based on file signatures and size to identify the presence of this tool.
  Updated-Date: '2024_08_07'
EquationGroup_envoytomato:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 23ef49f0bfd8e0ac94d350208cbe82d3
  Ruleset: securityonion-yara
  Summary: This rule detects the Equation Group's hack tool "envoytomato," a file leaked by ShadowBrokers. It identifies the tool based on specific strings within the file, such as "[-] kernel not vulnerable" and "[-] failed to spawn shell," provided the file size is less than 250KB.
  Updated-Date: '2024_08_07'
EquationGroup_epoxyresin_v1_0_0:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f762cd81da15e4decb84c5c376f35ceb
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the "epoxyresin" hack tool, associated with the Equation Group and leaked by ShadowBrokers. The tool is identified by specific strings within its code, such as error messages about kernel vulnerability and issues creating temporary files, as well as references to system files in the boot directory. Detection is confirmed if the file matches certain conditions, including having a particular initial header value and being under 30KB in size.
  Updated-Date: '2024_08_07'
EquationGroup_estesfox:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f2663bd23061d41b1c50509bdd529bbc
  Ruleset: securityonion-yara
  Summary: This rule detects a specific hack tool associated with the Equation Group, which was leaked by the ShadowBrokers. The detection focuses on identifying a particular string within a file that contains commands to change the ownership and permission settings of an executable file in the `/tmp/logwatch.$2/cron` directory, setting the owner to root with read, write, and execute permissions for all users.
  Updated-Date: '2024_08_07'
EquationGroup_estopmoonlit:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 25ee3e8d5a6c5c2be22d9dc98fb1ab0b
  Ruleset: securityonion-yara
  Summary: This rule detects the Equation Group's hack tool, specifically targeting the file named "estopmoonlit" that was leaked by the ShadowBrokers. It identifies specific strings within the file, such as indicators of prepared shellcode, kernel vulnerability checks, shell execution failures, and SELinux enforcement prompts. The file size must be less than 250KB for these indicators to trigger detection.
  Updated-Date: '2024_08_07'
EquationGroup_evolvingstrategy_1_0_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 930834a1cc9d5cc4a79064cb2ba57184
  Ruleset: securityonion-yara
  Summary: This rule detects a hack tool attributed to the Equation Group, which was leaked by the ShadowBrokers. The tool includes specific strings related to privilege escalation, such as commands to change ownership and permissions of the shell, and to copy and set the shell with root ownership. It also looks for specific phrases indicating cleanup activities when elevated, and the presence of a specific executable path. The conditions for detection include a file size smaller than 4KB and the presence of at least one of these identified strings.
  Updated-Date: '2024_08_07'
EquationGroup_ewok:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7c2257a6600301f5116d60b06e3461c4
  Ruleset: securityonion-yara
  Summary: This rule detects the Equation Group's hacking tool, known as "ewok," which was leaked by ShadowBrokers. The rule searches for specific strings within files, such as examples of command usage, reference to a "cleaner" host, and version information. It also checks for files that start with a specific byte pattern and are smaller than 80KB in size.
  Updated-Date: '2024_08_07'
EquationGroup_exze:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3afd41d6114d2a8b5d2040d3403159ad
  Ruleset: securityonion-yara
  Summary: This rule detects the Equation Group hack tool file known as "exze," which was leaked by the ShadowBrokers. The detection criteria include the presence of specific ASCII strings such as "shellFile," "completed.1," and "zeke_remove," within a file smaller than 80KB and possessing a unique header value. The specified hash is also used to identify the targeted file.
  Updated-Date: '2024_08_07'
EquationGroup_gr:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: de95bfea388ec835b87af2e47c6d59b1
  Ruleset: securityonion-yara
  Summary: This rule detects a specific hack tool set associated with the Equation Group by looking for strings in files that are smaller than 1KB in size. The strings include a Linux shell script segment checking for the existence of a file in the /tmp directory and an echo statement indicating an error message suggesting the user try a different name.
  Updated-Date: '2024_08_07'
EquationGroup_gr_dev_bin_now:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 247e1365ca9477786dfeedced5a803ed
  Ruleset: securityonion-yara
  Summary: This rule detects a specific hack tool set associated with the Equation Group by looking for indicators such as the presence of certain strings referencing a local HTTP URL and specific execution paths related to "redmin" scripts. The conditions for detection include a file size less than 1KB and at least one match from the defined strings.
  Updated-Date: '2024_08_07'
EquationGroup_gr_dev_bin_post:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1a497ec96df699fd84f86967f88e0fec
  Ruleset: securityonion-yara
  Summary: This rule detects a specific toolset used by the Equation Group, identified through a URL-encoded string that appears to set up a cron job. The cron job, once activated, seems to execute a command pointing to a temporary directory, potentially suggesting malicious activity designed to persist on a compromised system. The binary is notably small, under 1KB in size, which aligns with certain lightweight hacking tools or scripts.
  Updated-Date: '2024_08_07'
EquationGroup_jackpop:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 34d6c6c33059c99bf8435d5098f68e98
  Ruleset: securityonion-yara
  Summary: This rule detects a hacking tool attributed to the Equation Group, specifically targeting the file known as jackpop. It identifies specific strings within the file that indicate possible errors or operational messages, such as issues with binding to a local address, port registration failures, difficulties in resolving destinations, and general problems with raw data processing. The rule also checks for a particular file signature and ensures the file size is less than 30KB as part of its detection criteria.
  Updated-Date: '2024_08_07'
EquationGroup_jparsescan:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 695147c491185a9750e7e9a19b8a738f
  Ruleset: securityonion-yara
  Summary: This rule detects the Equation Group's hacking tool known as "jparsescan," which was leaked by ShadowBrokers. The detection is based on identifying specific usage strings and patterns within files smaller than 40KB. The key strings include references to the tool's command-line usage and script variables used for matching network-related information, indicating its role in network scanning or probing activities.
  Updated-Date: '2024_08_07'
EquationGroup_jscan:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 28d1d6c4b45c9ceb5bbae413a8954b2d
  Ruleset: securityonion-yara
  Summary: This rule detects the Equation Group hack tool known as jscan, which was leaked by the ShadowBrokers. It identifies specific strings within files smaller than 250KB to determine the presence of the jscan tool.
  Updated-Date: '2024_08_07'
EquationGroup_libXmexploit2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e05ada4d7a3443b5e7dcf6e2a02527ff
  Ruleset: securityonion-yara
  Summary: This rule detects the file "libXmexploit2.8," a hack tool associated with the Equation Group that was leaked by the ShadowBrokers. It searches for specific strings within the file, which include command usage instructions, a placeholder for shellcode size, and an error message indicating a failure in execution. The tool checks if the file begins with a specific header and ensures that its size is less than 40KB.
  Updated-Date: '2024_08_07'
EquationGroup_linux_exactchange:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 48803d752d56dadec2dc891f4e759c4a
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the Equation Group's "ExactChange" hack tool set for Linux systems. The tool is identified by specific ASCII strings that indicate its operations, such as searching for vulnerable sockets, handling 32-bit and 64-bit exploits, preparing sockets for exploitation, and attempting various vulnerabilities. The tool's execution context checks for particular string patterns and file characteristics to confirm its presence.
  Updated-Date: '2024_08_07'
EquationGroup_magicjack_v1_1_0_0_client_1_1_0_0:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 83aebee8ba1894117d97c13712b7df76
  Ruleset: securityonion-yara
  Summary: This rule detects the Equation Group's hack tool identified as "magicjack_v1.1.0.0_client-1.1.0.0.py," which was leaked by ShadowBrokers. The tool includes commands for listing directory contents and setting listen ports, indicated by specific strings within the file, such as "result = self.send_command(\"ls -al %s\" % self.options.DIR)" and "cmd += \"D=-l%s \" % self.options.LISTEN_PORT". The rule triggers when the file's magic number matches a particular value, the file size is less than 80KB, and at least one of these strings is present.
  Updated-Date: '2024_08_07'
EquationGroup_modifyAudit_Implant:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7d598f77418b5f79b2b31b3dffd1168d
  Ruleset: securityonion-yara
  Summary: This rule detects a specific malware known to be associated with the Equation Group, which targets a DLL file named "modifyAudit_Implant.dll". It identifies the presence of this malware by searching for specific strings within files smaller than 90KB, including "LSASS.EXE", "hNtQueryInformationProcess", "hZwOpenProcess", and ".?AVFeFinallyFailure@@". The criteria include file signature checks and verifying the presence of all specified strings to confirm the malicious nature of the file.
  Updated-Date: '2024_08_07'
EquationGroup_modifyAudit_Lp:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 56a38050e2bb998a4aaf9594a76be999
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the EquationGroup's modifyAudit_Lp.dll malware, which is known for manipulating audit-related process memory. Key indicators include specific error messages related to the failure of audit memory reads, code pattern matching, and necessary auditing DLLs not being found. Additional indicators involve messages suggesting the possibility of another instance of modify_audit already running and the disabling of security auditing. The rule considers file size constraints and specific string patterns within the file.
  Updated-Date: '2024_08_07'
EquationGroup_modifyAuthentication_Implant:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 10049a8eb1e61fb671422690294f0be5
  Ruleset: securityonion-yara
  Summary: 'This rule detects a specific malware developed by the Equation Group, which targets the "modifyAuthentication_Implant.dll" file. It identifies the presence of this malware by looking for specific strings within the file, such as "LSASS.EXE", "hsamsrv.dll", "hZwOpenProcess", "hOpenProcess", and ".?AVFeFinallyFailure@@". The identified file must also meet certain conditions: it starts with the hexadecimal value "0x5a4d", is smaller than 200KB in size, and contains all the specified strings. The aim is to detect the malicious DLL associated with authentication modification activities.'
  Updated-Date: '2024_08_07'
EquationGroup_morerats_client_Store:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 33e181889efd2258eb2cb03795e21083
  Ruleset: securityonion-yara
  Summary: 'This rule detects a hacking toolset associated with the Equation Group by identifying specific error messages and strings within files. The toolset displays certain patterns such as "[-] Failed to mmap file: %s" and "[-] can not NULL terminate input data", which suggest issues with file memory mapping and data termination. Additionally, it looks for messages like "Missing argument for `-x''." and "[!] Value has size of 0!" that indicate problems with input arguments and empty values. This rule triggers on executables with a specific file size and content structure.'
  Updated-Date: '2024_08_07'
EquationGroup_morerats_client_addkey:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8ff2b84082cb57fd92359af449bf26b4
  Ruleset: securityonion-yara
  Summary: This rule detects a hack tool set associated with the Equation Group. It specifically identifies certain ASCII strings within files smaller than 20KB. These strings include prompts and system commands related to storing executables and key text file injections. The targeted strings indicate usage instructions for storing binaries and specifying key files, pointing to functionalities within a particular piece of malicious software used by the Equation Group.
  Updated-Date: '2024_08_07'
EquationGroup_morerats_client_genkey:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 92234b27e44b3f6f8b3328711936e8e9
  Ruleset: securityonion-yara
  Summary: This rule detects a tool from the Equation Group hack tool set. It searches for specific commands related to RSA key generation and client authentication using OpenSSL and binascii libraries, which are typically associated with generating RSA keys and random authentication tokens. The tool's executable file size is also checked to be less than 3KB to meet the detection criteria.
  Updated-Date: '2024_08_07'
EquationGroup_morerats_client_noprep:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 583c7e378ae59e21b5eccbfd3a4adaa1
  Ruleset: securityonion-yara
  Summary: This rule detects an Equation Group hacking tool set characterized by specific strings related to the tool's functionality. The identified strings include commands and arguments for the tool, such as storing data with formatted instructions, injecting arguments into a file, and avoiding automatic termination after a set period. The rule focuses on tool artifacts under 9KB in size.
  Updated-Date: '2024_08_07'
EquationGroup_nethide_Implant:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 47117f45547f72ef652879683ce3d351
  Ruleset: securityonion-yara
  Summary: This rule detects a specific malware from the Equation Group known as the nethide implant. The detection focuses on a DLL file named "nethide_Implant.dll" and uses both string patterns and file characteristics as indicators. Key identifiers include the presence of the string "\\\\.\\dlcndi" in ASCII format and the string "s\\drivers\\" in wide format, along with the specific file size constraint of less than 90KB and the PE file header signature 0x5a4d.
  Updated-Date: '2024_08_07'
EquationGroup_nethide_Lp:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b68f353e88dbfcce8bd0fdd52df2a418
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the EquationGroup malware associated with the file nethide_Lp.dll. It looks for specific strings indicating error messages and operational statuses related to hiding and unhiding TCP connections, as well as privilege and slot management. The file being checked should be a Windows executable (indicated by the "MZ" header) and must be smaller than 300KB, containing at least one or all of the identified strings.
  Updated-Date: '2024_08_07'
EquationGroup_noclient_3_3_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4bb2b71afde81731a13c3381a4b1e67d
  Ruleset: securityonion-yara
  Summary: This rule detects the Equation Group hack tool set, focusing on specific patterns within its components. It looks for distinct strings related to network configurations and commands such as "127.0.0.1 is not advisable as a source. Use -l 127.0.0.1 to override this warning," "iptables -%c OUTPUT -p tcp -d 127.0.0.1 --tcp-flags RST RST -j DROP;," and other strings related to execution failure logs and network ping commands. The rule targets files smaller than 1000KB, identifying instances where these unique markers appear.
  Updated-Date: '2024_08_07'
EquationGroup_ntfltmgr:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 83e02beb2fb9d33070f44641a48b855f
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of malware associated with the Equation Group by identifying specific characteristics of the file "ntfltmgr.sys". The rule looks for strings such as "ntfltmgr.sys", "ntfltmgr.pdb", "Network Filter Manager", and "Corporation. All rights reserved." within the file. These strings help to confirm the identity of the malware. Additionally, the rule checks that the file starts with bytes indicating a valid executable (0x5a4d) and that the file size is less than 100KB to ensure it matches the expected profile of the malicious file.
  Updated-Date: '2024_08_07'
EquationGroup_orleans_stride_sunos5_9_v_2_4_0:
  Created-Date: '2024_08_06'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9ecafa29628952778ce117ef166ade50
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific hack tool set attributed to the Equation Group. It identifies files by checking for specific ASCII strings such as "_lib_version," a formatted string containing ",%02d%03d," and the word "TRANSIT." Additionally, it conditions the detection on the file having a specific initial signature (0x457f) and being less than 200KB in size.
  Updated-Date: '2024_08_06'
EquationGroup_packrat:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: fc18bb969e5881626fbf83d832f56d04
  Ruleset: securityonion-yara
  Summary: This rule detects a hacking tool associated with the Equation Group, specifically targeting a file known as "packrat," which was leaked by the ShadowBrokers. It identifies key strings within a file that suggest the presence of remote access trojans (RATs) and commands related to their deployment. The strings include specific phrases that indicate the tool's usage instructions and configurations for establishing remote control, such as setting up a network listener and binding it to a port.
  Updated-Date: '2024_08_07'
EquationGroup_parsescan:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e841f912da72432a753954cfb0ca06cc
  Ruleset: securityonion-yara
  Summary: This rule detects a specific hack tool linked to the Equation Group, leaked by ShadowBrokers, known as "parsescan." It identifies the tool by searching for characteristic strings in files less than 250KB in size. The key strings include references to scanning for specific versions of protocols (Sol or SNMP) and usage instructions for a program involving file, program number, version, protocol, and IP address parameters.
  Updated-Date: '2024_08_07'
EquationGroup_pclean_v2_1_1_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 59ef86a801b24558652802341a389acf
  Ruleset: securityonion-yara
  Summary: This rule detects a specific version of the "Equation Group" hack tool named pclean.v2.1.1.0, designed for the Linux i386 architecture. The tool's functionality includes significantly improving processing time, and it also includes a command search feature using the strncmp function. The rule identifies this tool by verifying certain string patterns and checking the file size to ensure it is less than 40KB.
  Updated-Date: '2024_08_07'
EquationGroup_porkclient:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3ee75ae5e7afa0527c75d6b97af85f60
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the Equation Group's porkclient hack tool, which was leaked by the ShadowBrokers. It identifies specific strings within a file, such as command-line options for executing shell commands, error messages related to command combinations, and details about socket reuse for Nopen connections. The rule applies to files that start with a specific magic number and have a size of less than 30KB.
  Updated-Date: '2024_08_07'
EquationGroup_processinfo_Implant:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7599d8563721f27deb4673306d2a28a5
  Ruleset: securityonion-yara
  Summary: This rule detects the EquationGroup malware by identifying a specific DLL file named "processinfo_Implant.dll." The detection criteria include the presence of full-word ASCII strings such as "hZwOpenProcessToken" and "hNtQueryInformationProcess," as well as the wide string "No mapping." The rule also ensures that the file has a particular header value and a size of less than 80KB.
  Updated-Date: '2024_08_07'
EquationGroup_promptkill:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5dfe4f590d3f4b3b0772f566177ddfcb
  Ruleset: securityonion-yara
  Summary: This rule detects a file associated with the Equation Group hack tool, specifically the "promptkill" utility leaked by the ShadowBrokers. It identifies the presence of specific strings within the file, including an execution command for an xterm process and arguments for setting the title and appearance of the xterm window to prompt for killing a process. The file must be less than 250KB in size, and the detection relies on finding at least one of these defined patterns.
  Updated-Date: '2024_08_07'
EquationGroup_pwdump_Implant:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6255a6041909383651a706882210f3fe
  Ruleset: securityonion-yara
  Summary: This rule detects the EquationGroup malware file named `pwdump_Implant.dll`. The detection criteria include specific strings associated with the malware, such as ".?AVFeFinallyFailure@@" and ".?AVFeFinallySuccess@@", both in fullword ASCII format, as well as a wide string reference to "\\system32\\win32k.sys". The conditions also specify that the file should have a certain header value, a size under 100KB, and include all identified strings.
  Updated-Date: '2024_08_07'
EquationGroup_pwdump_Lp:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9a176535b62f1e9088ae0c898d95eb66
  Ruleset: securityonion-yara
  Summary: This rule detects the file "pwdump_Lp.dll" associated with EquationGroup malware. It identifies a specific string "PWDUMP - - ERROR - -" encoded in wide characters within a file that begins with the PE signature (0x5a4d) and has a size of less than 300KB.
  Updated-Date: '2024_08_07'
EquationGroup_ratload:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0e0183997d75e3e6af82c82b912fdc18
  Ruleset: securityonion-yara
  Summary: This rule detects a tool associated with the Equation Group, which was leaked by the ShadowBrokers. The tool, known as "ratload," is characterized by specific strings found within its code, including references to a temporary file path "/tmp/ratload.tmp.sh," a remote usage command involving telnet and a shell, and a sequence of commands to uncompress files and execute them. The file size must be less than 250KB for this rule to trigger.
  Updated-Date: '2024_08_07'
EquationGroup_reverse_shell:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7a8a77ad9f84779864e81adfda5c3dcc
  Ruleset: securityonion-yara
  Summary: This rule detects a specific reverse shell script attributed to the Equation Group, a sophisticated hacking group. The script, leaked by the ShadowBrokers, establishes a shell on a remote server using the string "sh >/dev/tcp/", and redirects standard input and output to the same session with "<&1 2>&1". The rule targets files smaller than 1KB that contain both of these characteristic strings.
  Updated-Date: '2024_08_07'
EquationGroup_sambal:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a5dfc32cab26d54ac78a4694e2a2f099
  Ruleset: securityonion-yara
  Summary: This rule detects a hacking tool associated with the Equation Group, specifically targeting files named "sambal." The tool is characterized by several distinctive string patterns within the file, such as messages indicating bruteforce mode, errors stating that a host is not running Samba, and connection attempts to specific IP addresses. Additional strings include usage instructions with various command-line options. The detection criteria are based on specific file properties, including a particular header signature and size constraints, combined with the presence of these unique strings.
  Updated-Date: '2024_08_07'
EquationGroup_scanner:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e39a7feeb960d5f8a073bef78389f3f8
  Ruleset: securityonion-yara
  Summary: This rule detects a file scanner tool associated with the Equation Group, a hacking entity whose tools were leaked by the hacker group ShadowBrokers. It identifies specific strings within the file, such as "program version netid address service owner," "Sorry about the raw output," and "-scan winn %s one." The rule targets files smaller than 250KB containing any one of these strings.
  Updated-Date: '2024_08_07'
EquationGroup_scanner_output:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d22280ae4ac02571fc07e6f253928804
  Ruleset: securityonion-yara
  Summary: This rule detects output generated by the EQGRP scanner.exe. It identifies specific ASCII text patterns within files smaller than 1000KB, including phrases like "# scanning ip", "# Scan for windows boxes", "Going into send", "# Does not work", "You are the weakest link, goodbye", and "rpc   Scan for RPC  folks". The presence of at least two of these patterns in the file triggers a match, indicating likely output from the EQGRP scanner tool.
  Updated-Date: '2024_08_07'
EquationGroup_scripme:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 000fe4665fdd91851922f87204eccbbe
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the Equation Group's hack tool named "scripme," which was leaked by the ShadowBrokers. It identifies specific strings within files smaller than 30KB that are associated with this tool, such as a command related to "tcpdump" with an environment variable named "$INTERFACE," an error message about not being root, a reference to "$ENV{EXPLOIT_SCRIPME}," and the path "$opetc/scripme.override."
  Updated-Date: '2024_08_07'
EquationGroup_seconddate_ImplantStandalone_3_0_3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e08c0121793178293b90edfc8bdcbe19
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the "Equation Group hack tool set" by identifying specific strings within executable files. It searches for unique fullword ASCII strings such as "EFDGHIJKLMNOPQRSUT", "G8HcJ HcF LcF0LcN", and "GhHcJ0HcF@LcF0LcN" within files that are smaller than 1000KB and begin with the hex value 0x457f. These characteristics are used to confirm the existence of the "ImplantStandalone 3.0.3" tool within the examined files.
  Updated-Date: '2024_08_07'
EquationGroup_slugger2:
  Created-Date: '2024_08_06'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1dfdb69b51d9bb283c2a024c44a8a04f
  Ruleset: securityonion-yara
  Summary: This rule detects a specific file associated with the Equation Group, a notable group of hackers. The file, known as "slugger2," has links to leaks by the ShadowBrokers. The rule identifies this file through distinctive string patterns and specific conditions, including particular command usage instructions, mutex names, and messages indicating read waiting and completion statuses. These characteristics collectively signal the presence of the slugger2 hack tool.
  Updated-Date: '2024_08_06'
EquationGroup_smash:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b0407270b210bb302ce8163847829f02
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a hacking tool associated with the Equation Group, which was leaked by the ShadowBrokers. It checks for specific strings within files smaller than 250KB, including "T=<target IP> [O=<port>] Y=<target type>", "no command given!! bailing...", and "no port. assuming 22...". These strings are indicators of the tool's usage and configuration settings.
  Updated-Date: '2024_08_07'
EquationGroup_sshobo:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9434ffcebc020447be6726cf2b8bfc10
  Ruleset: securityonion-yara
  Summary: This rule detects a hacking tool associated with the Equation Group that was leaked by ShadowBrokers. The detected file, known as sshobo, is identified by specific strings related to port forwarding errors, internal read errors, listing of forwarded connections, and packet injection blocks. The file is expected to be an executable with a specific initial byte value and a size less than 600KB.
  Updated-Date: '2024_08_07'
EquationGroup_store_linux_i386_v_3_3_0:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7a9df6bf91aae0fda04aef6221e3c02a
  Ruleset: securityonion-yara
  Summary: 'This rule detects a specific version (3.3.0) of a Linux i386 hack tool set used by Equation Group. The detection leverages unique strings within the tool''s code, including error messages like "[-] Failed to map file: %s", "[-] can not NULL terminate input data", and "[!] Name has size of 0!". Additionally, it checks for the presence of a particular file signature and constrains the file size to be less than 60KB.'
  Updated-Date: '2024_08_07'
EquationGroup_telex:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d37ac81cde06d6623341d21d0ecb4654
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a hacking tool associated with the Equation Group, specifically the file known as "telex" leaked by the ShadowBrokers. It identifies characteristic strings within the file, such as certain usage instructions, messages indicating non-vulnerability of a target, details about sending malicious payloads, and timeout errors related to exploit failure. Additionally, it checks for a specific file signature and ensures the file size is under 50KB to confirm a match.
  Updated-Date: '2024_08_07'
EquationGroup_tmpwatch:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1ffa12b2a5af32e9f0231f7d19d8c075
  Ruleset: securityonion-yara
  Summary: This rule detects a tool used by the Equation Group, a notorious cyber espionage group often linked to state-sponsored activities. The tool in question involves specific commands to change ownership and permissions of a file located at "/tmp/.scsi/dev/bin/gsh", indicating potential malicious actions aimed at gaining unauthorized access or control. The detection is based on identifying these commands in files smaller than 1KB in size.
  Updated-Date: '2024_08_07'
EquationGroup_tnmunger:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 91b56eace0789261b04714704c4e339b
  Ruleset: securityonion-yara
  Summary: This rule detects a hack tool known as tnmunger, which was leaked by the ShadowBrokers and attributed to the Equation Group. The tool is identified based on specific strings related to port manipulation, indicating its usage in network-related operations. The rule looks for these strings within files that have a particular small size and meet a specific initial byte sequence characteristic.
  Updated-Date: '2024_08_07'
EquationGroup_toast_v3_2_0:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b9f02620601f0e2900e83ee8ed34c7f7
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the Equation Group's hacking tool known as toast_v3.2.0.1 for Linux systems, which was leaked by the ShadowBrokers. The tool contains specific strings related to its usage for log manipulation, such as commands for roasting logs and specific usage messages. It also includes a condition checking for a specific file signature, ensuring the file is below 50KB in size, and verifying at least one of the identifying strings is present.
  Updated-Date: '2024_08_07'
EquationGroup_watcher_linux_i386_v_3_3_0:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0f6fef0017bfa7b11083087b37a4bf63
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the Equation Group's hack toolset designed for Linux i386 systems, specifically version 3.3.0. It identifies the toolset through several distinctive strings found within the file, such as specific phrases like "invalid option `", "readdir64", "89:z89:%r%opw", "Ropopoprstuvwypypop", and "Missing argument for `-x'.". The toolset is recognized by examining files smaller than 700KB that match these string patterns, ensuring the detection of this particular malicious software.
  Updated-Date: '2024_08_07'
EquationGroup_watcher_linux_x86_64_v_3_3_0:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a16737fff8bb18434d6914fb56825078
  Ruleset: securityonion-yara
  Summary: This rule detects a Linux x86_64 toolset associated with "Equation Group," a high-profile hacker group. It identifies the presence of specific strings within an executable file whose size is less than 900KB and has a particular file signature. The strings used for detection are "forceprismheader," "invalid option `," and "forceprism," indicative of the toolset's unique functionality and configuration.
  Updated-Date: '2024_08_07'
EquationGroup_watcher_solaris_i386_v_3_3_0:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: fc44e1bfd788398347dcbcbf422f9ddb
  Ruleset: securityonion-yara
  Summary: This rule detects a specific version (v3.3.0) of an Equation Group hack tool set targeting Solaris i386 systems. It identifies the tool through distinct strings within the executable, such as "getexecname," "invalid option `," "__fpstart," and "GHFIJKLMNOPQRSTUVXW." The rule further refines detection by checking that the file has a particular format and is less than 700KB in size.
  Updated-Date: '2024_08_07'
EquationGroup_wrap_telnet:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1014bcc1b21ef2b0959d5a996e8292b0
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific hacking tool used by the Equation Group, which was leaked by ShadowBrokers. The tool in question, `wrap-telnet.sh`, is a script designed to establish Telnet connections. The rule identifies the script based on unique text patterns within it, such as command examples and port specifications, and by confirming its file size is less than 4KB. The identified patterns include instructions for starting a mini X server and defining callback ports.
  Updated-Date: '2024_08_07'
EquationGroup_x86_linux_exactchange:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8167189bb81fb4cd47ae3e3c4c64529a
  Ruleset: securityonion-yara
  Summary: This rule detects a specific toolset associated with the Equation Group, a notorious hacking entity. It identifies the malware by looking for specific ASCII strings within the file, such as "kernel has 4G/4G split, not exploitable" and "[+] kernel stack size is %d," and ensuring that the file matches certain characteristics, like having a file size less than 1000KB and starting with the hexadecimal value 0x457f. The hash values provided also aid in pinpointing the exact malicious files.
  Updated-Date: '2024_08_07'
EquationGroup_xspy:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d90791b53c91cc3474875bc00f6d0c07
  Ruleset: securityonion-yara
  Summary: 'This rule detects the Equation Group hacking tool known as xspy, which was leaked by the ShadowBrokers. It identifies the presence of xspy by looking for a specific string that outlines its usage syntax, particularly "USAGE: xspy -display <display> -delay <usecs> -up" in ASCII format. The rule also mandates that the file must be an executable (indicated by the 0x457f signature) and have a size of less than 60KB.'
  Updated-Date: '2024_08_07'
EquationGroup_ys:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f878e6f81aad15dbcece6600bb7da529
  Ruleset: securityonion-yara
  Summary: This rule detects the Equation Group hack tool leaked by ShadowBrokers, particularly the file ys.auto. It identifies specific unique strings within the file, including an exploit script initialization, a command related to setting target parameters, and a fatal error message involving port configuration. The rule is designed to match files that are smaller than 250KB and contain at least one of the specified strings.
  Updated-Date: '2024_08_07'
EquationGroup_ys_ratload:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4a36ae8263a6737993609800572a75ce
  Ruleset: securityonion-yara
  Summary: This rule detects the Equation Group's hacking tool "ys.ratload.sh," which was leaked by the ShadowBrokers. The tool is designed to facilitate remote access by setting up a mini X server on a specified port, with default configurations outlined in its usage examples. The detection is based on specific strings found within the tool's script, including command-line usage examples, port configurations, and callback port settings. The rule triggers if the file content matches these patterns and has specific characteristics, like a file size of less than 3KB.
  Updated-Date: '2024_08_07'
Equation_Kaspersky_DoubleFantasy_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a8476e305b56978b2b56ce0d7311c8fc
  Ruleset: securityonion-yara
  Summary: This rule detects the DoubleFantasy malware, associated with the Equation Group, by identifying specific strings and behaviors within executable files. It looks for the presence of "msvcp5%d.dll" and several function names related to the "actxprxy" library such as "GetProxyDllInfo," "DllGetClassObject," "DllRegisterServer," and "DllUnregisterServer." Additionally, it checks for certain strings including "191H1a1," and specific month names like "November," "January," "October," and "September." The detection is triggered if the file matches the PE header signature (0x5a4d), is smaller than 350,000 bytes, and contains either the DLL name or all specified function names along with at least six of the specified month-related strings.
  Updated-Date: '2024_08_07'
Equation_Kaspersky_EOP_Package:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f152c0ffc101bc2b37fb0ede6cddfa6d
  Ruleset: securityonion-yara
  Summary: This rule detects Equation Group malware associated with the elevation of privilege (EoP) package and malware launcher. It identifies specific strings, such as "abababababab", "abcdefghijklmnopq", "@STATIC", "$aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "@prkMtx", "prkMtx", and "cnFormVoidFBC", within a file. Additionally, it ensures that the file signature starts with the standard "MZ" header for executables and that the file size is below 100,000 bytes.
  Updated-Date: '2024_08_07'
Equation_Kaspersky_EquationDrugInstaller:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9945e4d4d8c6a504a80a144ac6a1ffee
  Ruleset: securityonion-yara
  Summary: This rule detects the EquationDrug installer, a component associated with the Equation Group's malware. The malware is identified by checking for specific patterns, including a reference to the system file `win32k.sys`, the string "ALL_FIREWALLS," and other distinctive wide strings such as "@prkMtx," "STATIC," "windir," and several others. Additionally, the file must meet certain criteria, such as having a specific file header and being below a defined size limit, ensuring that multiple specific patterns are present.
  Updated-Date: '2024_08_07'
Equation_Kaspersky_EquationLaserInstaller:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 612fa26db5987fc2cbb61fe2bb7f7668
  Ruleset: securityonion-yara
  Summary: This rule detects the EquationLaser Installer, a component of the Equation Group malware. It identifies specific strings related to the malware, such as error messages about Windows version retrieval, references to "lsasrv32.dll" and "lsass.exe," and patterns like mailslot paths and timestamp formats. The rule is triggered if the file starts with the 'MZ' header (indicating a Windows executable) and meets the size condition, confirming the presence of multiple defined strings characteristic of the installer.
  Updated-Date: '2024_08_07'
Equation_Kaspersky_FannyWorm:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d1863663d7c99c49a2b51a0231d98bb9
  Ruleset: securityonion-yara
  Summary: This rule detects the Fanny Worm, a malware associated with the Equation Group. It identifies specific strings and patterns within files indicative of the worm's presence, such as file paths, executable names, and system service references. The conditions for detection include the examination of these strings within files that conform to the DOS MZ header format and are less than 300,000 bytes in size. The rule uses a combination of string matches and the presence of multiple key indicators related to the worm's activity to confirm its presence.
  Updated-Date: '2024_08_07'
Equation_Kaspersky_GROK_Keylogger:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 832e883114cbfe813a89b7aa490afb02
  Ruleset: securityonion-yara
  Summary: This rule detects the GROK keylogger, a malware component attributed to the Equation Group, identified through multiple specific indicators. These include file paths such as "c:\\users\\rmgree5\\", filenames like "msrtdv.sys", and string patterns found within the malware, including "svrg.pdb", "W32pServiceTable", and "ARASATAU". Additionally, it checks for registry paths related to Microsoft Windows NT and SYSTEM configurations. The detection is effective for files smaller than 250,000 bytes that meet specific criteria in header and string contents.
  Updated-Date: '2024_08_07'
Equation_Kaspersky_GreyFishInstaller:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 241a8ca40830f5802944099ef7e82953
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of GreyFish, a malware associated with the Equation Group, by identifying specific strings related to its known behaviors and components. The rule looks for the file name "DOGROUND.exe," the phrase "Windows Configuration Services," and the function "GetMappedFilenameW" within files, indicating the potential installation or execution of GreyFish on a system.
  Updated-Date: '2024_08_07'
Equation_Kaspersky_HDD_reprogramming_module:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2606dccc7ad80ebb451741556cb6c3df
  Ruleset: securityonion-yara
  Summary: This rule detects the Equation Group's HDD reprogramming module, a malicious software that interacts with hardware at a low level. The malware includes specific strings associated with system files and functions like "nls_933w.dll," "BINARY," "KfAcquireSpinLock," "HAL.dll," and "READ_REGISTER_UCHAR." It checks for a specific file signature and ensures the file size is under 300,000 bytes.
  Updated-Date: '2024_08_07'
Equation_Kaspersky_SuspiciousString:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 673daeac9b80343cb57128d2381e28c3
  Ruleset: securityonion-yara
  Summary: This rule detects malicious activities associated with the Equation Group malware by identifying specific suspicious strings within a file. These strings include references to a debug path ("i386\\DesertWinterDriver.pdb"), a post-installation message ("Performing UR-specific post-install..."), a timeout error related to an implant-specific executable ("Timeout waiting for the 'canInstallNow' event from the implant-specific EXE!"), an executable name ("STRAITSHOOTER30.exe"), a file name version ("standalonegrok_2.1.1.1"), and a specific user directory path ("c:\\users\\rmgree5\\"). The rule targets files with a specific header and size constraint, ensuring these strings are present to trigger detection.
  Updated-Date: '2024_08_07'
Equation_Kaspersky_TripleFantasy_1:
  Created-Date: '2024_08_06'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5dfa016cf7b1a642dd281231ebc9a0a0
  Ruleset: securityonion-yara
  Summary: This rule detects the TripleFantasy malware, which is associated with the Equation Group. It identifies specific filenames, paths, and global object names within the Windows operating system, such as "%SystemRoot%\system32\hnetcfg.dll" and "Global\{8c38e4f3-591f-91cf-06a6-67b84d8a0102}". It also looks for connections to certain URLs and IP addresses at specific ports, notably itemagic.net, team4heat.net, 62.216.152.69, and 84.233.205.37 over port 443, as well as common URLs like www.microsoft.com and www.google.com over port 80. This rule triggers if an executable's initial two bytes match "MZ" and its filesize is less than 300 KB, provided that all specified string patterns and at least some network indicators are present.
  Updated-Date: '2024_08_06'
Equation_Kaspersky_TripleFantasy_Loader:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9a5e1f1156a8eb5ade891f8bc3b2c363
  Ruleset: securityonion-yara
  Summary: This rule detects the TripleFantasy Loader, a piece of malware attributed to the Equation Group. The loader is identified by specific strings embedded in its code, including references to "Original Innovations, LLC," "Moniter Resource Protocol," and "ahlhcib.dll." It also looks for specific functions related to the Windows Network Connections Manager, such as "HNetGetSharingServicesPage," "IcfGetOperationalMode," "IcfGetDynamicFwPorts," "HNetFreeFirewallLoggingSettings," "HNetGetShareAndBridgeSettings," and "HNetGetFirewallSettingsPage." The rule flags a sample if the file begins with the "MZ" header and is less than 50,000 bytes in size, ensuring that all identified strings are present.
  Updated-Date: '2024_08_07'
EternalRocks_svchost:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c03071596d9161b2aace59e333bcb256
  Ruleset: securityonion-yara
  Summary: This rule detects EternalRocks malware by identifying specific artifacts associated with the file taskhost.exe. It looks for the presence of particular strings in the file, such as "WczTkaJphruMyBOQmGuNRtSNTLEs," "svchost.taskhost.exe," and any occurrence of "ConfuserEx v." Additionally, it checks for a specific file header signature and ensures that the file size is less than 500KB.
  Updated-Date: '2024_08_07'
EternalRocks_taskhost:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 24677d2b9a9567d0c4109440cef8fd6e
  Ruleset: securityonion-yara
  Summary: This rule detects the EternalRocks malware by identifying the "taskhost.exe" file. Key indicators include the presence of the string "EternalRocks.exe" in wide format and specific ASCII strings such as "sTargetIP", "SERVER_2008R2_SP0", "20D5CCEE9C91A1E61F72F46FA117B93FB006DB51", and "9EBF75119B8FC7733F77B06378F9E735D34664F6". The rule triggers if the file size is less than 15000KB and certain string conditions are met.
  Updated-Date: '2024_08_07'
Exp_EPS_CVE20152545:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a85141f09f95f401cb7f96f4d867e14c
  Ruleset: securityonion-yara
  Summary: This rule detects an EPS Word exploit associated with CVE-2015-2545. It identifies files beginning with the PK (0x4b50) signature, which is common in certain compressed file formats, and containing a specific EPS file path ("word/media/image1.eps") along with a repetitive string pattern detected more than 20 times. This combination of factors helps in spotting the exploit within Word documents.
  Updated-Date: '2024_08_07'
Exploit_MS15_077_078:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: dfdd0c28e156e29541380ec5ef66598e
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a generic Microsoft Windows kernel exploit associated with vulnerabilities MS15-078 and MS15-077. It identifies suspicious activities related to the exploitation of these vulnerabilities by looking for specific file names, functions, and binary patterns. The rule checks for the presence of "GDI32.DLL," "atmfd.dll," and functions like "AddFontMemResourceEx," "NamedEscape," "CreateBitmap," and "DeleteObject." Additionally, it searches for specific opcode sequences that are indicative of exploit behavior. This helps in identifying potential malicious activities that leverage these vulnerabilities within the specified file size limit.
  Updated-Date: '2024_08_07'
Exploit_MS15_077_078_HackingTeam:
  Created-Date: '2024_08_06'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2ee1b3aa3087040e77813502c0dff4ba
  Ruleset: securityonion-yara
  Summary: This rule detects malware associated with the Hacking Team that exploits the MS15-078 and MS15-077 vulnerabilities. It identifies suspicious files based on specific strings within the targeted software, including references to critical system files like "CI.dll" and "CRTDLL.DLL," as well as web user-agent strings mimicking common browsers. This is effective for identifying malicious files under a certain size threshold with specific characteristics indicative of exploitation attempts.
  Updated-Date: '2024_08_06'
Explosion_Generic_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e112aa94b68f06e1aff77f0d582e744b
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of Explosion/Explosive malware associated with the Volatile Cedar Advanced Persistent Threat (APT). It identifies malicious activity by scanning for specific characteristics and behaviors typically found in such malware. Key indicators include the presence of strings such as "autorun.exe", user-agent strings mimicking Internet Explorer, and references to common executable filename patterns. It also detects references to Microsoft's default URL and error messages such as "error.renamefile" and "insufficient lookahead". The rule triggers when it matches at least seven of these strings and the file starts with the common "MZ" header, indicating a Windows executable.
  Updated-Date: '2024_08_07'
Explosion_Sample_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4ad72be300e6dc5396293a72c327a2fa
  Ruleset: securityonion-yara
  Summary: "This rule detects the presence of the Explosive Malware, also known as Volatile Cedar APT. It identifies various strings associated with the malware, such as registry additions, unique identifiers, password-protected site references, and specific system file references. The rule also checks for certain HTTP strings, Outlook HTTP references, and structured hexadecimal values typical for this malware. The detection process validates these strings alongside verifying the PE file signature, indicating the malware\u2019s presence."
  Updated-Date: '2024_08_07'
Explosion_Sample_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7e9cb4ddbc8c7f9a8ab9e22015966616
  Ruleset: securityonion-yara
  Summary: This rule detects the Explosion/Explosive malware associated with the Volatile Cedar APT group. It identifies the presence of a specific malicious DLL file named "serverhelp.dll" and the phrase "Windows Help DLL", alongside the function name "SetWinHoK". Additionally, the file targeted by this rule begins with the hexadecimal value 0x5A4D, which indicates a Windows executable.
  Updated-Date: '2024_08_07'
Explosive_UA:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 15f75f0a3e67288f83eccefa0cea4632
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of Explosive malware associated with the Volatile Cedar Advanced Persistent Threat (APT) group. It specifically identifies a unique user agent string consistent with a manipulated Internet Explorer signature and checks for the presence of a specific Windows executable header indicator.
  Updated-Date: '2024_08_07'
FE_APT_Backdoor_Linux32_SLOWPULSE_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: bea06e656df327437ae1a57b882613da
  Ruleset: securityonion-yara
  Summary: "This rule detects the Linux 32-bit version of the SLOWPULSE backdoor, as identified by its unique byte patterns. These patterns, such as specific sequences of hexadecimal bytes, are indicative of the backdoor\u2019s presence within a file. The rule focuses on identifying these distinctive byte strings to recognize the malware, which was detailed in cybersecurity reports on PulseSecure vulnerabilities exploited by suspected advanced persistent threat (APT) actors."
  Updated-Date: '2024_08_07'
FE_APT_Backdoor_Linux32_SLOWPULSE_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c6e0c6aec033b4ad59832b2250fa709b
  Ruleset: securityonion-yara
  Summary: This rule detects a Linux backdoor known as SLOWPULSE, specifically targeting 32-bit systems. It identifies associated malicious samples by matching a specific pattern of printable ASCII and non-ASCII characters within the executable, while ensuring the first four bytes of the file correspond to the ELF magic number. The rule excludes files containing a specific "magic string" to avoid false positives. The SLOWPULSE backdoor has been reported in context with Pulse Secure security vulnerabilities.
  Updated-Date: '2024_08_07'
FE_APT_Trojan_Linux32_LOCKPICK_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 69d45ae2d6aba81e8a595b6237cb8b17
  Ruleset: securityonion-yara
  Summary: This rule detects a 32-bit Linux Trojan named LOCKPICK. It specifically targets samples reported in the Pulse Secure research concerning suspected APT actors exploiting zero-day vulnerabilities. The detection is based on specific hexadecimal patterns within the Trojan's binary code. The rule checks for certain characteristics in the file header and specific sequences of bytes in the binary, ensuring that the patterns match predefined conditions within the executable code structure.
  Updated-Date: '2024_08_07'
FE_APT_Trojan_Linux32_PACEMAKER:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: fb1ebfcc49e0458b71dd8798cd93c26a
  Ruleset: securityonion-yara
  Summary: This rule detects a trojan targeting 32-bit Linux systems, known as PACEMAKER, which has been linked to advanced persistent threat (APT) activity. It identifies specific patterns in file paths and memory manipulation related to the system's `/proc` directory, which is commonly used for process and memory management. The rule also looks for particular sequences of bytes in the executable that align with known behaviors of the PACEMAKER malware, such as reading and manipulating the memory and command-line arguments of other processes. This detection focuses on recognizing the binary structure and signature sequences consistent with this specific malicious software.
  Updated-Date: '2024_08_07'
FE_APT_Trojan_Linux_PACEMAKER:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e4e17e9e118519a6134e65b233abb7a9
  Ruleset: securityonion-yara
  Summary: This rule detects a Linux-based Trojan known as PACEMAKER, which is associated with advanced persistent threat (APT) actors. The detection focuses on specific strings related to process memory access and command-line information, including formats for displaying names, passwords, and authentication numbers, as well as references to the `/proc/` directory. It ensures that the file is an ELF executable and matches all identified strings indicating the presence of this malware.
  Updated-Date: '2024_08_07'
FE_APT_Trojan_PL_PULSEJUMP_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 503758c13ef92f736df05898354a917d
  Ruleset: securityonion-yara
  Summary: This rule detects a specific Trojan known as PULSEJUMP, which is associated with suspected APT actors leveraging bypass techniques in Pulse Secure's zero-day vulnerabilities. It focuses on identifying code patterns and behaviors commonly attributed to the malware, such as opening files, writing to temporary directories, and specific conditional structures involving authentication protocols like Radius, Samba, and Active Directory.
  Updated-Date: '2024_08_07'
FE_APT_Trojan_PL_QUIETPULSE:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3b1cc7b72fe052967a9b74758822e45a
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the QUIETPULSE Trojan by identifying specific patterns in the code. It looks for characteristic strings related to command redirection for standard output and error, socket creation for server communication, binding and listening actions on a server socket, as well as process forking and execution behaviors. These indicators are used to identify samples mentioned in the Pulse Secure report, suspected to be deployed by advanced persistent threat (APT) actors leveraging bypass techniques.
  Updated-Date: '2024_08_07'
FE_APT_Trojan_PL_RADIALPULSE_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 846907f708ea9cd7ff25ff1413264522
  Ruleset: securityonion-yara
  Summary: This rule detects malicious samples linked to the RADIALPULSE trojan, as reported in the Pulse Secure investigation. It identifies specific patterns within the code, including function calls that handle realm information, open file descriptors, and syswrite invocations for realm, username, and password data, indicating attempts to manipulate and exfiltrate sensitive authentication details.
  Updated-Date: '2024_08_07'
FE_APT_Trojan_PL_RADIALPULSE_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 13d40b6b274c5bf896b00c603be8755f
  Ruleset: securityonion-yara
  Summary: This rule detects a variant of the RADIALPULSE trojan, specifically identified in a report on Pulse Secure vulnerabilities. It searches for specific code snippets that signify the opening, writing to, and closing of file descriptors, which are indicative of the trojan's behavior. The detection strings include patterns for file operations within the "/tmp/" directory, often used for temporary storage in Unix-like systems. The presence of these patterns in a program's code suggests malicious activity associated with the RADIALPULSE malware leveraging bypass techniques described in the referenced Pulse Secure report.
  Updated-Date: '2024_08_07'
FE_APT_Trojan_PL_RADIALPULSE_3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4deb16c2f009283c2047deb1a4009ad8
  Ruleset: securityonion-yara
  Summary: This rule detects malicious activity associated with the Trojan named RADIALPULSE, which targets Pulse Secure systems. It identifies specific code patterns such as file operations and manipulation, including opening, writing to, and closing file descriptors, as well as particular regular expression patterns related to system calls and temporary file usage. These activities are indicative of exploitation techniques as described in the PulseSecure report linked to suspected APT actors.
  Updated-Date: '2024_08_07'
FE_APT_Webshell_PL_HARDPULSE:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 85efea2688c6e632c6cd0c676a364f97
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a webshell known as HARDPULSE, which was associated with Pulse Secure VPN vulnerabilities as reported by cybersecurity firm Mandiant. It identifies specific patterns in the script, including conditional statements that manipulate variables, file opening commands, and CGI parameter handling functions commonly used in Perl scripts. The rule matches multiple string patterns characteristic of the malicious webshell, including methods for handling HTTP requests and responses, thus enabling the detection of attempts to exploit the Pulse Secure zero-day vulnerability.
  Updated-Date: '2024_08_07'
FE_APT_Webshell_PL_PULSECHECK_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 315c3123c07a9c257ccceefe6e306060
  Ruleset: securityonion-yara
  Summary: This rule detects a specific web shell used by suspected APT actors leveraging Pulse Secure vulnerabilities, as detailed in a FireEye report. It identifies malicious samples based on the presence of certain code patterns and strings, including the use of "Crypt::RC4," "MIME::Base64" decoding/encoding functions, and specific HTTP header references. The condition checks for a particular sequence and count of these elements to confirm the web shell's presence.
  Updated-Date: '2024_08_07'
FE_APT_Webshell_PL_STEADYPULSE_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: bf87d026cdfe5ecc7034a4a3f8aa8634
  Ruleset: securityonion-yara
  Summary: This rule detects a specific malicious web shell known as STEADYPULSE associated with APT actors, as discussed in a PulseSecure report. It looks for various strings related to decoding parameters, handling URL encoding, MIME base64 encoding, and the inclusion of RC4 encryption and command injection patterns, indicating the presence of the web shell typically used to bypass security measures in Pulse Secure environments.
  Updated-Date: '2024_08_07'
FE_LEGALSTRIKE_MACRO:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 81be8af0e5e8f7d06f78db4e152a95f6
  Ruleset: securityonion-yara
  Summary: This rule detects malicious macros that exhibit specific encoding characteristics found in a known sample. It identifies obfuscation patterns involving concatenation of characters using the ChrW function, as well as the creation and execution of WScript objects. These elements suggest that the macro may be attempting to run potentially harmful scripts through Windows Script Host.
  Updated-Date: '2024_08_07'
FE_LEGALSTRIKE_RTF:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 46f71072326115de1f8798300dbf2025
  Ruleset: securityonion-yara
  Summary: This rule detects an RTF phishing campaign that uses the CVE-2017-0199 exploit to point to the domain "2bunny.com". The rule identifies specific encoded strings within the file, including sequences related to link information and encoded strings like "4f4c45324c696e6b" and "4f006c0065". Additionally, it looks for the presence of the datastore keyword within the document.
  Updated-Date: '2024_08_07'
FE_Trojan_SH_ATRIUM_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f23d39d2ab9bd412309edab1836b3f46
  Ruleset: securityonion-yara
  Summary: 'This rule detects a specific trojan known as ATRIUM, associated with suspected APT actors leveraging zero-day vulnerabilities in Pulse Secure VPN devices. It identifies malicious Perl code embedded in web traffic, focusing on patterns such as "CGI::param(", "Cache-Control: no-cache", and "system(". The rule outlines a combination of these strings typically found within the malicious samples, used to manipulate web server operations and execute unauthorized commands. These indicators are crucial for identifying compromised systems based on the analysis published in a PulseSecure report.'
  Updated-Date: '2024_08_07'
FE_Webshell_PL_ATRIUM_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 112ae1622663894b39b199a3ad493c5d
  Ruleset: securityonion-yara
  Summary: 'This rule detects malicious web shell scripts associated with PulseSecure vulnerabilities, particularly those referenced in a Mandiant report. It identifies specific patterns in Perl-based web shell code, such as the use of "CGI::param(" and "system(". The script patterns include conditional statements checking CGI parameters and executing system commands, as well as generating HTTP headers like "Cache-Control: no-cache" and setting the "Content-type" to "text/html". These characteristics align with web shell behaviors used by suspected APT actors leveraging bypass techniques.'
  Updated-Date: '2024_08_07'
FIN7_Backdoor_Aug17:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 194fefbcd39b2bb0b1a82daae447ea44
  Ruleset: securityonion-yara
  Summary: "This rule detects a Word Dropper used by the FIN7 cybercriminal group as described in a Proofpoint report. It looks for specific strings associated with the dropper's activity, such as commands invoking `wscript.exe` for executing JScript files and scheduling tasks under \u201CGoogleUpdateTaskMachineSystem.\u201D It also searches for keywords linked to certain executable files (`autoit3.exe`, `dumpcap.exe`, `tshark.exe`, `prl_cc.exe`), virtual machine artifacts (`vmware`, `PCI\\VEN_80EE&DEV_CAFE`, `VMWVMCIHOSTDEV`), and command-and-control indicators (`apowershell`, `wpowershell`, `get_passwords`, `kill_process`, `get_screen`). The rule is designed to identify patterns indicative of this dropper within executable files smaller than 5000KB."
  Updated-Date: '2024_08_07'
FIN7_Dropper_Aug17:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 55c1d60db453183e962e04667a199aa3
  Ruleset: securityonion-yara
  Summary: This rule detects a malicious Word document dropper associated with the FIN7 cybercriminal group, as detailed in a Proofpoint report from August 2017. The rule looks for specific strings indicative of the dropper, including obfuscated script paths, references to scripting objects, auto-run macros, and system directories. This dropper is designed to execute malicious scripts and likely other payloads, leveraging Microsoft Word's scripting and macro capabilities. The conditions for detection include checking the file type, size, and the presence of these distinctive strings.
  Updated-Date: '2024_08_07'
FPipe2_0:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4325d9cdc3da758906fd85febc0e4270
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the hacktool FPipe2.0.exe by identifying specific strings within the executable file. These strings include error messages and functionalities related to port communication such as resolving hostnames, specifying outbound connection source ports, and setting source ports to predefined values. Additionally, it searches for references to a well-known security website and the tool's name, "FPipe".
  Updated-Date: '2024_08_07'
FSO_s_EFSO_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7ce225a66c68dd16a7f712e7e3b16cb1
  Ruleset: securityonion-yara
  Summary: This rule detects a webshell auto-generated file named "EFSO_2.asp." It identifies this specific webshell by searching for unique hexadecimal strings within the file content, which are indicative of the particular webshell's presence and activity. The rule specifies specific patterns and sequences of characters that must all be present for the detection to be confirmed.
  Updated-Date: '2024_08_07'
FSO_s_RemExp:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f7d40fb89c8319cded4ca634b16ef268
  Ruleset: securityonion-yara
  Summary: This rule detects a webshell named RemExp.asp. The detection focuses on specific HTML and ASP code patterns that are likely auto-generated, including table data elements with dynamic background colors, titles derived from subfolder names, links to requests and file display functions, and alignments based on folder attributes. These distinctive strings help identify the presence of this webshell.
  Updated-Date: '2024_08_07'
FSO_s_RemExp_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5b76071b2c21f06c6d942b38465e6604
  Ruleset: securityonion-yara
  Summary: This rule detects a specific webshell, identified as RemExp.asp, which is auto-generated. It looks for particular strings associated with this webshell's operations, such as a script response followed by HTML anchor tags that include a reference to server variables. This helps in identifying malicious webshell activities indicative of unauthorized remote access or control over a web server.
  Updated-Date: '2024_08_07'
FSO_s_ajan:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: fcff77066085ff57651a1b3e94dc71ee
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific webshell, specifically targeting the file "ajan.asp." It identifies the webshell by searching for the string "entrika.write \"BinaryStream.SaveToFile" within the file, indicating the use of this pattern commonly associated with malicious webshell activity.
  Updated-Date: '2024_08_07'
FSO_s_ajan_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 586508207a87f4326a1a9c64d7d2b19b
  Ruleset: securityonion-yara
  Summary: This rule detects a specific webshell file named "ajan.asp". It targets scripts that include the creation of a WScript.Shell object using the string "Set WshShell = CreateObject(\"WScript.Shell\")" and references to the file path "/file.zip". These indicators are associated with potentially malicious webshell activity.
  Updated-Date: '2024_08_07'
FSO_s_c99:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 89bb8b72919c21824aa85e87cef9bd49
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a webshell known as "c99.php." It specifically looks for a defining string pattern that includes various file extensions like "txt," "conf," "bat," "sh," "js," "bak," "doc," "log," "sfc," "cfg," and "htacce." This pattern is indicative of auto-generated webshell files.
  Updated-Date: '2024_08_07'
FSO_s_casus15:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 12ab16e1296e2077bd63c66b56e4c70a
  Ruleset: securityonion-yara
  Summary: This rule detects a specific webshell file named "casus15.php" by looking for a unique string pattern within the file. The pattern includes a conditional statement that checks if a directory exists and whether the directory name is not equivalent to the current or parent directory.
  Updated-Date: '2024_08_07'
FSO_s_casus15_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e28deb2cc2fed58336f64bad79f465f6
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific webshell file named "casus15.php," which is identified by a particular hash value. The detection focuses on a unique string pattern "copy ( $dosya_gonder" found within the file.
  Updated-Date: '2024_08_07'
FSO_s_cmd:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0b5728e39fd0f505d6aae881f1b9cfdf
  Ruleset: securityonion-yara
  Summary: This rule detects a specific webshell, identified as "cmd.asp," which is likely auto-generated. The webshell accesses the computer and user names through a script and executes a command using "cmd.exe," redirecting the output to a temporary file.
  Updated-Date: '2024_08_07'
FSO_s_indexer:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 899910d32b9a42c65ade983e6ebee466
  Ruleset: securityonion-yara
  Summary: This rule detects a webshell associated with an auto-generated file named "indexer.asp". The rule focuses on identifying a specific string within the file that includes HTML form elements, particularly an input field named "nereye". This detection aims to identify potentially malicious webshells by matching this specific pattern in the code.
  Updated-Date: '2024_08_07'
FSO_s_indexer_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5f2759784fe6418d84f2b4fcaf663276
  Ruleset: securityonion-yara
  Summary: This rule detects a specific webshell, particularly an auto-generated file named "indexer.asp." The detection is based on identifying a unique HTML string pattern within the file, which includes an input field labeled "Nerden" pre-filled with "index.html."
  Updated-Date: '2024_08_07'
FSO_s_ntdaddy:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 47eec4c86e139cb45aca3803b49932c6
  Ruleset: securityonion-yara
  Summary: This rule detects a specific webshell file named "ntdaddy.asp," characterized by a particular HTML input element used in likely malicious activity. The HTML includes an input field for a command, specifying text type, name as ".CMD," a size of 45, and a value derived from the variable "szCMD." This pattern highlights potential attempts to remotely manipulate commands through the web interface.
  Updated-Date: '2024_08_07'
FSO_s_phpinj:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 806b3dc72ef2aa75be870130a570315f
  Ruleset: securityonion-yara
  Summary: This rule detects a specific webshell known as "phpinj.php" by searching for a distinctive string used in the file. The identified string is "echo '<a href='.$expurl.'> Click Here to Exploit </a> <br />';" which suggests that the webshell is designed to facilitate exploitation by creating a hyperlink for exploitation purposes. The rule matches files containing this exact line of code, which indicates the presence of the phpinj.php webshell.
  Updated-Date: '2024_08_07'
FSO_s_phpinj_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8e6a82122cbd654ad3ffa2890b4e53f3
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a suspicious PHP webshell file named "phpinj.php," which is auto-generated. The file contains specific PHP code, notably the string `<? system(\\$_GET[cpc]);exit; ?>`, which indicates potentially malicious behavior by executing system commands passed through a GET request parameter.
  Updated-Date: '2024_08_07'
FSO_s_phvayv:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a021fddf95148d5a8fd0b7ecef354f8f
  Ruleset: securityonion-yara
  Summary: "This rule detects a specific webshell file named phvayv.php. It identifies a distinctive string within the file, which is \u201Cwrap=\\\"OFF\\\">XXXX</textarea></font><font face.\u201D This string is used to pinpoint the presence of the potentially malicious webshell in a system."
  Updated-Date: '2024_08_07'
FSO_s_phvayv_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 99f32303bb5f31f55bd9351f9a75ecca
  Ruleset: securityonion-yara
  Summary: This rule detects a specific webshell file named "phvayv.php" by looking for a distinct string pattern within the file. The pattern includes a textarea element with specific attributes and text content, which helps to identify the webshell's presence based on its auto-generated signature.
  Updated-Date: '2024_08_07'
FSO_s_reader:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d96a99e2ab565ca55af0beeaf60143cb
  Ruleset: securityonion-yara
  Summary: This rule detects a specific file named "reader.asp" that is associated with auto-generated webshells. It identifies the presence of this file by looking for a particular string, "mailto:mailbomb@hotmail.". This string is likely used within the webshell to facilitate unauthorized communication or actions.
  Updated-Date: '2024_08_07'
FSO_s_remview:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2b1aa6edb91ae8133cdf2a6b9bf7bc1b
  Ruleset: securityonion-yara
  Summary: This rule detects a specific webshell named "remview.php" based on its unique content patterns. It identifies the presence of this webshell by matching specific strings within the file, including an HTML echo command that generates a horizontal rule and JavaScript code that manipulates string replacements. The rule focuses on recognizing these unique script markers to identify the malicious remview.php webshell file.
  Updated-Date: '2024_08_07'
FSO_s_remview_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2fb968b7f8d68f28dc1046da311d57b8
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a webshell named "remview.php". It identifies the webshell by looking for specific strings within the file, such as "<xmp>$out</" and ".mm(\"Eval PHP code\")." These strings are indicative of malicious PHP code execution and HTML manipulation, which are common traits of webshells used by attackers to gain unauthorized access and control of web servers.
  Updated-Date: '2024_08_07'
FSO_s_sincap:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4d3dddca6657fbd43585041c6e638938
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific web shell file named "sincap.php." It identifies this file by looking for unique HTML code snippets, such as specific font and color settings in a font tag and characteristic body text and background color attributes in a body tag.
  Updated-Date: '2024_08_07'
FSO_s_test:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e8de0e9568f8a694e5cfce05f26abe65
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific webshell file named "test.php." It identifies this file by looking for particular PHP code patterns, including a string assignment that concatenates the word "test" with a newline character, and a command that writes this string to a file using the `fwrite` function.
  Updated-Date: '2024_08_07'
FSO_s_tool:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1e4e8478042e46c1b44ae2ad33455c2f
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific webshell named "tool.asp". It is characterized by an auto-generated pattern that includes the string "%windir%\\calc.exe", indicating a potential invocation of the Windows Calculator application.
  Updated-Date: '2024_08_07'
FSO_s_zehir4:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6f27ef49dcee70693790b4d12bf263ae
  Ruleset: securityonion-yara
  Summary: This rule detects a specific web shell file named "zehir4.asp" by identifying the unique string "byMesaj" within the file.
  Updated-Date: '2024_08_07'
FSO_s_zehir4_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 74f62b7ca25f286990b96455774ab302
  Ruleset: securityonion-yara
  Summary: This rule detects a webshell file named "zehir4.asp" by identifying its association with the string pattern "\"Program Files\\Serv-u\\Serv" in the file contents.
  Updated-Date: '2024_08_07'
FVEY_ShadowBroker_Auct_Dez16_Strings:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ae7b9360a5499700c79fa8b0dd175b80
  Ruleset: securityonion-yara
  Summary: This rule detects elements associated with the ShadowBroker cyber group based on strings found in their screenshots from December 2016. Specifically, it identifies numerous indicators such as filenames and script names like "bs.ratload," "Auditcleaner," "cottonaxe," "dectelnet.sh," as well as various executables and scripts related to Solaris, ELF, and PE files. Some of these strings include "catflap," "charm_penguin," "eggbasket," and "skimcountry." The rule uses these unique identifiers to pinpoint potentially malicious activities linked to the ShadowBroker disclosures.
  Updated-Date: '2024_08_07'
FVEY_ShadowBroker_Gen_Readme1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3a9eb79325cda8304ce916e2bcd479d9
  Ruleset: securityonion-yara
  Summary: This rule detects a command execution that attempts to list files in a specific directory related to Siemens tools, displaying only the first ten entries. The command "ls -latr" is used to list these files in a detailed view, and the directory path "/tp/med/archive/collect/siemens_msc_isb01/.tmp_ncr/*.MSC" indicates that it targets Siemens MSC files that are temporarily stored.
  Updated-Date: '2024_08_07'
FVEY_ShadowBroker_Gen_Readme2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8ad4fb703b7890b54d6cda87369753ee
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific string, "#####  Upload the encrypted phone list as awk, modify each parser command to have the," which is indicative of certain types of activity related to files known as user.tool.orleansstride.COMMON and user.tool.curserazor.COMMON. The detection focuses on this unique ASCII string to identify potential matches.
  Updated-Date: '2024_08_07'
FVEY_ShadowBroker_Gen_Readme3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 95a1ead315b60d45dfb970de3a2c303e
  Ruleset: securityonion-yara
  Summary: This rule detects specific indicators related to the ShadowBroker malware, identifying files containing certain cryptographic keys by searching for the string ":%s/CRYPTKEY/CRYPTKEY/g" in the files. The rule is based on several known hashes associated with this malware, ensuring comprehensive detection across different file variants.
  Updated-Date: '2024_08_07'
FVEY_ShadowBroker_Gen_Readme4:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: fa1c589285ed11338c4d9273e073b6c6
  Ruleset: securityonion-yara
  Summary: This rule detects specific strings in files named "violetspirit.README" that provide details about certain command-line options used in exploiting RPC services. The rule triggers if it identifies references to RPC version settings and TCP port determinations, which are indicative of particular exploitation techniques targeting Solaris and similar systems.
  Updated-Date: '2024_08_07'
FVEY_ShadowBroker_README_cup:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ad83e7c482e7ef24bdbed7b5e451eb0b
  Ruleset: securityonion-yara
  Summary: This rule detects a specific README file associated with ShadowBroker that mentions "Full path to target's 'fuser' program" and "done after the RAT is killed." The file is identified by its unique hash value to ensure precise detection.
  Updated-Date: '2024_08_07'
FVEY_ShadowBroker_eleganteagle_opscript_1_0_0:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1e8a591b221ca9a3f53cc367f2bd36a8
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific pattern associated with the Shadow Brokers' "eleganteagle_opscript" file version 1.0.0.6. It searches for the string "uploadnrun -e \"D=-ucIP_ADDRESS_OF_REDIR" within file content, which indicates the execution of a command involving the manipulation of IP addresses for redirection, a tactic commonly used in cybersecurity operations or malware activity.
  Updated-Date: '2024_08_07'
FVEY_ShadowBroker_gr_gr:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3c64ec786dcfcd61979a2180c4891d70
  Ruleset: securityonion-yara
  Summary: 'This rule detects a specific string "delete starting from: (root) LIST (root)" within a file, which is associated with ShadowBroker''s malware activities.'
  Updated-Date: '2024_08_07'
FVEY_ShadowBroker_nopen_oneshot:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 40a8f6bbffec95da93c7a3de9432507f
  Ruleset: securityonion-yara
  Summary: This rule detects a specific instance of the ShadowBroker malware family known as "nopen," associated with a file named oneshot.example. It identifies the presence of suspicious activity where the command "/sbin/sh -c (mkdir /tmp/.X11R6; cd /tmp/.X11R6 && telnet" is executed, indicating potential malicious behavior attempting to create a temporary directory and initiate a telnet connection.
  Updated-Date: '2024_08_07'
FVEY_ShadowBroker_opscript:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1a1ec72ec95d90e94f1fd818c96aba7c
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the file "opscript.se" associated with ShadowBroker, a hacking group. The file is identified by its specific hash value and a distinctive string pattern, which includes the command "ls -l /tmp) | bdes -k 0x4790cae5ec154ccc|".
  Updated-Date: '2024_08_07'
FVEY_ShadowBroker_strifeworld:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 142d31fba3807f34fc00e6ddcee76ab5
  Ruleset: securityonion-yara
  Summary: This rule detects a file associated with "STRIFEWORLD," potentially part of the ShadowBrokers toolkit or malware collection. It searches for specific string patterns within files, such as "-p -n.\" strifeworld" and "Running STRIFEWORLD not protected," to identify the presence of this specific threat.
  Updated-Date: '2024_08_07'
FVEY_ShadowBroker_user_tool:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 57b4d9eb627be2d94f9e7e12c230c7a7
  Ruleset: securityonion-yara
  Summary: This rule detects the ELATEDMONKEY tool, which requires Apache to execute scripts in order to function. It identifies the tool by looking for a specific string within the file.
  Updated-Date: '2024_08_07'
FVEY_ShadowBroker_user_tool_dubmoat:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1f07f8704ff79d9e0dd4f983d05fdc08
  Ruleset: securityonion-yara
  Summary: This rule detects a specific file associated with the ShadowBroker's "dubmoat" tool, which is referenced as "user.tool.dubmoat.COMMON". It identifies the presence of particular strings within the file, including "### Verify version on target:" and "/current/bin/ExtractData ./utmp > dub.TARGETNAME".
  Updated-Date: '2024_08_07'
FVEY_ShadowBroker_user_tool_earlyshovel:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: cfa124e646f977d84b360ffa9f465093
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a string commonly associated with the "earlyshovel" tool, which includes network parameters like a loopback IP address, a specified port, a redirector IP, and a random port. This tool was allegedly disclosed by the ShadowBroker group.
  Updated-Date: '2024_08_07'
FVEY_ShadowBroker_user_tool_ebbisland:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6482631e9d96ca798302e5fc007a8f7d
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific user tool named "ebbisland" associated with the Shadow Brokers. The rule identifies specific command-line arguments used by the tool, including targeting a local IP address (127.0.0.1), specifying a service TCP port, and referencing a target RPC service with the flag `-X`. Additionally, it looks for arguments to disable name resolution (`-N`) and to assign a specific shellcode address (`-A`), ensuring detection by identifying any of these unique strings in the file.
  Updated-Date: '2024_08_07'
FVEY_ShadowBroker_user_tool_elgingamble:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 03db17064f77ef8fc299fa3ad552ccd0
  Ruleset: securityonion-yara
  Summary: This rule detects a specific file associated with the user tool named "elgingamble," which has ties to the group known as Shadow Broker. It looks for the presence of the ASCII string "### Local exploit for" within the file to identify it as potentially malicious. The detection is triggered if at least one instance of this string is found in the file.
  Updated-Date: '2024_08_07'
FVEY_ShadowBroker_user_tool_envisioncollision:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 632fd9c699d6a47a8f167a3f1f86bcdb
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the tool "EnvisionCollision," which appears to be associated with specific command-line parameters for interactions such as IP, port, user credentials, directory, and commands. It includes specific strings that indicate remote shell operations, redirection to IP addresses and ports, and particular administrative credentials. The rule focuses on identifying these unique string patterns to recognize the use of the "EnvisionCollision" tool.
  Updated-Date: '2024_08_07'
FVEY_ShadowBroker_user_tool_epichero:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3c8e43363c85af8d0cc5cf850122f3ab
  Ruleset: securityonion-yara
  Summary: This rule detects a file related to the Shadow Brokers' toolkit, specifically a component called "user.tool.epichero.COMMON." The detection strings include specific command-line parameters such as "-irtun TARGET_IP ISH_CALLBACK_PORT" and "-O REVERSE_SHELL_CALLBACK_PORT -w HIDDEN_DIR," which indicate it is likely used for reverse shell callbacks and network tunneling.
  Updated-Date: '2024_08_07'
FVEY_ShadowBroker_user_tool_pork:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1413454042bd989a439d173b34fc8413
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a tool named "pork" that originates from the ShadowBroker leaks. The tool includes strings related to network operations and system commands, such as references to "packrat" for remote access, a client command specifying source and target ports, and a sequence of commands involving the creation and navigation of a temporary directory with network redirection to a specific IP and port. This tool is indicative of activities consistent with system compromise or network exploitation.
  Updated-Date: '2024_08_07'
FVEY_ShadowBroker_user_tool_shentysdelight:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8efdfe6ad964fbac7568bf4a3720bba0
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific file user tool named "shentysdelight," potentially linked to activities by the Shadow Brokers group. The detection is based on identifying a unique string that appears in the tool, specifically the echo command outputting the file path "/var/run/COLFILE" with a null terminator. This approach allows for the identification of this particular malware tool through its distinctive behavior or signature.
  Updated-Date: '2024_08_07'
FVEY_ShadowBroker_user_tool_stoicsurgeon:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 734684843fbd317c5534b899c9d6a19b
  Ruleset: securityonion-yara
  Summary: This rule detects a specific pattern associated with the use of the Stoic Surgeon tool, a user tool linked to the Shadow Brokers group. The detection is based on a distinct string, "echo -n TARGET_HOSTNAME  | sed '/\\n/!G;s/\\(.\\)\\(.*\\n\\)/&\\2\\1/;//D;s/.//'", which manipulates text by reversing the order of characters in a line, leveraging `sed` commands. The rule aims to identify files or activities involving this particular string, indicative of the Stoic Surgeon tool's operations.
  Updated-Date: '2024_08_07'
FVEY_ShadowBroker_user_tool_yellowspirit:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: faeb6fd701ffbb33ddc41ffa7a271e5f
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific user tool known as "yellowspirit," which is associated with the ShadowBroker group. It identifies specific command-line arguments used by this tool, such as network interface and IP address settings, and targets particular patterns in these command-line strings to confirm its presence.
  Updated-Date: '2024_08_07'
FVEY_ShadowBroker_violetspirit:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 79c4d9523fa7742c8f3d3da1849704d3
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific file associated with ShadowBroker, identified as "violetspirit.README". It searches for a particular string within files, specifically the command-line parameters "-i tgt_ipaddr -h tgt_hostname".
  Updated-Date: '2024_08_07'
FVEY_ShadowBrokers_Jan17_Screen_Strings:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ff89af006c52281f2e36753a6f5d9ceb
  Ruleset: securityonion-yara
  Summary: 'This rule detects specific strings associated with the ShadowBroker''s leak of Windows tools and exploits. It identifies various distinctive terms such as "Danderspritz," "PeddleCheap," and "ChimneyPool Addres." Additionally, it recognizes operational messages like "Getting remote time" and "RETRIEVED," as well as technical logs such as "Added Ops library to Python search path" and "target: z0.0.0.1." It also looks for identifiers related to functionalities like "Psp_Avoidance," "PasswordDump," and "EventLogEdit," along with specific module names involving elevation, native API, threat injection, and memory operations, ensuring these terms appear within files smaller than 2000KB.'
  Updated-Date: '2024_08_07'
FakeM_Generic:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ba8889e0d1796e6823e68bf514aa8709
  Ruleset: securityonion-yara
  Summary: This rule detects FakeM malware by identifying specific patterns and strings within executable files. The rule focuses on various string indicators such as references to system files like "\\system32\\kernel32.dll", unusual filenames such as "\\boot.lnk" and "\\aapz.tmp", and other notable strings like "Wizard.EXE" and "Browser.EXE". It also looks for references to certain file paths including "C:\\Documents and Settings\\A\\" and "\\svchost.exe". The condition for triggering this rule includes checking the file's signature to ensure it matches the typical structure of an executable and verifying that the file size is less than 100KB, alongside matching specific string patterns.
  Updated-Date: '2024_08_07'
Fareit_Trojan_Oct15:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a61a58dc615b27ee8662af4867f55c0d
  Ruleset: securityonion-yara
  Summary: This rule detects the Fareit Trojan from the September/October 2015 wave. It identifies the presence of this malware by looking for specific indicators, including the string "ebai.exe" and the partial string "Origina" within the first 30,000 bytes of a file, while also checking if the file header matches a particular signature (0x5a4d). The rule also references several known hashes associated with this variant of the Fareit Trojan.
  Updated-Date: '2024_08_07'
FeliksPack3___PHP_Shells_2005:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 34b6f840924611c6693cee5138002b83
  Ruleset: securityonion-yara
  Summary: This rule detects a specific webshell script file named `2005.asp`, which is characterized by the presence of certain suspicious HTML and JavaScript strings. Identifiable patterns include a JavaScript command to open a URL with various parameters for file manipulation (`url`, `id=edit`, `path`, `sfile`, `op=copy`, `attrib`, `dpath`) and an HTML input field that receives a hidden value from the `request` object. This indicates the presence of a backdoor or unauthorized control mechanism often associated with webshell activities.
  Updated-Date: '2024_08_07'
FeliksPack3___PHP_Shells_phpft:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ffb986f3c998c18e11b00a9b18e6a7b4
  Ruleset: securityonion-yara
  Summary: This rule detects a PHP-based webshell named "phpft.php," which is auto-generated and identified by specific strings within the file. These strings include "PHP Files Thief" and a reference to "http://www.4ngel.net." The purpose of this rule is to identify instances of this particular webshell based on these recognizable patterns.
  Updated-Date: '2024_08_07'
FeliksPack3___PHP_Shells_r57:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: fdd1319b83f0cad3a9f5c4afa3336d32
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the web shell file `r57.php` by identifying a specific pattern in the code. This pattern includes a SQL query string that incorporates the command `LOAD DATA INFILE` combined with a user-supplied file name from a POST request parameter named `test3_file`. The rule matches this exact sequence to determine if the web shell script is present.
  Updated-Date: '2024_08_07'
FeliksPack3___PHP_Shells_ssh:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7885b19bb18940c2c57d6e4c85d0dab6
  Ruleset: securityonion-yara
  Summary: This rule detects webshells, specifically targeting a PHP shell named "ssh.php." The detection is based on the presence of the string "eval(gzinflate(str_rot13(base64_decode('" within the file, which indicates the use of obfuscation techniques involving `eval`, `gzinflate`, `str_rot13`, and `base64_decode` functions.
  Updated-Date: '2024_08_07'
FeliksPack3___PHP_Shells_usr:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3a60d5a6e5fd9facb9d9f0ae9543b25a
  Ruleset: securityonion-yara
  Summary: This rule detects a specific webshell, identifiable by a unique PHP code snippet that includes an array initialization with particular keys and values, used in the file `usr.php`.
  Updated-Date: '2024_08_07'
FeliksPack3___PHP_Shells_xIShell:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7bf9eb894c6d40e4ee57891506c68f80
  Ruleset: securityonion-yara
  Summary: This rule detects a specific PHP web shell file named xIShell.php, which includes a string indicating a condition where, if a variable is not set, a specific operation modifies another variable to use double backslashes and outputs a particular HTML and JavaScript code snippet.
  Updated-Date: '2024_08_07'
FeliksPack3___Scanners_ipscan:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 97c8c86ad2a2339f6aaf6b99389d5e96
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the file "ipscan.exe" by identifying specific strings within it, including "WCAP;}ECTED", "NotSupported", and "SCAN.VERSION{_".
  Updated-Date: '2024_08_07'
Fidelis_Advisory_Purchase_Order_pps:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 11ad08e1e65f38ae240f169329d9457b
  Ruleset: securityonion-yara
  Summary: This rule detects a string associated with a malicious document named Purchase_Order.pps. It specifically looks for the presence of the string "Users\\Gozie\\Desktop\\Purchase-Order.gif" in ASCII within the document.
  Updated-Date: '2024_08_07'
Fidelis_Advisory_cedt370:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2d73e808b8cad79b0925490b46ea6fe5
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of specific strings in the memory of the malware known as cedt370r(3).exe. It looks for the exact occurrences of "PO.exe", "Important.exe", "&username=", and "Browsers.txt". All these strings must be found for the rule to be satisfied.
  Updated-Date: '2024_08_07'
Fierce2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: edc518f9f5d964192decb7fe3fc2e611
  Ruleset: securityonion-yara
  Summary: This rule detects the Fierce2 domain scanner by identifying a specific string present in the code, specifically the function call "$tt_xml->process( 'end_domainscan.tt', $end_domainscan_vars," which is associated with the domain scanning activities of the Fierce2 tool.
  Updated-Date: '2024_08_07'
Fireball_archer:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1d04f1fa05cc849b019b750e07d05a7e
  Ruleset: securityonion-yara
  Summary: This rule detects the Fireball malware, specifically associated with the file archer.dll. It identifies the presence of certain strings and patterns within files smaller than 400KB, including specific ascii and wide strings related to Archer_Input, installation services, and physical drive notation. It primarily focuses on matching file properties and content indicative of this malware variant.
  Updated-Date: '2024_08_07'
Fireball_de_svr:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5a421d04d1f2b85be11be6b348e18bb8
  Ruleset: securityonion-yara
  Summary: "This rule detects the Fireball malware, specifically targeting the file named de_svr.exe. It identifies the malware by scanning for specific patterns within the file, including command execution strings, references to DLL handling through \u2018rundll32.exe\u2019, an HTTP address associated with the malware, and file paths linked to the malware's installation process. Additionally, it looks for a distinctive error message indicating a failed internet connection. The rule triggers if the file starts with 'MZ' (the standard magic number for executables), is less than 3000KB in size, and matches at least four of these patterns."
  Updated-Date: '2024_08_07'
Fireball_gubed:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0185d0ae15850aeed11853f17191ade0
  Ruleset: securityonion-yara
  Summary: This rule detects the Fireball malware through specific indicators related to the `gubed.exe` file. It searches for characteristic strings within the file, including references to the Windows registry key for the Image File Execution Options for `MRT.exe`, the string `tIphlpapi.dll`, a specific URL format involving `provide?clients=%s&reqs=visit.startload`, the path `\Gubed\Release\Gubed.pdb`, and the domain `d2hrpnfyb3wv3k.cloudfront.net`. Additionally, it checks if the file starts with the hexadecimal value `0x5a4d`, suggesting a Windows executable, and verifies that the file size is below 300KB.
  Updated-Date: '2024_08_07'
Fireball_lancer:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: dbe7a738b07308b6f176155fa7a9c3b2
  Ruleset: securityonion-yara
  Summary: This rule detects the Fireball malware, specifically targeting the file named "lancer.dll." It identifies the malware by checking for certain strings and patterns within files that match predetermined criteria. These include paths and filenames related to software development and specific DLL names associated with the malware. The rule also considers file properties like the file size and the presence of particular executable signatures to confirm the presence of the malware.
  Updated-Date: '2024_08_07'
Fireball_regkey:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 99e64d356d284ddc6ce0f27408cb53fb
  Ruleset: securityonion-yara
  Summary: This rule detects the Fireball malware by identifying the presence of a specific executable file named "regkey.exe". It searches for distinctive strings within the executable, including the path "\\WinMain\\Release\\WinMain.pdb", the term "ScreenShot" in full word and wide format, and the term "WINMAIN" in full word and wide format. Additionally, the rule checks if the initial two bytes of the file are "0x5a4d" and verifies that the file size is less than 300KB.
  Updated-Date: '2024_08_07'
Fireball_winsap:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 01677b4e8bbd332084d206f6f7e00a42
  Ruleset: securityonion-yara
  Summary: "This rule detects the Fireball malware, specifically targeting the \"winsap.dll\" file. It identifies the presence of the malware by checking for specific strings within a file, such as a base64 encoded string related to a cloudfront.net URL, references to \u201Csvchost.exe,\u201D \"WinSAP.dll,\" an error message pattern involving \"WinHttpQueryDataAvailable,\" and the phrase \"UPDATE OVERWRITE.\" The rule flags files that match these patterns, are smaller than 600KB in size, and have an initial \"MZ\" header, indicating a Windows executable file."
  Updated-Date: '2024_08_07'
FiveEyes_QUERTY_Malwareqwerty_20120:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c1e2443779b30bef7da6872e317817de
  Ruleset: securityonion-yara
  Summary: This rule detects the FiveEyes QUERTY Malware by identifying specific strings in XML configuration files and DLL references. These signatures include tag and attribute definitions that suggest a structured format used by the malware for its configuration. The presence of file names, such as "20120.dll," and configuration keywords, like "<configFileName>20120_cmdDef.xml</configFileName>," alongside schema and platform definitions, confirms the presence of the targeted malware. The rule ensures that all identified strings match, indicating a positive detection of the malware's configuration elements.
  Updated-Date: '2024_08_07'
FiveEyes_QUERTY_Malwareqwerty_20121:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1cf132705f6fb313a6ceed671be0291b
  Ruleset: securityonion-yara
  Summary: This rule detects the FiveEyes QUERTY malware by identifying specific strings within an XML configuration file associated with the malware. The key indicators include the presence of a configuration file named "20121_cmdDef.xml," a DLL file named "20121.dll," and specific XML tags such as "<pluginConfig>" and "</pluginConfig>." The rule also searches for terms like "<codebase>\"Reserved for future use.\"</codebase>" and various XML schema definitions related to the plugin structure and platform type within the malicious file. These strings help in accurately identifying the signatures of the FiveEyes QUERTY malware.
  Updated-Date: '2024_08_07'
FiveEyes_QUERTY_Malwareqwerty_20123:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: dfd7d1537a95e27eee6a23f001b8d5d2
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of malicious software known as FiveEyes QUERTY by identifying specific strings and patterns within an XML file named "20123.xml". The rule searches for markers such as comments related to XMLSPY editing by "TEAM (RENEGADE)", configurations referencing a command definition file "20123_cmdDef.xml", and entries linked to the name "20123.sys". It also looks for specific XML schema instances, platform types, and several XML tags related to plugins and configurations. The detection is triggered if at least nine of these strings are found within the file.
  Updated-Date: '2024_08_07'
FiveEyes_QUERTY_Malwaresig_20120_cmdDef:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d1ef1722aac41ccbf7bc13a002f0fd41
  Ruleset: securityonion-yara
  Summary: This rule detects the FiveEyes QUERTY Malware by identifying specific strings associated with its keystroke logging functionality. The malware includes commands to manage and retrieve keystroke logs, toggle logging on and off, add or remove specific window titles for focused logging, and check the current status of the keylogger. The rule looks for various command definitions, descriptions, and examples, highlighting the structured way the malware handles keystroke logging tasks. This detection focuses on textual strings used within the malware to define and execute these commands.
  Updated-Date: '2024_08_07'
FiveEyes_QUERTY_Malwaresig_20120_dll:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4b17abd52b7b8155a9125b5048f140bf
  Ruleset: securityonion-yara
  Summary: This rule detects the FiveEyes QUERTY malware, specifically targeting the 20120.dll file. It identifies various log patterns and status messages related to the malware's functionality, such as logging keystrokes, retrieving logs from implants, and tracking active windows. The rule includes strings that indicate whether logging is enabled or disabled, errors in sending commands to implants, and the type of keyboard in use. It also contains references to different versions of Windows and languages, noting when log files fail to generate or commands fail to execute properly.
  Updated-Date: '2024_08_07'
FiveEyes_QUERTY_Malwaresig_20121_cmdDef:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 93b60269b4a1b6d299e6307a1f112749
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the FiveEyes QUERTY malware by identifying specific patterns within the file "20121_cmdDef.xml." The detection focuses on strings associated with a keystroke logger plugin, error messages related to file time and size, command tags, platform specification for Windows (User/Win32), and project and plugin identifiers such as "plugin/Utility" and "E_QwertyIM." Additionally, dependencies and permission requirements are checked to confirm the malware's signature.
  Updated-Date: '2024_08_07'
FiveEyes_QUERTY_Malwaresig_20121_dll:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 588a3dc19c47b0527f3e2dd490514bb7
  Ruleset: securityonion-yara
  Summary: This rule detects the FiveEyes QUERTY malware, specifically targeting a file named "20121.dll". It searches for specific strings within the file, including "WarriorPride\production2.0\package\E_Wzowski" and the exact filename "20121.dll".
  Updated-Date: '2024_08_07'
FiveEyes_QUERTY_Malwaresig_20123_cmdDef:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 18f131923de2700fb56f8dba1209937d
  Ruleset: securityonion-yara
  Summary: This rule detects the FiveEyes QUERTY Malware based on strings found in a file named "20123_cmdDef.xml." The malware description reveals that it is a keystroke collector and identifies various implementation details, such as being a kernel mode driver for logging keys. It references specific platforms like Windows NT, Windows 2000, Windows XP (32/64 bit), and Windows 2003 (32/64 bit). In addition, it mentions rights required (either System or Administrator) and dependencies (such as U_HookManager v1.0 and Kernel Covert Store v1.0). Various XML tags pertinent to the malware's configuration and metadata are searched to confirm its presence.
  Updated-Date: '2024_08_07'
FiveEyes_QUERTY_Malwaresig_20123_sys:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 037ad32b88befd6ee09cf00485d0caaa
  Ruleset: securityonion-yara
  Summary: This rule detects the FiveEyes QUERTY malware specifically associated with the file 20123.sys.bin. It searches for the presence of specific keywords and strings within the file, including "20123.dll," "kbdclass.sys," "IoFreeMdl," "ntoskrnl.exe," and "KfReleaseSpinLock" to identify the malicious software.
  Updated-Date: '2024_08_07'
Flash_CVE_2015_5119_APT3_leg:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 47a9c83cecef09fae3e516f542edc281
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of an exploit targeting the CVE-2015-5119 vulnerability in Adobe Flash Player. It identifies specific patterns in the file, including strings like "HT_exploit," "HT_Exploit," and "flash_exploit_," among others. Additional indicators include references to MainTimeline elements and shellcode for a 32-bit target. The condition checks if the file starts with a specific signature (0x5746) characteristic of Flash files and matches at least one of the specified strings.
  Updated-Date: '2024_08_07'
Foudre_Backdoor_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c701676d0b42ff946e9deb418489d8f1
  Ruleset: securityonion-yara
  Summary: 'This rule detects the Foudre Backdoor, a type of malicious software identified by specific indicators. The detection criteria include the presence of strings such as "initialization failed: Reinstall the program," "SnailDriver V1," and "lp.ini" within files smaller than 100KB that begin with the hexadecimal value 0x5a4d.'
  Updated-Date: '2024_08_07'
Foudre_Backdoor_Component_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1c207b3f7f7490085b4fd5bc6234ed52
  Ruleset: securityonion-yara
  Summary: This rule detects the Foudre Backdoor by identifying specific patterns within files, including a hexadecimal string sequence related to "Project1.dll," a wide character string referencing the Windows Management Instrumentation namespace, and another wide character string denoting a common directory path on Windows systems. It also considers executable file characteristics, such as the PE header and export functions, to confirm the presence of the malicious component.
  Updated-Date: '2024_08_07'
Foudre_Backdoor_Dropper_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 74b16b0e85ed2331374916814b13506a
  Ruleset: securityonion-yara
  Summary: This rule detects the Foudre Backdoor by identifying specific hexadecimal strings and file paths associated with the malware. It looks for particular wide strings within a file, including encoded values, file paths related to the Windows Startup folder, and references to the Windows Shell Folders and ShellExecuteW function. The rule triggers if the file is a Windows executable (identified by the "MZ" header), is smaller than 100KB, and contains at least one of the specified hexadecimal patterns or a combination of at least four of the other specified strings.
  Updated-Date: '2024_08_07'
Foudre_Backdoor_SFX:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8182ecbf337b1c5b2351b809a7e07b03
  Ruleset: securityonion-yara
  Summary: This rule detects the Foudre Backdoor bundled as a self-extracting archive (SFX). It identifies specific characteristics, including the presence of "main.exe" and "pub.key" files as well as the phrase "WinRAR self-extracting archive" within the file. Additionally, the file must start with the hexadecimal value 0x5a4d and be smaller than 2000KB in size.
  Updated-Date: '2024_08_07'
FourElementSword_32DLL:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5a5dfec5b680cc27e7319b9ae0ef9dac
  Ruleset: securityonion-yara
  Summary: This rule detects the FourElementSword malware by identifying specific strings and file paths associated with it. It looks for a temporary file path ("%temp%\\tmp092.tmp"), a registry path ("\\System32\\ctfmon.exe"), a partial system root path ("%SystemRoot%\\System32\\"), and the presence of a "32.dll" file. The malware is identified if these strings are present in executable files with a "MZ" header and a file size of less than 660KB.
  Updated-Date: '2024_08_07'
FourElementSword_Config_File:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 97cf93d767e68ec06fc7db1d1ac093f4
  Ruleset: securityonion-yara
  Summary: This rule detects the FourElementSword malware by identifying specific patterns and strings associated with its configuration file. Key indicators include the presence of certain strings such as "01,,hccutils.dll,2", "RegisterDlls=OurDll", "[OurDll]", and "[DefaultInstall]". Additionally, it checks for the string "Signature=\"$Windows NT$\"" to determine if FourElementSword is present. These strings help in identifying the malware's configuration and its attempt to register malicious DLLs, which are indicative of its installation and execution process on a compromised system.
  Updated-Date: '2024_08_07'
FourElementSword_ElevateDLL:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 99555aa08cf4ece6883b437fe378b66e
  Ruleset: securityonion-yara
  Summary: This rule detects the FourElementSword malware by identifying specific characteristics within files. It searches for the presence of "Elevate.dll" or "ResN32.dll" and checks for references to security software such as Kingsoft Antivirus, Kaspersky Lab, and Sophos. The rule triggers if the file begins with the "MZ" header, is under 500KB in size, contains one or both suspicious DLL names, and mentions all the listed antivirus software.
  Updated-Date: '2024_08_07'
FourElementSword_ElevateDLL_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: fce6f953ce80877b3ad1c7eedb3a2e05
  Ruleset: securityonion-yara
  Summary: This rule detects the FourElementSword malware by identifying specific strings within executable files. It searches for the string "Elevate.dll" and other markers such as "GetSomeF" and "GetNativeSystemInfo." The rule applies if the file has a specific header value, is smaller than 25KB, and either contains the "Elevate.dll" string or all the defined strings.
  Updated-Date: '2024_08_07'
FourElementSword_Keyainst_EXE:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: fbb9a96aa77144b8edad367d0e2a101f
  Ruleset: securityonion-yara
  Summary: This rule detects the FourElementSword malware, specifically targeting the executable file "Keyainst.exe" located in the ProgramData directory on a Windows system. The rule checks for the presence of the "Keyainst.exe" string and common goodware strings such as "ShellExecuteA", "GetStartupInfoA", and "SHELL32.dll" within files smaller than 48KB, indicating potential malicious activity related to this malware.
  Updated-Date: '2024_08_07'
FourElementSword_PowerShell_Start:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f20d5795f4e96aae56b0246e6b87f9b4
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the FourElementSword malware by identifying specific patterns related to its execution through PowerShell commands. It looks for instances where PowerShell is used to start a minimized process that runs either "wget.exe" or "iuso.exe" from the "C:\\ProgramData\\" directory.
  Updated-Date: '2024_08_07'
FourElementSword_ResN32DLL:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d976ab5099d5cfc77d2082772411c192
  Ruleset: securityonion-yara
  Summary: This rule detects the FourElementSword malware by identifying specific strings related to its components. It checks for the presence of the path "\\Release\\BypassUAC.pdb," the file name "ResN32.dll," and the wide string "Eupdate." All of these conditions must be met for the detection to occur, indicating the presence of the specified malware.
  Updated-Date: '2024_08_07'
FourElementSword_T9000:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 568ac65946072232b56e7e2dfe3fda8a
  Ruleset: securityonion-yara
  Summary: This rule detects the FourElementSword malware by checking for specific strings and patterns associated with this malicious software. It searches for unique file paths and file names used by the malware, such as "D:\\WORK\\T9000\\", "%s\\temp\\HHHH.dat", "Elevate.dll", and "ResN32.dll". Furthermore, the rule looks for certain user agent strings ("Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)") and executable names ("igfxtray.exe") that may indicate the presence of the FourElementSword malware. The detection conditions ensure that the file has the appropriate header (0x5a4d) and is less than 500KB in size, alongside meeting specific string match criteria.
  Updated-Date: '2024_08_07'
FourElementSword_fslapi_dll_gui:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5c62777d6ee6ede771b8e5430c7d44e1
  Ruleset: securityonion-yara
  Summary: This rule detects the FourElementSword malware by identifying specific patterns in a file. The file must be a Windows executable, less than 12KB in size, and contain several unique strings, including "fslapi.dll.gui," "ImmGetDefaultIMEWnd," and "RichOX."
  Updated-Date: '2024_08_07'
FreeMilk_APT_Mal_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 824adf796c9481df8951a1b18ca7cdbf
  Ruleset: securityonion-yara
  Summary: This rule detects malware associated with the FreeMilk campaign, a highly targeted spear-phishing attack. The rule identifies specific patterns within the executable, such as file paths and file names containing "milk.pdb", "E:\\BIG_POOH\\Project\\", "Windows-KB271854-x86.exe", "Windows-KB275122-x86.exe", "\\wsatra.tmp", and "%s\\Rar0tmpExtra%d.rtf". Additionally, it looks for the help command syntax within the malware and an import hash of "108aa007b3d1b4817ff4c04d9b254b39". The detection targets files smaller than 300KB and begins with the magic number "0x5a4d".
  Updated-Date: '2024_08_07'
FreeMilk_APT_Mal_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b7384d195c6f93bb25979465b8e34e6e
  Ruleset: securityonion-yara
  Summary: This rule detects malware associated with the FreeMilk campaign, which was identified through specific string patterns and certain characteristics of the binary file. The strings include error messages related to screenshot failures, the term "runsample," formatted output with hexadecimal values, and specific Windows version strings. Additionally, the rule checks for a particular import hash and ensures the file is smaller than 400KB, providing a precise identification method for this malware.
  Updated-Date: '2024_08_07'
FreeMilk_APT_Mal_3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 04defed81bd5ac0d2d69b8a304591608
  Ruleset: securityonion-yara
  Summary: 'This rule detects malware associated with the FreeMilk campaign, specifically identifying files that contain strings commonly used by this malware. These include command execution through "CMD.EXE /C \"%s\"", paths including "\\command\\start.exe", file extensions ".bat;.com;.cmd;.exe", and error messages such as "Unexpected failure opening HKCR key: %d". The rule looks for files starting with the hexadecimal value 0x5a4d and are less than 900KB in size.'
  Updated-Date: '2024_08_07'
FreeMilk_APT_Mal_4:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4a683b613b82598f6c8ac7251bc967c6
  Ruleset: securityonion-yara
  Summary: This rule detects malware associated with the FreeMilk campaign, which utilizes highly targeted spear-phishing tactics. The malware's characteristics include specific strings related to browsers and user data directories, such as Firefox and Chrome, as well as the use of base64 encoded content and scripting references like "WScript.Shell" and "rundll32.exe". This rule also identifies binaries that export a function named "getUpdate" with a specific criteria on the number of exports. It targets executables with a defined file signature and size constraint.
  Updated-Date: '2024_08_07'
FreeVersion_debug:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c00c1f38c7d5c2fd45bf8fe081e12ce7
  Ruleset: securityonion-yara
  Summary: "This rule detects the presence of a Chinese hacktool known as \"debug.exe\" by identifying specific strings associated with the tool's operation. It looks for textual evidence tied to various exploits and activities, such as WMI process manipulation and reverse shell execution. The rule also matches conditions like the process name \"wmiprvse.exe\" and specific SQL queries within the tool\u2019s code, ensuring accurate detection while accounting for the file size and structure."
  Updated-Date: '2024_08_07'
FreeVersion_release:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1b14699a505d6847b49291e5d22889c6
  Ruleset: securityonion-yara
  Summary: This rule detects a Chinese hacktool identified as "release.exe," used for malicious activities such as obtaining WMI process IDs, executing commands to add a user and elevate privileges, running a reverse shell, and interacting with "wmiprvse.exe." It specifically looks for strings indicating these behaviors within files smaller than 100KB.
  Updated-Date: '2024_08_07'
Freeenki_Infostealer_Nov17:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e249275e6918b0f1608cec1748f56bbf
  Ruleset: securityonion-yara
  Summary: "This rule detects the Freenki infostealer malware, which primarily focuses on information theft. It identifies the presence of specific strings associated with the malware\u2019s behavior, such as encoded commands and references to system directories like Windows' `rundll32.exe`. Key indicators include base64-encoded data, scripts to execute shell commands, and commands that interact with system directories and files. Additionally, the rule looks for indicators related to Firefox and Chrome web browsers, particularly paths and SQL queries associated with extracting login data."
  Updated-Date: '2024_08_07'
Freeenki_Infostealer_Nov17_Export_Sig_Testing:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: fcbb0aa525b4a5348332a0708e830a69
  Ruleset: securityonion-yara
  Summary: This rule detects the Freenki infostealer malware by checking for a specific combination of characteristics in executable files. It looks for files that start with the 'MZ' header, indicative of a Windows executable, and have a size less than 3000KB. Additionally, the rule targets executables that export exactly one function named "getUpdate". This particular signature helps identify the presence of the Freenki infostealer, which is a type of malware designed to steal sensitive information from infected systems.
  Updated-Date: '2024_08_07'
Fscan_Portscanner:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5fb6736e4b3bd7d62aed15b539b7bf90
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of an Fscan port scanner by identifying specific output strings generated by the tool. It looks for strings such as "Time taken:", "Scan finished at", and "Scan started at", and triggers if the file size is less than 20KB and all three strings are present.
  Updated-Date: '2024_08_07'
Furtim_Parent_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7556aacd56e3d2bc332d857837d6644a
  Ruleset: securityonion-yara
  Summary: This rule detects the Furtim Parent malware by identifying a specific RC4 encryption password, certain strings related to software components, and unique operation codes. The malware is associated with a particular hash value and certain characteristic patterns, such as "Egistec" and "Copyright (C) 2016". The conditions ensure that matches are based on the presence of these strings and operation codes in executable files smaller than 900KB.
  Updated-Date: '2024_08_07'
Furtim_nativeDLL:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4f6b1d36d44ee17ed05c39ab851d1cea
  Ruleset: securityonion-yara
  Summary: This rule detects the Furtim malware specifically targeting a file named "native.dll." It identifies the malware based on a specific ASCII string ("FqkVpTvBwTrhPFjfFF6ZQRK44hHl26") and a set of distinct opcodes sequences. The detection criteria include ensuring that the file starts with the "MZ" header signature (indicative of executable files) and is smaller than 900KB in size.
  Updated-Date: '2024_08_07'
GRIZZLY_STEPPE_Malware_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d676fc9bad1e438c2397949c0593cd43
  Ruleset: securityonion-yara
  Summary: This rule detects a specific malicious file named HRDG022184_certclint.dll associated with the GRIZZLY STEPPE malware. The detection is based on several unique strings found within the file, including a debug path, specific text replacements, processor time metrics, and process names such as "Self Process," "Default Process," and "Star Polk.exe." The file's signature is validated by a known hash value, and the file size is restricted to less than 300KB.
  Updated-Date: '2024_08_07'
GRIZZLY_STEPPE_Malware_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 131b69e27d70abc65c4c50737aaf1c7e
  Ruleset: securityonion-yara
  Summary: This rule detects a file named "GoogleCrashReport.dll," potentially associated with specific crash handling functions within software. The detection criteria include the presence of terms like "CrashErrors," "CrashSend," "CrashAddData," "CrashCleanup," and "CrashInit" within the file, along with the file's characteristics such as a particular header value and a size less than 1000KB. These identifiers may signal the presence of certain crash reporting functionalities indicative of particular software behavior or possibly malicious activity.
  Updated-Date: '2024_08_07'
Gen_Net_LocalGroup_Administrators_Add_Command:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b80b8a7f23689dcf704c411bd7970a1b
  Ruleset: securityonion-yara
  Summary: This rule detects an executable that contains a command to add a user account to the local administrators group.
  Updated-Date: '2024_08_07'
Gen_Trojan_Mikey:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c0e7b93327f484b1e8865c9c59d40336
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the Trojan Mikey by identifying the specific file sample_mikey.exe. It checks for the occurrence of a reversed string ('SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run') and certain patterns within user-agent strings that resemble those used by various versions of Internet Explorer (e.g., IE 6.0 and Mozilla/4.0). Additionally, the rule looks for specific string patterns involving formatted text containing numerical and string placeholders. The detection condition is met if the file begins with the 'MZ' header characteristic of executable files and matches the specified reversed string alongside at least two of the defined user-agent or formatted text patterns.
  Updated-Date: '2024_08_07'
Generic_Dropper:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 82b0fb27a216120ce545c7434e62f439
  Ruleset: securityonion-yara
  Summary: This rule detects potential dropper malware by identifying specific PDB (Program Database) file paths embedded in a file. The rule focuses on strings that point to PDB files commonly associated with malware development, specifically paths containing "Dropper.pdb" under "Release" or "Debug" directories. To confirm the presence of these signatures, the rule checks if the file starts with the typical header for executable files and has a size less than 900KB.
  Updated-Date: '2024_08_07'
GetUserSPNs_PS1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 31bbdcf99710aa052efbeff70c2edbf2
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the GetUserSPNs.ps1 script, which is typically used for querying Service Principal Names (SPNs) within an Active Directory environment. It looks for specific PowerShell code patterns involving Forest and Directory Services operations, password last set properties, and search operations within the script content. These patterns indicate that the script interacts with Active Directory to retrieve SPN information, which can be used in various network administration and security contexts, including Kerberoasting attacks.
  Updated-Date: '2024_08_07'
GetUserSPNs_VBS:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 93398c4ecaedfaa28e22d2aa142a1ea4
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific VBScript file named "GetUserSPNs.vbs," which is used in the context of gathering information about user logon details and service principal names (SPNs) from an Active Directory environment. The script outputs user account names and usage information, and performs LDAP queries to identify non-computer objects with associated SPNs. This script is often referenced in relation to the PyKerberoast project, which is used for Kerberos ticket extraction in penetration testing and security assessments.
  Updated-Date: '2024_08_07'
GhostDragon_Gh0stRAT:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8585095393e45af8b87d260007826db5
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the Gh0st RAT malware, which is referenced in Cylance's Ghost Dragon Report. It identifies specific strings that are typically associated with the Gh0st RAT, such as registry additions, temporary file names, HTTP response codes, and certain executable characteristics. The rule checks for the presence of these strings in files smaller than 500KB and with a specific header signature, which are common attributes of files that are infected with this malware.
  Updated-Date: '2024_08_07'
GhostDragon_Gh0stRAT_Sample2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5457ab728683674f739762842121fac1
  Ruleset: securityonion-yara
  Summary: This rule detects the Gh0st RAT malware based on characteristics mentioned in the Ghost Dragon report by Cylance. It identifies the malware through specific strings including "AdobeWpk" and "seekin.dll," as well as HTTP user-agent strings such as "Windows NT 6.1; Trident/6.0)" and "Mozilla/5.0 (compatible; MSIE 10.0;". The detection condition checks for a particular header value and ensures the file size is less than 80KB while matching these identifying strings.
  Updated-Date: '2024_08_07'
GhostDragon_Gh0stRAT_Sample3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a2d2b688be46ccf9a843f127db9beee5
  Ruleset: securityonion-yara
  Summary: This rule detects Gh0st RAT, a remote access trojan highlighted in Cylance's Ghost Dragon Report. It identifies specific byte sequences within a file that are characteristic of Gh0st RAT's behavior and operation. The rule monitors for three distinct patterns of hexadecimal values to determine the presence of the malware.
  Updated-Date: '2024_08_07'
GlassRAT_Generic:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 611d9578cfb893b86cacec2d77f7e67c
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of GlassRAT malware by identifying specific string indicators and executable commands within a file. These indicators include references to "cmd.exe /c %s", "update.dll", and registry paths such as "SYSTEM\\CurrentControlSet\\Services\\RasAuto\\Parameters". Additional markers include paths with "%%temp%%\\%u" and the "rundll32" command followed by specific functions or file deletions with "cmd.exe /c erase /F \"%s\"". The rule triggers if the file size is below 15MB and at least five of these indicators are found, starting with a specific file signature.
  Updated-Date: '2024_08_07'
GoldDragon_Aux_File:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 173a0f8c21a2e63c5f59e442b726ac06
  Ruleset: securityonion-yara
  Summary: This rule detects a specific exported string pattern associated with the Gold Dragon malware, which was notably active around February 2018. The malware is recognized by the string "/////////////////////regkeyenum////////////", suggesting activity related to registry key enumeration. It targets files smaller than 500KB to identify potential malicious components within the specified size range.
  Updated-Date: '2024_08_07'
GoldDragon_Ghost419_RAT:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ee9f5a75a2069c8998e29eea178adc17
  Ruleset: securityonion-yara
  Summary: "This rule detects the Ghost419 Remote Access Trojan (RAT) associated with the Gold Dragon campaign. It identifies the malicious software by inspecting multiple distinct strings and configurations commonly found within Ghost419 RAT. These include unique file path and file names such as \"\\Microsoft\\HNC\\\", \"abxplore.exe\", specific boundary strings used in web forms, and references to system commands and structures like \"systeminfo\" and \"dir\". The RAT's distinctive indicators, such as the string \"GHOST419,\" and predefined formatted messages, also aid in identification. Additionally, specific browser user-agent strings and references to the Gold Dragon report itself are observable within the malware. The rule also checks the file\u2019s header for executable files and examines the number and names of exported functions to ensure accurate detection."
  Updated-Date: '2024_08_07'
GoldDragon_RunnignRAT:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f31f3a368c98f25c9d79e7e39cbe4da4
  Ruleset: securityonion-yara
  Summary: This rule detects Running RAT malware from the Gold Dragon report by identifying specific characteristics and patterns within executable files. It searches for the execution of "cmd.exe /c systeminfo" and "cmd.exe /c tasklist" commands, the presence of "ieproxy.dll" and the string "taskkill /f /im daumcleaner.exe". Additionally, it looks for the use of "rundll32.exe" with the "Run" command and the user-agent string resembling "Mozilla/5.0 (Windows NT 5.2; rv:12.0) Gecko/20100101 Firefox/12.0". Furthermore, it checks for certain file naming patterns like "%s\\%s_%03d" and the "\\PI_001.dat" file. The rule is triggered if the file is an executable (based on its header) and its size is less than 3000KB when at least three of these conditions are met.
  Updated-Date: '2024_08_07'
GoldDragon_RunningRAT:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: fd3c5440c15ea03b2dfeddb3a0c83e9f
  Ruleset: securityonion-yara
  Summary: This rule detects a Running Remote Access Trojan (RAT) as reported by Gold Dragon. It identifies specific file paths, named "result.log" in various directories, and several instances of the process "rundll32.exe" running with parameters such as "RunningRat" and "ExportFunction". It also looks for the file "SystemRat.dll" and checks for strings that are reversed names of common networking functions like "gethostbyname" and "closesocket". Additionally, the rule searches for certain strings indicating operation statuses like "MR First Started, Registed OK!", "LoadResource OK!", and another instance of "result.log" located on the D drive. The detection criteria involve checking the file size and PE header, along with conditions on the import hash and function exports.
  Updated-Date: '2024_08_07'
GoldDragon_malware_Feb18_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: eeaeb7f76f4f43436bccacdb972931f6
  Ruleset: securityonion-yara
  Summary: This rule detects the Gold Dragon malware by identifying specific PE file characteristics. It examines files smaller than 300KB and checks if they have a particular PE header signature. Additionally, it looks for one of four known import hash values associated with the Gold Dragon malware. This combination of file size, header signature, and import hash values helps in accurately identifying this malware variant.
  Updated-Date: '2024_08_07'
GoldenEyeRansomware_Dropper_MalformedZoomit:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6e06cc620b57e03bd541672f115dbe3f
  Ruleset: securityonion-yara
  Summary: 'This rule detects a sample of GoldenEye ransomware, specifically targeting a dropper component that embeds a malformed version of Sysinternals ZoomIt software. The detection criteria include the presence of a specific ASCII string, "ZoomIt - Sysinternals: www.sysinternals.com," embedded in the file and the absence of a wide string "Mark Russinovich." Additionally, it ensures that the file has an MZ header and is less than 800KB in size.'
  Updated-Date: '2024_08_07'
GoldenEye_Ransomware_XLS:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 88df92bccc3f8f08aab71c04cd394674
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the GoldenEye ransomware in an XLS file containing a macro. It identifies specific strings indicative of malicious behavior, such as generating a temporary filename and executing it as an executable through Windows Script Host (WSH) using ActiveX. The rule also ensures that the file's size is less than 4000KB.
  Updated-Date: '2024_08_07'
GoodToolset_ms11011:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7e4a6e16b28badb55ccef1d8634b24a5
  Ruleset: securityonion-yara
  Summary: This rule detects a specific executable file, "ms11011.exe," associated with a Chinese hacktool set. The file is identified by a specific hash value and contains various distinctive strings, such as file path references (e.g., "\\i386\\Hello.pdb"), error messages (e.g., "OS not supported."), and system font references (e.g., "SystemDefaultEUDCFont"). The rule is triggered if the file is an executable with a size under 100KB and matches all specified string patterns.
  Updated-Date: '2024_08_07'
GoodToolset_ms11046:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: feb484d5d0ed684d0d4d2fe96766a2fe
  Ruleset: securityonion-yara
  Summary: This rule detects a Chinese hacktool identified by the filename `ms11046.exe`. It looks for specific strings in the file, such as messages related to token system commands, adding users, and successful integration of a user into the Administrators group. Additionally, the rule checks for a specific goodware string pattern, which appears three times, to confirm the presence of the target tool. The conditions for detection include a specific initial byte sequence and a file size less than 840KB.
  Updated-Date: '2024_08_07'
GoodToolset_ms11080:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: de4d8b8a695025e187c7b5aa13306cca
  Ruleset: securityonion-yara
  Summary: This rule detects a Chinese hack tool named `ms11080.exe`, which is associated with the exploit `ms11-08`. The detection is triggered by specific ASCII strings within the file, such as commands to add users and confirmation messages indicating successful user addition, as well as references to debug paths and authorship information linked to the 90sec organization. The file must also meet certain criteria, including having a specific magic number and being under a designated file size.
  Updated-Date: '2024_08_07'
GoodToolset_pr:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: bf39ffdfd8208a354c5949f71720d06d
  Ruleset: securityonion-yara
  Summary: This rule detects the Chinese hacktool known as "pr.exe," which is associated with a collection of tools possibly used for malicious purposes. The detection focuses on specific strings within the file, including messages related to WMI processes, local system shell exploits, and references to "wmiprvse.exe." The rule also looks for indicators of repeated attempts and modifications by an entity identified as "p." Additionally, it checks for the presence of the string "root\\MicrosoftIISv2." The file size must be less than 200KB and begin with the 'MZ' header (indicative of executable files).
  Updated-Date: '2024_08_07'
GoogleBot_UserAgent:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6bbc235f6b5194d0fa4f94e9d1c07f63
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the GoogleBot UserAgent string in an executable file. It specifically looks for the string "Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)" within files that start with the bytes 0x5a4d and are less than 500KB in size, excluding files that contain the string "McAfee, Inc." in wide format.
  Updated-Date: '2024_08_07'
Greenbug_Malware_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: dcd911d24482370616a8d5877589671d
  Ruleset: securityonion-yara
  Summary: This rule detects malware associated with the Greenbug incident by identifying specific strings ("vailablez" and "Sfouglr") within executable files that have a DOS header (indicated by the magic number 0x5a4d) and are smaller than 400KB in size.
  Updated-Date: '2024_08_07'
Greenbug_Malware_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c98aa1e7c3af68472b174bd1a93e2b72
  Ruleset: securityonion-yara
  Summary: This rule detects a backdoor linked to the Greenbug incident by identifying specific strings within the file, such as "|||Command executed successfully," paths related to "Bot Fresh.pdb" and "a1.txt," and other bot-related paths. It also looks for broader indicators like commands related to saving files with specific parameters, weekday name sequences, cookie settings, and queries targeting antivirus products. The rule applies to files smaller than 1000KB that match at least one or two of the specified string conditions, or at least three of the broader string indicators.
  Updated-Date: '2024_08_07'
Greenbug_Malware_3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8582578f101b69c9912a070c2d2a1230
  Ruleset: securityonion-yara
  Summary: This rule detects a backdoor associated with the Greenbug incident, specifically looking for path and file name indicators. It identifies the presence of specific project files and logs, including "F:\\Projects\\Bot\\Bot\\Release\\Ism.pdb" in ASCII fullword form, "C:\\ddd\\wer2.txt" in wide form, and "\\Microsoft\\Windows\\tmp43hh11.txt" in wide form. Detecting any one of these indicators can suggest the presence of the malicious backdoor.
  Updated-Date: '2024_08_07'
Greenbug_Malware_4:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: fb69310f8f1c42393b047612e1bffa1e
  Ruleset: securityonion-yara
  Summary: This rule detects the ISMDoor backdoor, a malware that leverages PowerShell commands and specific file paths for its operations. It identifies the backdoor by looking for PowerShell commands such as setting execution policies, specific file paths in the Windows directory including temporary files and log files, and actions involving task killing of specific executables. Additionally, it looks for signs of UAC bypass attempts and keylogging initiation.
  Updated-Date: '2024_08_07'
Greenbug_Malware_5:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0734f24f4bc3127d13f121281603374d
  Ruleset: securityonion-yara
  Summary: This rule detects a specific type of malware associated with the Greenbug group. It identifies the malware by looking for command lines and script patterns commonly employed by the malware to manipulate user accounts, check network connections, and query security center information. The rule inspects files smaller than 2MB, and particularly searches for full-word ASCII strings such as commands involving WMIC for querying security settings, network user account enumeration, and network statistics redirection to a local Microsoft directory. Additionally, it looks for a specific marker string associated with user account information.
  Updated-Date: '2024_08_07'
Greenbug_Malware_Nov17_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9a2099c59fac5b0b9fb8da072f3c9549
  Ruleset: securityonion-yara
  Summary: This rule detects the Greenbug malware, which is a sophisticated threat used for cyber-espionage. The detection focuses on specific hardcoded strings found within the malware, such as domain references and unique error messages, and also checks for particular PE file characteristics and hashes.
  Updated-Date: '2024_08_07'
Groups_cpassword:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e65bca0722da9306561afb63fe4efdb3
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a "cpassword" value within Groups XML files, which indicates the inclusion of an encrypted password. This vulnerability is critical as the encryption key is publicly available, making the passwords susceptible to decryption and exposure. The rule sets specific conditions, including the file beginning with "<?xml" and being less than 1000KB in size, and it searches for strings indicative of password and user account settings within the XML content.
  Updated-Date: '2024_08_07'
Gsecdump_password_dump_file:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a1687e7169afb5c8f0d5c4b55353a32a
  Ruleset: securityonion-yara
  Summary: This rule detects the output file generated by gsecdump, a tool known for extracting password hashes and other sensitive information from Windows systems. The detection is based on the presence of a specific string identifying an administrator account within a small-sized file that starts with a particular byte sequence.
  Updated-Date: '2024_08_07'
Guilin_veterans_cookie_spoofing_tool:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4f21e7ba772efb947a0dea383ecad2de
  Ruleset: securityonion-yara
  Summary: This rule detects a specific hack tool named "Guilin veterans cookie spoofing tool.exe," which is part of a Chinese hack toolset. The tool is identified based on a combination of strings found within the executable, such as references to "kernel32.dll," specific ASCII sequences, and distinct function names. Additionally, the executable must meet a condition where its size is less than 1387KB, and it starts with the bytes corresponding to "MZ," a common header for executable files.
  Updated-Date: '2024_08_07'
HDConfig:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8c342ca1a37806fd3ae5cca55dff2d62
  Ruleset: securityonion-yara
  Summary: This rule detects the HDConfig.exe file, which appears to involve cryptographic processes. It looks for strings related to the creation and handling of encryption keys, including the derivation of an encryption key from a password hash, the creation of a hash object, an error during the hash creation, the creation of a new key container, and the addition of a password to a hash. These specific string patterns indicate the presence of certain cryptographic operations.
  Updated-Date: '2024_08_07'
HDRoot_Sample_Jul17_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e573fd15bbb69f13f354491882af84dc
  Ruleset: securityonion-yara
  Summary: This rule detects HDRoot samples by looking for specific characteristics within executable files. It searches for the string "gleupdate.dll" in ASCII format, a wide-character DOS device path pattern, and a wide-character reference to the "nsiproxy" driver. The rule applies to files less than 60KB in size and checks for the presence of three specified patterns to identify potential HDRoot activity.
  Updated-Date: '2024_08_07'
HDRoot_Sample_Jul17_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f8ebdcd2a8837f0fb2692b40118c4453
  Ruleset: securityonion-yara
  Summary: This rule detects samples of HDRoot malware. The detection is based on specific strings and patterns found within the files, such as certain URLs, user-agent strings that mimic Internet Explorer, and names of known files and DLLs associated with the malware. The condition checks for these strings in executable files smaller than 300KB, ensuring that only potential HDRoot samples are flagged. The focus is on identifying known HDRoot components and related activities, facilitating early detection and mitigation.
  Updated-Date: '2024_08_07'
HKTL_Amplia_Security_Tool:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e369fd5c3076a4065e68e7b9188b3aac
  Ruleset: securityonion-yara
  Summary: This rule detects the Amplia Security Tool, a utility similar to the Windows Credential Editor, which is used for credential extraction and manipulation. It identifies these tools by looking for specific strings such as "Amplia Security," "getlsasrvaddr.exe," "Cannot get PID of LSASS.EXE," "extract the TGT session key," and "PPWDUMP_DATA." The rule checks if the file starts with the typical 'MZ' header, ensures the file size is below 3000KB, and requires that either two or three of these strings are present for a positive identification.
  Updated-Date: '2024_08_07'
HKTL_BruteRatel_Badger_Indicators_Oct22_4:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ca1bc0552bdc1b27ad565bce06abade7
  Ruleset: securityonion-yara
  Summary: This rule detects indicators associated with Brute Ratel C4, specifically focusing on the badger component used by this software for red teaming operations. The detection is based on unique hexadecimal string patterns found within files, provided the file size is less than 8000KB, and the file does not have an initial byte indicating a SHC file. These patterns help identify malicious activity characteristic of Brute Ratel C4 badger usage.
  Updated-Date: '2024_08_07'
HKTL_CN_Dos_GetPass:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4e64bdc3510878efcb6a9c4717163df5
  Ruleset: securityonion-yara
  Summary: This rule detects a Chinese hacktool identified by the executable file GetPass.exe. It identifies specific strings within the file, such as "GetLogonS," "/showthread.php?t=156643," "To Run As Administ," "EnableDebugPrivileg," and "sedebugnameValue." The file must have a specific PE header and a size of less than 890KB to match the rule.
  Updated-Date: '2024_08_07'
HKTL_CN_Dos_sys:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 017c78a31e641ba3c01bdd533d40a2d8
  Ruleset: securityonion-yara
  Summary: 'This rule detects a specific Chinese hack tool known as "sys.exe," which is a small executable file under 150KB. The detection relies on the presence of several unique ASCII strings within the file, including references to adjusting debug privileges and authorship markers such as "Author: Cyg07*2" and "from golds7n[LAG]." Additionally, the file will contain the ASCII string "DAMAGE." The executable starts with the standard "MZ" header identifier used by DOS and Windows executable files.'
  Updated-Date: '2024_08_07'
HKTL_CN_ProcHook_May19_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3bd1ca96f60734d4a37f7ab512eb571b
  Ruleset: securityonion-yara
  Summary: This rule detects a hacktool utilized by Chinese threat groups, characterized by a specific file hash, import hash, and executable header signature. The tool's file size is less than 300KB.
  Updated-Date: '2024_08_07'
HKTL_CN_Project1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3b012846c4326164f0d85f2a94d418aa
  Ruleset: securityonion-yara
  Summary: 'This rule detects a specific Chinese hacktool named "Project1.exe" by checking for certain characteristics. It identifies the presence of particular ASCII strings: "EXEC master.dbo.sp_addextendedproc ''xp_cmdshell'',''xplog70.dll''," "Password.txt," and "LoginPrompt." Additionally, it ensures the file begins with the 0x5a4d signature and is less than 5000KB in size, confirming these matched conditions collectively.'
  Updated-Date: '2024_08_07'
HKTL_CN_dat_xpf:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 66849df7cbf18478299a9f2f11f4a3c8
  Ruleset: securityonion-yara
  Summary: This rule detects a Chinese hacktool named "xpf.sys." The detection is based on the presence of the specific strings related to unhooking device pointers and device names typically associated with the XScanPF tool. The file must start with specific signature bytes and be less than 25KB in size for the rule to trigger.
  Updated-Date: '2024_08_07'
HKTL_CN_update_PcMain:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2249c53d81bcac974a0d657496e0ee32
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a file called PcMain.dll, associated with a Chinese hacktool set. It identifies specific patterns in the file, including references to HTTP user agents, registry keys linked to Microsoft services, file naming conventions, global keys, and specific GET requests. The condition for this detection is that the file starts with the hexadecimal value 0x5a4d, is less than 500KB in size, and matches at least four of the defined string patterns.
  Updated-Date: '2024_08_07'
HKTL_CobaltStrike_Beacon_4_2_Decrypt:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 948f9eb10027afaee4729ff72852eabe
  Ruleset: securityonion-yara
  Summary: "This rule detects a deobfuscation routine used in the Cobalt Strike Beacon DLL version 4.2. The rule identifies unique byte patterns within x86 or x64 architectures to find these routines, helping to spot the presence of Cobalt Strike\u2019s Beacon, which is a widely-used tool for post-exploitation activities primarily leveraged by threat actors for stealthy command and control operations."
  Updated-Date: '2024_08_07'
HKTL_CobaltStrike_Beacon_Strings:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 65fde69c80e06f82fa93e83b672c1a60
  Ruleset: securityonion-yara
  Summary: 'This rule detects strings commonly used in Cobalt Strike Beacon DLLs. These strings include date and time formats ("%02d/%02d/%02d %02d:%02d:%02d"), service start notifications ("Started service %s on %s"), and formatted user and domain name logs ("%s as %s\\%s: %d"). For the condition to be met, at least two of these strings must be present.'
  Updated-Date: '2024_08_07'
HKTL_CobaltStrike_Beacon_XOR_Strings:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 00f6aa6e475ceb73d5444bc06df09593
  Ruleset: securityonion-yara
  Summary: This rule detects XOR-encoded strings used in the Cobalt Strike Beacon DLL. Specifically, it looks for patterns such as date and time formats, service initiation messages, and user-session details that are XOR-encoded with any value from 0x01 to 0xff. The rule also ensures that false positives, such as the mention of "MalwareRemovalTool," are excluded from triggering a match.
  Updated-Date: '2024_08_07'
HKTL_CobaltStrike_SleepMask_Jul22:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4d67ec5d219360c0bbe8accf974830c0
  Ruleset: securityonion-yara
  Summary: This rule detects static bytes associated with the sleep mask function in Cobalt Strike 4.5 that are not obfuscated. Cobalt Strike is a tool used by penetration testers and threat actors for command and control, post-exploitation, and lateral movement within a network. The specific sequence of bytes identified allows for the detection of this functionality within the software.
  Updated-Date: '2024_08_07'
HKTL_DomainPasswordSpray:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: dc20a35b9d9de6dfa72e7fb7c3cd380d
  Ruleset: securityonion-yara
  Summary: This rule detects the usage of the Powershell password spray tool "DomainPasswordSpray," which is utilized to perform login attempts with common passwords across a large number of accounts in a domain. The detection relies on identifying the specific command "Invoke-DomainPasswordSpray" within files smaller than 100KB.
  Updated-Date: '2024_08_07'
HKTL_Dsniff:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a10ae573ca95cf921e9ba54a8aaed540
  Ruleset: securityonion-yara
  Summary: This rule detects the Dsniff hack tool by identifying common strings associated with account, domain, login, or member information.
  Updated-Date: '2024_08_07'
HKTL_EmbeddedPDF:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 525e77809f062d6bcfc338d5efed143e
  Ruleset: securityonion-yara
  Summary: This rule detects PDF files that embed JavaScript, which can facilitate the execution of malicious actions. It identifies specific strings indicative of embedded files within the PDF content, such as markers for JavaScript actions and references to embedded file types. The rule triggers when a specific combination of these string patterns and PDF structural elements are present.
  Updated-Date: '2024_08_07'
HKTL_Empire_PowerUp:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9d16114c489f6db9365fba364ce39b08
  Ruleset: securityonion-yara
  Summary: This rule detects the Empire component known as PowerUp.ps1, a PowerShell script utilized within the Empire framework, which is a post-exploitation agent designed to aid in penetration testing and adversary simulations. The detection focuses on a specific command involving 'appcmd.exe' for listing application pools, and it checks for a unique hash and specific file characteristics.
  Updated-Date: '2024_08_07'
HKTL_FRP_Apr20_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 39f647c67ab4e5f3096e51b2d831e320
  Ruleset: securityonion-yara
  Summary: This rule detects the FRP (Fast Reverse Proxy) tool, which is commonly utilized by threat groups. The FRP is used to bypass network restrictions and establish connections between internal and external networks. The detection is based on specific code patterns and references within the FRP tool's source code and associated vendor libraries.
  Updated-Date: '2024_08_07'
HKTL_FRP_INI_Apr20_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4771dd7bbdb416293e905c258e293d26
  Ruleset: securityonion-yara
  Summary: This rule detects an INI configuration file used by the FRP (Fast Reverse Proxy) tool, which is often employed by threat groups to enable remote access to internal networks. The rule identifies the presence of specific strings within the file, such as configuration sections and parameters related to server addresses, ports, and remote desktop settings. The targeted file is relatively small, being less than 1KB in size, and begins with a specific byte sequence that indicates its format.
  Updated-Date: '2024_08_07'
HKTL_Imphashes_Aug22_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9132d9005cd2fb2291bed59ffe6821a1
  Ruleset: securityonion-yara
  Summary: This rule detects various hacktools based on their import hashes. It identifies multiple versions of known attack tools such as PetitPotam, Mimikatz, JuicyPotato, RoguePotato, Pwdump, PwDumpX, Htran, Cobalt Strike beacons, PPLDump, NanoDump, HandleKatz, DripLoader, CreateMiniDump, UACMe Akagi, WCE, Sliver Stagers, and Dumpert. Additionally, it recognizes utilities like SysmonEnte and SysmonQuiet, and ShaprEvtMute Hook. These tools are often employed for different malicious purposes, including credential dumping, privilege escalation, and persistence in compromised systems.
  Updated-Date: '2024_08_07'
HKTL_Keyword_InjectDLL:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5458223b09160c6f14e59cc72d9b4750
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the "InjectDLL" keyword, which is often found in hacktools or potentially unwanted applications. The detection is based on identifying specific strings within a file, including "InjectDLL" and "Kernel32.dll," both in their entirety and in ASCII encoding. Additionally, the file must start with a PE (Portable Executable) header, indicated by the first two bytes being "MZ" (hex value 0x5a4d).
  Updated-Date: '2024_08_07'
HKTL_Khepri_Beacon_Sep21_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8e66a779a47215b2e2da03cce23f9cda
  Ruleset: securityonion-yara
  Summary: This rule detects the Khepri command and control (C2) framework beacons by identifying specific strings and patterns within files. It looks for identifiable text related to C2 operations, such as process items and command parameters, as well as error messages and file operations commonly used by Khepri. Additionally, it includes several hexadecimal patterns that match known byte sequences in Khepri-related files. The rule applies conditions based on the file size and the presence of these strings and patterns to accurately detect Khepri C2 activity.
  Updated-Date: '2024_08_07'
HKTL_Koh_TokenStealer:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 16b5a8f3cbe2d9700b7011d99a6fc431
  Ruleset: securityonion-yara
  Summary: This rule detects a .NET binary associated with a token-stealing tool named Koh, developed by GhostPack. It identifies the presence of a specific TypeLibGUID and matches distinct string patterns related to system privileges, Security Identifier (SID) formats, hexadecimal values, and a PDB file linked to Koh. The detection triggers based on either a match of the TypeLibGUID or several identified string patterns within the binary file.
  Updated-Date: '2024_08_07'
HKTL_LNX_Pnscan:
  Created-Date: '2024_08_06'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 37fd9d625d7173e4758874f33267ac8e
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the Pnscan port scanner software, which is a multithreaded TCP port scanner. It specifically looks for a hex-coded response string and a description of the program's function within files smaller than 6000KB.
  Updated-Date: '2024_08_06'
HKTL_Lazagne_Gen_18:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0781382f6152ca51bb19a8ea406acfe8
  Ruleset: securityonion-yara
  Summary: This rule detects the Lazagne password extractor hacktool, which is designed to retrieve stored passwords from various applications on a system. It specifically looks for strings such as "lazagne.config.powershell_execute(", "creddump7.win32.", "lazagne.softwares.windows.hashdump", and ".softwares.memory.libkeepass.common(" to identify the presence of this tool. This tool is commonly used to extract credentials from the memory or configuration files of different software, including Windows systems and applications like Keepass.
  Updated-Date: '2024_08_07'
HKTL_Lazagne_PasswordDumper_Dec18_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f5d026b8e54345d9ebdf9a0b91d532fd
  Ruleset: securityonion-yara
  Summary: This rule detects the password-dumping tool Lazagne, which is frequently utilized by threat groups from the Middle East. The rule identifies specific patterns associated with Lazagne through strings related to various software such as Opera, Mozilla, Chrome, and Outlook, as well as a configuration dictionary. The detection is based on these identifiable strings within executables smaller than 17,000 KB that start with the "MZ" header commonly found in Windows executable files.
  Updated-Date: '2024_08_07'
HKTL_LazyCat_LogEraser:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7e4d23b2e5b99027c813e04d29cf129f
  Ruleset: securityonion-yara
  Summary: This rule detects a tool known as "LazyCat," which was used in the compromise of the Australian Parliament House network. The tool is associated with log erasure and local privilege escalation activities, utilizing terms like "LazyCat.dll," ".local_privilege_escalation.rotten_potato," and "LazyCat.Extension." It includes strings indicating specific log paths and virtual site details, aiming to identify the presence of this particular malicious activity.
  Updated-Date: '2024_08_07'
HKTL_Meterpreter_inMemory:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 718d1ea20fbad61bd6516ac13e43be50
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of Meterpreter running in-memory. Meterpreter is a remote access tool used for administrative control and often leveraged in penetration testing frameworks. The rule identifies indicators such as specific hexadecimal sequences, file names, and strings related to Meterpreter's components and actions, including "metsrv.x64.dll" and "ReflectiveLoader," while excluding certain markers related to legitimate security software like SentinelOne and fortiESNAC.
  Updated-Date: '2024_08_07'
HKTL_Mimikatz_SkeletonKey_in_memory_Aug20_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 357ef149fa2bb4e7d579bc035591abe2
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of Mimikatz SkeletonKey malware in the memory of a system. Mimikatz SkeletonKey is a post-exploitation tool that allows attackers to authenticate as any user within a targeted Windows environment by injecting a master password directly into the domain controller's authentication process. The detection is based on specific hexadecimal string patterns that are indicative of the malware's presence in memory.
  Updated-Date: '2024_08_07'
HKTL_MooreR_Port_Scanner:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 35330aff612f31ce137398d6a34159c4
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the MooreR Port Scanner, identifying it through specific strings found within the executable file. The key indicators include certain descriptions, references to Visual Studio, and unique character sequences.
  Updated-Date: '2024_08_07'
HKTL_NET_AdCollector_Sep22_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d1be766c27e1b83e671a7ff94d6c019b
  Ruleset: securityonion-yara
  Summary: This rule detects the ADCollector tool, which is used to quickly gather essential information from an Active Directory environment for either security assessment or exploitation. Specific indicators of the tool include strings related to its executable name "ADCollector.exe" and distinct patterns found within the tool's operations, such as checking if passwords are set to never expire and accessing certain Windows policies. The rule also checks for specific file properties and hashes to confirm the presence of the ADCollector tool.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_ADFSDump:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3c518d40aa3cb01cbc508128e70fdcdd
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of specific GUIDs associated with ADFSDump, a tool utilized by both red and black teams to harvest tokens in Active Directory Federation Services (ADFS) environments. The detection is based on identifying specific GUID strings within a file, which are characteristic of the ADFSDump tool, allowing for effective identification of this particular tool's components.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_ADSearch:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 43e15058bfd22ec2b3a6e844297b2ade
  Ruleset: securityonion-yara
  Summary: This rule detects .NET red team or black team tools by identifying a specific typelib GUID value ("4da5f1b7-8936-4413-91f7-57d6e072b4a7" or "4DA5F1B7-8936-4413-91F7-57D6E072B4A7") within executable files that start with the "MZ" header and have a PE signature. This detection criteria targets ADSearch, a tool used for Active Directory searches and likely employed by security assessment teams.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_AESShellCodeInjector:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e4f6ae15d331ffb8bbd0f54f5aa31c50
  Ruleset: securityonion-yara
  Summary: This rule detects .NET tools used by red and black teams for injecting shellcode via the typelibguid. It identifies specific GUID strings within the files and verifies the presence of the "MZ" and "PE" headers typical for executable files.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_AMSI_Handler:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9816534c16f8c5c43251daceaf04d1e3
  Ruleset: securityonion-yara
  Summary: This rule detects C# red-team and black-team tools by identifying specific typelibrary GUIDs within the analyzed file. The typelibrary GUIDs considered are "d829426c-986c-40a4-8ee2-58d14e090ef2", "86652418-5605-43fd-98b5-859828b072be", "1043649f-18e1-41c4-ae8d-ac4d9a86c2fc", and "1d920b03-c537-4659-9a8c-09fb1d615e98", in both their lowercase and uppercase representations. The rule specifically looks for these GUIDs within files that have the PE (Portable Executable) format, identified by the "MZ" and "PE" headers.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_AVIator:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 96d2b20119126b92f9ea1e4506d55539
  Ruleset: securityonion-yara
  Summary: This rule detects C# red-team or black-team tools by identifying a specific typelib GUID. The GUID is searched for in both lowercase and uppercase formats within files that have the MZ header and PE signature, indicative of a Windows executable. The purpose is to identify potentially malicious or legitimate penetration testing tools associated with this identifier in the specified software library.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_AV_Evasion_Tool:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ab7fe2de1e0526901d3314209e709c19
  Ruleset: securityonion-yara
  Summary: This rule detects C# red-team and black-team tools based on specific type library GUIDs (Globally Unique Identifiers). It identifies executables using particular GUIDs associated with the AV Evasion Tool, a toolset developed to bypass antivirus detection. The condition checks for the presence of either of two specific GUIDs in both lower and upper case, within files that conform to the standard Portable Executable (PE) format used by Windows executables.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_Absinthe:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 638d02b4e62ed47d19002434300821ab
  Ruleset: securityonion-yara
  Summary: This rule detects C# tools used by red or black teams by identifying the presence of a specific Type Library GUID. This is indicative of tools associated with the "Absinthe" project hosted on GitHub, which facilitates different penetration testing activities. The rule checks for both lowercase and uppercase variants of the GUID value within executable files, ensuring that recognized red team tool signatures are flagged.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_Adamantium_Thief:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: eeb55bbef65948e1d76705c62e43c87a
  Ruleset: securityonion-yara
  Summary: This rule detects the use of C# tools designed for red team (attack simulation) and black team (offensive security) operations by identifying a specific Type Library GUID associated with Adamantium-Thief. Adamantium-Thief is a tool referenced through its repository on GitHub, which facilitates stealing information from target systems. The rule specifically searches for the presence of the GUID in both lower and upper case within executable files marked by certain Windows Portable Executable headers.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_AddReferenceDotRedTeam:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ea8b418fd80c74f2e00877ff5c6b1a21
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of certain C# red team and black team tools by identifying a specific Type Library GUID associated with these tools. It looks for the GUID "73c79d7e-17d4-46c9-be5a-ecef65b924e4" in both lowercase and uppercase forms within files that start with the MZ header and contain the PE header at the correct offset. This GUID is indicative of tools related to the AddReferenceDotRedTeam project, which is used for malicious purposes in security testing and adversarial engagements.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_AggressorScripts:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a176823dcdd75532a19e6ca270e008df
  Ruleset: securityonion-yara
  Summary: This rule detects C# red/black-team tools by identifying specific typelib GUIDs within an executable file. It checks for the presence of the GUID "afd1ff09-2632-4087-a30c-43591f32e4e8" in both lowercase and uppercase ASCII wide string formats, ensuring that it applies to Windows portable executable (PE) files, indicated by specific magic numbers in the file header.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_Aladdin:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7bc1627d2c73b9a6fe81b1bdb094ed25
  Ruleset: securityonion-yara
  Summary: This rule detects .NET red-team and black-team tools by identifying specific type library GUIDs, which are unique identifiers associated with these tools. The rule triggers when it finds any of the listed GUIDs in both lowercase and uppercase formats within a file, given that the file begins with the signature of a Windows executable.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_AllTheThings:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d5fbe6f9a363205476eb72d658add142
  Ruleset: securityonion-yara
  Summary: This rule detects C# red and black-team tools by identifying a specific typelib GUID associated with them. The GUID is checked in both lowercase and uppercase formats within executable files, ensuring matches that conform to the Portable Executable file signature.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_Altman:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7ac5be862b7d1e0336e24d6a2ec3d6da
  Ruleset: securityonion-yara
  Summary: This rule detects C# tools used by red and black teams by identifying specific type library GUIDs associated with the Altman toolset. It searches for a series of unique GUID strings, both in lowercase and uppercase formats, within executable files that begin with the standard PE file header. This helps in identifying the presence of the Altman software, which is commonly used for security assessment and penetration testing.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_AmsiScanBufferBypass:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e3aac12f7d29a9e12a7514b5f0b2c511
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of specific C# red/black-team tools by identifying a unique Type Library GUID associated with the AmsiScanBufferBypass technique. The GUID, which appears in both lowercase and uppercase forms, is a distinct identifier for the detection of the associated software. This rule checks for the presence of the Windows executable file signature to confirm the file type before applying the GUID criteria.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_AntiDebug:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9483b5429f214c4761a4930d86252eb9
  Ruleset: securityonion-yara
  Summary: This rule detects C# red-team and black-team tools through the identification of a specific typelib GUID, either in lowercase or uppercase format, within executable files that have the characteristics of a Windows Portable Executable (PE) format.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_Anti_Analysis:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3c06b91c45c3c1ad8f925ad4a29aa85a
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of C# red-team or black-team tools by identifying a specific typelib GUID (Global Unique Identifier) within executable files. The condition is met when a particular GUID, in either lowercase or uppercase hexadecimal format, is found in conjunction with headers typical of PE (Portable Executable) files. This is likely used to identify certain anti-analysis tools associated with these types of security assessments.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_AsyncRAT_C_Sharp:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b31adc9e651d01694ac976c2aeffb682
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the AsyncRAT C# remote administration tool by identifying specific Type Library GUIDs associated with it within executable files. AsyncRAT is an open-source remote access trojan commonly used by red and black teams for performing remote control activities on compromised systems. The rule uses a variety of GUID strings to identify the tool's typelibs, which are checked in both lowercase and uppercase formats, to ensure thorough detection coverage. The initial condition for the executable includes checks for standard MZ and PE headers.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_AtYourService:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5a128f63eacd6182e63e17dd0f6862f9
  Ruleset: securityonion-yara
  Summary: "This rule detects .NET tools used by red/black team operations based on a specific Type Library GUID. It identifies executable files by checking for the presence of this GUID in both lower and upper case formats within the file\u2019s structure, ensuring the targets are valid executable files by confirming the presence of typical headers."
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_AzureCLI_Extractor:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f5b5a3ce55742b49fd35fb6f95f4d64a
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of C# red/black-team tools by identifying specific typelib GUIDs associated with the AzureCLI-Extractor. The detection focuses on locating the GUID strings "a73cad74-f8d6-43e6-9a4c-b87832cdeace" and its uppercase variant within Windows portable executables (PE) files.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_BYTAGE:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6e8b034d0560e133646caa87f948660f
  Ruleset: securityonion-yara
  Summary: This rule detects C# red-team and black-team tools by identifying a specific type library GUID that can appear in the software's compiled output. The GUID appears in both lowercase and uppercase formats and is checked against file headers indicating a Windows executable (PE) format.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_BackNet:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 94414e0d8cb1896b88b87ded4ae8ff7a
  Ruleset: securityonion-yara
  Summary: This rule detects the existence of specific C# red-team and black-team tools by identifying particular typelib GUIDs linked to the BackNet toolkit. This toolkit may be found in PE (Portable Executable) files, as evidenced by the presence of the "MZ" header at the beginning of the file and the "PE" signature at the specified file offset. Several unique GUIDs in both lowercase and uppercase forms are used to recognize these tools, enhancing detection of potentially obfuscated or disguised instances.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_BadPotato:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e74293c2a47431a53c4270962f756fc8
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of specific C# red-team or black-team tools that utilize a particular type library globally unique identifier (GUID). The rule identifies these tools by looking for instances of the GUID "0527a14f-1591-4d94-943e-d6d784a50549" or its uppercase equivalent within executable files that have the standard PE file header, indicated by the signature "0x5A4D" and "0x00004550". This detection method is intended for identifying the tool "BadPotato," which is associated with privilege escalation techniques as described in the provided reference.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_BlackNET:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c7809fc0053591d472eaf9d5925674dd
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of VB.NET tools commonly used by red and black teams, specifically those identified by the typelibguids associated with BlackNET software. It checks for certain globally unique identifiers (GUIDs) in different formats within executable files, confirming that the file follows the standard PE (Portable Executable) format used in Windows.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_BlockEtw:
  Created-Date: '2024_08_06'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e9924734a18d86c79b75d818ebaf5c57
  Ruleset: securityonion-yara
  Summary: This rule detects C# red/black-team tools through the identification of a specific typelib GUID. The rule searches for the GUID "daedf7b3-8262-4892-adc4-425dd5f85bca" in both lowercase and uppercase ASCII or wide string formats within executable files indicated by PE (Portable Executable) headers.
  Updated-Date: '2024_08_06'
HKTL_NET_GUID_BrowserGhost:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0078cbabe1808fa5d038535f5554d9c4
  Ruleset: securityonion-yara
  Summary: This rule detects C# tools used by red and black teams by identifying specific type library GUIDs. It checks for the presence of "2133c634-4139-466e-8983-9a23ec99e01b" and its uppercase variant within the executable files, ensuring that the file is a PE (Portable Executable) format but not a DLL. This is particularly utilized for the detection of tools associated with BrowserGhost, a toolkit available on GitHub.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_BrowserPass:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 81ccfa6a8442299fa9b908f6c887c8b6
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of certain C# red/black-team tools by identifying a specific typelib GUID associated with the BrowserPass software. The detection is made by scanning for GUID strings that match "3cb59871-0dce-453b-857a-2d1e515b0b66" in both lowercase and uppercase ASCII or wide character formats within files that have a PE header. BrowserPass is a tool often used by red and black teams, which are groups specialized in offensive security and defense simulation, respectively.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_Browser_ExternalC2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a5989431ea7ef300859188bdd8f910e9
  Ruleset: securityonion-yara
  Summary: This rule detects C# tools used by red and black teams, specifically identifying their unique type library GUIDs (Global Unique Identifiers). It searches for strings representing these GUIDs in both lowercase and uppercase formats within files that have the characteristics of Windows portable executables. By looking for a particular pattern in the PE header and the presence of specified GUIDs, the rule aims to identify potentially malicious or testing tools related to browser external command and control configurations.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_BypassUAC:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: be466524a899cd786b079780da49d4db
  Ruleset: securityonion-yara
  Summary: This rule detects red and black team tools written in C# that use specific Type Library GUIDs (Globally Unique Identifiers) linked to the software known as BypassUAC. BypassUAC is a tool available on GitHub designed to bypass User Account Control (UAC) in Windows operating systems. The rule identifies these tools by matching case-insensitive Type Library GUIDs embedded within files structured as Windows executable files.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_CSharpSetThreadContext:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a3e3921bbfc90bbeb36d3396923a3ca1
  Ruleset: securityonion-yara
  Summary: This rule detects C# remote access tools used by red and black teams by identifying specific type library GUIDs associated with the CSharpSetThreadContext tool. It looks for either of two particular GUID string patterns in both lowercase and uppercase ASCII within files that begin with the "MZ" header and contain "PE" at their designated file offset.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_CVE_2019_1064:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5cb614d08ac5bbbaf0be3c2b7b29299b
  Ruleset: securityonion-yara
  Summary: This rule detects C# red-team or black-team tools by identifying the presence of specific typelib GUID values, "ff97e98a-635e-4ea9-b2d0-1a13f6bdbc38" in both lowercase and uppercase formats, within executable files. These particular GUIDs are associated with the exploitation of the vulnerability referenced as CVE-2019-1064. The files are cross-verified for a valid PE file header to ensure they are Windows executables.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_CVE_2019_1253:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 78c415db78d2e06d3f404d1517156692
  Ruleset: securityonion-yara
  Summary: This rule detects C# red and black-team tools by searching for a specific typelib GUID within the file. The condition specifies that the file must be a valid Windows executable and contain any of the defined GUIDs, which appear in both lowercase and uppercase formats.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_CVE_2020_0668:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2d3642b126ef9070c630e4cb0dfeb3d8
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of specific C# red and black-team tools by identifying a particular typelib GUID. The rule triggers if a file begins with the 'MZ' and 'PE' headers, typical of Windows executable files, and if it contains either the lowercase or uppercase version of the GUID "1B4C5EC1-2845-40FD-A173-62C450F12EA5" in ASCII or wide strings encoding. This approach helps identify tools that exploit vulnerability CVE-2020-0668 to escalate privileges or conduct other unauthorized activities.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_CVE_2020_1206_POC:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d107e10cec892fc867eef271d41aa036
  Ruleset: securityonion-yara
  Summary: This rule detects .NET red/black-team tools by identifying specific typelib GUIDs associated with the CVE-2020-1206 proof of concept. It searches for particular GUID strings, which can be represented in both lowercase and uppercase ASCII or wide formats, within executable files that start with the "MZ" and "PE" headers.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_CVE_2020_1337:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 92fedd7f2cde4c20b3bc9d9a6ec1c08d
  Ruleset: securityonion-yara
  Summary: This rule detects C# red-team and black-team tools by identifying specific type library globally unique identifiers (GUIDs). It looks for the presence of these GUIDs in both lowercase and uppercase formats within executable files, which begin with the 'MZ' header and contain the 'PE' signature at a specified location. The targeted GUID suggests an association with tools designed for exploiting CVE-2020-1337.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_C_Sharp_R_A_T_Client:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 245272aa6dd2dafde36c96135cbba5e6
  Ruleset: securityonion-yara
  Summary: This rule detects the use of a C# remote administration tool (RAT) client employed by red or black teams for penetration testing or unauthorized control. The detection is based on specific typelib GUIDs associated with the tool, identifying it through both lowercase and uppercase representations of these GUIDs in the executable files.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_Carbuncle:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b44d1f7c2390fb9f315f429ad7958620
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of C# tools commonly used by red and black teams through a specific Typelib GUID associated with the Carbuncle project. The detection specifically searches for the Typelib GUID "3f239b73-88ae-413b-b8c8-c01a35a0d92e" in both lowercase and uppercase ASCII and wide string formats within files that have a PE (Portable Executable) header, characterized by the values "0x5A4D" and "0x00004550" at specific file offsets.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_CasperStager:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 297d44fadf0a598874c2058a2c215dc3
  Ruleset: securityonion-yara
  Summary: This rule detects the C# red-team and black-team tools CasperStager through the presence of specific typelib GUIDs within executable files. The detection relies on identifying particular GUID strings in both lowercase and uppercase formats, and it checks for the standard PE file headers to confirm that the file is an executable.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_Certify:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5b911b74026ef54cd5a9d19b5f8fc3aa
  Ruleset: securityonion-yara
  Summary: This rule detects .NET red and black-team tools using a specific typelib GUID associated with the GhostPack Certify project. It identifies the presence of the GUID "64524ca5-e4d0-41b3-acc3-3bdbefd40c97" in its lowercase and uppercase forms, targeting executable files that begin with the standard 'MZ' header (indicating a Windows PE file).
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_Change_Lockscreen:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5eb9377b84fd920f5b3dd54949cf2657
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the tool known as "Change-Lockscreen," which is used for modifying the lock screen and is part of a collection of C# red-team and black-team tools. Identification is based on specific typelib GUIDs found within binaries, allowing for detection by checking for these strings in files that match the Portable Executable (PE) file format criteria.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_CinaRAT:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3165ffce8049e07b1164b0d2cc9b0603
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of CinaRAT, a remote access trojan (RAT) primarily written in C#. It identifies the trojan through specific typelib GUID strings, checking for either uppercase or lowercase formats. The rule ensures that these indicators are found in PE (Portable Executable) files by verifying the file header.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_CloneVault:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 407bf1b6391b739bd28e18a52c14810d
  Ruleset: securityonion-yara
  Summary: This rule detects .NET tools used by red or black teams by identifying a specific type library GUID string within executable files. It looks for either the lowercase or uppercase version of the GUID "0a344f52-6780-4d10-9a4a-cb9439f9d3de" and confirms the presence of the MZ and PE headers commonly found in executable files. This detection method is associated with the CloneVault project.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_Crassus:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 36ed3f3ea46a56c816f070ddcaf2688b
  Ruleset: securityonion-yara
  Summary: This rule detects .NET red/black-team tools based on a specific TypeLib GUID. It identifies the presence of these tools by searching for instances of the GUID, both in lowercase and uppercase forms, in files that match the PE file signature.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_Crypter_Runtime_AV_s_bypass:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8d6d3b99d811e3f4b8d2241ba336e16e
  Ruleset: securityonion-yara
  Summary: This rule detects C# red and black team tools by identifying a specific typelib GUID associated with the Crypter Runtime AV evasion tool. It searches for the GUID "c25e39a9-8215-43aa-96a3-da0e9512ec18" in both lowercase and uppercase ASCII or wide strings within executable files, confirming the presence of PE file headers as indicators.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_CsharpAmsiBypass:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 62ac3d6db0c93d365de57e654e1ae134
  Ruleset: securityonion-yara
  Summary: This rule detects C# red-team or black-team tools by identifying a specific typelib GUID (Globally Unique Identifier) within executable files. It focuses on a particular GUID string that can appear in both lowercase and uppercase formats, indicating the presence of tools designed to bypass AMSI (Antimalware Scan Interface). The detection mechanism looks for this identifier in files that start with the 'MZ' header and a 'PE' format signature, common characteristics of Windows executable files.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_Csharp_Loader:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1fec54e735ea9dbcc790a6a7c09197dc
  Ruleset: securityonion-yara
  Summary: This rule detects C# tools used by red-team or black-team activities by identifying a specific Type Library GUID (5fd7f9fc-0618-4dde-a6a0-9faefe96c8a1) in executable files. The detection mechanism involves checking for the presence of the GUID in both lowercase and uppercase formats within the file, and confirming the file begins with the 'MZ' header typically used in Windows executables, followed by the PE signature. This identifies potentially malicious software associated with specified C# loaders.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_DInvisibleRegistry:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 31dc5787357db8cb8916bc32df946bc1
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of C# red/black-team tools by identifying a specific typelib GUID within files. The rule looks for strings that match the GUID "31d576fb-9fb9-455e-ab02-c78981634c65" in both lowercase and uppercase formats. This identification can be used to flag potential use of such tools that may be involved in penetration testing or malicious activities.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_DInvoke:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2fe8f9a36784c8f9cacac69c83d2d854
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of .NET-based red/black-team tools by identifying specific typelibguid strings. It checks for both lowercase and uppercase versions of the typelibguid within executable files, specifically targeting files that adhere to the Portable Executable (PE) format, indicated by common binary signatures.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_DInvoke_PoC:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 93726f8f603979d7ea901ea453ad327b
  Ruleset: securityonion-yara
  Summary: This rule detects C# red team and black team tools through the presence of a specific Type Library GUID, associated with a proof-of-concept project found on GitHub under the DInvoke repository. It identifies these tools by checking for a particular GUID string in both lowercase and uppercase forms within executable files that have valid PE headers.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_DLL_Injection:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 883501891b8f18bd1a15e4423b3f3e19
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of DLL injection tools written in C# used by red and black teams by identifying the Typelib GUIDs associated with these tools. The specific GUIDs targeted are "3d7e1433-f81a-428a-934f-7cc7fcf1149d" and its uppercase variant. The rule checks for Windows executable files (indicated by specific magic numbers) that contain any of these GUIDs within their strings.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_DLL_Injector:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8fd4504f31544797205e400bc462314f
  Ruleset: securityonion-yara
  Summary: This rule detects the use of C# red-team and black-team tools by identifying specific type library globally unique identifiers (typelibguid). These tools are associated with DLL injection activities, which are techniques often used to execute code within the address space of another process. The rule leverages unique typelibguids present within the binary file to flag these tools.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_DarkEye:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b816903f3bedd0b2b328c3c3956cc8d1
  Ruleset: securityonion-yara
  Summary: This rule detects C# red team and black team tools by identifying the presence of specific typelib GUIDs associated with the DarkEye tool. It matches against both lowercase and uppercase representations of the GUID "0bdb9c65-14ed-4205-ab0c-ea2151866a7f" within files that have a PE header signature.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_DarkFender:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 82f152691dcd61ddcd6687bacb3a40bc
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of C# tools used in red or black team operations by identifying a specific type library GUID associated with the DarkFender toolkit. It searches for the GUID in both lowercase and uppercase ASCII and wide character formats within executable files by checking the PE header signature.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_DecryptAutoLogon:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9f85b1b766d80b66a99470f486aa7c78
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of C# red-team and black-team tools through the identification of a specific typelib GUID. The tool in question, DecryptAutoLogon, facilitates the decryption of auto-logon credentials. The rule searches for the specific typelib GUID in both lowercase and uppercase formats within a Windows executable by checking for the MZ and PE headers.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_DesktopGrabber:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e2411c2ca48e05b94fe3b7868c8a3ee0
  Ruleset: securityonion-yara
  Summary: This rule detects tools used by red and black teams, specifically targeting DesktopGrabber, a C# application identified by the typelibguid. DesktopGrabber is linked to particular GUID strings in either lowercase or uppercase format and operates within executables identified by specific file header values.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_DeviceGuardBypasses:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0c2b30b709276c571d3200449f5a7130
  Ruleset: securityonion-yara
  Summary: This rule detects C# tools used by red teams or black hats that are associated with Device Guard bypass techniques by identifying specific typelib GUIDs in executable files. The condition is met if the file header starts with 'MZ' followed by 'PE' and contains any of the specified GUID strings in either uppercase or lowercase forms.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_Disable_Windows_Defender:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 099f13cd0404e84f637896e2dc4d31f4
  Ruleset: securityonion-yara
  Summary: This rule detects an attempt to disable Windows Defender by identifying specific C# red-team or black-team tools that utilize a particular typelib GUID. It looks for the GUID values "501e3fdc-575d-492e-90bc-703fb6280ee2" or its uppercase equivalent within files that exhibit characteristics of Portable Executable (PE) format.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_DoHC2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6869969f6c5197c90fc86b747575099b
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of C# red and black team tools through specific Type Library GUIDs embedded within files. It identifies files that start with the "MZ" header, indicating a Windows executable, and checks for specific GUID strings in both lowercase and uppercase forms.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_DotNetAVBypass_Master:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1001ef3dc3c9468b71a5191affb3f7bc
  Ruleset: securityonion-yara
  Summary: This rule detects C# tools used by red and black teams through the presence of a specific typelib GUID. The GUID is identified either in lowercase or uppercase ASCII and wide character formats. The detection condition checks the file header to confirm it is a Portable Executable (PE) file before searching for the GUID. The focus is on identifying any instances of these tools derived from the project "DotNetAVBypass-Master".
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_DotNetToJScript:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f536e8533bbf808d08839927ed47a1c4
  Ruleset: securityonion-yara
  Summary: This rule detects C# tools used by both red and black teams through the presence of specific typelib GUIDs in files. These tools, related to the DotNetToJScript project, include recognizable typelib GUID strings in their binary content, which can be found in either lowercase or uppercase formats. This rule also checks for the common Portable Executable (PE) header characteristics, ensuring a match when these two conditions are satisfied.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_DotNetToJScript_LanguageModeBreakout:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8e349dc5b410767ce180fafc72b38853
  Ruleset: securityonion-yara
  Summary: This rule detects .NET red team or black team tools by identifying specific typelib GUIDs associated with the tool "DotNetToJScript-LanguageModeBreakout". These tools are often used in penetration testing or by attackers to execute .NET code via JavaScript. The detection mechanism specifically looks for the presence of the typelib GUID "DEADB33F-FA94-41B5-813D-E72D8677A0CF" within executable files.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_DreamProtectorFree:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 67ae20f030593b2a6545d256007f4e06
  Ruleset: securityonion-yara
  Summary: This rule detects C# red/black-team tools specifically associated with the DreamProtectorFree software by identifying the unique typelib GUIDs "f7e8a902-2378-426a-bfa5-6b14c4b40aa3" and its uppercase variant within the binary structure of executable files. The condition checks for the presence of a valid PE header, ensuring that the target matches the expected format of executable files.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_Driver_Template:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3576719d91e871078265c250b7b17619
  Ruleset: securityonion-yara
  Summary: This rule detects .NET red-team or black-team tools by identifying a specific typelib GUID. It searches for the GUID "bdb79ad6-639f-4dc2-8b8a-cd9107da3d69" (case-insensitive) within the binary files that start with the standard MZ header for executables and contain the PE header at the correct offset.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_Dropless_Malware:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 73ce3b6c716786bcb3de2a29bb5e1a6a
  Ruleset: securityonion-yara
  Summary: This rule detects C# red-team and black-team tools by identifying specific typelib GUIDs. It searches for the GUIDs "23b739f7-2355-491e-a7cd-a8485d39d6d6" and its uppercase variant within files that begin with the "MZ" and "PE" headers, which are typical markers of executable files. The rule aids in identifying malware that operates without dropping files onto the disk by recognizing these unique GUIDs associated with particular hacking tools.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_ESC:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4c98c0d0653b91227b5b8b0107184eac
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of C# red-team or black-team tools by identifying specific type library GUIDs within executable files. It searches for particular GUID strings that can be present in various case formats. The detection mechanism ensures the file is a valid PE (Portable Executable) by checking the DOS header and PE signature before matching the GUID strings, which are indicative of tools used for security testing and vulnerability assessments.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_EWSToolkit:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 31947d57dea5cd34d370a34db5a80d33
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of specific C# tools used by red and black teams, identified by unique typelib GUIDs (Global Unique Identifiers). These tools are associated with the EWSToolkit, a repository found on GitHub, which contains various offensive security tools utilized for penetration testing and red team engagements. The detection is based on matching distinctive typelib GUID strings in both lowercase and uppercase against PE (Portable Executable) files.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_EasyNet:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d9822c318b29657fc37d018154c48b17
  Ruleset: securityonion-yara
  Summary: This rule detects .NET red-team and black-team tools by identifying specific typelib GUIDs associated with the EasyNet project. The rule matches on strings representing GUIDs in both lowercase and uppercase formats. Additionally, it checks for specific patterns in the PE (Portable Executable) header to confirm the presence of a valid PE file.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_EducationalRAT:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 36113d0d9ac1d096561baca5600e63cd
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of C# red-team and black-team tools by identifying a specific type library GUID. The detection condition is based on scanning for a particular GUID, both in lowercase and uppercase, within executable files. The targeted GUID is "8a18fbcf-8cac-482d-8ab7-08a44f0e278e," which is associated with the EducationalRAT tool available on GitHub.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_Evasor:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 00c09ea2a8683d0fb2bc64f7aca71637
  Ruleset: securityonion-yara
  Summary: This rule detects the use of C# red-team and black-team tools through the presence of a specific type library GUID ("1c8849ef-ad09-4727-bf81-1f777bd1aef8" or "1C8849EF-AD09-4727-BF81-1F777BD1AEF8") in executable files, which is associated with the GitHub project Evasor by CyberArk. The condition checks if the file is a Windows executable by verifying the 'MZ' and 'PE' signatures before searching for the specified GUIDs in the file's content.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_EvilFOCA:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 823a44bc3cf932bccbaa3254f2602048
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the EvilFOCA tool, an offensive security utility written in C# commonly used in red/black-team operations. It identifies the tool by searching for a specific Type Library GUID in both lowercase and uppercase formats within executable files, providing an effective method to pinpoint instances of this software based on its unique typelibguid.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_EvilWMIProvider:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f2c7008a2db45e8b0ac80bef60df88a0
  Ruleset: securityonion-yara
  Summary: This rule detects C# tools utilized by red-team or black-team operations through the identification of a specific typelib GUID associated with EvilWMIProvider. The detection utilizes two forms of the GUID, ensuring robustness against potential obfuscation, and verifies these strings within executables based on their standard PE file headers.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_ExploitRemotingService:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: eb8f030c45bf359065944448333a37b8
  Ruleset: securityonion-yara
  Summary: This rule detects C# red-team and black-team tools by identifying specific Type Library GUIDs associated with the ExploitRemotingService software. This service, available on GitHub, is used to manipulate remote services and could be leveraged for offensive cybersecurity operations. The rule checks for the presence of these GUIDs within a file that starts with the "MZ" header and has the PE signature, indicating it is a Windows executable.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_ExternalC2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 20a2ae850e013c267ed1b2d7d475aa0a
  Ruleset: securityonion-yara
  Summary: This rule detects C# red-team and black-team tools associated with specific typelib GUIDs. It identifies these tools by searching for particular Case Insensitive GUID strings "7266acbb-b10d-4873-9b99-12d2043b1d4e" and "5d9515d0-df67-40ed-a6b2-6619620ef0ef" within executable files.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_Farmer:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 63624bbe17f148e22438e4ea3c30507c
  Ruleset: securityonion-yara
  Summary: This rule detects .NET red-team and black-team tools by identifying specific typelib GUIDs within executable files. It checks for the presence of GUIDs such as "37da2573-d9b5-4fc2-ae11-ccb6130cea9f", "49acf861-1c10-49a1-bf26-139a3b3a9227", "9a6c028f-423f-4c2c-8db3-b3499139b822", and "1c896837-e729-46a9-92b9-3bbe7ac2c90d", in both lowercase and uppercase formats. These GUIDs are indicative of specific tooling used in penetration testing and other cybersecurity activities. The rule ensures that the file being inspected is a Portable Executable (PE) file by checking its header values.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_Fenrir:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6d2e11a57e0169a929c075f8c0b5e85a
  Ruleset: securityonion-yara
  Summary: This rule detects C# tools used by red and black teams by identifying specific typelib GUIDs (Globally Unique Identifiers) associated with these tools. The GUIDs checked are "aecec195-f143-4d02-b946-df0e1433bd2e" in both lowercase and uppercase representations. The rule targets executable files by confirming the presence of the "MZ" and "PE" headers, ensuring it examines valid Windows executable files.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_FileSearcher:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: dd98f06f52d71e4cd2c50030279f0e91
  Ruleset: securityonion-yara
  Summary: This rule detects C# tools used in red-team and black-team operations by identifying a specific typelib GUID (2c879479-5027-4ce9-aaac-084db0e6d630) within the file structure. These tools can be employed for file searching tasks, and the rule monitors both lowercase and uppercase representations of the GUID.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_ForgeCert:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5818c17b48d7d13b31675c2163a9c595
  Ruleset: securityonion-yara
  Summary: This rule detects .NET tools used by red and black teams through the presence of a specific type library GUID associated with the ForgeCert tool. The tool, ForgeCert, is related to the repository hosted at https://github.com/GhostPack/ForgeCert. The detection logic relies on identifying known GUID patterns in files that have a valid PE (Portable Executable) header signature.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_GRAT2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e905be7a0f0889b2b43b9ed8f0f5dd0b
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of C# red team or black team tools by identifying specific type library GUIDs associated with them. It targets the GUID "5e7fce78-1977-444f-a18e-987d708a2cff" in both lowercase and uppercase forms, indicating its role in identifying a specific toolset used for penetration testing and offensive security purposes, as documented in the reference provided. It specifically checks for Windows executable files starting with "MZ" and containing "PE" header.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_GadgetToJScript:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: af8a6b7ca1b7b1a666ff6353d08b5ac7
  Ruleset: securityonion-yara
  Summary: This rule detects the use of specific GUIDs associated with the GadgetToJScript toolkit, which is a C# tool utilized by red and black teams to execute payloads through JavaScript. The presence of specific GUIDs within executable files, identified in both uppercase and lowercase formats, is used as the primary detection method.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_Get_RBCD_Threaded:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c30c71e4024e2a50121ebe8c474cefcb
  Ruleset: securityonion-yara
  Summary: This rule detects a specific type of .NET red/black-team tool by identifying a particular typelib GUID within the software. The detection hinges on the presence of hexadecimal values characteristic of a Windows executable file and the specific GUID "e20dc2ed-6455-4101-9d78-fccac1cb7a18" in any case variation. This helps in identifying potentially harmful tools used for security testing and exploitation.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_Gopher:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c8bec95aacd616fbdbddee18b9012840
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of certain C# red team and black team tools by identifying specific type library GUIDs (Global Unique Identifiers). The GUIDs used to identify these tools are "b5152683-2514-49ce-9aca-1bc43df1e234" in both lowercase and uppercase hexadecimal formats. The rule targets files that begin with the "MZ" and "PE" headers, which are typical for executable files.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_Group3r:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6c7c9d400f4ea63e40cdb36c3c6a5ea9
  Ruleset: securityonion-yara
  Summary: This rule detects .NET red-team and black-team tools by identifying specific typelib GUIDs within executable files. The condition checks for the presence of certain GUIDs formatted in either lowercase or uppercase, alongside verifying that the file is a valid PE (Portable Executable) file format by matching its header signatures.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_Grouper2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 699565ff1aaf0a5ebeb2401777707af4
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of Grouper2, a tool used by red teams and black hat hackers for privilege escalation in Windows environments, by checking for specific Type Library GUID indicators within executable files.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_HTTPSBeaconShell:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0f33423962bb48e75f195e6f42d98f44
  Ruleset: securityonion-yara
  Summary: This rule detects C# red and black team tools by identifying a specific typelib GUID associated with the HTTPSBeaconShell tool. It looks for two variations of the GUID "aca853dc-9e74-4175-8170-e85372d5f2a9" in multiple string formats within files that have a valid Windows PE header structure.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_HWIDbypass:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 08ba88aee7be39476a33e118cdc0672b
  Ruleset: securityonion-yara
  Summary: This rule detects C# red/black-team tools by identifying specific typelib GUIDs (47e08791-d124-4746-bc50-24bd1ee719a6) within executables. It matches both uppercase and lowercase GUID representations and ensures the presence of a valid PE file signature, making it effective in catching tools used for hardware ID bypass.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_HastySeries:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a18d3e28acdbc9e692c30eea732187fc
  Ruleset: securityonion-yara
  Summary: This rule detects C# tools commonly used by red teams and black teams by identifying specific type library GUIDs associated with the HastySeries project. It scans files for the presence of various GUID strings in both lower and upper case, cross-referencing these with known signatures of malicious tools. The detection specifically triggers if the file starts with the standard MZ header and contains a PE header, ensuring it targets executable files.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_HideFromAMSI:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3f748bd67b74e60ede74430399ab45d5
  Ruleset: securityonion-yara
  Summary: This rule detects tools used by red and black teams that employ a specific typelib GUID for potentially malicious activities involving the evasion of Anti-Malware Scan Interface (AMSI) checks. The rule identifies these tools by searching for the presence of the unique typelib GUID "b91d2d44-794c-49b8-8a75-2fbec3fe3fe3" in both its lowercase and uppercase ASCII or wide representations, verifying that the target file is a valid Windows PE executable.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_HiveJack:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: bc6d02815587261ac98c687e2b61b928
  Ruleset: securityonion-yara
  Summary: This rule detects tools used by red or black teams for penetration testing and security assessments through a specific Type Library GUID associated with software written in C#. The condition checks for the presence of the GUID in a file that starts with the 'MZ' header, indicating a Windows executable, and contains the 'PE' header. The identifying GUID can appear in either uppercase or lowercase in ASCII or wide string formats.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_IIS_backdoor:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 757c3635047c47ebe08d2076fa6810a0
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of specific C# red-team or black-team tools by identifying typelib GUIDs associated with an IIS backdoor. It checks for particular GUIDs in both ASCII and wide string formats within executable files, indicating potential malicious activity related to IIS backdoor deployments.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_Inception:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f1ba2544a218f18d9a6ea332e21faa82
  Ruleset: securityonion-yara
  Summary: This rule detects C# red-team or black-team tools by identifying a specific typelib GUID known to be associated with such tools. Detection relies on the presence of a unique identifier in its ASCII or wide-string form, combined with file header checks to confirm the PE format.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_Inferno:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ead8fe00e982c2cda68e671142f7edcc
  Ruleset: securityonion-yara
  Summary: This rule detects C# red-team or black-team tools associated with a specific typelib GUID. It looks for the GUID string "26d498f7-37ae-476c-97b0-3761e3a919f0" in both lower and upper case within executable files that match the standard PE file signature. The detection targets tools referenced from LimerBoy's Inferno repository.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_Internal_Monologue:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d98536e06cb16b41b7fd869245feb0eb
  Ruleset: securityonion-yara
  Summary: This rule detects C# tools used by red and black teams by identifying specific type library GUIDs within executables. It targets software based on two known sets of GUIDs, which are indicative of tools from the "Internal-Monologue" project, a technique to capture NTLM hashes by exploiting NTLM challenge/response and targeting the security context of processes. The detection relies on specific GUID strings in both lowercase and uppercase formats and confirms the executable format with defined header values.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_IronKit:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: fd096c7db94d245261b73e658c5d9817
  Ruleset: securityonion-yara
  Summary: This rule detects C# tools utilized by red teams or black teams that are associated with the IronKit project by identifying specific typelib GUIDs within a file. It examines for the existence of certain GUIDs in both lowercase and uppercase formats embedded in the file, combined with checks for standard PE file headers to ascertain the presence of these identifiers.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_KeeThief:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6c03236c205acf6384b55e4fb9785489
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of specific C# tools associated with red and black team activities by identifying unique typelib identifiers. These identifiers are linked to a tool called KeeThief, available on GitHub under the GhostPack repository. The detection looks for several typelib GUIDs in both uppercase and lowercase formats within PE (Portable Executable) files, ensuring it matches a known pattern associated with potentially malicious activities.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_Keylogger:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b983c224c8191a58c934b0ed7f70aa75
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a C# keylogging tool associated with red and black team operations by identifying typelib GUIDs specific to the tool. Keyloggers are malicious programs that capture and log keystrokes made by the user, usually for unauthorized access to sensitive information. The detection is based on certain GUID values within the software.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_KeystrokeAPI:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: bd3f8d1bbb7f5ca3f8942c93b62e5614
  Ruleset: securityonion-yara
  Summary: This rule detects C# red team and black team tools by identifying specific Type Library GUIDs associated with KeystrokeAPI, a tool utilized for logging keystrokes. The rule identifies these GUIDs in both lowercase and uppercase ASCII and wide strings within PE files, ensuring that such tools are accurately detected based on these unique identifiers.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_KittyLitter:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 52c2ce6d977c3c36cbda94a5661158da
  Ruleset: securityonion-yara
  Summary: 'This rule detects .NET tools commonly used by red or black teams for penetration testing or malicious purposes by identifying specific typelib GUIDs (Globally Unique Identifiers). The rule searches for GUIDs in both lower-case and upper-case representations within executable files, verifying them based on the PE (Portable Executable) file format headers. The specific GUIDs targeted are: "449cf269-4798-4268-9a0d-9a17a08869ba," "e7a509a4-2d44-4e10-95bf-b86cb7767c2c," and "b2b8dd4f-eba6-42a1-a53d-9a00fe785d66."'
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_Koh:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: fafa2f2ed4399b2f5401489a5f7240b9
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of specific .NET red/black-team tools, particularly those identified by the typelibguid associated with them. These tools are used by security teams for penetration testing and by attackers for malicious activities. The detection hinges on matching specific GUID values in both lowercase and uppercase formats within the binary structure of executables.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_KrbRelay:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 036d78d0dc9419a48d7178b9dbd533e6
  Ruleset: securityonion-yara
  Summary: This rule detects .NET-based red or black-team tools that utilize the KrbRelay framework by identifying specific type library GUIDs within the binary.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_LOLBITS:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c3adb376c7bc252e19b0d5f0f25d85c6
  Ruleset: securityonion-yara
  Summary: This rule detects C# tools used by red/black teams by identifying the presence of specific Type Library GUIDs within executable files. It looks for the GUID "29d09aa4-ea0c-47c2-973c-1d768087d527" in both uppercase and lowercase forms within files that have the standard PE (Portable Executable) header.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_Ladon:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5b1cd34ddaec6cb7b7395c4780673d25
  Ruleset: securityonion-yara
  Summary: This rule detects C# red and black team tools by looking for specific typelibrary GUIDs, which are string identifiers, in the binary content. The targeted GUIDs include both lowercase and uppercase versions of "c335405f-5df2-4c7d-9b53-d65adfbed412," linked to the Ladon network toolset. The condition checks for the presence of these GUIDs in files that are identified as Portable Executable (PE) format, commonly used for executables, object code, and DLLs in Windows.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_LdapSignCheck:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 03fadec24bf6a3683302edf48b98827a
  Ruleset: securityonion-yara
  Summary: This rule detects .NET tools used by red and black teams through the presence of specific type library GUIDs, specifically "21f398a9-bc35-4bd2-b906-866f21409744" in both lowercase and uppercase formats. These identifiers help identify the use of such tools within executables by checking for the existence of the GUIDs alongside standard traits of a Portable Executable (PE) file.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_LethalHTA:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c97b4de89f6abeee4c1d15bbbc906acb
  Ruleset: securityonion-yara
  Summary: This rule detects C# red-team or black-team tools by identifying specific Type Library GUIDs. It looks for the presence of the GUIDs "784cde17-ff0f-4e43-911a-19119e89c43f" and "7e2de2c0-61dc-43ab-a0ec-c27ee2172ea6," including their uppercase variations, within the file format structures typical of executable files. These GUIDs are associated with tools mentioned in LethalHTA, a project aimed at facilitating various operations for red and black teams.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_LimeLogger:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: bda206c799de0b1bd88058e4d9395a31
  Ruleset: securityonion-yara
  Summary: This rule detects the use of LimeLogger, a C# tool typically employed by red and black teams for logging purposes. The detection is based on a specific Type Library GUID identifier that appears in string formats. The condition ensures that the file has a valid Portable Executable (PE) header, which is a common format for executables in Windows.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_LimeUSB_Csharp:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 886c706ca4407d075108fdd319030f4e
  Ruleset: securityonion-yara
  Summary: This rule detects C# tools associated with red and black team activities by identifying specific unique identifiers (GUIDs) related to the LimeUSB-Csharp project. The rule looks for the presence of the GUID "94ea43ab-7878-4048-a64e-2b21b3b4366d" in both lowercase and uppercase formats within executable files, ensuring these files match the structure of Windows PE files.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_Lime_Crypter:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0ab5267391aee8f1d0c9040d4d934468
  Ruleset: securityonion-yara
  Summary: This rule detects the Lime Crypter, a tool used by red and black teams, based on the presence of a specific typelib GUID within C# files. It triggers when a file starts with the standard PE file header signature and contains either the lowercase or uppercase version of the specified GUID.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_Lime_Downloader:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 893670a7c5aad20b8762b87dd53ec26c
  Ruleset: securityonion-yara
  Summary: This rule detects instances of C# red-team or black-team tools associated with the Lime Downloader malware by identifying specific typelib GUIDs within executable files.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_Lime_Miner:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 73dd67f18b63a0458654a4055ee6ca52
  Ruleset: securityonion-yara
  Summary: This rule detects software associated with the Lime Miner, a VB.NET tool referenced by its type library globally unique identifier (GUID). It identifies files by checking for specific GUID strings within them, targeting both lowercase and uppercase variations. Additionally, it verifies the presence of a common file header associated with executable files.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_Lime_RAT:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f8ea5373dd2980a61c58991a4d7b03aa
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of VB.NET tools, specifically LimeRAT, by identifying unique TypeLib GUIDs associated with these tools in the file header of executable files. LimeRAT is a remote access trojan that has been utilized by various cyber actors for malicious purposes. The rule looks for multiple GUIDs encoded in both ASCII and wide character formats in the file, as well as checking for a standard Portable Executable (PE) file header, to confirm the detection of potentially harmful VB.NET applications.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_LockLess:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c15b3715b2d5243119b975c64870b80b
  Ruleset: securityonion-yara
  Summary: This rule detects .NET red/black-team tools associated with the LockLess project by identifying specific typelib GUID strings within executables. The condition for detection involves checking for both lower and upper case variations of a specific GUID string while ensuring that the file header matches that of a typical PE (Portable Executable) format.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_MalSCCM:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8d6bd6aa98ec38612c912be9c41e56a6
  Ruleset: securityonion-yara
  Summary: This rule detects .NET red/black-team tools by identifying a specific type library GUID signature within executable files. These tools are typically used for offensive security testing or unauthorized access. The detection relies on the presence of the GUID in both lowercase and uppercase formats, signaling the potential use of .NET utilities within the file.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_ManagedInjection:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b9a0f9c693e0e497a7b836319ee4b813
  Ruleset: securityonion-yara
  Summary: This rule detects C# red/black-team tools by identifying specific typelibguids within executable files. The rule searches for several GUIDs, which are character strings representing globally unique identifiers, in both lowercase and uppercase formats. These identifiers are linked to custom tooling used in penetration testing or malicious activities. The condition ensures the file format is a Windows executable before checking for the presence of the specified GUIDs.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_Manager:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 35ce69d4d93fbaa3fbbf38a5b696be02
  Ruleset: securityonion-yara
  Summary: This rule detects .NET-based red or black team tools by identifying specific typelib GUIDs associated with them. It searches for these GUIDs in both lowercase and uppercase formats within files that have a valid PE header.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_Marauder:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9085a44ac021a106edcdf2ca5ce342e4
  Ruleset: securityonion-yara
  Summary: This rule detects the use of specific C# red-team and black-team tools by identifying a unique type library GUID associated with them. The tools are linked to the Marauder project and the rule targets executable files starting with the "MZ" signature and containing the specified GUID in either uppercase or lowercase.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_Mass_RAT:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d32f3061083c520107ebc666d16ed441
  Ruleset: securityonion-yara
  Summary: This rule detects the use of C# red-team and black-team tools associated with the Mass Remote Administration Tool (MassRAT) by identifying specific Typelib GUIDs. Typelib GUIDs are unique identifiers for type libraries and are used to recognize certain classes and interfaces in Windows applications. The rule checks for the presence of these GUIDs in both lowercase and uppercase formats within the binary structure of Windows executables, ensuring that the file matches typical characteristics of a portable executable (PE) format.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_MemeVM:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: dd71a3e1a25914db5e1f80c347066ebc
  Ruleset: securityonion-yara
  Summary: This rule detects .NET tools used by red and black teams by identifying specific type library globally unique identifier (GUID) strings. These GUIDs include "ef18f7f2-1f03-481c-98f9-4a18a2f12c11," "77b2c83b-ca34-4738-9384-c52f0121647c," and "14d5d12e-9a32-4516-904e-df3393626317," in both lowercase and uppercase ASCII or wide character formats. The condition for detection is based on the presence of these GUIDs within files that have specific characteristics of executable files, indicated by the "MZ" and "PE" headers.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_MemoryMapper:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 83ad1d8e8b7b69d191205eab361d115e
  Ruleset: securityonion-yara
  Summary: This rule detects the usage of a C# tool called MemoryMapper, typically employed by red and black teams, by identifying specific TypeLib GUID strings in the binary files. The detection focuses on particular GUID patterns, characteristic of this software, and ensures that the file is a valid PE (Portable Executable) by checking for standard PE file headers before matching any of the specified GUID strings.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_MinerDropper:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b87e033c05298c92886cb23a77877ee9
  Ruleset: securityonion-yara
  Summary: This rule detects the use of C# red team or black team tools by identifying specific typelib GUIDs within executable files. It searches for the GUIDs "46a7af83-1da7-40b2-9d86-6fd6223f6791" and "8433a693-f39d-451b-955b-31c3e7fa6825" in both lowercase and uppercase ASCII as well as wide string formats. The rule validates that the file starts with the MZ header and contains a valid PE header before checking for these GUIDs.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_Minidump:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2fd71f656c33b39828dd04cd18a2ed6a
  Ruleset: securityonion-yara
  Summary: This rule detects C# red and black-team tools by identifying a specific typelib GUID present in the binary. It particularly targets the typelib GUID "15c241aa-e73c-4b38-9489-9a344ac268a3" which can appear in both lower and upper case. The condition for detection requires the file to have characteristics of a PE (Portable Executable) file, verified by checking the 'MZ' and 'PE' headers, in conjunction with the presence of the targeted GUID strings.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_MiscTools:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 41d634783e55d0be975f8bb67dbd6286
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of various C# red/black-team tools by checking for specific typelib GUIDs indicative of the MiscTools suite developed by RastaMouse. It identifies these tools by looking for predefined GUID strings in both lowercase and uppercase ASCII and wide formats within executable files that have the common DOS and PE header signatures.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_Misc_CSharp:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 62a9a8fe5c01dd5c38a5a44bc58b8c82
  Ruleset: securityonion-yara
  Summary: This rule detects C# tools used by red and black teams by identifying typelib GUIDs "d1421ba3-c60b-42a0-98f9-92ba4e653f3d" and "2afac0dd-f46f-4f95-8a93-dc17b4f9a3a1" in executable files. It specifically looks for these GUIDs in both lowercase and uppercase ASCII representations within files that start with the magic number "0x5A4D" and contain a PE header indicated by "0x00004550" at an offset defined by the file's PE header.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_MultiOS_ReverseShell:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f4db546840e841570f8d2d95d0a532dc
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of MultiOS Reverse Shell, a C# tool used by red and black teams, by identifying specific typelib GUIDs. The detection is based on finding either of two GUID string representations within an executable file format, indicated by specific header values.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_Mythic:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 360b75f22b67615b5169b5027bd793e6
  Ruleset: securityonion-yara
  Summary: This rule detects specific C# red/black-team tools by identifying unique type library GUIDs associated with them. It looks for these GUIDs in both lowercase and uppercase formats within files that match the PE (Portable Executable) file signature.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_Naga:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2fff15ff1e1a4c5390cd846bc214bce5
  Ruleset: securityonion-yara
  Summary: This rule detects C# red-team and black-team tools specifically via Type Library GUIDs (Global Unique Identifiers). The rule identifies these tools by looking for certain GUID strings present in the binary files, recognizing both lower and upper case versions of the GUIDs. The condition checks if the file is a valid portable executable (PE) before inspecting for the specified GUIDs, confirming the file type before proceeding with the detection. These tools are often used in cybersecurity contexts for penetration testing and adversarial simulation.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_NashaVM:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ffa441d32b1d41fda718ad68a2cf941d
  Ruleset: securityonion-yara
  Summary: This rule detects red-team or black-team tools developed in .NET by identifying a specific TypeLib GUID associated with NashaVM. The rule targets two specific GUID string patterns, one in lowercase and one in uppercase, within executables that begin with the "MZ" header and have a PE header.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_Net_GPPPassword:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5ed71a74012de42f316307d33a668f0e
  Ruleset: securityonion-yara
  Summary: This rule detects C# red team and black team tools based on a specific type library GUID ("00fcf72c-d148-4dd0-9ca4-0181c4bd55c3" or its uppercase variant). These tools, such as those found in the "Net-GPPPassword" repository on GitHub, are used to exploit Group Policy Preferences (GPP) passwords. The detection is carried out by checking for the presence of typical Portable Executable file headers and matching the provided GUID strings.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_NoAmci:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c361ba320a02fe77d6fb49a3eae64d30
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of specific C# tools used by red-team or black-team operations by identifying a unique typelib GUID (352e80ec-72a5-4aa6-aabe-4f9a20393e8e or its uppercase variant) within files. It also ensures the file format begins with the standard DOS MZ header and contains a PE header at a specified offset, indicating it is a Windows executable file.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_NoMSBuild:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1779a370e0e66629341444b9995153da
  Ruleset: securityonion-yara
  Summary: This rule detects C# tools utilized by red and black teams through the presence of specific typelib GUIDs, which are unique identifiers associated with the software. These tools are linked to the NoMSBuild framework, which is a method for executing C# code without using the MSBuild.exe utility, commonly bypassing certain security mechanisms. The detection is based on identifying specific GUID strings in both lowercase and uppercase formats within files that have the characteristics of a Windows executable.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_Nuages:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e57fe7aafa16d9ed082175f688749a51
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of C# tools used by red and black team operations through the identification of a specific type library GUID associated with the Nuages project. It specifically looks for the GUID "e9e80ac7-4c13-45bd-9bde-ca89aadf1294" in both lowercase and uppercase ascii wide strings within files that have the characteristic PE file header.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_OSSFileTool:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 21499de125f8120708fe7bfa585108f3
  Ruleset: securityonion-yara
  Summary: This rule detects C# red or black team tools associated with the OSSFileTool software by identifying specific type library GUIDs within executable files. It checks for certain GUID strings in both lowercase and uppercase formats, ensuring the presence of a PE (Portable Executable) header to confirm the file type.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_Obfuscator:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b082595b2be0b13c658f1d27bef01764
  Ruleset: securityonion-yara
  Summary: This rule detects C# tools used by red and black teams that utilize a specific typelib GUID for obfuscation purposes. It checks for the presence of the GUID "8fe5b811-a2cb-417f-af93-6a3cf6650af1" (or its uppercase equivalent) within the files. The condition also verifies that the file's header corresponds to the expected format of a PE file.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_OffensiveCSharp:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: bf5665a87351d5622bc7a88aba24f619
  Ruleset: securityonion-yara
  Summary: This rule detects C# tools used by red and black teams through their unique type library GUIDs. It looks for specific GUID strings, considering both upper and lower case variations, within files that start with the 'MZ' header and have a PE signature at the appropriate offset. These identifiers help pinpoint advanced offensive security tools associated with the OffensiveCSharp project.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_OffensivePowerShellTasking:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f15ebbf0b8420e8c340cf7f75f064fab
  Ruleset: securityonion-yara
  Summary: This rule detects specific red-team and black-team tools developed in C# by identifying unique typelib GUID strings within executable files. These tools, often used for offensive PowerShell tasking, can be recognized by matching specific GUIDs in either lowercase or uppercase format. The rule checks for the presence of these GUIDs in files that start with the MZ header and have a PE signature at a specific offset, indicating a Windows executable.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_Offensive__NET:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: dc7e2f342efd5080bcb2fdceb1b9e6cc
  Ruleset: securityonion-yara
  Summary: This rule detects C# red-team and black-team tools by identifying specific Type Library GUIDs ("11fe5fae-b7c1-484a-b162-d5578a802c9c" in both lowercase and uppercase formats) in executable files. The condition ensures the target file is a Windows executable by checking for the 'MZ' and 'PE' headers before searching for the GUID strings.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_PSByPassCLM:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 048a060037b5c33107d0e080f2e89439
  Ruleset: securityonion-yara
  Summary: This rule detects C# red team and black team tools by identifying a specific type library GUID embedded in the software's code. The detection works by searching for two variations of the GUID "46034038-0113-4d75-81fd-eb3b483f2662" within the binaries, considering both lowercase and uppercase representations. Additionally, the rule verifies that the file starts with the standard "MZ" header followed by the "PE" header at the location specified in the file's DOS header.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_Pen_Test_Tools:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5fcb0cac03c17ffd9f11617971abb96e
  Ruleset: securityonion-yara
  Summary: This rule detects the use of specific C# penetration testing tools by identifying unique Type Library GUIDs embedded within the executable files. It looks for a series of specific GUID strings in both lowercase and uppercase formats and confirms that the file in question is a Windows executable, indicated by the presence of the "MZ" header and "PE" signature. These GUIDs are associated with various tools found in the Pen-Test-Tools repository, enabling the detection of their presence on a system.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_PlasmaRAT:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 94646378d732ac1af7efddd40e8dd07d
  Ruleset: securityonion-yara
  Summary: This rule detects VB.NET tools used by red and black teams, specifically via their typelib GUIDs, which are globally unique identifiers. It identifies the unique typelib GUIDs associated with the PlasmaRAT, a remote access tool that facilitates remote control and monitoring of infected systems. The rule targets two specific GUIDs in both their lowercase and uppercase ASCII and wide-formatted representations, ensuring it matches files that start with the standard DOS header signature (0x5A4D) and PE header signature (0x00004550).
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_PoC:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 887ee39bf1763238eb96193546f52041
  Ruleset: securityonion-yara
  Summary: This rule detects C# tools commonly used by red and black teams by identifying specific typelib GUID strings in file headers. The presence of these GUIDs suggests the use of these tools for penetration testing or malware simulation activities.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_PortTran:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 11f402bf1d996df32bd553c3da0e54e0
  Ruleset: securityonion-yara
  Summary: This rule detects the utilization of specific C# red-team and black-team tools associated with the PortTran project by identifying typelib GUID strings in their code. The strings "3a074374-77e8-4312-8746-37f3cb00e82c" and "67a73bac-f59d-4227-9220-e20a2ef42782" or their uppercase equivalents are signatures of these tools. The rule applies to files with MZ and PE headers, ensuring that only executable files are analyzed.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_PoshC2_Misc:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5d20bf50a421844318901f1e608a54a6
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of C# tools commonly utilized by red and black teams through the identification of specific type library GUIDs (Globally Unique Identifiers). The GUIDs indicated are associated with these tools and the detection is achieved by scanning for these unique identifiers within executable files marked by specific headers.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_PoshSecFramework:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8852d59be5de8e0da8e33330cc405206
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of c# red/black-team tools associated with the PoshSec Framework by identifying specific typelib GUIDs within a file. The targeted GUIDs are checked in both lowercase and uppercase ASCII and wide string formats. The rule also verifies that the file in question is a PE file by checking its signature.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_Povlsomware:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 24ff804670a1f011d4f3f589c9f98ce0
  Ruleset: securityonion-yara
  Summary: This rule detects the use of certain C# tools often utilized by red and black teams for penetration testing or malicious activities. It specifically identifies the presence of tools related to Povlsomware by looking for a unique GUID within the binary's type library. The detection focuses on patterns that indicate the presence of Povlsomware-associated tools, leveraging both lowercase and uppercase representations of the GUID to ensure comprehensive coverage.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_PowerOPS:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 256dfa86698cd14c4918b5967f9d58de
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of PowerOPS, a set of C# tools used by red and black teams for penetration testing and security assessments, by identifying specific typelib GUIDs within executable files.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_PowerShdll:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7d2ee13bd5da420a2d823ad1cd28af36
  Ruleset: securityonion-yara
  Summary: This rule detects C# red-team and black-team tools by identifying the presence of specific typelibrary GUIDs associated with PowerShdll. PowerShdll is a tool that allows executing shellcode via PowerShell. The rule checks for specific GUIDs in both lowercase and uppercase forms and ensures that the target file is a Windows executable by looking for the 'MZ' and PE headers.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_Privilege_Escalation:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: cf81ff9c7582fffb08478235048833fe
  Ruleset: securityonion-yara
  Summary: This rule detects tools written in C# used by both red and black teams for privilege escalation by identifying specific typelib GUIDs in an executable file. It searches for the presence of two versions of a GUID string, either in lowercase or uppercase formats, within the file, and confirms the file is a Portable Executable (PE) by validating its header.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_Quasar:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0331e393b859be844b91d3413a265207
  Ruleset: securityonion-yara
  Summary: "This rule detects tools created using C# commonly used by red and black teams through their unique type library GUIDs. Quasar, an open-source remote administration tool (RAT), is specifically highlighted in this detection. The rule checks for certain type library GUIDs, irrespective of case, within executable files that have the standard PE file headers, identifying them as part of Quasar\u2019s toolkit."
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_RAT_TelegramSpyBot:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0a3ebfbc58c26c4ef6daf6accfc5e670
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the TelegramSpyBot malware, specifically created using C# for red-team or black-team operations. The detection leverages a unique Type Library GUID "8653fa88-9655-440e-b534-26c3c760a0d3" in various formats embedded within the executable files. The condition checks for the standard Windows executable file headers to ensure the target file is a valid PE file before searching for the GUID, thereby identifying malicious activities associated with TelegramSpyBot.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_Random_CSharpTools:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 523733bc3ed8292f9f7bb2f24e443608
  Ruleset: securityonion-yara
  Summary: This rule detects C# tools used by red and black teams by identifying specific Type Library GUIDs (Globally Unique Identifiers) within executable files. These GUIDs are checked in both lowercase and uppercase formats to ensure comprehensive detection. The rule specifically targets the presence of certain hexadecimal values at the beginning of files to confirm they are executable files, followed by a search for any of the specified GUIDs within the file. These tools typically aid in penetration testing and security assessments.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_RedSharp:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: be602d47e75fcaf7e6c3057466ef6653
  Ruleset: securityonion-yara
  Summary: This rule detects C# red/black-team tools by identifying a specific type library GUID ("30b2e0cf-34dd-4614-a5ca-6578fb684aea") in various character cases. It applies to executable files, indicated by the standard PE file headers (MZ and PE).
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_RegistryStrikesBack:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d9586f02780bd956e09106694907d979
  Ruleset: securityonion-yara
  Summary: This rule detects .NET red and black-team tools by identifying specific type library GUIDs, either in lowercase or uppercase format, which are commonly used in offensive security tools to interact with the system's registry.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_RestrictedAdmin:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9c168f6e15daa8d507d53af03a12ed13
  Ruleset: securityonion-yara
  Summary: This rule detects .NET red/black-team tools by identifying the presence of specific typelibguids ("79f11fc0-abff-4e1f-b07c-5d65653d8952" in both lowercase and uppercase forms) within files. This helps in identifying tools associated with the RestrictedAdmin project. The rule specifically targets files that are recognized by certain PE (Portable Executable) header signatures.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_ReverseShell:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 662a8b78d883d69d81108f046b948015
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of C# red/black-team tools by identifying specific typelib GUIDs associated with reverse shell software. The condition checks for particular GUID strings in both lowercase and uppercase formats within executable files, which start with the 'MZ' header and have the PE signature. The GUIDs provided are unique identifiers likely tied to the reverse shell utilities referenced from a public GitHub repository.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_RexCrypter:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b8e7d82f30dd73d0b1334467e38bc3fa
  Ruleset: securityonion-yara
  Summary: This rule detects C# red and black-team tools by identifying a specific type library GUID, "10cd7c1c-e56d-4b1b-80dc-e4c496c5fec5", which is associated with the RexCrypter tool. The rule checks for this GUID in both lowercase and uppercase formats within the executable files, providing visibility into the usage of these tools.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_Rubeus:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c5a194344d529b57f9ea3656ec6d83ba
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the Rubeus tool by identifying a specific Type Library GUID. Rubeus, a tool found on GitHub and used in red and black team operations, is identified through its unique Type Library GUID in both lowercase and uppercase formats within executable files. The rule ensures the file is a valid executable by checking its header before searching for the GUID.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_RunAsUser:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 89139b5eb618ecfd2f8a48e9ed3d0348
  Ruleset: securityonion-yara
  Summary: This rule detects potential usage of C# red-team or black-team tools identified by a specific type library GUID. It examines executables, checking for the presence of the GUID "9dff282c-93b9-4063-bf8a-b6798371d35a" in both lowercase and uppercase forms. This identification methodology helps in spotting tools that conduct operations as another user by leveraging the library's globally unique identifier.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_RunShellcode:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 034278f5850f970bcb0930c2c7f9a117
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of C# tools, commonly used by red and black teams, through the identification of a specific typelib GUID ("a3ec18a3-674c-4131-a7f5-acbed034b819"). It checks for the presence of this GUID in both lowercase and uppercase forms within a file that has a particular header signature indicating it is a Portable Executable (PE) file. This rule helps in identifying files related to the RunShellcode project hosted on GitHub.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_RuralBishop:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 94cb2d9df224870c2d74d21e14bc4511
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of C# red and black team tools, specifically those associated with the RuralBishop project, by identifying a particular typelib GUID found in the executable files. The rule examines executable files by checking for the "MZ" and "PE\0\0" headers and then searches for either the lowercase or uppercase version of the GUID "fe4414d9-1d7e-4eeb-b781-d278fe7a5619".
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_SHAPESHIFTER:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e3bb4043fd8997bd9a7ba9095047e550
  Ruleset: securityonion-yara
  Summary: This rule detects C# red-team and black-team tools associated with the SHAPESHIFTER project by identifying specific typelib GUIDs in executable files. It checks for the presence of a unique typelib GUID in both lowercase and uppercase formats within the file structure, specifically targeting files that begin with the common Windows executable header signature. SHAPESHIFTER is a project available on GitHub aimed at aiding in the creation and use of tools for penetration testing and offensive security operations.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_SQLRecon:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 36dd2a2b5f0e86fbc5af6329be1d5e59
  Ruleset: securityonion-yara
  Summary: This rule detects .NET red and black-team tools specifically by identifying the unique type library GUID associated with the tools. It searches for occurrences of the GUID "612c7c82-d501-417a-b8db-73204fdfda06" (both in lowercase and uppercase forms) in files that have a valid PE header. This GUID is linked to the SQLRecon tool, used for reconnaissance operations involving SQL databases.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_SafetyKatz:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a8085cb3b16eab175886eebe53640f0d
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of SafetyKatz, a tool associated with GhostPack, which is commonly used by red and black teams for security assessments. The detection relies on specific GUIDs within the typelib, which are referenced in both lowercase and uppercase formats, accompanied by particular header values (0x5A4D and 0x00004550) that identify the associated executable files.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_Salsa_tools:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c0a0ab0b13c782e9cbf73101613e4fbc
  Ruleset: securityonion-yara
  Summary: This rule detects C# tools used by red and black teams, specifically targeting those found in the Salsa-tools repository. It identifies these tools by monitoring for specific typelib GUIDs associated with them, recognizing both uppercase and lowercase formats. The detection process involves checking for PE file headers and the presence of these GUIDs in the file. This helps identify potentially malicious or unauthorized tools that may be used in penetration testing or security assessments.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_SauronEye:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 62da93c77d8dda648fb410f0d45af24d
  Ruleset: securityonion-yara
  Summary: This rule detects the SauronEye tool by identifying specific typelibguids found in its C# implementation. SauronEye is a software used for both red and black team operations. The detection focuses on the presence of particular GUIDs that are encoded as both lower- and upper-case ASCII or wide-character strings within executable files. The rule also ensures that the analyzed file is a PE file by verifying the presence of standard Portable Executable (PE) headers.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_ShadowSpray:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4d90f3445b0796ef4f26af7a8431aaa0
  Ruleset: securityonion-yara
  Summary: This rule detects .NET-based red and black team tools by identifying specific type library GUIDs associated with ShadowSpray, a tool used for red team operations. It looks for the GUID string "7e47d586-ddc6-4382-848c-5cf0798084e1" in both lowercase and uppercase forms within executable files, indicated by the presence of the "MZ" and "PE" headers.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_SharPermission:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 61733d444fef7bcdfe4de7802f6c4010
  Ruleset: securityonion-yara
  Summary: This rule detects specific .NET tools used by red teams and black teams by identifying the presence of a particular typelib GUID associated with "SharPermission." The rule searches for two specific GUID string variations in both ASCII and wide formats within executable files, filtering them using common characteristics of PE files, indicated by specific headers.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_SharPersist:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 42bfe037cae0fd6986ec64a553846a42
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of specific C# red and black-team tools by identifying a unique type library GUID associated with them. The GUID is found in both lower and upper case ASCII and wide character formats. The rule checks the structure of the file to ensure it matches the standard PE file format used by executable files, indicating the potential use of these tools.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_SharpAdidnsdump:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 51fcbe3406dc3f45973dfaa5ec4a6441
  Ruleset: securityonion-yara
  Summary: This rule detects the SharpAdidnsdump tool, a C# utility used by red and black teams for Active Directory Integrated DNS data extraction. It identifies the tool through specific TypeLib GUID strings embedded in the executable file, ensuring the executable meets standard PE file format signatures.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_SharpAllowedToAct:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b4bebe48760baa83ffd8ec24e2cd9326
  Ruleset: securityonion-yara
  Summary: This rule detects .NET-based red team or black team tools through the presence of a specific typelib GUID in either uppercase or lowercase form. These tools may be used for offensive security activities, internal security assessments, or malicious purposes by exploiting the .NET framework. The detection is based on recognizing the specified GUID within executable files that start with the typical PE file signature.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_SharpAttack:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 608689e949ca338f359cf6942679d397
  Ruleset: securityonion-yara
  Summary: This rule detects specific C# red/black-team tools associated with SharpAttack by identifying unique identifiers (typelibguids) used within the software. It checks for both lowercase and uppercase representations of the typelibguid within an executable file format (PE file) by examining the PE header and confirming the presence of these unique identifiers.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_SharpBlock:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 064e88dff571af8a91a6025b0615dcbe
  Ruleset: securityonion-yara
  Summary: This rule detects C# red team and black team tools specifically by identifying a typelib GUID. The rule searches for the presence of "3cf25e04-27e4-4d19-945e-dadc37c81152" in both lowercase and uppercase ASCII or wide string formats within executable files that begin with the 'MZ' header and include the PE header signature. The intent is to pinpoint potentially malicious tools that are used by threat actors for penetration testing and evasion techniques, as detailed by the GitHub repository "SharpBlock."
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_SharpBox:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b09c71a0d8ecafd4fcf8ce7db39a7041
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of certain C# tools used by red and black teams through the identification of a specific type library GUID. It looks for the GUID "616c1afb-2944-42ed-9951-bf435cadb600" in both lowercase and uppercase forms within executable files, validating the file format by checking for specific headers.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_SharpByeBear:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f1f04b3bf480ac217a42a752e1aee572
  Ruleset: securityonion-yara
  Summary: This rule detects .NET red-team or black-team tools, specifically focusing on those associated with the SharpByeBear project, by identifying specific typelib GUIDs within the files. The rule examines the presence of these GUIDs in both lowercase and uppercase formats. Additionally, it verifies that the files are Windows PE executables by checking for the "MZ" header and the "PE" signature at the correct offset.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_SharpBypassUAC:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 03880533488ba8387b6d454ab61121f9
  Ruleset: securityonion-yara
  Summary: This rule detects a specific type of C# tool used predominantly by red and black teams called SharpBypassUAC, which is characterized by a unique typelib GUID. This tool is typically utilized for bypassing User Account Control (UAC) in Windows environments to escalate privileges. The detection is based on identifying particular GUID strings within files that also match the header signature of a Portable Executable (PE) file.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_SharpC2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 98a3d274a302781611aa38d31e802cd1
  Ruleset: securityonion-yara
  Summary: This rule detects specific GUIDs associated with SharpC2, a toolset used by both red and black teams for command and control operations written in C#. The rule identifies these GUIDs to help in recognizing the typical artifacts left by SharpC2 within files.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_SharpCOM:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 62c7dbd3ca61d8dc40632d63a8d3eb6f
  Ruleset: securityonion-yara
  Summary: This rule detects C# red-team or black-team tools by identifying the typelib GUID specific to SharpCOM. It searches for GUIDs in both lowercase and uppercase formats within files that have a PE header, indicating they are executable files.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_SharpCall:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0181f4a713a41c3d6655f3b7bd2de6c6
  Ruleset: securityonion-yara
  Summary: This rule detects C# tools used by red and black teams via a specific Type Library GUID associated with the SharpCall repository on GitHub. It searches for occurrences of the GUID "c1b0a923-0f17-4bc8-ba0f-c87aff43e799" in both lowercase and uppercase ASCII and wide character encodings. The detection further ensures the file analyzed is a Windows executable by checking the presence of the "MZ" and "PE" headers.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_SharpChisel:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e3fac66be6fa30878f7d48eb1231d19e
  Ruleset: securityonion-yara
  Summary: This rule detects a .NET-based tool known as SharpChisel, which is used by penetration testers and malicious actors for network tunneling purposes. The detection relies on identifying specific typelib GUIDs within the binary files, confirming whether the file is a PE (Portable Executable) format.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_SharpChromium:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0018c487fbc363c292296d35f267dc40
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of SharpChromium, a .NET-based tool commonly used in red and black team operations to interact with Chromium browsers. It searches for specific GUID strings associated with the typelib that SharpChromium utilizes and checks for the standard PE (Portable Executable) file signature to determine if the file is a Windows executable, thus identifying potential use of the tool.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_SharpClipHistory:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c22afb540a163cfe213b4c56132b73ec
  Ruleset: securityonion-yara
  Summary: This rule detects the use of certain C# tools that may be utilized by red-team or black-team activities, specifically by identifying a unique TypeLib GUID that is associated with the SharpClipHistory project. This detection mechanism recognizes both lowercase and uppercase representations of this GUID within executable files by evaluating specific conditions that match the structure of PE files.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_SharpClipboard:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3db96eda019c871813f9875ca5db8039
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of SharpClipboard, a tool used in red team and black hat penetration testing, by identifying specific type library GUIDs ("97484211-4726-4129-86aa-ae01d17690be" and "97484211-4726-4129-86AA-AE01D17690BE") within executable files.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_SharpCloud:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 39ac12ea36c7b2a3d7c156256fdc2aea
  Ruleset: securityonion-yara
  Summary: This rule detects .NET tools used by red or black teams based on specific typelibrary GUIDs associated with "SharpCloud". "SharpCloud" is a valuable resource for various penetration testing and red-team operations, often utilized to simulate adversarial tactics in a controlled environment. The detection is triggered by identifying the presence of particular GUIDs within executable files, confirming their link to these specialized cybersecurity tools.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_SharpCompile:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e0e15d2491106f86a02eab2facb7d1b2
  Ruleset: securityonion-yara
  Summary: This rule detects C# red team and black team tools by identifying a specific typelib GUID associated with these tools. It checks for the presence of either the lowercase or uppercase version of the GUID within executable files, which are identified by certain file headers. This helps in identifying the use of tools from the SharpCompile repository.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_SharpCookieMonster:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 760f2ddca8847582cb1e48de92375505
  Ruleset: securityonion-yara
  Summary: This rule detects a C# tool known as SharpCookieMonster, which is used by red or black teams for penetration testing and security assessments. It specifically identifies the tool through unique typelib GUIDs present in the binary files matching certain patterns.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_SharpCradle:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: de7aa6a2e3ce6f6446d81f42cf7cc4a9
  Ruleset: securityonion-yara
  Summary: This rule detects C# tools used by red and black teams, particularly those associated with the SharpCradle project, by identifying specific Type Library GUIDs. These GUIDs are detected in various ASCII or wide formats within Windows executable files based on specific header signatures.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_SharpCrashEventLog:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2090558bbf4ba348b4ab66fd88cc112a
  Ruleset: securityonion-yara
  Summary: This rule detects .NET red/black-team tools by identifying specific typelib GUIDs associated with the SharpCrashEventLog tool. The detection mechanism looks for typelib identifiers in both lowercase and uppercase formats within executable files.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_SharpDPAPI:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5f3b818748e037d592be6648c7f45f03
  Ruleset: securityonion-yara
  Summary: This rule detects instances of C# red/black-team tools, specifically targeting those using the GhostPack SharpDPAPI project. It identifies these tools by searching for specific typelib GUIDs in executable files.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_SharpDir:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8fc3e3a5d27c4ef3153753c67e4f63a0
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of .NET red/black-team tools known as SharpDir through a specific type library GUID associated with this software. SharpDir is a tool used typically for penetration testing or malicious activities to navigate directories. It identifies the unique GUID in both lower case and upper case ASCII or wide character formats, confirming the presence of the tool by checking specific PE header conditions in executable files.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_SharpDomainSpray:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 02e93ed203f5cbf7677dd6c5149737c6
  Ruleset: securityonion-yara
  Summary: This rule detects the use of SharpDomainSpray, a tool commonly associated with both red team and black hat cybersecurity operations. The detection specifically targets certain typelib GUIDs utilized by the tool, leveraging string matching to identify these unique identifiers within executable files. This rule is designed to identify instances where the SharpDomainSpray tool is present, based on specified GUID patterns and typical PE file structure headers, indicating its potential use in network spraying attacks.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_SharpDump:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e1cdd72d5c4893ce4fa9ba41b1160675
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the SharpDump tool, a C# utility used by red and black teams to capture memory dumps. It identifies specific Type Library GUIDs, either in lowercase ("79c9bba3-a0ea-431c-866c-77004802d8a0") or uppercase ("79C9BBA3-A0EA-431C-866C-77004802D8A0"), and confirms the presence of a valid PE (Portable Executable) file header.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_SharpEDRChecker:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4bc3fa05ac5b1fd1a2a91611cd0468d2
  Ruleset: securityonion-yara
  Summary: This rule detects the SharpEDRChecker tool, which is used by red and black teams, by identifying a specific GUID in the tool's typelibrary.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_SharpExcel4_DCOM:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 327423d7d9046b3f74a2a10fbfd70867
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of C# tools used in red and black team operations by identifying a specific type library GUID associated with SharpExcel4-DCOM. The detection is based on the presence of the GUID "68b83ce5-bbd9-4ee3-b1cc-5e9223fab52b" (in both lowercase and uppercase formats) within executable files.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_SharpExec:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ecebac35952a92668743f9e0802d70a2
  Ruleset: securityonion-yara
  Summary: This rule detects C# tools used by red and black teams, specifically SharpExec, by identifying specific typelibguids ("7fbad126-e21c-4c4e-a9f0-613fcf585a71" or "7FBAD126-E21C-4C4E-A9F0-613FCF585A71") within executables.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_SharpFruit:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 98f6e6d0f21b640f8e538583a8959f70
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of C# tools used by red and black teams, specifically identifying the SharpFruit tool by looking for unique type library GUIDs associated with it. The rule checks executable files by confirming the MZ and PE headers and searches for specific GUID strings in different character formats.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_SharpGPOAbuse:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c5d22f4468f01b41b474d041cc41500f
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of C# tools used by red teams and black teams through a specific type library GUID associated with SharpGPOAbuse. It identifies executable files that start with the portable executable (PE) header and contain the specified GUID in either lowercase or uppercase forms. SharpGPOAbuse is a tool used to exploit Group Policy Objects (GPOs) in Windows environments, typically for security assessments or malicious activities.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_SharpGPO_RemoteAccessPolicies:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d92a5f554d30a4c09928f0aa355ee05f
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the SharpGPO-RemoteAccessPolicies tool, which is a C# utility used by red teams and black teams for handling Group Policy Objects (GPOs) related to remote access policies. It specifically identifies the tool by checking for a unique Type Library GUID within executable files, ensuring that the file has a PE header signature.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_SharpHandler:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: fa6be5f5ca37c4998dfc91ac480d22e1
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of .NET-based red or black team tools by identifying specific type library GUIDs associated with these tools. It checks for the GUIDs "46e39aed-0cff-47c6-8a63-6826f147d7bd" and "11dc83c6-8186-4887-b228-9dc4fd281a23" in both uppercase and lowercase formats within executable files. The identification relies on the structure of the PE file, confirming it is a valid executable before looking for these GUIDs. The rule is based on information related to the SharpHandler tool commonly used in penetration testing and offensive security operations.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_SharpHide:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 35284cc30dd722ae23c311d668cba3bf
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the .NET tool SharpHide, employed in red and black team operations, by identifying specific type library GUIDs. It verifies these GUIDs within executable files by employing known identifiers that match the tool's unique library GUID strings.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_SharpHound3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 61d8f9bcaa3f4e186fa00887a57dcc75
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of SharpHound3, a tool used by red and black teams for assessing and mapping Active Directory environments, by identifying specific COM type library GUIDs associated with it. The detection focuses on the unique identifier "a517a8de-5834-411d-abda-2d0e1766539c" present in its binary, checking for both lowercase and uppercase versions within the file structure.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_SharpImpersonation:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 069028223b8d8472dede066a839058e7
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of .NET tools used by red and black teams for security testing through the identification of specific typelib GUIDs. It targets SharpImpersonation, a tool found on GitHub, by looking for specific character sequences that signify the tool's typelib GUIDs within executable files.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_SharpKatz:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a9aef9dad2a3c6fc97ebb7ea8e2a6338
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of SharpKatz, a C# tool used for credential dumping by both red and black teams, by searching for specific typelib GUIDs within executable files. The rule checks for the unique identifier "8568b4c1-2940-4f6c-bf4e-4383ef268be9" (in both lower and upper case) within the targeted file format, specifically looking for the PE header signature.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_SharpLdapRelayScan:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 38bd5cf6a97fe8da7a3e387eeeb1fdfe
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the .NET-based tool SharpLdapRelayScan, which is commonly used by red and black teams for security assessment purposes. It identifies the tool by searching for specific typelib GUID strings within executables, checking both lowercase and uppercase variations. The rule applies to files that conform to the PE (Portable Executable) format by verifying common PE header values.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_SharpLocker:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9851e02e28933ab91fdec5b9524d4979
  Ruleset: securityonion-yara
  Summary: This rule detects the C# tool SharpLocker, which is typically used by red teams and black teams for various activities, by matching specific typelib GUID strings. It looks for the presence of either a lower-case or upper-case version of the GUID "a6f8500f-68bc-4efc-962a-6c6e68d893af" in an executable file identified by the PE header signature.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_SharpLogger:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 001f602a0ddd3701d086963c757dfeea
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the SharpLogger tool, a C# utility used by red and black teams for logging activities. It identifies the tool by its unique typelib GUID, ensuring detection regardless of whether the GUID is in lowercase or uppercase format. The rule operates by searching for these specific GUIDs within files that have the characteristics of a Windows executable.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_SharpLoginPrompt:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: cc47b5804b2e5cf06d44cf4f605afbb0
  Ruleset: securityonion-yara
  Summary: This rule detects tools named "SharpLoginPrompt" used by red teams and black teams, which are C# programs. It specifically looks for a unique type library GUID associated with this tool, appearing in both lowercase and uppercase formats. The rule also verifies that the file format is a valid Portable Executable (PE) by checking the standard PE header signatures.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_SharpMapExec:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e32a7bb6a5a0af7e448b5c50bcdd4623
  Ruleset: securityonion-yara
  Summary: This rule detects SharpMapExec, a tool commonly used by red teams and black teams, through specific Type Library GUIDs. The detection is based on identifying a unique GUID present in the tool's binary, regardless of the GUID being in lowercase or uppercase. The rule also checks for the presence of a standard PE file header to confirm the file type.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_SharpMiniDump:
  Created-Date: '2024_08_06'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 18eb8d0a43d9c65bee67e4895b78a5d0
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a tool known as SharpMiniDump, which is used in offensive security operations such as red and black teaming. The detection is based on the identification of specific typelib GUIDs in the file, corresponding to values "6ffccf81-6c3c-4d3f-b15f-35a86d0b497f" or "6FFCCF81-6C3C-4D3F-B15F-35A86D0B497F". These identifiers are checked within executable files that start with the 'MZ' header and have a 'PE' signature, indicating that the file is a Windows Portable Executable.
  Updated-Date: '2024_08_06'
HKTL_NET_GUID_SharpMove:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1c9120fbdadad40ddf513abff66fe67c
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of c# red and black-team tools by identifying specific Typelib GUIDs. It looks for occurrences of "8bf82bbe-909c-4777-a2fc-ea7c070ff43e" or "8BF82BBE-909C-4777-A2FC-EA7C070FF43E" in both ASCII and wide character formats, specifically within files that have headers indicating they are Windows executable files. The context is to identify tools associated with the SharpMove repository used in penetration testing or malicious activities.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_SharpOxidResolver:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c07b4ab9f4455f549e5f5a948cd5b59f
  Ruleset: securityonion-yara
  Summary: This rule detects the usage of the .NET tool SharpOxidResolver, often utilized by red and black teams, by identifying specific typelib GUIDs within the binaries. It looks for the GUID "ce59f8ff-0ecf-41e9-a1fd-1776ca0b703d" in both lowercase and uppercase formats within Windows executables (PE files).
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_SharpPack:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a3b8bae66220c842bc0feb235bdb52dc
  Ruleset: securityonion-yara
  Summary: This rule detects C# red-team and black-team tools by identifying specific typelib GUIDs within executables. These GUIDs are unique identifiers for type libraries standard in COM programming and can be indicative of certain code libraries used by tools such as SharpPack. The rule looks for both lowercase and uppercase representations of these GUIDs in ASCII and wide character formats within the file, and confirms the file is a valid PE (Portable Executable) format by checking the file header.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_SharpPrinter:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 994362544244d36d58ab20dfb47f6aab
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of tools associated with SharpPrinter, a .NET utility often used in red team and black hat activities, by identifying a specific Type Library GUID within files. The unique GUID is sought in both lower and upper case within the file's string content. Additionally, the rule checks if the file begins with the "MZ" header and contains a "PE" header at a specified offset, confirming the file format as a Portable Executable (PE).
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_SharpRDP:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c43d6d35404b450bad194d3a64f0df37
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of specific C# red-team or black-team tools by identifying known typelib GUID values associated with these tools. It targets SharpRDP, a software used in remote desktop protocol campaigns, by looking for specific GUID strings within executable files. This detection mechanism helps in identifying the usage of SharpRDP by checking for particular ASCII or wide-character representations of certain GUID values within the file header and ensuring the file follows the PE (Portable Executable) format.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_SharpReg:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d07e51ea0b9a4e5090035c475f121961
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of .NET tools used by red and black teams, particularly through the identification of a specific typelib GUID. It does this by matching any instances of the GUID "8ef25b00-ed6a-4464-bdec-17281a4aa52f" (both in lowercase and uppercase) within files that start with the "MZ" header, commonly indicating a Windows executable. The referenced .NET tool repository is SharpReg.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_SharpSCCM:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ab79c9dd2cfba12a771e76fbce93dcc4
  Ruleset: securityonion-yara
  Summary: This rule detects specific .NET-based tools used by red and black teams by identifying unique typelib GUIDs associated with SharpSCCM, which is a tool often used in cybersecurity operations. The rule checks for certain ASCII and wide strings that correspond to these GUIDs, ensuring the file is a Windows executable by verifying its PE header.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_SharpSQLPwn:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e8e7a28912a7347208499133742aaf17
  Ruleset: securityonion-yara
  Summary: This rule detects .NET-based red or black-team tools by identifying specific typelib GUIDs associated with SharpSQLPwn, a tool designed for SQL Server exploitation. It checks for the presence of the GUID "c442ea6a-9aa1-4d9c-9c9d-7560a327089c" in any standard or wide ASCII format within files that have the characteristics of Windows executable files.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_SharpSSDP:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5648476191fb0ed6cfc274a0613737e2
  Ruleset: securityonion-yara
  Summary: This rule detects .NET red-team and black-team tools by identifying the specified type library GUID associated with SharpSSDP. SharpSSDP is a tool available on GitHub, used typically for reconnaissance or exploitation tasks in network environments. The detection mechanism involves checking for the presence of the GUID string in both lowercase and uppercase formats within executable files, ensuring that the file matches the standard PE format.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_SharpScribbles:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: fa8f48756f29fb680b0cfab684d0c0b6
  Ruleset: securityonion-yara
  Summary: This rule detects .NET tools associated with red team or black hat activities based on specific Type Library Globally Unique Identifiers (typelibguids). The detection is based on identifying these typelibguids in both lowercase and uppercase formats within a file that starts with the standard Windows Portable Executable magic number and header values.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_SharpSearch:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 310a06d58b9429f6d071e7b6b671f06c
  Ruleset: securityonion-yara
  Summary: This rule detects SharpSearch, a C# tool used by red and black teams for conducting search operations on remote machines through specific typelib GUIDs. The detection is based on the presence of the typelib GUID "98fee742-8410-4f20-8b2d-d7d789ab003d" in either lowercase or uppercase within executable files.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_SharpSecDump:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6d00cdb04ea20d425cb0f364a6255475
  Ruleset: securityonion-yara
  Summary: This rule detects the SharpSecDump tool, which is a C# program used by both red and black teams, by identifying specific typelib GUIDs within executable files. The presence of these unique GUIDs in a file, combined with the file starting with the 'MZ' and 'PE' headers, triggers the detection.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_SharpShares:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f1011751388fb6746dc65ace9af5db0a
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of SharpShares, a tool written in C# used by both red and black teams for network share enumeration. It identifies the tool by searching for its specific typelib GUID within executable files.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_SharpShell:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: fdbe0e6d3dc40ccc22516ca9a7bd873e
  Ruleset: securityonion-yara
  Summary: This rule detects C# red team or black team tools through the presence of specific TypeLib GUIDs. It identifies the tools by searching for specific GUID strings in both lowercase and uppercase formats within the file. The rule also checks for the presence of the PE file header signature, ensuring the file is a Windows executable.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_SharpShooter:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: fbdb2c0ad39641585d9567f2debeed2e
  Ruleset: securityonion-yara
  Summary: This rule detects C# tools used by red and black teams, specifically via the typelibguid containing values "56598f1c-6d88-4994-a392-af337abe5777" in both lowercase and uppercase forms. It targets executables by validating the PE file signature and then checking for these specific strings within the file. These tools are associated with SharpShooter, which is a framework for payload delivery in penetration testing and red teaming activities.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_SharpShot:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 77576a3cdec8bac448cb4c625bd74199
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of SharpShot, a tool used by red and black teams for security assessments, by identifying specific typelib GUIDs encoded in either lowercase or uppercase within files that have the characteristics of a Windows executable.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_SharpSniper:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 120cda550459e320cf2a254e693e3232
  Ruleset: securityonion-yara
  Summary: This rule detects the SharpSniper tool, which is a C# utility commonly used by red and black teams for penetration testing and security assessments. It identifies the presence of SharpSniper by looking for specific typelib GUIDs within executable files, leveraging the unique identifiers "c8bb840c-04ce-4b60-a734-faf15abf7b18" in both lowercase and uppercase formats. The condition ensures the file is a PE (Portable Executable) format before checking for these GUID strings.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_SharpSocks:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4ebc74dfc97b5fd45f45a46c947d6888
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of specific C# tools used by red and black teams, particularly SharpSocks, by identifying unique typelib GUIDs associated with the software. It looks for these GUIDs in various character formats within executable files, ensuring the file meets standard Windows executable file signature criteria.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_SharpSpray:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 541c5127af26f2ed1c9623d447bfb1dd
  Ruleset: securityonion-yara
  Summary: This rule detects the C# red/black-team tool SharpSpray by identifying specific typelib GUID values within an executable file. It looks for occurrences of either a lower-case or upper-case version of the typelib GUID "51c6e016-1428-441d-82e9-bb0eb599bbc8." It also confirms that the file header corresponds to the typical structure of a Windows executable.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_SharpStat:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5605be889e61207ab24739f51e1937d9
  Ruleset: securityonion-yara
  Summary: This rule detects C# red/black-team tools by identifying a specific Type Library GUID associated with the SharpStat project. It looks for either case variations of the GUID "ffc5c721-49c8-448d-8ff4-2e3a7b7cc383" within executable files confirmed by PE signature headers.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_SharpStay:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4c88636bca571ab87d4b5b1b201f66db
  Ruleset: securityonion-yara
  Summary: This rule detects the .NET-based red/black team tools known as "SharpStay" by identifying specific typelibguid strings. It uses two forms of a particular GUID string in both lowercase and uppercase formats to ensure detection, and it checks for the presence of a PE file by validating certain bytes at specified offsets.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_SharpSvc:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 40df01131cdeea4193378d3d809b4dee
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of .NET red and black-team tools by identifying a specific typelib GUID associated with SharpSvc, a .NET utility often used for penetration testing and adversarial simulation. The rule looks for the GUID in different string formats within executable files to flag instances of this particular tool being utilized.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_SharpTask:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5bca79db8c3a45bdebbf2d5488651b06
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of SharpTask, a C# tool used by red and black teams, via its specific type library GUID. The rule identifies this tool by searching for the GUID "13e90a4d-bf7a-4d5a-9979-8b113e3166be" in both lowercase and uppercase forms within executable files. It also confirms the file format by checking for the MZ header and PE signature.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_SharpView:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d6aa6025b4146ee7f13a3c5a54a816f2
  Ruleset: securityonion-yara
  Summary: This rule detects the use of specific .NET tools employed for both red team (simulated attacks) and black team (malicious actors) operations by identifying a unique type library GUID associated with the SharpView toolset. SharpView is publicly available and used for enumerating Active Directory environments as part of penetration testing and reconnaissance activities. The detection mechanism relies on matching the GUID in both lowercase and uppercase formats within files that have a valid PE (Portable Executable) header.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_SharpWMI:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 016b4dcca1e9ff3a736d1ca28e8021fa
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of SharpWMI, a C# tool used by both red teams and black-hat hackers for executing WMI queries and commands on remote systems. It identifies specific typelib GUIDs associated with SharpWMI, checking for both lower and upper case variations within executable files.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_SharpWSUS:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f030a9f21f59b6226a0ef52fda84d440
  Ruleset: securityonion-yara
  Summary: This rule detects the .NET framework-based tools known as SharpWSUS, which are often used by red and black teams during penetration testing or malicious activities. The detection is based on the presence of specific typelibguids within the tool's executable files, identified by certain ASCII and wide character strings. These strings are checked in files that meet specific conditions, such as having a valid PE header, indicated by the "MZ" and "PE" magic numbers.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_SharpWifiGrabber:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5e5edb913eedf418889cc7d31feb5a4c
  Ruleset: securityonion-yara
  Summary: This rule detects the SharpWifiGrabber tool, a utility written in C# used by red and black teams to capture and analyze Wi-Fi data on target systems. It identifies this tool by searching for a specific TypeLib GUID, which can appear in both lowercase and uppercase formats within the targeted file's binary data. The rule checks for the presence of the GUID and ensures the file format is a valid Windows executable (PE file) with the appropriate signatures.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_SharpWitness:
  Created-Date: '2024_08_06'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d8a1636efe07a763bf3e1180a268868a
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of SharpWitness, a tool commonly used by red and black teams to aid in cybersecurity exercises. It identifies specific type library GUIDs associated with the tool, checking for their presence in both lowercase and uppercase formats within executable files. The detection is based on the Magic Header and PE signature of the file.
  Updated-Date: '2024_08_06'
HKTL_NET_GUID_Sharp_SMBExec:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d121d20fbea01e724d1616542cd111e0
  Ruleset: securityonion-yara
  Summary: This rule detects C# tools typically used by red and black teams for executing SMB operations via the detection of a specific typelib GUID. It identifies the presence of either upper or lower case representations of the GUID "344ee55a-4e32-46f2-a003-69ad52b55945" within executable files indicated by the specific PE header values. This particular identifier is associated with the Sharp-SMBExec tool, which is used for SMB protocol exploitation and remote code execution tasks.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_Sharp_Suite:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 113a16f99546cd23ea676c77361f0918
  Ruleset: securityonion-yara
  Summary: This rule detects C# tools used by both red teams (attack simulation) and black teams (malicious actors) by identifying specific Type Library GUIDs associated with the Sharp-Suite toolkit. This toolkit, distributed through FuzzySecurity's GitHub repository, includes various penetration testing and post-exploitation tools. The detection mechanism looks for unique GUIDs in both lowercase and uppercase ascii and wide string formats, combined with validating the presence of specific PE (Portable Executable) file headers.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_Sharp_WMIExec:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 031bf921e4e08e151ae6edbcbdc67010
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of tools used by red and black teams for penetration testing that are written in C# by identifying specific type library GUIDs associated with Sharp-WMIExec. Sharp-WMIExec is a tool available on GitHub, designed for executing commands on remote systems using WMI and is known for potentially malicious use in cybersecurity contexts. The rule targets certain ASCII and wide string representations of the type library GUIDs within executable files, confirming their presence by checking for DOS and PE signatures.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_Sharpire:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 57e2c3efd71d1cde679e973796367a34
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the Sharpire toolkit, used by red teams and black-hat hackers, based on identifying specific type library GUIDs (`39b75120-07fe-4833-a02e-579ff8b68331` and its uppercase variant) within a file. It employs checks to confirm the file is a Portable Executable (PE) and searches for these GUID strings in both ASCII and wide character formats to identify the toolkit.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_ShellCodeRunner:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: df968e2907132d816fe8658ec280da7c
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of ShellCodeRunner, a tool used by red and black teams for executing shellcode using the Component Object Model (COM) technique in C#. It identifies specific Type Library GUIDs associated with the ShellCodeRunner software, checking for their appearance in both lowercase and uppercase formats within a PE file by verifying the PE file header first.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_ShellGen:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1b3a612680f306b42f5140ef3e510482
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of specific C# tools used by red and black teams during security exercises, which are identifiable through a unique typelib GUID. These tools, related to the ShellGen project, can be recognized by the distinct GUID either in lowercase or uppercase formats. The rule identifies such tools by checking for the presence of this GUID within files that have the characteristics of Windows executable files.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_ShellcodeLoader:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c4e1071290f9f1b7cc512c96454d1455
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of shellcode loader tools written in C# that are used by red and black teams, specifically by identifying a unique type library GUID. It searches for instances of the GUID in two formats, either in lowercase or uppercase ASCII representations, within executable files. The rule confirms the file format by checking the initial bytes for the standard PE (Portable Executable) file headers.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_Simple_Loader:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a24f8dd81f7e4e2a697ff8f9a4638693
  Ruleset: securityonion-yara
  Summary: This rule detects C# tools used by red and black teams, specifically referring to a loader component identified by its typelib GUID. The unique identifiers for the typelib are present in both lowercase and uppercase formats within the executable file, and the rule confirms that the file structure matches a typical executable by checking specific header values.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_Snaffler:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 46f4814a01b3289488b123e9a3ff0a04
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the Snaffler tool, a C# application used by red and black teams for cybersecurity assessments. The detection is based on specific typelib GUIDs associated with the tool and checks for the MZ and PE headers in executable files.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_SneakyExec:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 33e74d2ef79247564e867cb5445287f4
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific type library GUID associated with C# tools used by red or black teams, which are often employed for penetration testing or malicious activities. The rule specifically searches for the GUID "612590aa-af68-41e6-8ce2-e831f7fe4ccc" in both lowercase and uppercase forms, within executable files identified by the characteristics 0x5A4D and 0x00004550 in their headers.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_SneakyService:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f8e1498d94292378c071f3507cd852c7
  Ruleset: securityonion-yara
  Summary: This rule detects C# red team or black team tools by identifying specific type library GUIDs associated with "SneakyService." The detection is achieved by searching for the GUIDs "897819d5-58e0-46a0-8e1a-91ea6a269d84" and its uppercase variant within files that match the Portable Executable (PE) format.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_SolarFlare:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2d38d2663facd5d822483da1af274190
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of C# tools used by red and black teams, identifiable through a specific typelib GUID, both in lowercase and uppercase formats. The condition checks for the presence of PE file headers and the specified GUIDs within the file content.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_SpoolSample:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3083f60c87eaf731cbc23742d4352350
  Ruleset: securityonion-yara
  Summary: This rule detects .NET-based red and black team tools by identifying a specific Type Library GUID. It looks for the presence of either lowercase or uppercase versions of the GUID "640c36b4-f417-4d85-b031-83a9d23c140b" within the executable files that begin with the "MZ" header and have a PE (Portable Executable) format. The detection aims to identify tools associated with red teaming activities, potentially providing insights into unauthorized or simulated attack scenarios.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_StandIn:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1fc968aa56e028cf3bcb39a933db2253
  Ruleset: securityonion-yara
  Summary: This rule detects C# red/black team tools by identifying a specific typelib GUID associated with the open-source project "StandIn" by FuzzySecurity. The detection relies on recognizing particular GUIDs in both lowercase and uppercase formats within executable files.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_Stealer:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 713e308bb79027b0e827f1a7618378e5
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of certain C# red/black-team tools by identifying specific typelib GUIDs (Globally Unique Identifiers) within the file. It examines files that start with the "MZ" header signature for PE (Portable Executable) files and then looks for any of the specified GUID strings in either ASCII or wide format.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_Stealth_Kid_RAT:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f6bbb621809848e9f01229b3611d87d8
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the Stealth-Kid RAT, a Remote Access Trojan used in red/black-team operations, by identifying specific typelib GUIDs associated with the malicious software within executables.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_StormKitty:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3db08439daa37a09b2b1486e367ad36f
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of StormKitty, a C# tool commonly used by red and black teams, by identifying specific Type Library GUIDs within executable files. It looks for the GUIDs "a16abbb4-985b-4db2-a80c-21268b26c73d" and "98075331-1f86-48c8-ae29-29da39a8f98b" in both lowercase and uppercase ASCII or wide string formats.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_Stracciatella:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a255971be4cdb6d218956379ea52edbc
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific c# red-team or black-team tool named Stracciatella by identifying its unique typelib GUID. It searches for the GUID "eaafa0ac-e464-4fc4-9713-48aa9a6716fb" in both lowercase and uppercase forms within executable files. The rule first ensures that the file being scanned is a valid executable by checking its MZ and PE headers before searching for the GUID.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_SuperSQLInjectionV1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d39a69bb679106e9e8b355ad89d4e9cb
  Ruleset: securityonion-yara
  Summary: This rule detects a red or black-team tool associated with the .NET framework specifically related to SuperSQLInjectionV1. It identifies the tool via its type library GUID, which can appear in both lowercase and uppercase formats. The condition checks for the presence of a 'MZ' header and 'PE' signature in the file, combined with any occurrence of the specified GUID strings.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_SweetPotato:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c9c34b856c1aede5a4980908d57cac24
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of specific C# red-team and black-team tools by identifying unique typelib GUIDs associated with the SweetPotato exploit. It looks for the occurrence of certain GUIDs in either their lower or upper case format within Windows executable files, indicating the use of such malicious tools for privilege escalation or other attack methods detailed in the SweetPotato repository.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_SyscallPOC:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 47dfee64ea0b1563a69eb074ec991acf
  Ruleset: securityonion-yara
  Summary: This rule detects C# tools used by red-team or black-team activities by identifying specific typelib GUIDs associated with the SyscallPOC project. It searches for these GUIDs in both lowercase and uppercase formats within executable files that have the PE file headers.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_TeleShadow2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 06c948f6db07ffd5f7c9d84e7c7b48c8
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of C# red/black-team tools, specifically TeleShadow2, by identifying certain typelib GUIDs within executable files. The rule looks for specific string patterns in both lower and upper case GUID formats, ensuring a match by checking for typical executable file signatures.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_Telegra_Csharp_C2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 06f77a58f18687cc36e9a18edd387fe0
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of C#-based red team or black team tools via a specific TypeLib GUID. It identifies files that match the provided TypeLib GUID in both lowercase and uppercase formats within their content, targeting executable files that start with the "MZ" and "PE" headers, which are typical of many Windows executable files. The rule aims to flag potentially suspicious tools used in cybersecurity operations or malicious activities.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_TellMeYourSecrets:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9ea3a795a575e4dd819aa47552ddecc9
  Ruleset: securityonion-yara
  Summary: This rule detects C# red-team and black-team tools associated with the TellMeYourSecrets project by identifying specific type library GUIDs present in the files. The rule specifically looks for the unique GUID "9b448062-7219-4d82-9a0a-e784c4b3aa27" in both lowercase and uppercase ASCII formats, and confirms the presence of these GUIDs within files that have the characteristics of a Windows executable.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_TheHackToolBoxTeek:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5ad9be2d761ee1895aa6f37e1546bbeb
  Ruleset: securityonion-yara
  Summary: This rule detects C# tools commonly used by red teams and black teams by identifying specific type library GUIDs (Globally Unique Identifiers) within executable files. The rule checks for the presence of a series of distinct GUIDs in both ASCII and wide character formats. Additionally, it verifies that the file starts with the "MZ" and "PE" headers, which are standard signatures of Windows executable files.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_The_Collection:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 803b1cd415ad8484fc23b065a57e2686
  Ruleset: securityonion-yara
  Summary: This rule detects C# tools utilized by red and black teams by identifying specific typelib GUIDs. The rule targets specific GUIDs in both upper and lower case, and checks criteria identifying Windows Portable Executable files, aiming to reveal potentially malicious activity associated with these tools.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_TikiTorch:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e72ccc87d29b0906690590063db0fe01
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of certain C# tools utilized for both red team and black team activities by identifying specific typelib GUIDs. These GUIDs are associated with the .NET executable file headers that match known patterns for the software documented in the TikiTorch GitHub repository, which provides a framework for safely running .NET assemblies with elevated privileges. The detection focuses on various GUIDs in both lowercase and uppercase representations within ascii and wide character formats.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_TokenStomp:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 96e54074bee5af87219d2487a751c0d5
  Ruleset: securityonion-yara
  Summary: This rule detects .NET red-team and black-team tools by identifying a specific TypeLib GUID. The detection is based on finding the GUID in both lowercase and uppercase formats within executable files that start with the "MZ" header and have a "PE" signature.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_Tokenvator:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b4e9a8956177a971c8dce6693ed018f0
  Ruleset: securityonion-yara
  Summary: This rule detects the execution of Tokenvator, a C# tool used by red and black teams to manipulate Windows access tokens for privilege escalation, by identifying specific Type Library GUID values within executable files.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_ToxicEye:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: fd9cd7424eefcf265428076e8b2fc703
  Ruleset: securityonion-yara
  Summary: This rule detects ToxicEye, a C# red team and black team tool, by identifying the presence of a specific type library GUID in ASCII or wide format within executable files. The detection condition relies on specific PE file headers and the occurrence of matching GUID strings.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_TruffleSnout:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d3e407bb1c24b7796364beba7e30a7e6
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of specific C# red-team and black-team tools by identifying a unique typelib GUID string, either in lowercase or uppercase format, within executable files. The rule examines files with a valid Portable Executable (PE) header to match the GUID string, indicating potential usage of the tools linked to the TruffleSnout repository for security testing or malicious activity.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_UAC_Escaper:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c8cf878ecfc0ad184f70a7bdaa535e1d
  Ruleset: securityonion-yara
  Summary: This rule detects the UAC-Escaper, a red/black-team tool that utilizes a specific typelib GUID (95359279-5CFA-46F6-B400-E80542A7336A) embedded within executable files. These tools are used to perform User Account Control (UAC) bypass techniques. The detection focuses on identifying the presence of the unique typelib GUID in either its lower or upper case forms within the executable files.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_UAC_SilentClean:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e61bca89563a6c713b64f328ead469a3
  Ruleset: securityonion-yara
  Summary: This rule detects a tool used by red and black teams written in C#, specifically UAC-SilentClean, by searching for the presence of a specific typelib GUID within a file. The GUID is checked in both lowercase and uppercase formats within an executable file format identified by the "MZ" and "PE" headers.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_USBTrojan:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5a7e60d7d132128552d28605282d1a7b
  Ruleset: securityonion-yara
  Summary: This rule detects C# tools used by red and black teams through their Typelib GUID values, specifically targeting identifiers such as "4eee900e-adc5-46a7-8d7d-873fd6aea83e" in both lower and upper case. It is designed to identify executable files that begin with the "MZ" header and have a specific PE header offset, ensuring precise detection of these tools.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_UglyEXe:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d10d374b7212ffcd42f32027cb2ec0d2
  Ruleset: securityonion-yara
  Summary: This rule detects C# red/black-team tools by identifying specific typelib GUIDs, specifically "233de44b-4ec1-475d-a7d6-16da48d6fc8d" in both lowercase and uppercase variants. The condition for triggering this rule is the presence of these GUIDs within a file that begins with the PE file header signature "MZ" and contains the PE header signature "PE."
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_UnmanagedPowerShell:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6fadce481d5dec966bc9ee392543866d
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of .NET tools known to be used in red and black teaming exercises by identifying specific Type Library GUIDs. It searches for the unique identifiers "dfc4eebb-7384-4db5-9bad-257203029bd9" in both lowercase and uppercase within the file and checks if the file has the MZ header and PE signature indicative of a Windows executable. This particular GUID points to tools developed to execute unmanaged PowerShell via C# code.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_UnstoppableService:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 897b041b64808a8fc2c33be3895a2f32
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific C# tool used by red teams and black hat hackers by searching for a particular TypeLib GUID identifier within executable files. The tool in question is associated with the "UnstoppableService" project, aimed at bypassing certain security measures. The condition checks for the MZ header and PE signature to confirm the file type and then matches the TypeLib GUID string in either uppercase or lowercase format.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_UrbanBishopLocal:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c65556df204c0890dcfaa2ce9c07270d
  Ruleset: securityonion-yara
  Summary: This rule detects C# red/black-team tools by identifying a specific type library GUID associated with UrbanBishopLocal. It searches for the GUID, both in its lowercase and uppercase representations, within files that match the format of executable files by checking for the "MZ" header and the PE file signature.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_VanillaRAT:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b06bab79da9210538211e299c146b4c8
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of VanillaRAT, a remote access tool written in C# often utilized by red and black team operators. It searches for specific type library GUIDs in a file, identified as either uppercase or lowercase ASCII strings, and checks for the PE file header signature.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_Watson:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e70bd0ef1a5a9e63f83dc19fa95b7635
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the Watson tool, a C# application often used by red and black teams for vulnerability discovery and diagnostic purposes, by identifying specific typelib GUIDs within executable files. The rule checks for the typical characteristics of a Windows executable file and matches it against known GUIDs associated with Watson.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_WheresMyImplant:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6fd14ddffa28b9c6b6d8fb183cfdd261
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of C# red-team or black-team tools, specifically looking for a unique typelib GUID associated with such tools. The detection is based on identifying either an ASCII or wide-character representation of the GUID "cca59e4e-ce4d-40fc-965f-34560330c7e6" within executable files. The rule confirms the file type by checking for PE (Portable Executable) file headers.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_Whisker:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 316558a52b9b7ff1620aca24acdab353
  Ruleset: securityonion-yara
  Summary: This rule detects .NET tools associated with red and black team operations by identifying the specific typelib GUID "42750ac0-1bff-4f25-8c9d-9af144403bad" within files. The detection mechanism includes both lowercase and uppercase variations of the GUID and verifies the presence of Windows executable file headers to ensure accurate identification.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_WhiteListEvasion:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1577934b65082c7445afe9779442159e
  Ruleset: securityonion-yara
  Summary: This rule detects C# red team and black team tools by identifying a specific Type Library GUID, "858386df-4656-4a1e-94b7-47f6aa555658", which may be used in attempts to evade whitelisting mechanisms. The rule checks for both lowercase and uppercase representations of the GUID within the file, ensuring the presence of Windows executable header signatures.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_WindowsDefender_Payload_Downloader:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2bf66f18631e1bb682a3705b567e339a
  Ruleset: securityonion-yara
  Summary: This rule detects C# red-team or black-team tools through their typelib GUID in Windows Defender Payload Downloader. It identifies tools by searching for specific typelib GUID strings within files that have the characteristics of Windows executable files, specifically those starting with the MZ header and having the PE signature.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_WindowsPlague:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: dc3f2dd784be93b1edd804fb25f7b669
  Ruleset: securityonion-yara
  Summary: This rule detects the C# red/black-team tools known as WindowsPlague via a specific TypeLib GUID. The detection is based on identifying the presence of a unique TypeLib GUID string, either in lower or uppercase format, within a file. The rule also checks certain file characteristics to confirm it is a Windows executable.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_WindowsRpcClients:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b675e0f420b00fe4f45785b316066687
  Ruleset: securityonion-yara
  Summary: This rule detects the use of C# tools commonly utilized by red or black teams through the presence of specific type library GUIDs. It checks for these GUIDs in both lowercase and uppercase ASCII wide formats within files that have the MZ header and PE signature, ensuring identification of potentially malicious or test tools developed as part of penetration testing or security assessments.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_WireTap:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b1792543c7918545162cf425e357e6be
  Ruleset: securityonion-yara
  Summary: This rule detects .NET tools used by red or black teams through the presence of specific typelib GUIDs. It identifies either lowercase or uppercase instances of the GUID "b5067468-f656-450a-b29c-1c84cfe8dde5," indicating the presence of these tools.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_XORedReflectiveDLL:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7a08af20444d6f200f558302ca8ed3f7
  Ruleset: securityonion-yara
  Summary: This rule detects C# tools used by red and black teams, identified through specific typelib GUIDs. It checks for the presence of these GUIDs in different character cases within executable files by verifying both ASCII and wide string formats. The rule triggers if a file starts with the 'MZ' header, indicating a PE file, and if either of the identified GUIDs is found within the file.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_Xploit:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1861348fe1ccc2e951a67069eba11f79
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of C# red-team and black-team tools by identifying specific typelib GUIDs within files. It searches for various GUID patterns in both lowercase and uppercase ASCII and wide character formats. The condition checks if the file starts with the "MZ" header and contains a valid "PE" header, ensuring that these pattern matches pertain to executable files.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_aresskit:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9547e124b3f1189192a21f1dd0b76f91
  Ruleset: securityonion-yara
  Summary: This rule detects C# red/black-team tools by identifying specific typelib GUIDs associated with Aresskit, an open-source tool available on GitHub. The detection is based on the presence of these GUIDs within files that match the PE (Portable Executable) format.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_azure_password_harvesting:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c2e327313b31788e767685a6dd4b6e20
  Ruleset: securityonion-yara
  Summary: This rule detects specific red or black-team tools written in C# by identifying unique typelib GUIDs used in these tools. It searches for the presence of GUIDs "7ad1ff2d-32ac-4c54-b615-9bb164160dac" or "7AD1FF2D-32AC-4C54-B615-9BB164160DAC" in files that have characteristics of executable files, thus indicating they may be used for unauthorized password harvesting in an Azure environment.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_bantam:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 085c24655b801f705dd19b4420e5d5d3
  Ruleset: securityonion-yara
  Summary: This rule detects C# red-team and black-team tools associated with the Bantam project by identifying specific typelib GUID strings within executable files. The condition checks for the presence of strings "14c79bda-2ce6-424d-bd49-4f8d68630b7b" or "14C79BDA-2CE6-424D-BD49-4F8D68630B7B" in both ASCII and wide format, ensuring the file format is a portable executable (PE) by verifying the PE header.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_clr_meterpreter:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 914715f489ceada01cb683dc1a35191c
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of clr-meterpreter, a C# tool often used by red and black teams, by identifying specific type library GUIDs within executable files. The detection is based on matching any of a defined set of GUIDs, represented in both lowercase and uppercase forms, in files that possess the characteristics of Windows executables.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_donut:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: dc6a5304976e57e1a04916b4e85e69f6
  Ruleset: securityonion-yara
  Summary: This rule detects .NET red and black-team tools by identifying specific Type Library GUIDs (Globally Unique Identifiers) associated with them. It searches for the presence of certain GUID strings, both in lowercase and uppercase ASCII and wide character formats, within executable files. The rule's condition verifies that the file header starts with "MZ" and contains the PE signature "PE" before checking for the specified GUIDs.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_dotnet_gargoyle:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 74dc221b3f00fc2db74cf3e8eeaae27e
  Ruleset: securityonion-yara
  Summary: This rule detects C# red-team and black-team tools by identifying specific type library GUIDs associated with dotnet-gargoyle.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_fakelogonscreen:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: fc903a5d18b8b7be318b37440b0b70a5
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the FakeLogonScreen tool, a C# red/black-team utility designed to capture user credentials by mimicking the Windows logon screen. It identifies the tool through its unique type library GUID.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_gray_keylogger_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: aa7147debf08f4f9856e526004c2c06c
  Ruleset: securityonion-yara
  Summary: This rule detects VB.NET red and black team tools by identifying specific typelibguid values within executables. The rule targets unique GUIDs associated with the "Gray Keylogger 2" tool, which may be utilized by both legitimate and malicious actors for logging keystrokes. It searches for these GUIDs in both lowercase and uppercase formats within the binary structure of the file. Additionally, the rule ensures that the file is a valid Portable Executable (PE) by checking its header values.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_hanzoInjection:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1483ccf1bfb76bc4af8333647499772c
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of certain C# red-team and black-team tools by identifying a specific type library GUID associated with hanzoInjection. The tools' presence is determined by searching for the GUID "32e22e25-b033-4d98-a0b3-3d2c3850f06c" in both lowercase and uppercase forms within PE files.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_iSpyKeylogger:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 045829b1f5a6e2395b86590bc9b44e64
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the iSpy Keylogger, a C# tool commonly used in red and black team operations, by identifying specific typelib GUIDs. It searches for various GUIDs in both lowercase and uppercase forms within executable files.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_k8fly:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8c275950863552ad727a4f37681b67ce
  Ruleset: securityonion-yara
  Summary: This rule detects C# red and black-team tools through the presence of specific typelib GUIDs, namely "13b6c843-f3d4-4585-b4f3-e2672a47931e" in both lower and upper case formats. The detection is triggered when these identifiers are found within executable files, indicated by the typical file header signatures for PE (Portable Executable) files.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_logger:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f0b46b6cfd81dba00ab68ecca3b90a01
  Ruleset: securityonion-yara
  Summary: This rule detects C# red and black-team tools by identifying the TypeLib GUID associated with these tools. It searches for specific strings within the file that match the GUID in both lowercase and uppercase formats. The rule is designed to identify executable files by checking the standard DOS header and the PE header.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_memscan:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 76166e473a51f03df5526b76b4455b6b
  Ruleset: securityonion-yara
  Summary: This rule detects C# red-team and black-team tools by identifying a specific Type Library GUID within executable files. It searches for both lowercase and uppercase representations of the GUID "79462f87-8418-4834-9356-8c11e44ce189" to determine if the file is a Portable Executable (PE) format based on its header.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_neo_ConfuserEx:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7c24ec0795538c368c8b46bb4420ffdf
  Ruleset: securityonion-yara
  Summary: This rule detects .NET red/black-team tools by identifying unique typelib GUIDs associated with neo-ConfuserEx, an obfuscation tool used to protect .NET applications from reverse engineering and tampering. The detection is based on specific GUID strings appearing within the binary, suggesting the use of ConfuserEx for obfuscation.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_njCrypter:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0279deaa5c6ca732092adf53141798cb
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of c# red/black-team tools by identifying specific type library GUIDs associated with njCrypter. It checks for the existence of particular GUID strings in either lowercase or uppercase formats within PE files, commonly recognizing executable files by their standard headers.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_njRAT:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: adb0d5c744d97f261d543335023811a7
  Ruleset: securityonion-yara
  Summary: This rule detects specific VB.NET-based hacking tools, specifically those utilized in red or black-team operations, by identifying unique typelib GUIDs associated with the njRAT malware. The detection focuses on certain GUID strings, both in lowercase and uppercase ASCII wide formats, and checks for the presence of these within executable files by confirming the appropriate PE file magic headers.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_nopowershell:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a1be493ca3a8be8f1dbd15dad15c0054
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of C# red/black-team tools that use a specific typelib GUID (555ad0ac-1fdb-4016-8257-170a74cb2f55), which can appear in both lowercase and uppercase formats. The detection focuses on files with a Portable Executable (PE) header, indicating executable files typically used within the Windows operating system.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_p0wnedShell:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 29ca4ae3a673f61e03894ebbb534427e
  Ruleset: securityonion-yara
  Summary: This rule detects the use of the c# red-team and black-team tool known as p0wnedShell, specifically by matching the typelib GUID associated with it. The detection looks for the presence of specific GUID strings in both lowercase and uppercase formats, within executable files that have the "MZ" and "PE" headers indicating they are Windows PE files.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_p2p:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 52d8c17771b551c8f0194dae76a34995
  Ruleset: securityonion-yara
  Summary: This rule detects .NET red/black-team tools that utilize a specific type library GUID associated with p2p Remote Desktop software. p2p Remote Desktop is characterized as dual-use but is flagged as 100% malicious in certain threat detection databases. The rule identifies these tools by checking for specific GUID strings, both in lowercase and uppercase formats, within executable files. The presence of these GUID strings combined with the file format of a Windows executable triggers detection.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_physmem2profit:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0075352ec9702cac9ee2325efeb7e0ca
  Ruleset: securityonion-yara
  Summary: This rule detects C# red-team and black-team tools by identifying a specific Type Library GUID (Globally Unique Identifier) associated with the project "physmem2profit." The detection mechanism searches for the GUID in both lowercase and uppercase formats within executable files, indicated by standard PE file headers. The rule ensures accurate identification by confirming file characteristics matching executable files using PE header signatures.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_privilege_escalation_awesome_scripts_suite:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 327aa4ffbd8b85399f8917f74e4a759f
  Ruleset: securityonion-yara
  Summary: This rule detects .NET-based red team or black team tools used for privilege escalation, identified through specific typelibguids. These tools are part of the privilege-escalation-awesome-scripts-suite, which is an open collection for auditing and gaining elevated user privileges on compromised systems. The detection relies on recognizing particular GUIDs that are associated with these tools within executable files based on PE headers.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_rat_shell:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 81ea121af511dcd34f4ab1499ba2ada6
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of specific C# tools commonly used by red and black teams, known as Rat Shell, by identifying particular typelib GUIDs within files. It looks for any match of these GUIDs in both uppercase and lowercase formats, and confirms the file type by checking specific headers for executable files to ensure accuracy.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_rundotnetdll32:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4b5f223d2a8f0ab6a246405bb58e8451
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of C# red-team or black-team tools by identifying specific type library GUIDs, specifically "a766db28-94b6-4ed1-aef9-5200bbdd8ca7" in both lowercase and uppercase formats. These tools are commonly referred to and utilized in the context of the rundotnetdll32 project, which is found on GitHub. The rule checks for the PE (Portable Executable) file format indicator and the presence of any of the specified GUID strings to confirm a match.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_scout:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 36bc1f95a9d6905a0207f9e2078ab38f
  Ruleset: securityonion-yara
  Summary: This rule detects malicious activity associated with specific C# red-team and black-team tools by searching for a particular type library GUID (Global Unique Identifier). It identifies these tools through the presence of the GUID values "d9c76e82-b848-47d4-8f22-99bf22a8ee11" or "D9C76E82-B848-47D4-8F22-99BF22A8EE11" within executable files. These tools are often used for penetration testing or other security assessment activities. The rule first checks for the standard PE (Portable Executable) file headers before inspecting for the GUID to confirm the presence of the specified tools.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_sharpwmi:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c7f56aad85d189104b73a7325e5258b6
  Ruleset: securityonion-yara
  Summary: This rule detects the use of C# red-team or black-team tools through the presence of a specific TypeLib GUID. These tools can be associated with the SharpWMI project, a known GitHub repository for such utilities. The detection relies on identifying the unique identifier "bb357d38-6dc1-4f20-a54c-d664bd20677e" in both lowercase and uppercase formats within PE files.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_sitrep:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 53bd28ab97af507cc0cd70246735cf7c
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of certain C# red-team and black-team tools by identifying specific typelib GUIDs within executable files. It looks for occurrences of the GUID "12963497-988f-46c0-9212-28b4b2b1831b" either in lowercase or uppercase forms, and confirms the file is a valid PE (Portable Executable) by checking the file headers. These tools are typically used for offensive security exercises to identify system vulnerabilities.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_wsManager:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f37ab3c575e0574d1962e72cb9e2825d
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of C# red/black-team tools by identifying a specific TypeLib GUID (9480809e-5472-44f3-b076-dcdf7379e766) in both lowercase and uppercase formats, which is indicative of the wsManager tool available at https://github.com/guillaC/wsManager. The tool is used for managing web services and could be utilized by both red teams (penetration testers) and black teams (attackers). The rule matches files that start with the 'MZ' and 'PE' headers, typical of Windows executables.
  Updated-Date: '2024_08_07'
HKTL_NET_GUID_ysoserial_net:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ac7ba2bf287afd7e99fbcb4d16950b7e
  Ruleset: securityonion-yara
  Summary: This rule detects the use of specific C# red and black-team tools by identifying unique typelib GUIDs associated with ysoserial.net, a popular exploit toolkit used for deserialization attacks. The detection is based on the presence of these GUIDs in executable files that meet certain format criteria, specifically Portable Executable (PE) files.
  Updated-Date: '2024_08_07'
HKTL_NET_NAME_ADCollector:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b2ae63376cfdef0d4f91d5c8af0ba568
  Ruleset: securityonion-yara
  Summary: This rule detects a .NET tool named ADCollector, which is associated with red team activities and system reconnaissance tasks within an Active Directory environment. It identifies the presence of the tool by checking for specific strings like "ADCollector" and "AssemblyTitle" within a file. Additionally, the rule ensures the file meets the typical characteristics of a Windows executable. It also excludes files associated with Symantec Threat Defense to avoid false positives.
  Updated-Date: '2024_08_07'
HKTL_NET_NAME_ATPMiniDump:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8995854c406afda42547a9a3408406e2
  Ruleset: securityonion-yara
  Summary: 'This rule detects a specific .NET tool named "ATPMiniDump" by checking for specific strings within the file: "ATPMiniDump" and "AssemblyTitle," indicating its presence. The rule also verifies that the file is a Portable Executable (PE) by checking the respective magic numbers at specific offsets in the file header.'
  Updated-Date: '2024_08_07'
HKTL_NET_NAME_AggressiveProxy:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0d24ac21504a9d199599792370dc9dd9
  Ruleset: securityonion-yara
  Summary: This rule detects specific .NET tools used by red and black teams based on the name "AggressiveProxy" and the presence of "AssemblyTitle" in the file strings. The detection condition checks for these strings within the context of a valid executable file, indicated by the specific byte patterns at the beginning of the file.
  Updated-Date: '2024_08_07'
HKTL_NET_NAME_AmsiBypass:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 80353c625d93cc09c96111fe867bcfe9
  Ruleset: securityonion-yara
  Summary: 'This rule detects .NET-based tools used by red and black teams that are attempting to bypass the Antimalware Scan Interface (AMSI). It searches for specific characteristics within executables: the string "AmsiBypass" and the presence of "AssemblyTitle" within the file, verifying if they align with identifiable markers of a Portable Executable (PE) file.'
  Updated-Date: '2024_08_07'
HKTL_NET_NAME_AsStrongAsFuck:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 77daf1993bb0b50525c7d50b306d0a03
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a .NET assembly named "AsStrongAsFuck," specifically targeting tools used by red and black teams. It identifies the software by looking for the string "AsStrongAsFuck" and the compilation attribute "AssemblyTitle" within the file. The rule ensures that the file conforms to the standard structure of a Windows executable by checking its header.
  Updated-Date: '2024_08_07'
HKTL_NET_NAME_C2Bridge:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: df346f29f11a5b8cdffee44b0d19a75b
  Ruleset: securityonion-yara
  Summary: This rule detects tools that belong to a .NET framework used by red and black teams, specifically identifying the presence of "C2Bridge". It does so by searching for the strings "C2Bridge" and "AssemblyTitle" in files that meet particular binary characteristics, ensuring the tools are recognized as part of these security exercises or malicious activities.
  Updated-Date: '2024_08_07'
HKTL_NET_NAME_CACTUSTORCH:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: adc10fd18bf6c112fc59716f4123c4b0
  Ruleset: securityonion-yara
  Summary: This rule detects .NET applications associated with the CACTUSTORCH toolkit, designed for red and black team operations. It identifies the presence of the strings "CACTUSTORCH" and "AssemblyTitle" within executable files, particularly targeting files that exhibit the standard PE (Portable Executable) file format characteristics.
  Updated-Date: '2024_08_07'
HKTL_NET_NAME_DotNetAVBypass:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d8a887a544417fc6fb9279ec2f8a528d
  Ruleset: securityonion-yara
  Summary: This rule detects .NET-based red and black team tools by identifying the specific name "DotNetAVBypass" and the presence of the string "AssemblyTitle" within executable files. It checks for the existence of these identifiers combined with the characteristics of a Windows executable file.
  Updated-Date: '2024_08_07'
HKTL_NET_NAME_DotNetInject:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2f3f9cd064f42c05193fddb859b82fc6
  Ruleset: securityonion-yara
  Summary: This rule detects .NET red/black-team tools, particularly targeting the tools named "DotNetInject". It checks for the presence of specific strings such as "DotNetInject" and "AssemblyTitle" to identify these tools. Additionally, it looks for indicators like "GetDotNetInjector" and "JetBrains.TeamCity.Injector." The condition is met if these strings are found within files less than 20MB, with a PE file header, and with certain exclusions.
  Updated-Date: '2024_08_07'
HKTL_NET_NAME_FakeFileMaker:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1a9243600671b872058c66e50fc3f94d
  Ruleset: securityonion-yara
  Summary: This rule detects the FakeFileMaker utility, a .NET tool often used by red and black teams. It identifies the malware by checking for specific strings within the executable, such as "FakeFileMaker" and "AssemblyTitle," and confirming it conforms to the Portable Executable (PE) file format standards.
  Updated-Date: '2024_08_07'
HKTL_NET_NAME_FudgeC2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1b25708c1fd028d3a55704b3a2908d4d
  Ruleset: securityonion-yara
  Summary: This rule detects .NET-based red and black-team tools by identifying specific strings within the file, including "FudgeC2" and "AssemblyTitle." It ensures the file is a Portable Executable (PE) by verifying the presence of particular headers.
  Updated-Date: '2024_08_07'
HKTL_NET_NAME_GhostLoader:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4728ef6c47c65c1b7c4b301586857a50
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of tools developed in .NET used for both red team (offensive security professionals) and black hat (malicious attackers) activities by identifying specific strings within the binary file. It looks for the "GhostLoader" name and the "AssemblyTitle" entry, indicating the potential use of the GhostLoader tool, which is aimed at loading assemblies into a target process. The condition checks for the presence of the Magic Number for PE files (0x5A4D) and the PE signature (0x00004550) to validate the file type.
  Updated-Date: '2024_08_07'
HKTL_NET_NAME_Ghostpack_CompiledBinaries:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7465d04729b6d457c76ffd722a400450
  Ruleset: securityonion-yara
  Summary: This rule detects .NET red/black-team tools identified by the name "Ghostpack-CompiledBinaries" and the presence of "AssemblyTitle" within the binary. It focuses on binaries that are typically associated with red team operations, leveraging specific naming patterns and characteristics found in compiled assemblies from the Ghostpack suite. This detection is applied only if the binary adheres to the PE file format criteria.
  Updated-Date: '2024_08_07'
HKTL_NET_NAME_GrayKeylogger:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 244b5cdaf6236cc1fd1132abe857712e
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of GrayKeylogger, a .NET-based tool often utilized by red and black teams for keylogging activities. It specifically identifies the tool by searching for the name "GrayKeylogger" and the presence of the string "AssemblyTitle" within executable files. The rule checks for these strings in files that start with the 'MZ' header and contain a valid 'PE' header, which indicates the file is a Windows executable.
  Updated-Date: '2024_08_07'
HKTL_NET_NAME_HTTPSBeaconShell:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 65fbea43cb4035cae82e097a2843c0a8
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the "HTTPSBeaconShell," a .NET tool used by red and black teams, by looking for specific strings within the binary. It searches for the name "HTTPSBeaconShell" and the presence of the string "AssemblyTitle" in both ASCII and wide character formats. Additionally, it confirms that the file is a valid Portable Executable by checking the MZ header and the PE signature.
  Updated-Date: '2024_08_07'
HKTL_NET_NAME_HexyRunner:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 449345ac7593776ac1638d92bca31e5a
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the .NET-based tool "HexyRunner" by identifying specific strings associated with the tool's executable file. It looks for the string "HexyRunner" and the "AssemblyTitle" within files that match the PE file format (Portable Executable).
  Updated-Date: '2024_08_07'
HKTL_NET_NAME_Infrastructure_Assessment:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9b4fdc8d3242dc9fe8719b3b06858266
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of .NET red/black-team tools by identifying specific names such as "Infrastructure-Assessment" and terms like "AssemblyTitle" within a file. The objective is to identify executables that are likely used for infrastructure assessment, indicated by certain string patterns and a valid PE header signature.
  Updated-Date: '2024_08_07'
HKTL_NET_NAME_K8tools:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e18d10e48872b4264478d0e6d7717c21
  Ruleset: securityonion-yara
  Summary: This rule detects .NET tools used for red and black team activities through file names and specific compilation strings. It identifies files associated with the "K8tools" suite by verifying the presence of the term "K8tools" and the compilation string "AssemblyTitle" within executable files. The rule ensures that the file follows the structure of a valid PE (Portable Executable) file before applying its conditions.
  Updated-Date: '2024_08_07'
HKTL_NET_NAME_MSBuildAPICaller:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 60e4fd0d525023a9ae3948cb5941ede5
  Ruleset: securityonion-yara
  Summary: This rule detects .NET-based tools used by red and black teams by identifying specific strings, such as "MSBuildAPICaller" and "AssemblyTitle," within executables. The rule targets files that begin with the "MZ" header and contain a PE header at the correct offset, ensuring it applies to valid Windows executables.
  Updated-Date: '2024_08_07'
HKTL_NET_NAME_MagentoScanner:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a06d9e9478534c9d13bc464199eec426
  Ruleset: securityonion-yara
  Summary: This rule detects .NET tools associated with red and black team activities by identifying the presence of the term "MagentoScanner" and the assembly title "AssemblyTitle" within files. It specifically targets executable files by checking the PE header for the characteristic signatures of .NET applications, ensuring accurate detection of these tools.
  Updated-Date: '2024_08_07'
HKTL_NET_NAME_MaliciousClickOnceGenerator:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d837aa4fe3fc5323c3a2355afc96f142
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of .NET red/black-team tools by identifying specific strings such as "MaliciousClickOnceGenerator" and "AssemblyTitle" within executable files. The condition checks for the standard PE file header and requires the presence of both specified strings to match.
  Updated-Date: '2024_08_07'
HKTL_NET_NAME_NativePayload_ARP:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6d4e79101c72d0e62e4391bdb7bbfdf4
  Ruleset: securityonion-yara
  Summary: This rule detects the .NET tool NativePayload_ARP by identifying specific characteristics within the binary. It looks for the string "NativePayload_ARP" and the term "AssemblyTitle" within the file, combined with checking for key attributes of a valid PE file format through its headers.
  Updated-Date: '2024_08_07'
HKTL_NET_NAME_NativePayload_DNS2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3b9163c180e4cbf4fe957714f1b2e8bd
  Ruleset: securityonion-yara
  Summary: This rule detects .NET tools used by red and black teams by checking for notable indicators within the binary. It searches for specific strings such as "NativePayload_DNS2" and "AssemblyTitle" within files that have the characteristics of a PE (Portable Executable) file. The presence of these strings within such binaries helps in identifying the usage of the NativePayload_DNS2 tool, which is typically used for command and control via DNS.
  Updated-Date: '2024_08_07'
HKTL_NET_NAME_NativePayload_IP6DNS:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 405bb001a15fd05e79c78d9c9f01bde3
  Ruleset: securityonion-yara
  Summary: This rule detects .NET tools, particularly those utilized in red or black team operations, by searching for the presence of specific strings such as "NativePayload_IP6DNS" and "AssemblyTitle" within executable files. The rule applies to files that are identified as Portable Executable (PE) based on specific header values, ensuring that the targeted tools are accurately identified.
  Updated-Date: '2024_08_07'
HKTL_NET_NAME_NativePayload_ReverseShell:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9f2bb620f585c716b7bb4daeaf37b2ab
  Ruleset: securityonion-yara
  Summary: This rule detects .NET-based red and black-team tools by looking for the specific name "NativePayload_ReverseShell" and the string "AssemblyTitle" within executable files. The condition is satisfied if these strings are found in a file with the standard header signatures of a Windows executable.
  Updated-Date: '2024_08_07'
HKTL_NET_NAME_NativePayload_Reverse_tcp:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 377ec164805ae2d7736ae68e9d06b71d
  Ruleset: securityonion-yara
  Summary: This rule detects .NET red-team or black-team tools named "NativePayload_Reverse_tcp." It identifies files with a specific portable executable (PE) header and looks for the strings "NativePayload_Reverse_tcp" and "AssemblyTitle" in both ASCII and wide character sets within the file. This ensures the rule targets software specifically tailored for reverse TCP payload activities, which are commonly used in penetration testing and malicious activities to gain remote control over a system.
  Updated-Date: '2024_08_07'
HKTL_NET_NAME_PandaSniper:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2f7d199088dc5b99dd039995c047d115
  Ruleset: securityonion-yara
  Summary: This rule detects .NET tools named "PandaSniper," which are commonly associated with red-team and black-team penetration testing activities. It identifies the presence of these tools by checking for the occurrence of the string "PandaSniper" and the term "AssemblyTitle" in the executable files, specifically those with the typical PE file header.
  Updated-Date: '2024_08_07'
HKTL_NET_NAME_RAT_NjRat_0_7d_modded_source_code:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5f3bf5b2e31cd56626627fcc37bca09d
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the NjRat 0.7d Remote Access Trojan (RAT) by identifying specific markers in its .NET modded source code. It looks for unique strings such as "RAT-NjRat-0.7d-modded-source-code" and "AssemblyTitle," while verifying that the file has a valid PE (Portable Executable) header. These attributes help identify potentially malicious activities linked to this specific RAT, which is often used by red and black teams for remote administration and control of compromised systems.
  Updated-Date: '2024_08_07'
HKTL_NET_NAME_RdpThief:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7f8fc1b2cfdf3cf09d4e9c66d345b1a5
  Ruleset: securityonion-yara
  Summary: This rule detects a .NET-based red/black team tool called RdpThief by looking for specific strings within the executable, such as "RdpThief" and "AssemblyTitle," and confirms the presence of these identifiers by checking for the characteristics of a PE (Portable Executable) file header.
  Updated-Date: '2024_08_07'
HKTL_NET_NAME_Recon_AD:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9d64649fb78f16177b360b1120d7673d
  Ruleset: securityonion-yara
  Summary: This rule detects a .NET tool named Recon-AD used by red or black teams. It searches for specific strings such as "Recon-AD" and "AssemblyTitle" within executable files, and confirms that the file format is a valid PE (Portable Executable) file by checking specific binary headers.
  Updated-Date: '2024_08_07'
HKTL_NET_NAME_RemoteProcessInjection:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: de67ded786218c736f904e06d16bd2e8
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of .NET tools used in red and black team operations, specifically targeting a tool named "RemoteProcessInjection." It identifies the tool through specific string patterns in the binary, such as "RemoteProcessInjection" and "AssemblyTitle," ensuring the file also meets the identifiable characteristics of a PE (Portable Executable) file format.
  Updated-Date: '2024_08_07'
HKTL_NET_NAME_RevengeRAT_Stub_CSsharp:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b708e0aae14f8f54fd475e25aee19a2d
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a .NET tool named "RevengeRAT-Stub-CSsharp" by matching specific strings associated with the tool, such as "RevengeRAT-Stub-CSsharp" and "AssemblyTitle". The tool is identified through its unique characteristics within the binary header, ensuring accurate detection by confirming that all conditions are met.
  Updated-Date: '2024_08_07'
HKTL_NET_NAME_RunasCs:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 513e3d33426888b32e942f2f0a66ab67
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of "RunasCs," a .NET tool commonly used by red and black teams for privilege escalation. It identifies the tool by checking for specific strings such as "RunasCs" and "AssemblyTitle" within files that match the format of a Windows executable, indicated by specific header values.
  Updated-Date: '2024_08_07'
HKTL_NET_NAME_SharPyShell:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 98f7672164b6f07d744378ee0a0c989f
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the .NET tool "SharPyShell" used by red and black teams for penetration testing or exploitation activities. It identifies specific strings within the binary, such as "SharPyShell" and "AssemblyTitle," combined with PE file format checks, to confirm the detection.
  Updated-Date: '2024_08_07'
HKTL_NET_NAME_SharpBuster:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 026f2c47df8e95df29a0c9854275503c
  Ruleset: securityonion-yara
  Summary: This rule detects .NET software associated with red or black team activities by identifying tools named "SharpBuster." It specifically looks for the ASCII or wide character string "SharpBuster" and the presence of the term "AssemblyTitle" in the code. Additionally, it checks that the file conforms to the PE file format by verifying the MZ and PE headers.
  Updated-Date: '2024_08_07'
HKTL_NET_NAME_SharpCat:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 511095abc9be219a428f73573b4ef333
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of .NET red or black-team tools, specifically identifying the SharpCat tool by looking for the strings "SharpCat" and "AssemblyTitle" within executable files. The detection is confirmed if the file header matches the standard format for a Windows executable.
  Updated-Date: '2024_08_07'
HKTL_NET_NAME_SharpHose:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4b91b0663293adb3722ed3b8a074339b
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a .NET-based tool named "SharpHose," which is associated with red team and black team activities. The identification is based on specific strings within the file, including "SharpHose" and "AssemblyTitle," while confirming that the file conforms to the structure of a Windows executable.
  Updated-Date: '2024_08_07'
HKTL_NET_NAME_SharpOffensiveShell:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 931fa71779054329e3a1a0be79ac1fca
  Ruleset: securityonion-yara
  Summary: This rule detects .NET red-team and black-team tools by identifying specific strings such as "SharpOffensiveShell" and "AssemblyTitle" within executable files. It specifically looks for executables with the correct magic number and PE header to confirm that the file is a Windows executable.
  Updated-Date: '2024_08_07'
HKTL_NET_NAME_SharpWatchdogs:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 94d3d6062e29071d3c0b22d132bb32e4
  Ruleset: securityonion-yara
  Summary: This rule detects .NET red/black-team tools associated with the name "SharpWatchdogs." It utilizes specific strings related to the tool's name and its assembly title. The condition checks for valid PE (Portable Executable) file headers to confirm the presence of the targeted .NET tool.
  Updated-Date: '2024_08_07'
HKTL_NET_NAME_StageStrike:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e7e458600eaf623fccb2417fd37728fd
  Ruleset: securityonion-yara
  Summary: This rule detects .NET tools associated with red and black team operations by identifying specific strings such as "StageStrike" and "AssemblyTitle" within the file. The rule applies to files starting with the "MZ" header and containing the "PE" signature at the specified offsets, ensuring it targets valid Windows executables that match the criteria.
  Updated-Date: '2024_08_07'
HKTL_NET_NAME_WMIPersistence:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c397c0391305fc0e849e408010a7f29d
  Ruleset: securityonion-yara
  Summary: This rule detects .NET tools commonly used by red and black teams, identified by the specific name "WMIPersistence" and the presence of the string "AssemblyTitle". The condition for detection checks for the structure of a Windows executable file and the existence of these indicative strings.
  Updated-Date: '2024_08_07'
HKTL_NET_NAME_directInjectorPOC:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: cd176851a81cacdea9b31c1dec91b6de
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a .NET-based red or black team tool named "directInjectorPOC." It identifies the tool by recognizing specific strings within the file, particularly "directInjectorPOC" and "AssemblyTitle," both in ASCII and wide format. Additionally, the file must be a Windows executable, verified by checking that the file starts with the "MZ" header and the PE signature.
  Updated-Date: '2024_08_07'
HKTL_NET_NAME_gray_hat_csharp_code:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4bb4588f171a9cbd0e897071d53d2c28
  Ruleset: securityonion-yara
  Summary: This rule detects .NET tools used in red-team/black-team operations by identifying specific strings associated with the "gray_hat_csharp_code" repository. It checks for the names "gray_hat_csharp_code" and "AssemblyTitle" within executable files that have valid PE headers, indicative of .NET assemblies.
  Updated-Date: '2024_08_07'
HKTL_NET_NAME_ibombshell:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3751facb720817b94f9223032266c77e
  Ruleset: securityonion-yara
  Summary: This rule detects .NET tools associated with red and black-team activities by identifying files named "ibombshell" and those containing the string "AssemblyTitle." It specifically looks for executable files with the "MZ" header and the PE signature.
  Updated-Date: '2024_08_07'
HKTL_NET_NAME_metasploit_sharp:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ba1565bfcce973154cd1d9acb5d71c42
  Ruleset: securityonion-yara
  Summary: This rule detects .NET tools used by red and black teams to facilitate security assessments or malicious activities. Specifically, it identifies files with the name "metasploit-sharp" and those that contain the string "AssemblyTitle." The condition checks for these indicators in conjunction with the file structure characteristic of Windows executables, ensuring that both strings are present in legitimate .NET applications.
  Updated-Date: '2024_08_07'
HKTL_NET_NAME_reconness:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ac811e9bad2a23a0f275c7b6b02089c0
  Ruleset: securityonion-yara
  Summary: This rule detects .NET red or black-team tools associated with the "reconness" project. It does so by identifying the presence of the string "reconness" and the "AssemblyTitle" metadata within the executable file. Additionally, it checks for a valid PE file header to confirm the file format.
  Updated-Date: '2024_08_07'
HKTL_NET_NAME_shellcodeTester:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0fe5b1e120322dd1af41281f0d03af3d
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the .NET tool "shellcodeTester," used by red and black teams for security testing purposes. It identifies this tool by searching for specific strings within executables, such as "shellcodeTester" and "AssemblyTitle," and checks for the PE file format signature to confirm the file type.
  Updated-Date: '2024_08_07'
HKTL_NET_NAME_trevorc2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3df16a0de3630e3496b4b5a911159eac
  Ruleset: securityonion-yara
  Summary: "This rule detects instances of the TrevorC2 tool, which is used by red and black teams for command and control operations, by identifying the presence of specific strings such as \"trevorc2\" and \"AssemblyTitle\" in files. These strings indicate the presence of this particular .NET tool. The rule relies on verifying the file\u2019s PE (Portable Executable) header to ensure it matches known characteristics of Windows executables, thereby precisely identifying the tool."
  Updated-Date: '2024_08_07'
HKTL_NET_NAME_tvasion:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b19a46dbe0074e871cad95c478f493d7
  Ruleset: securityonion-yara
  Summary: This rule detects .NET red/black-team tools by identifying specific naming patterns and attributes in the binary files. It searches for the string "tvasion" within the file, as well as for the presence of the "AssemblyTitle" attribute. The rule activates if these strings are found within a Portable Executable (PE) file, indicating the potential use of the .NET tool named Tvasion.
  Updated-Date: '2024_08_07'
HKTL_NET_NAME_weevely3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e4b29bbc41415387d39b02919cf58f97
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a .NET executable related to the "Weevely3" web shell tool by identifying the string "weevely3" and the .NET assembly attribute "AssemblyTitle" within the file. The condition verifies that the file is a Portable Executable (PE) format specific to Windows systems before confirming the presence of these strings.
  Updated-Date: '2024_08_07'
HKTL_NET_NAME_xbapAppWhitelistBypassPOC:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b0756c0adcf9cf92559a71d404774952
  Ruleset: securityonion-yara
  Summary: This rule detects a .NET red/black-team tool named "xbapAppWhitelistBypassPOC" by identifying specific characteristics. It looks for the string "xbapAppWhitelistBypassPOC" and the term "AssemblyTitle" within the file, ensuring the file is a Windows executable by checking for the "MZ" and "PE" headers.
  Updated-Date: '2024_08_07'
HKTL_NativeCmd_subTee_Jul15:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 22715ecd2baff0209e7d3031b8f54074
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of specific strings and patterns associated with the NativeCmd tool, which has been utilized by various threat groups. It searches for specific error messages related to the failure of finding and executing system commands and checks for file extensions like .com, .exe, .bat, and .cmd. The rule also looks for particular formatting and command-line syntax used by the tool, indicating its activity within a system.
  Updated-Date: '2024_08_07'
HKTL_Nishang_PS1_Invoke_PowerShellTcpOneLine:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4a219e22607c48d23d0369b531594b1e
  Ruleset: securityonion-yara
  Summary: This rule detects the execution of a PowerShell one-liner from the Nishang repository that facilitates TCP connectivity using the Invoke-PowerShellTcpOneLine.ps1 script. It identifies specific ASCII wide-encoded strings related to encoding bytes and setting up a network stream, as well as the instantiation of a TCPClient object with a specified IP address. These strings collectively indicate the script's intention to establish a TCP connection for potentially malicious purposes.
  Updated-Date: '2024_08_07'
HKTL_NoPowerShell:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d2567de91089437c4ba1ba6f8ca1922c
  Ruleset: securityonion-yara
  Summary: This rule detects the NoPowerShell hack tool, which is an alternative to PowerShell designed to execute WMI and other management tasks without relying on the PowerShell executable. It searches for specific strings within files, such as references to "NoPowerShell.pdb," commands like "Invoke-WmiMethod -Class Win32_Process -Name Create \"cmd," and various listing commands related to system directories and files. Additionally, it looks for references to "NoPowerShell.exe."
  Updated-Date: '2024_08_07'
HKTL_PS1_PowerCat_Mar21:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4f36b6fe02627a487592436df195f9f3
  Ruleset: securityonion-yara
  Summary: This rule detects the PowerCat hacktool, a versatile PowerShell tool used for networking utilities and facilitating reverse shells. It identifies specific strings within a file that are characteristic of PowerCat's operation, such as command usage for listening on a port and executing encoded payloads. Additionally, the rule checks for signs of encoded data returns and command execution patterns, ensuring that at least one of the primary signature strings or a combination of other relevant strings is present in a file smaller than 200KB, with a specific header signature.
  Updated-Date: '2024_08_07'
HKTL_PowerKatz_Feb19_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 46769ceeafcb544dee57f39933409d51
  Ruleset: securityonion-yara
  Summary: 'This rule detects a tool used in the Australian Parliament House network compromise by identifying the presence of specific strings. It looks for "Powerkatz32" or "Powerkatz64" in both ASCII and wide character encodings and checks for particular error messages such as "GetData: not found taskName" and "GetRes Ex:".'
  Updated-Date: '2024_08_07'
HKTL_PowerSploit:
  Created-Date: '2024_08_06'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 555eb0522583a9112f113d1836fa4623
  Ruleset: securityonion-yara
  Summary: This rule detects specific strings commonly used by PowerSploit, a post-exploitation framework designed for penetration testing and red teaming, to establish persistence on a compromised system. The rule identifies the presence of the term "function," alongside parameters involved in creating scheduled tasks upon user logon, and modifications to the Windows registry key associated with autorun programs.
  Updated-Date: '2024_08_06'
HKTL_Python_sectools:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: bd2c1bbd368839c173d21ebcfaed5fea
  Ruleset: securityonion-yara
  Summary: This rule detects the usage of the Python library "sectools," which may include specific import statements such as "from sectools" or "import sectools."
  Updated-Date: '2024_08_07'
HKTL_RedMimicry_Agent:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a66490543f28f0d788dc76a712333d2e
  Ruleset: securityonion-yara
  Summary: This rule detects the RedMimicry agent by identifying specific strings and patterns associated with its executable and payload. It looks for registry paths such as "HKEY_CURRENT_USER," "HKEY_LOCAL_MACHINE," "HKEY_CURRENT_CONFIG," and "HKEY_CLASSES_ROOT." Additionally, it searches for the presence of "C:\\Windows\\System32\\cmd.exe," as well as certain Lua script references like "client_recv" and "client_send," and a Lua version indicator. The rule also checks for the usage of the "VirtualAllocEx" function and references to "kernel32.dll."
  Updated-Date: '2024_08_07'
HKTL_RedMimicry_WinntiLoader:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5ff70ff3ce81c7d96935d4aff363ce3f
  Ruleset: securityonion-yara
  Summary: This rule detects the Winnti 'Cooper' loader version associated with the RedMimicry breach emulation. The conditions for detection include specific strings such as "Cooper" and "stone64.dll," as well as a distinct sequence of assembly code representing a decoding loop. These identifying characteristics enable the rule to flag instances of this particular loader in software environments.
  Updated-Date: '2024_08_07'
HKTL_Reverse_Connect_TCP_PTY_Shell:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 13e5b76a79450ceb846a2352ce4d5963
  Ruleset: securityonion-yara
  Summary: This rule detects a reverse connect TCP PTY shell by identifying specific Python code patterns. It looks for the presence of commands that duplicate socket file descriptors, spawn a pseudo-terminal, set environment variables to disable history logging, and establish an internet socket connection using TCP. These patterns are indicative of a reverse shell script that allows remote command execution by connecting back to an attacker's machine.
  Updated-Date: '2024_08_07'
HKTL_RustHound:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ec8de80d63a48be9c58f469ac0c4a51b
  Ruleset: securityonion-yara
  Summary: This rule detects the hacktool RustHound, which is a clone of Sharphound. It identifies files that are either PE (Portable Executable) or ELF (Executable and Linkable Format) and contain specific strings associated with RustHound, such as "rusthound" and "Making json/zip files finished!" in either ASCII or wide encoding.
  Updated-Date: '2024_08_07'
HKTL_SentinelOne_RemotePotato0_PrivEsc:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: de90a301385081919c05002efc269c07
  Ruleset: securityonion-yara
  Summary: This rule detects the RemotePotato0 binary by identifying specific import functions, CLSID values, and a unique header within executables. It focuses on the presence of the "CoGetInstanceFromIStorage" import function, specific CLSID values like "{00000306-0000-0000-c000-000000000046}" and "{5167B42F-C111-47A1-ACC4-8EABE61B0B54}", as well as a unique sequence "4d 45 4f 57" labeled as the "meow_header". The rule is designed to match on executables starting with the "MZ" header, indicating a Windows Portable Executable (PE) format. This helps in detecting the RemotePotato0 privilege escalation tool, which exploits DCE/RPC NTLM relay vulnerabilities.
  Updated-Date: '2024_08_07'
HKTL_Solarwinds_credential_stealer:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c70eec0788a2b58a01fdd31957ca3d2b
  Ruleset: securityonion-yara
  Summary: This rule detects SolarWinds credential stealers, including SolarFlare, by identifying specific certificate names, file paths, and database columns related to credential storage and access. It looks for the presence of a certificate with the common name "SolarWinds-Orion," as well as several file paths associated with storing and accessing credentials in the SolarWinds environment. Additionally, it searches for database columns that typically store sensitive information, such as encrypted keys, protection types, credential properties, password hashes, credential types, and password salts. These indicators help identify activities related to credential theft within SolarWinds software.
  Updated-Date: '2024_08_07'
HKTL_SqlMap:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0de29bacccbc21d501342670c051cbb9
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the sqlmap hacktool, which is an open-source penetration testing tool used for automating the process of detecting and exploiting SQL injection flaws. The rule identifies specific code patterns within a file, including the existence of certain function calls related to command line options and configurations for dumping data. The file must be smaller than 50 KB for the rule to apply.
  Updated-Date: '2024_08_07'
HKTL_SqlMap_backdoor:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e3a797576ab14e2c95506b53b6eb4c97
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of SqlMap backdoors by checking for specific 32-bit values at the beginning of a file and ensuring the file size is less than 2KB. SqlMap is a popular open-source penetration testing tool used for automating the process of detecting and exploiting SQL injection vulnerabilities.
  Updated-Date: '2024_08_07'
HKTL_Unknown_CN_Generate:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3b132240ae7e98da901d528e7c288e26
  Ruleset: securityonion-yara
  Summary: This rule detects a Chinese hacktool named Generate.exe by identifying specific strings and file properties associated with the tool. The detected strings include file path indicators such as "C:\\TEMP\\", network connection messages like "Connection Closed Gracefully.;Could not bind socket. Address and port are already", FTP-related prompts like "$530 Please login with USER and PASS." and "ftpcWaitingPassword", as well as the executable name "_Shell.exe". The file must also meet certain conditions, such as having a specific file header and a size less than 2000KB.
  Updated-Date: '2024_08_07'
HKTL_Unknown_Feb19_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: df13233a4651887863e8c05777e1c192
  Ruleset: securityonion-yara
  Summary: This rule detects a tool implicated in the Australian Parliament House network compromise. It looks for specific error messages and patterns related to invalid timeout, host, port, and ping count formats. Additionally, it searches for indicators like formatted ping results and storage paths pointing to the Windows temp directory, which suggest abnormal activity linked to this compromise tool.
  Updated-Date: '2024_08_07'
HKTL_Unlicensed_CobaltStrike_EICAR_Jul18_5:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1fcc50234cdb37b4930c8c753fbaf588
  Ruleset: securityonion-yara
  Summary: This rule detects specific strings associated with CobaltStrike shellcode. Notable indicators include the EICAR test file string and a particular library file named "libgcj-12.dll." The rule applies to executable files under 900KB and employs conditions such as a specific PE import hash or the presence of certain defined string patterns.
  Updated-Date: '2024_08_07'
HKTL_Venom_LIB_Dec22:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c951ba36613575f03fd31bf0d05fcb25
  Ruleset: securityonion-yara
  Summary: This rule detects Venom, a library designed for evasive communication by utilizing stolen browser sockets. It identifies specific strings and patterns associated with Venom, such as the creation of hidden Microsoft Edge processes and communication via "WS2_32.dll" and "WSASocketW". Additionally, the rule looks for specific hexadecimal patterns and conditions indicating the presence of Venom within files smaller than 500KB. The aim is to uncover the operations related to hidden browser manipulation and unauthorized data transmission.
  Updated-Date: '2024_08_07'
HKTL_beRootexe:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 11774c76cc1b7e8e6545cea84fd203fb
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of beRoot.exe, a tool designed to identify common misconfigurations in Windows environments. It does so by searching for specific strings within the file that indicate the presence of beRoot.exe and related components, ensuring that the file matches certain criteria, including its size and structure.
  Updated-Date: '2024_08_07'
HKTL_beRootexe_output:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2eb34ae9bcbbd04a7f84b4ac08c2f3e4
  Ruleset: securityonion-yara
  Summary: This rule detects the output generated by beRoot.exe, a post-exploitation tool used for privilege escalation and security auditing on Windows systems. It identifies specific strings within files smaller than 400KB, such as references to permissions changes, full paths to system executables like `msiexec.exe` and `svchost.exe`, and the unique string "! BANG BANG !". The detection focuses on monitoring potentially suspicious activities indicative of beRoot.exe's execution to gather information on misconfigurations or security weaknesses.
  Updated-Date: '2024_08_07'
HKTL_htran_go:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 49fe71ea8da5b39586f647371a8814d5
  Ruleset: securityonion-yara
  Summary: This rule detects a Go-based variant of Htran, a tool commonly used for redirecting network traffic to bypass firewall restrictions or masking the true endpoint of network communications. It identifies specific strings within the code related to Htran operations, such as references to the NATBypass GitHub repository and command-line parameters typical of Htran usage scenarios, including options for defining slave and tran ports. The rule applies to files with a specific header and size, ensuring it focuses on potential Htran binaries.
  Updated-Date: '2024_08_07'
HKTL_mimikatz_icon:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: fac43063589108ac26d98753a35500d3
  Ruleset: securityonion-yara
  Summary: This rule detects a specific icon within a PE (Portable Executable) file associated with the mimikatz tool. Mimikatz is a well-known post-exploitation tool used for extracting plaintexts passwords, hash, PIN codes, and Kerberos tickets from memory. The detection is based on a hexadecimal pattern that matches an icon used by mimikatz, ensuring the file is not larger than 10MB and has the typical characteristics of a PE file.
  Updated-Date: '2024_08_07'
HKTL_mimikatz_memssp_hookfn:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8624a5dde30f8d2cd6c31640f917fe44
  Ruleset: securityonion-yara
  Summary: This rule detects the default Mimikatz memssp module operating in memory, specifically focusing on a distinct pattern within the credentials logging function.
  Updated-Date: '2024_08_07'
HKTL_shellpop_Netcat_UDP:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5f623ef39783f2b54df3889ba006403b
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a suspicious netcat shell execution, specifically targeting instances where netcat is used in UDP mode to create a reverse shell. The detection is based on the presence of certain command strings ("mkfifo fifo ; nc.traditional -u" and "< fifo | { bash -i; } > fifo") in files smaller than 1KB.
  Updated-Date: '2024_08_07'
HKTL_shellpop_PHP_TCP:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8fa9e3cb0302ef4e89f48d955a2a6646
  Ruleset: securityonion-yara
  Summary: This rule detects a malicious PHP shell, specifically targeting code that opens a network socket and executes a Unix shell command. It looks for PHP scripts containing the phrase "php -r \"\\$sock=fsockopen" and ";exec('/bin/sh -i <&3 >&3 2>&3');\"" within files smaller than 3KB in size. This behavior is indicative of a reverse shell, which attackers commonly use for unauthorized remote access.
  Updated-Date: '2024_08_07'
HKTL_shellpop_Perl:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6dc8a58517b29d42315a7f8eba1e7d98
  Ruleset: securityonion-yara
  Summary: This rule detects the Shellpop Perl script, which is a tool used for creating reverse shells. The script includes specific Perl code snippets, such as initiating internet sockets and redirecting input/output streams. It targets files smaller than 2KB that contain these distinct code patterns.
  Updated-Date: '2024_08_07'
HKTL_shellpop_Powershell_TCP:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: fee10b3ddf446029dcf9241200f42216
  Ruleset: securityonion-yara
  Summary: This rule detects a malicious PowerShell script, specifically from the ShellPop tool, by identifying certain distinctive strings such as error messages during command execution and specific byte manipulation commands. It triggers when the file size is smaller than 3KB and contains at least one of the identified patterns.
  Updated-Date: '2024_08_07'
HKTL_shellpop_Python:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 247d64761c3a9a030122348773dfb961
  Ruleset: securityonion-yara
  Summary: This rule detects a potentially malicious Python script designed to manipulate shell history by setting the HISTFILE environment variable to /dev/null. This action prevents logging of commands entered in the shell, typically used to obfuscate activity. The condition is met if the file size is less than 2KB and the identified string is present.
  Updated-Date: '2024_08_07'
HKTL_shellpop_TCLsh:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b8eef912800fb2dc34b379595eccf08c
  Ruleset: securityonion-yara
  Summary: This rule detects suspicious activity associated with TCLsh popshell, specifically looking for a pattern in which the script sets up a command execution environment, prompting input with "shell>", and subsequently using the 'exec' command to execute the provided input. This detection aids in identifying potential malicious usage of the TCLsh scripting language associated with a known shell utility.
  Updated-Date: '2024_08_07'
HKTL_shellpop_Telnet_TCP:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4063d192e6a4b58ea4cbd509320b1ba9
  Ruleset: securityonion-yara
  Summary: This rule detects a malicious Telnet shell associated with the ShellPop tool. It focuses on identifying specific patterns in files smaller than 3 KB, such as bash commands that manipulate temporary files (/tmp/f) which is often indicative of unauthorized remote shell operations.
  Updated-Date: '2024_08_07'
HKTL_shellpop_awk:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f9179f7a795d548afa363c225ccf710b
  Ruleset: securityonion-yara
  Summary: This rule detects malicious activity associated with AWK scripts from the Shellpop framework, specifically focusing on patterns that indicate the establishment of network connections and persistent looping behavior in the code. The rule alerts when a file smaller than 1KB contains indicative strings such as an AWK command initiating a TCP connection and a while loop operating indefinitely.
  Updated-Date: '2024_08_07'
HKTL_shellpop_netcat:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8581598ab51137e9a371d53e7f8926b2
  Ruleset: securityonion-yara
  Summary: This rule detects suspicious activity related to the usage of Netcat for creating shell access. Specifically, it identifies typical shell commands used by Netcat, such as the creation of named pipes and the redirection of shell input/output to those pipes. This pattern demonstrates an attempt to establish a reverse shell, which could potentially allow unauthorized remote access to a system. The rule is triggered by recognizing particular Netcat command signatures in small-sized files, hinting at malicious shell operations.
  Updated-Date: '2024_08_07'
HKTL_shellpop_ruby:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f785b950b96ac612d06f8405fe15e1ed
  Ruleset: securityonion-yara
  Summary: This rule detects a suspicious Ruby script associated with ShellPop, an open-source tool for generating reverse shells. It identifies a specific string pattern commonly used in such scripts to facilitate the execution of commands through a popen method, checking that the file size is less than 1KB to target compact malicious payloads.
  Updated-Date: '2024_08_07'
HKTL_shellpop_socat:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e6c6040879ffc8148d7a3fb83bd290ea
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a potentially malicious "socat" usage aimed at creating a reverse shell. It identifies specific command-line arguments used by "socat," such as "tcp-connect" and various terminal options (pty, stderr, setsid, sigint, sane), within files smaller than 1KB in size. This combination of strings is indicative of a suspicious "socat" popshell operation, commonly associated with certain hacking tools.
  Updated-Date: '2024_08_07'
HScan_v1_20_PipeCmd:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c6f5e300b6425b2e6eb356c228c78cd8
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the Chinese hacktool "PipeCmd.exe," which is associated with the executable "PipeCmdSrv.exe." The tool appears to function as a service executable and seems to involve operations with named pipes (indicated by strings using "\\\\.\\pipe\\" patterns). Additionally, it includes specific error messages related to remote server connection failures and requires another executable, "NTCmd.exe," to run it. The detection focuses on several unique strings, including references to system directories and service pipe handles.
  Updated-Date: '2024_08_07'
HScan_v1_20_hscan:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0f445406fbbf10e79a4f4719261b608e
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a Chinese hacktool known as hscan.exe, which is identified by specific string patterns and a particular file hash. The tool appears to scan network ranges for FTP accounts and Cisco enable passwords, and it logs results in HTML and log files. Strings indicating the tool's activities, such as detecting FTP credentials or generating reports, trigger the rule when found in executable files smaller than 200KB.
  Updated-Date: '2024_08_07'
HTA_Embedded:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e1acd88bd8b4fa33c5bd0919baf555c9
  Ruleset: securityonion-yara
  Summary: This rule detects an embedded HTA file by identifying the specific string "<hta:application windowstate=\"minimize\"/>" within the content. The detection is scoped to ignore instances of this string that appear within the first 50,000 bytes of the file, ensuring only deeply embedded HTA files are flagged.
  Updated-Date: '2024_08_07'
HTA_with_WScript_Shell:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 84b94f325a24b8943e2970f000bdadd0
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of WScript Shell in HTA (HTML Application) files by identifying specific patterns in the content. It searches for an HTA application element that is set to minimize the window state and a script that creates an ActiveX object instance of WScript.Shell, signaling potential malicious behavior often associated with executing commands or scripts on Windows systems.
  Updated-Date: '2024_08_07'
HTKL_BlackBone_DriverInjector:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: dd38d44bbfa59ccf40a05db1b8eef553
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of BlackBone, a tool used for DLL injection and manipulation at the kernel level in Windows operating systems. Indicators of this tool include specific strings related to its operations, such as "BBInjectDll," "LdrLoadDll," and error messages associated with loading DLLs and kernel base address retrieval failures. It also looks for unique identifiers like "BlackBoneDrv" directories and specific formatted error messages indicating injection status and invalid injection types. The rule targets executable files with particular size constraints to identify the BlackBone Driver injector effectively.
  Updated-Date: '2024_08_07'
HTTPSCANNER:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2ecf9b1de9dc790da3d4efa436d077fa
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of "HTTPSCANNER.EXE," a Chinese hacking tool. The tool, identified by the hash "ae2929346944c1ea3411a4562e9d5e2f765d088a," is recognized by specific string identifiers such as "HttpScanner.exe" and "HttpScanner" within the file. The file must begin with the magic number "0x5a4d" and be smaller than 3500KB in size.
  Updated-Date: '2024_08_07'
HYTop2006_rar_Folder_2006:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 37b0d4e22b9488d07a7e80e43d97b53f
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a webshell file named "2006.asp" by identifying a specific string "strBackDoor = strBackDoor" within the file. This webshell could be used for unauthorized backdoor access to a compromised web server.
  Updated-Date: '2024_08_07'
HYTop2006_rar_Folder_2006X:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6eea82b9bcbf9dc4c93f6ceb4ef24a31
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a web shell auto-generated file, specifically targeting `2006X.exe`. It identifies the malicious software by searching for specific HTML input fields within the code, including an input field for a password and another input field for an action type. The detection is based on matching these unique string patterns to confirm the presence of the web shell.
  Updated-Date: '2024_08_07'
HYTop2006_rar_Folder_2006X2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a9b61201a5b58b443fa2c577997f6ba1
  Ruleset: securityonion-yara
  Summary: This rule detects a specific webshell auto-generated file named "2006X2.exe," which may be associated with malicious activities. The file is identified using a unique hash value, and the detection criteria include specific strings such as "Powered By " and a sequence used in onClick events within the webshell's code, indicating the possibility of credential handling or form manipulation.
  Updated-Date: '2024_08_07'
HYTop2006_rar_Folder_2006Z:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 689e3fdc03aaa0e9599221df662d4461
  Ruleset: securityonion-yara
  Summary: This rule detects a file named "2006Z.exe" associated with webshells that are auto-generated. It looks for specific strings within the file, such as common names like "wangyong, czy, allen, lcx, Marcos, kEvin1986, myth" and a particular Windows registry path format "System\\CurrentControlSet\\Control\\Keyboard Layouts\\%.8x". The detection is triggered if all specified strings are found within the file.
  Updated-Date: '2024_08_07'
HYTop_AppPack_2005:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 522defde86e28c4a53fe3b27a3f98a69
  Ruleset: securityonion-yara
  Summary: This rule detects a specific webshell file named "2005.asp" associated with HYTop application packaging. It identifies the presence of this webshell by looking for a distinctive script fragment that includes an inline JavaScript function manipulating a form field value with the path to "e:\\hytop.mdb", signaling a potentially malicious database access or manipulation attempt.
  Updated-Date: '2024_08_07'
HYTop_CaseSwitch_2005:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 372614c50366f2d7a994aeeef8f2f2df
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a potentially malicious file named 2005.exe, which is identified as an auto-generated webshell. It specifically looks for strings related to Microsoft's Common Dialog control libraries, Visual Basic for Applications (VBA) error handling, and several method call engine references. The detection focuses on a set of predefined strings, such as "MSComDlg.CommonDialog" and "__vbaExceptHandler," indicative of the webshell's behavior and characteristics.
  Updated-Date: '2024_08_07'
HYTop_DevPack_2005:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0a57147e84a58df4dfc5c1ffab3edb91
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of an auto-generated webshell file named "2005.asp" by identifying specific strings associated with its code structure and CSS styling. These strings include JavaScript code for URL encoding and CSS properties related to scrollbar color customization.
  Updated-Date: '2024_08_07'
HYTop_DevPack_2005Red:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 59bcaa44dbcc56552069635a52b368cc
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the webshell file "2005Red.asp" by identifying specific strings within the file. These strings include a CSS rule for scrollbar color, an HTML anchor tag generation pattern, and a script for manipulating and encoding URLs. The identified webshell is typically auto-generated and could be used maliciously to facilitate unauthorized remote access and control of a web server.
  Updated-Date: '2024_08_07'
HYTop_DevPack_config:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3105220090d1e3163b618f0e09a51aee
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific webshell configuration file named "config.asp". It identifies this file by looking for certain string patterns within its content, such as "const adminPassword=", "const userPassword=", and "const mVersion=". These strings indicate the file contains hardcoded passwords and version information, which are commonly found in auto-generated webshells.
  Updated-Date: '2024_08_07'
HYTop_DevPack_fso:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: fc6b1906b72e232e631ab64f1919078b
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of an auto-generated webshell file, specifically "fso.asp." It looks for specific strings within the file, including a comment marker "<!-- PageFSO Below -->" and a VBScript segment that writes a script line containing the text "if request" associated with client-side input processing. This detection aims to identify potentially malicious scripts embedded within web server pages.
  Updated-Date: '2024_08_07'
HYTop_DevPack_server:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f963fe72a77f65ed2a346791a941f7be
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a webshell specifically in a file named server.asp by identifying a unique string, "<!-- PageServer Below -->", which suggests the webshell is auto-generated.
  Updated-Date: '2024_08_07'
HYTop_DevPack_upload:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3dc6d305d3832b8a64271a6a1ea691e7
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific webshell auto-generated for file uploads, identified by the unique marker string "<!-- PageUpload Below -->" within the script "upload.asp".
  Updated-Date: '2024_08_07'
HackTool_MSIL_CoreHound_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d1db4ce403c5d5714b97b0dfabff17fc
  Ruleset: securityonion-yara
  Summary: This rule detects .NET Portable Executable (PE) files that contain a specific ProjectGuid associated with the 'CoreHound' project. It utilizes the TypeLibGUID, which maps to the ProjectGuid found in the '.csproj' file, to identify .NET binaries related to this project.
  Updated-Date: '2024_08_07'
HackTool_MSIL_GETDOMAINPASSWORDPOLICY_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 073914d192d0e03d7d0caf686efc66ac
  Ruleset: securityonion-yara
  Summary: This rule detects .NET Portable Executable (PE) files associated with the 'getdomainpasswordpolicy' reconnaissance utility by identifying a specific ProjectGuid found in the related .csproj file. It specifically searches for the TypeLibGUID "a5da1897-29aa-45f4-a924-561804276f08" within .NET binaries and ensures the file size is under 10MB while confirming the PE file headers match the expected format for .NET binaries.
  Updated-Date: '2024_08_07'
HackTool_MSIL_HOLSTER_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 119487449bfa5ab35c9a76568951d25c
  Ruleset: securityonion-yara
  Summary: This rule detects .NET PE files associated with a customized version of the 'DUEDLLIGENCE' project by identifying a specific ProjectGuid found both in the TypeLibGUID of a .NET binary and in the '.csproj' file of the .NET project.
  Updated-Date: '2024_08_07'
HackTool_MSIL_INVEIGHZERO_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 15834d83e9f99a82f76bf09804e2afe7
  Ruleset: securityonion-yara
  Summary: This rule detects .NET Portable Executable (PE) files that contain a specific ProjectGuid associated with the 'inveighzero' project. The rule specifically looks for the presence of the TypeLibGUID "113ae281-d1e5-42e7-9cc2-12d30757baf1" within the binary, which directly maps to the ProjectGuid found in the '.csproj' file of the corresponding .NET project. The condition ensures that the PE file signature is valid before checking for the mentioned GUID.
  Updated-Date: '2024_08_07'
HackTool_MSIL_KeeFarce_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4b3594d8525c6bff452b7ee57c15124a
  Ruleset: securityonion-yara
  Summary: This rule detects .NET PE files that contain a specific ProjectGuid associated with the 'KeeFarce' project. KeeFarce is a tool designed to extract information from KeePass password manager databases. The rule identifies the presence of a particular TypeLibGUID within the binary, indicative of its link to the KeeFarce project, thus facilitating the recognition of potentially malicious software created using this tool.
  Updated-Date: '2024_08_07'
HackTool_MSIL_KeePersist_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: cf4cc1086314a84ccfa956e60b86e5f6
  Ruleset: securityonion-yara
  Summary: This rule detects a specific .NET PE file associated with the KeePersist project by identifying the presence of a TypeLibGUID that directly maps to the ProjectGuid in the '.csproj' file of a .NET project.
  Updated-Date: '2024_08_07'
HackTool_MSIL_PXELOOT_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f16998add476777e61b7de90ce4f01bc
  Ruleset: securityonion-yara
  Summary: This rule detects .NET PE files associated with the PXE And Loot project by identifying the TypeLibGUID "78B2197B-2E56-425A-9585-56EDC2C797D6" present in the binary, which maps directly to the ProjectGuid found in the corresponding '.csproj' file.
  Updated-Date: '2024_08_07'
HackTool_MSIL_PXELOOT_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4b96df73697ec1d96617ff733d78af70
  Ruleset: securityonion-yara
  Summary: This rule detects .NET PE files associated with the PXE and Loot code by searching for specific method names and strings. These include "_CorExeMain," "InvestigateRPC," "DhcpRecon," "UnMountWim," "remote WIM image," "DISMWrapper," "findTFTPServer," "DHCPRequestRecon," "DHCPDiscoverRecon," "GoodieFile," "InfoStore," and "execute." The rule checks for the PE file signature and ensures these strings are present within the file to identify the malicious activity.
  Updated-Date: '2024_08_07'
HackTool_MSIL_PrepShellcode_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7f56b7186b4fb2305ac3d8d770203082
  Ruleset: securityonion-yara
  Summary: This rule detects .NET PE files containing a specific TypeLibGUID that corresponds to the ProjectGuid found in the 'PrepShellcode' project. These identifiers are used to link the binary directly to its originating .NET project file ('.csproj'). The detection is based on the presence of the GUID "d16ed275-70d5-4ae5-8ce7-d249f967616c" in the file, ensuring that the .NET binary matches the known metadata for the 'PrepShellcode' project.
  Updated-Date: '2024_08_07'
HackTool_MSIL_PuppyHound_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: cad0f29fc1ac68dd21d556a55c2ecf7c
  Ruleset: securityonion-yara
  Summary: This rule detects the PuppyHound variant of the SharpHound tool, which is used for Active Directory enumeration during penetration testing or cyber reconnaissance. Specific indicators, such as the string "PuppyHound", certain key terms like "UserDomainKey" and "LdapBuilder", a unique initialization pattern, and the presence of .NET Common Language Runtime Main signature, are utilized to identify this variant.
  Updated-Date: '2024_08_07'
HackTool_MSIL_Rubeus_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f8e39ac4b7ead26016ada2b17018a05d
  Ruleset: securityonion-yara
  Summary: This rule detects .NET PE files that are part of the Rubeus project, specifically looking for the ProjectGuid from the public Rubeus project's '.csproj' file within the binary. It identifies the unique TypeLibGUID associated with the project, which is "658C8B7F-3664-4A95-9572-A3E5871DFC06," to flag relevant files.
  Updated-Date: '2024_08_07'
HackTool_MSIL_SAFETYKATZ_4:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c210a5ea16d35261b37cd95ead269eda
  Ruleset: securityonion-yara
  Summary: This rule detects .NET PE files associated with the SafetyKatz project by looking for a specific TypeLib GUID found in the SafetyKatz public project. The TypeLib GUID in the binary should match a known ProjectGuid from the '.csproj' file in a .NET project.
  Updated-Date: '2024_08_07'
HackTool_MSIL_SEATBELT_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 29ab4d1a63b34529ca0ef9219e27a115
  Ruleset: securityonion-yara
  Summary: This rule detects .NET PE files associated with the public tool SeatBelt by searching for specific regex patterns and format strings. It identifies custom variants of the SeatBelt project by examining unique strings and characteristics commonly used within the tool. These include specific patterns in process paths, command-line arguments, domain and name formats, logon IDs, file paths, and URLs that indicate potential usage or modification of SeatBelt.
  Updated-Date: '2024_08_07'
HackTool_MSIL_SEATBELT_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 40c4c77e66b87b6bc7a8198b91f58e87
  Ruleset: securityonion-yara
  Summary: This rule detects .NET PE files associated with the SeatBelt tool by identifying the presence of a specific TypeLibGUID within the binary, which maps to a ProjectGuid found in the .csproj file of the public SeatBelt project. The SeatBelt tool is a post-exploitation tool used to perform security audits on Windows environments.
  Updated-Date: '2024_08_07'
HackTool_MSIL_SHARPZEROLOGON_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b3560c819396a46cf346f1fcea4a8619
  Ruleset: securityonion-yara
  Summary: This rule detects .NET Portable Executable (PE) files that contain a specific ProjectGuid associated with the public 'sharpzerologon' project. The presence of the TypeLibGUID in these binaries indicates a direct mapping to the ProjectGuid found in the corresponding '.csproj' file of a .NET project. The rule is designed to identify files related to the 'sharpzerologon' project by searching for the unique GUID.
  Updated-Date: '2024_08_07'
HackTool_MSIL_SharPersist_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2cf47481062131b30a9092eb5813750c
  Ruleset: securityonion-yara
  Summary: This rule detects .NET Portable Executable (PE) files associated with the SharPersist project by identifying a specific ProjectGuid found in the project's '.csproj' file. It searches for the presence of the TypeLibGUID "9D1B853E-58F1-4BA5-AEFC-5C221CA30E48" within .NET binaries, which directly correlates to SharPersist, a tool that can be employed for maintaining persistence on compromised systems.
  Updated-Date: '2024_08_07'
HackTool_MSIL_SharPersist_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f74f2dc077d911383069b02a133e9014
  Ruleset: securityonion-yara
  Summary: This rule detects the HackTool known as MSIL SharPersist. It identifies this tool by looking for specific strings within the executable, such as "SharPersist.lib" and "SharPersist.exe," as well as error messages related to invalid hotkeys and missing Keepass configuration files. Additionally, it checks for specific patterns in the Program Database (PDB) path, like "\\SharPersist\\" and "\\SharPersist.pdb." The tool is associated with persistence mechanisms in systems, and its detection is crucial for identifying potentially harmful persistence tactics used by cyber attackers.
  Updated-Date: '2024_08_07'
HackTool_MSIL_SharPivot_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: db8286d03f7206df23c290002e0f5a14
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the HackTool MSIL SharPivot by identifying specific hexadecimal patterns and string values within executable files. It looks for files that start with the "MZ" header and have a "PE" signature at the appropriate file offset, which are indicators of a Windows executable file. Additionally, it searches for specific byte sequences and the presence of the strings "cmd_rpc" and "costura" within the file, which are associated with the SharPivot tool used in cyber attacks.
  Updated-Date: '2024_08_07'
HackTool_MSIL_SharPivot_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 95ade62ee2b5676a43778d662269fe5c
  Ruleset: securityonion-yara
  Summary: This rule detects the FireEye SharPivot tool by examining specific markers in the file. It searches for embedded strings such as "costura", various command-related keywords like "cmd_schtask", "cmd_wmi", and "cmd_rpc", and other identifiers such as "GoogleUpdateTaskMachineUA", "servicehijack", and "poisonhandler". The rule is activated when the file starts with the common executable headers and contains all these strings, indicating the presence of the SharPivot tool used for task scheduling, Windows Management Instrumentation (WMI), and other operations.
  Updated-Date: '2024_08_07'
HackTool_MSIL_SharPivot_3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3397e4a05e1def47b2251f8c10a6b06f
  Ruleset: securityonion-yara
  Summary: This rule detects .NET Portable Executable (PE) files associated with the SharPivot hacking tool. It identifies these files by searching for specific strings within the code, such as method names like "ParseArgs," "GenRandomString," "ScheduledTaskExists," "ServiceExists," and keywords like "SharPivot," "WinRM," "SCShell," "SchtaskMod," "ServiceHijack," "commandArg," and "payloadPath." These identifiers are linked to functionalities within the SharPivot tool, suggesting that files containing these strings are likely to be using or mimicking this particular hacking utility.
  Updated-Date: '2024_08_07'
HackTool_MSIL_SharPivot_4:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4d2b7f566b40250cc76aae46baafad91
  Ruleset: securityonion-yara
  Summary: This rule detects .NET PE files that include a specific TypeLibGUID, which correlates to the ProjectGuid identified in the SharPivot project. The presence of this GUID can indicate that the file is associated with the SharPivot hacking tool, which is pertinent to the context of a cyberattack detailed by FireEye. This specific GUID acts as an identifier within .NET binaries to uncover this particular hacking tool.
  Updated-Date: '2024_08_07'
HackTool_MSIL_SharpHound_3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: fc69447ae053621dad6251a7f75e5104
  Ruleset: securityonion-yara
  Summary: This rule detects .NET PE files that contain the ProjectGuid associated with SharpHound3, a tool used for Active Directory enumeration. It identifies the presence of a specific TypeLibGUID within the binary, which matches a ProjectGuid from the public SharpHound3 project, targeting the unique identifier "A517A8DE-5834-411D-ABDA-2D0E1766539C" in ASCII or wide string format.
  Updated-Date: '2024_08_07'
HackTool_MSIL_SharpSchtask_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b1ba64b5b126340843909553c07053a4
  Ruleset: securityonion-yara
  Summary: This rule detects .NET Portable Executable (PE) files associated with the "SharpSchtask" project by identifying the presence of a specific ProjectGuid within the binary. The focus is on .NET PE files that contain the TypeLibGUID "0a64a5f4-bdb6-443c-bdc7-f6f0bf5b5d6c", which directly maps to the ProjectGuid in the ".csproj" file of the "SharpSchtask" project.
  Updated-Date: '2024_08_07'
HackTool_MSIL_SharpStomp_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: dc491d26ed857eeef107c50f3ab08c2d
  Ruleset: securityonion-yara
  Summary: This rule detects .NET Portable Executable (PE) files associated with the SharpStomp project by identifying a specific TypeLibGUID within the binary. The TypeLibGUID matches the ProjectGuid found in the '.csproj' file used in the SharpStomp project.
  Updated-Date: '2024_08_07'
HackTool_MSIL_WMISharp_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ff0277b0402406965566f0e1bced6243
  Ruleset: securityonion-yara
  Summary: This rule detects .NET PE files that contain a specific ProjectGuid associated with the 'WMISharp' project. It targets the TypeLibGUID embedded in .NET binaries, which corresponds to the ProjectGuid found in the '.csproj' file of a .NET project, indicating that the binary is part of the 'WMISharp' toolset.
  Updated-Date: '2024_08_07'
HackTool_MSIL_WMIspy_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1ff718de8b9c458612b78747409e89d4
  Ruleset: securityonion-yara
  Summary: This rule detects .NET PE files associated with a project known as "WMIspy." It specifically looks for the presence of a TypeLibGUID that corresponds to the ProjectGuid used in the "WMIspy" .NET project. This is identified by the GUID value "5ee2bca3-01ad-489b-ab1b-bda7962e06bb" within the binary, indicating a potential link to the "WMIspy" tool.
  Updated-Date: '2024_08_07'
HackTool_PY_ImpacketObfuscation_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 683534a749a0a886fbc01cf6a1258db8
  Ruleset: securityonion-yara
  Summary: "This rule detects the presence of a hack tool related to \"smbexec\" by identifying specific strings and patterns indicating obfuscated code within a Python script. These indicators include class declarations like \"CMDEXEC\" and \"RemoteShell,\" the usage of \"self.services_names,\" references to importing the \"random\" module, and specific patterns of shell execution and service name assignments. The code snippets and patterns collectively point to potential usage of Impacket\u2019s \"smbexec,\" which is a post-exploitation tool used for executing commands on a remote system through SMB."
  Updated-Date: '2024_08_07'
HackTool_PY_ImpacketObfuscation_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1cd62f945a1353fdcc9976e468f371b7
  Ruleset: securityonion-yara
  Summary: This rule detects the obfuscation used by FireEye's wmiexec impacket, which is a tool for executing commands on remote systems. The detection is based on the presence of specific code patterns including the importation of the 'random' module, the definitions of 'WMIEXEC' and 'RemoteShell' classes, and certain obfuscated string manipulations of time and UUID values. It also identifies patterns associated with execution commands for 'cmd.exe' with specific flags.
  Updated-Date: '2024_08_07'
HackTool_Samples:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 501a0283386128113ff2159e96898b8c
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of various hacktool-related activities and artifacts. It identifies attempts to interact with the Security Accounts Manager (SAM) functionality, such as failures in loading SAM functions, opening SAM hives, or locating LSASS process identifiers. The rule also covers tools and actions related to the dumping of system passwords, unshadowing password files, and using a dictionary attack for password cracking. Additionally, it recognizes specific strings associated with clearing logs, performing ARP spoofing, sending packets with WPEPRO, and interacting with PWDumpX services. The presence of phrases linked to impersonation tokens and specific attacker tools and errors also signifies these malicious activities.
  Updated-Date: '2024_08_07'
HackTool_Win32_AndrewSpecial_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2296ae556a00580fdf7a8ab051d4eec5
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a hack tool known as "AndrewSpecial" targeting Windows systems, characterized by specific hexadecimal patterns in memory. It searches for an executable that starts with the typical "MZ" and "PE" headers, indicative of Windows portable executables, and specifically looks for embedded shellcode sequences within the file. The rule checks for a distinct pattern associated with a memory dump operation and several variations of x86 shellcode. These patterns are indicative of AndrewSpecial's malicious activities, such as execution and memory operations typically employed during exploitation or post-exploit phases.
  Updated-Date: '2024_08_07'
HackTool_Win64_AndrewSpecial_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ecfd2f12923fc259abc43f62662d4a6f
  Ruleset: securityonion-yara
  Summary: This rule detects the AndrewSpecial tool, which is used for process dumping. The detection is based on specific hexadecimal patterns within the executable file that correlate with known shellcode sequences and process dumping code used by AndrewSpecial. The tool operates in a 64-bit Windows environment, as identified by the Portable Executable (PE) format header specifics.
  Updated-Date: '2024_08_07'
HackingTeam_Elevator_EXE:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e3eb407ae568a26a6fd97f0fab638720
  Ruleset: securityonion-yara
  Summary: This rule detects a malicious executable file associated with the Hacking Team's Elevator malware, specifically targeting the file named "elevator.exe." The rule identifies this file by checking for specific strings and patterns in the file's code and structure, including references to "CRTDLL.DLL," paths and filenames like "\\sysnative\\CI.dll" and "C:\\\\Windows\\\\Sysnative\\\\ntoskrnl.exe," and various blacklisted strings such as "[*] traversing processes," "_getkprocess," and "Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3." The rule specifically checks that the file is a valid PE (Portable Executable) file and that its size is less than 3000KB. The inclusion of these specific attributes and checks ensures the accurate identification of the malicious "elevator.exe" used in the Hacking Team breach incident.
  Updated-Date: '2024_08_07'
Hackingteam_Elevator_DLL:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a339318fb22d79649ec8edca2ad679f4
  Ruleset: securityonion-yara
  Summary: This rule detects a file named "elevator.dll" associated with the Hacking Team, which is known for developing lawful interception software. It identifies the DLL by looking for several specific strings within the file, such as paths to "CI.dll" and "insert_cert.exe," along with error messages related to adding certificates and network operations. The rule also checks for the presence of specific command strings like "setx TOR_CONTROL_PASSWORD" and tool names like "mitmproxy0" and validates the file's characteristics by ensuring its size is less than 1000KB and it starts with the "MZ" header typically indicative of Windows executable files.
  Updated-Date: '2024_08_07'
Hacktool_This_Cruft:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9c2615d5c9f7e68ac4a631219d713713
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the string "This cruft," which is often used in hack tools such as netcat and cryptcat. The string is also mentioned in the Project Sauron report. The detection is based on matching the specific string within executable files that have an initial 0x5a4d byte sequence, indicating a Windows executable file format, and are smaller than 200KB in size.
  Updated-Date: '2024_08_07'
Hacktools_CN_445_cmd:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0f5e79319a980d90ad71ffad482ff942
  Ruleset: securityonion-yara
  Summary: This rule detects a specific batch file linked to disclosed hacktools, identified by its initial "@echo off" command, and further commands involving "cs.exe %1" and "nc %1 4444". The condition checks for a particular hexadecimal signature at the beginning and the presence of these strings within the batch file.
  Updated-Date: '2024_08_07'
Hacktools_CN_Burst_Blast:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0e220137aab764e79b28f089760ac83b
  Ruleset: securityonion-yara
  Summary: This rule detects a disclosed hacktool named "Blast.bat," which is part of a hacktool set. The file is identified by specific string indicators that include network and SQL commands. The rule specifically looks for occurrences of "@sql.exe -f ip.txt -m syn -t 3306 -c 5000 -u http:" and "@echo off" within the content of a file. These strings suggest that the hacktool is designed to automate tasks related to SQL servers, possibly executing network scans or initiating commands through SQL in a scripted manner.
  Updated-Date: '2024_08_07'
Hacktools_CN_Burst_Clear:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 89890380912789729ba57691e16a2fc4
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the hacktool set associated with the file 'Clear.bat'. This file includes commands for deleting various types of temporary and log files from the system, directories, and user profiles. Specifically, it targets log files on the system drive, backup files in the Windows directory, and temporary files systemwide. It also removes cookies, temporary files in user profiles, and contents from system recycle bins, as well as other temporary Windows directories. The rule looks for sequences of such file deletion commands to identify the use of this hacktool.
  Updated-Date: '2024_08_07'
Hacktools_CN_Burst_Start:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d86b0901f3bd0c2fdd42da75943dd6e3
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a disclosed hacking toolset related to the file "Start.bat," which is a Denial of Service (DoS) tool. It identifies specific strings within the file, including commands to run batch scripts like "Blast.bat" with various parameters, delete "Result.txt," and initiate other batch files such as "Clear.bat" and "Thecard.bat." The rule also looks for commands involving SYN packets and certain configuration settings within the script.
  Updated-Date: '2024_08_07'
Hacktools_CN_Burst_Thecard:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9c7fc9deeb3aab6eb9dd9bf709bf196a
  Ruleset: securityonion-yara
  Summary: This rule detects a disclosed hacktool known as "Thecard.bat". It identifies the presence of specific strings within a file, such as commands for executing "Clear.bat", a URL referencing "coffeewl.com", local ping commands, scripting loops, and console mode settings. These elements suggest the file is designed to perform automated tasks, potentially related to system manipulation or unauthorized access. The detection is based on matching all specified strings within a file.
  Updated-Date: '2024_08_07'
Hacktools_CN_Burst_pass:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 17d185fdee2518ac95c482d2f9462019
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a disclosed hacktool set by identifying a specific file named "pass.txt." It searches for particular keywords and strings often associated with this hacktool, such as various domain names ("123456.com", "360.com", "google.com"), and common phrases ("changeme", "lionking", "master"), ensuring all listed strings must be present for the rule to trigger.
  Updated-Date: '2024_08_07'
Hacktools_CN_Burst_sql:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4dc333049a46b7cbd27d0a8227fddcc1
  Ruleset: securityonion-yara
  Summary: This rule detects a hacktool known as "sql.exe," which is associated with a disclosed hacktool set. It looks for specific ascii strings within files that indicate the presence and usage of the sql.exe tool. These strings include command-line usage notes, error messages, and commands executed by the tool, such as adding extended procedures or executing shell commands. The rule requires at least six of these specified strings to match for detection, highlighting the tool's functionalities like saving results, handling errors, and employing SQL commands.
  Updated-Date: '2024_08_07'
Hacktools_CN_GOGOGO_Bat:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: abbd2f695db826f3ffece7361f6888fc
  Ruleset: securityonion-yara
  Summary: This rule detects a disclosed hacktool set, specifically targeting the file named GOGOGO.bat. The rule identifies several distinct ASCII strings within the file, such as commands that manipulate the `tcpip.sys` file by renaming and deleting it, references to the domain `www.tzddos.com`, and batch script logic that calls other scripts or alters system configurations. Key activities include executing commands that change network driver files, conditional branching based on specific checks, and copying or deleting files with particular extensions to facilitate malicious actions. The rule triggers if at least three of these strings are present, indicating potential malicious behavior associated with this hacktool set.
  Updated-Date: '2024_08_07'
Hacktools_CN_Http:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c88fbd5b67fe2f378d5bc5352888dbcd
  Ruleset: securityonion-yara
  Summary: This rule detects a hacktool named Http.exe, which is identified through specific strings related to RPC runtime libraries and network connection functions. The presence of these strings, along with a specified file size under 10KB, triggers detection.
  Updated-Date: '2024_08_07'
Hacktools_CN_JoHor_Posts_Killer:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5e3a9e3893b2705652aee4b9802941a2
  Ruleset: securityonion-yara
  Summary: This rule detects a disclosed hacktool named "JoHor_Posts_Killer.exe," which is associated with multithreading capabilities for sending posts. It identifies specific strings within the executable, including HTTP request formats, user-agent details, and references to required files and software keys.
  Updated-Date: '2024_08_07'
Hacktools_CN_Panda_445:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 152fcdcdf6720e4768cf22174d49e774
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific hacktool set associated with a file named "445.rar." It identifies commands and file paths commonly used within the hacktool, such as batch file execution loops, executable files named "nc.exe," "s.exe," "cs.exe," and the presence of files like "ip.txt" and "cmd.bat." These elements collectively indicate the operation of the hacktool, which is designed to perform network-based attacks or unauthorized actions by automating command execution on multiple IP addresses listed in a text file.
  Updated-Date: '2024_08_07'
Hacktools_CN_Panda_445TOOL:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0ff9645ce596a4f0e3adaa2c96d8646f
  Ruleset: securityonion-yara
  Summary: This rule detects a hacktool set identified as 445TOOL, which includes specific files such as "scan.bat," "Http.exe," "GOGOGO.bat," and "ip.txt."
  Updated-Date: '2024_08_07'
Hacktools_CN_Panda_Burst:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 38a4030db90c02b2eddf6f7f905b1c72
  Ruleset: securityonion-yara
  Summary: This rule detects a disclosed hacktool set known as "Panda Burst," associated with the file "Burst.rar." The file contains specific strings related to SQL execution and network scanning tasks, including a command to execute "@sql.exe" with particular parameters targeting IP addresses and port 3306, and a reference to a remote server URL used for task management.
  Updated-Date: '2024_08_07'
Hacktools_CN_Panda_tasksvr:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b9a051aa151c1a250e40026694546e26
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the hacktool file named "tasksvr.exe" by identifying specific strings within the file, such as "Consys21.dll," "360EntCall.exe," and "Beijing1". Detection relies on matching all these defined strings.
  Updated-Date: '2024_08_07'
Hacktools_CN_Panda_tesksd:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 20a2d089e419a6956c5473afb302b492
  Ruleset: securityonion-yara
  Summary: This rule detects a disclosed hacktool set utilizing the file named "tesksd.jpg." It identifies specific indicators including the string "name=\"Microsoft.Windows.Common-Controls\"" in ASCII, the filename "ExeMiniDownload.exe" in wide-character format, and the string "POST %Hs" in ASCII. These indicators need to be present together for the rule to trigger, which points to the presence of this particular hacktool on a system.
  Updated-Date: '2024_08_07'
Hacktools_CN_Scan_BAT:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 14d6a09a1b8b532ae7a1cebc39deae66
  Ruleset: securityonion-yara
  Summary: This rule detects a disclosed hacktool identified by the file name "scan.bat". The tool appears to involve batch file operations that iterate over entries in text files such as "host.txt" and "s2.txt" using loops defined by the 'for' command. It captures output and redirects it to other files like "host.txt" and "s1.txt". Additionally, it executes a process "Http.exe" using the command 'start' and writes its input parameters from previously mentioned text files. The detected activity includes deletion of "host.txt" using the 'del' command.
  Updated-Date: '2024_08_07'
Hacktools_CN_WinEggDrop:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 24d0d7d1c2b97185648d4d29c0f83d5a
  Ruleset: securityonion-yara
  Summary: 'This rule detects a hacktool known as WinEggDrop, specifically targeting a file named s.exe. It identifies the presence of this tool by looking for specific strings related to network scanning activities, such as "Normal Scan: About To Scan %u IP For %u Ports Using %d Thread" and "SYN Scan Can Only Perform On WIN 2K Or Above." Additional strings searched include phrases indicating scanning methods, examples of TCP scanning commands, error messages, and scan completion notifications. These strings suggest functionality related to port scanning using multiple threads, indicating that the tool is designed to perform extensive network reconnaissance.'
  Updated-Date: '2024_08_07'
HawkEye_Keylogger_Feb18_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: faecb30052361c2ee12611dba6c7c89a
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of HawkEye Keylogger, a type of malware primarily used for keystroke logging. It identifies the malware by searching for specific patterns, including the presence of the "UploadReportLogin.asmx" string, the file "tmp.exe," and a particular directory path ("%appdata%\\"). The rule is effective for files smaller than 2000KB that match these criteria.
  Updated-Date: '2024_08_07'
HawkEye_PHP_Panel:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3ea32cab8809fba5bc2592881903548a
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a HawkEye Keylogger PHP Panel by identifying specific PHP code patterns in files. It searches for the presence of certain strings associated with the handling of GET requests for 'fname' and 'data', the use of the `unlink` function to delete files, and the term "Success" in response output. The rule applies to files smaller than 600 bytes.
  Updated-Date: '2024_08_07'
Hermes2_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 33f50430b4203f7aa1d4d58a9701186e
  Ruleset: securityonion-yara
  Summary: This rule detects the Hermes Ransomware, specifically version 2.1, as reported by BAE Systems. It identifies the ransomware by looking for specific registry entries and language codes, along with unique strings related to the ransomware's functionality such as "HERMES", "vssadminn", and references to shadow storage management. It also checks for a distinctive RSA key part. These characteristics help to accurately identify the Hermes Ransomware in infected systems.
  Updated-Date: '2024_08_07'
HiddenCobra_BANKSHOT_Gen:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0a5a6c89b4e080740c9c93621d6ac3a5
  Ruleset: securityonion-yara
  Summary: This rule detects the Hidden Cobra BANKSHOT trojan, which is associated with North Korean malicious cyber activity. It identifies the trojan by matching specific patterns in file headers, file size constraints, and distinctive strings related to the trojan's communication and operational behavior. These include HTTP headers mimicking Internet Explorer, file paths, batch file names, registry manipulation commands, ping commands, and DLL filenames. Additionally, the rule matches certain encoded strings and domain names such as those related to Dropbox, Yahoo, Twitter, PayPal, Bitcoin, and WhatsApp that the trojan might use in its operations.
  Updated-Date: '2024_08_07'
HiddenCobra_FallChill_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 67d5879a0ff0a41ff53c7f305b100161
  Ruleset: securityonion-yara
  Summary: This rule detects characteristics indicative of the Hidden Cobra FallChill malware family. It looks for specific indicators within executable files, such as the presence of strings like "REGSVR32.EXE.MUI" and "Microsoft Corporation. All rights reserved." Additionally, it identifies unique patterns in encoded strings that are associated with the malware. The condition also considers the file's PE header and size constraints, verifying that the file's imphash matches a known value or that a specified number of strings are present, ensuring accurate identification of the malware.
  Updated-Date: '2024_08_07'
HiddenCobra_FallChill_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 33cf524fa88f2b66527df975dec6b769
  Ruleset: securityonion-yara
  Summary: This rule detects a specific variant of the FallChill malware, believed to be associated with the Hidden Cobra threat group. It identifies the malware by matching certain string patterns within the file, including file paths and DLL names, along with specific command patterns. Additionally, the rule checks for a specific PE image hash and ensures the file size is less than 500KB.
  Updated-Date: '2024_08_07'
HiddenCobra_Rule_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3b96d5f3dc8f32256bd64bd465877e44
  Ruleset: securityonion-yara
  Summary: This rule detects Hidden Cobra malware by identifying a specific RSA key string associated with the malware. Hidden Cobra, also known as the Lazarus Group, is a cyber threat group believed to be linked to North Korea and known for various cyberattacks. The rule targets a unique sequence of hexadecimal values representing the RSA key used by the malware, ensuring precise detection of this particular threat.
  Updated-Date: '2024_08_07'
HiddenCobra_Rule_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a7cd90377a920f467e1cc98e9ba1bd5b
  Ruleset: securityonion-yara
  Summary: This rule detects Hidden Cobra malware by identifying specific misspellings within executable files. It searches for the strings "Wating," "Reamin," and "laptos" in both wide and ASCII character sets, and checks for particular file headers that match known patterns of malicious files, such as those beginning with specific hexadecimal values like 0x5A4D or 0xCFD0.
  Updated-Date: '2024_08_07'
HiddenCobra_Rule_3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e6bce0a0eb435ebc14a373bf3549b37d
  Ruleset: securityonion-yara
  Summary: This rule detects Hidden Cobra malware, a malicious software associated with a cyber threat group. The detection criteria are based on a specific byte sequence pattern in the code, identified as a random URL builder. This byte pattern includes a series of hexadecimal instructions that match the behavior characteristic of the Hidden Cobra malware, which typically operates by configuring specific URL addresses in its routine. The rule verifies the presence of this unique byte sequence to identify the malware in network traffic or files.
  Updated-Date: '2024_08_07'
HiddenCobra_r4_wiper_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 877ef6cbc843650b3d6d50ada8c82c66
  Ruleset: securityonion-yara
  Summary: This rule detects the HiddenCobra Wiper malware, which is known for its destructive behaviors targeting the Master Boot Record (MBR) of infected systems. It identifies this malware by looking for specific hexadecimal patterns within the code that are characteristic of MBR manipulation and the presence of certain service control functions used by the malware. The wiper's activity includes overwriting or corrupting critical system files, rendering the affected machine inoperable.
  Updated-Date: '2024_08_07'
HiddenCobra_r4_wiper_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 95a94d0413643b20cbfc6e30645b6ac5
  Ruleset: securityonion-yara
  Summary: This rule detects the HiddenCobra Wiper malware, which is designed for destructive data-wiping activities. It identifies the presence of the malware through specific strings related to BIOS extended write operations and physical drive accesses. The detection focuses on executable files that start with standard PE file headers and contain both the physical drive string and extended write sequence.
  Updated-Date: '2024_08_07'
HoneyBee_Dropper_MalDoc:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b9c7f5b9bd535fd456be75eef3f250b2
  Ruleset: securityonion-yara
  Summary: This rule detects malicious documents associated with Operation Honeybee, specifically identifying droppers that execute commands to expand a setup.cab file and delete it thereafter. The rule looks for certain strings within files smaller than 400KB, including command-line instructions involving the setup.cab file, WMI queries, and specific temporary file names. By checking combinations of these strings, the pattern matches the characteristics of the Honeybee malware dropper documents.
  Updated-Date: '2024_08_07'
HttpBrowser_RAT_Gen:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c966e6e3349f4bdb8b5a44705e610862
  Ruleset: securityonion-yara
  Summary: 'This rule detects the HttpBrowser Remote Access Trojan (RAT) associated with Threat Group 3390, an advanced persistent threat (APT). The rule identifies samples by examining strings within files such as "%d|%s|%04d/%02d/%02d %02d:%02d:%02d|%ld|%d," "HttpBrowser/1.0," "set cmd : %s," and "\\config.ini," ensuring all identified strings are full-word matches. Additionally, it checks for specific file characteristics, including the file starting with the hex value 0x5a4d and having a size between 20KB and 45KB. This combination of specific string patterns and file properties helps identify various versions of HttpBrowser RAT.'
  Updated-Date: '2024_08_07'
HttpBrowser_RAT_Sample1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 144eb124ddc31007ec92718d2f39dabb
  Ruleset: securityonion-yara
  Summary: This rule detects a variant of HttpBrowser RAT, associated with Threat Group 3390 APT, by identifying a specific malware sample communicating with "update.hancominc.com". It checks for a file with a "MZ" header, a file size of less than 100KB, and the presence of the defined string within the file.
  Updated-Date: '2024_08_07'
HttpBrowser_RAT_Sample2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: cec4a32ca6f3864f6d3668f8557d38d1
  Ruleset: securityonion-yara
  Summary: This rule detects the HttpBrowser Remote Access Trojan (RAT) associated with Threat Group 3390, identified through the presence of specific strings within a file smaller than 250KB. The strings include references to "nKERNEL32.DLL," "WUSER32.DLL," "mscoree.dll," and "VPDN_LU.exeUT," indicating the file's potential malicious intent and correlation with known components of the HttpBrowser RAT.
  Updated-Date: '2024_08_07'
HttpBrowser_RAT_dropper_Gen1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 93c096977116fc4eb8ea66ad9ab83299
  Ruleset: securityonion-yara
  Summary: This rule detects a dropper associated with the HttpBrowser Remote Access Trojan (RAT) used by Threat Group 3390, a known advanced persistent threat (APT). The dropper is identified through specific command execution patterns involving "cmd.exe," "ShellExecuteA," and deletion operations, as well as the presence of various execution opcodes. The detection focuses on executable files smaller than 400KB, looking for these specific characteristics and patterns in their behavior and binary structure.
  Updated-Date: '2024_08_07'
HttpBrowser_RAT_dropper_Gen2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6395f6ec7150e4145ad44597c76823d6
  Ruleset: securityonion-yara
  Summary: This rule detects a malicious sample associated with Threat Group 3390, specifically targeting the HttpBrowser Remote Access Trojan (RAT) dropper. The detection focuses on specific strings and opcode patterns that are characteristic of this malware, including references to various executable files and Dynamic Link Libraries (DLLs) such as "navlu.dll", "VPDN_LU.exe", and "setup.exe". It also includes command-line instructions for file deletion. The rule triggers if the file header matches a particular signature, the file size is under 400KB, and specific combinations of strings and opcodes are present.
  Updated-Date: '2024_08_07'
Hunting_GadgetToJScript_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f13b52340d30fb70be68cd589030543e
  Ruleset: securityonion-yara
  Summary: This rule detects base64-encoded offsets associated with LazyNetToJscriptLoader, which is part of the internal tooling of GadgetToJScript. GadgetToJScript is a specific namespace involved in loading scripts for a particular software tool. This detection is based on the presence of specific base64 strings within the observed data.
  Updated-Date: '2024_08_07'
Hunting_Rule_ShikataGaNai:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: dbc8918f9ddbe5645208060778bdd088
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the ShikataGaNai encoder, a polymorphic XOR additive feedback encoder commonly utilized in shellcode obfuscation. The rule identifies specific assembly patterns indicative of ShikataGaNai encoding behavior, including sequences that involve initializing registers (such as EAX, EBP, EBX, ECX, EDI, and EDX) followed by operations involving the FPU register stack (D9 74 24 F4) and subsequent XOR operations on various registers. Detection is based on several patterns that accommodate slight variations in the encoded instructions, enhancing the rule's effectiveness in identifying mutated or slightly modified instances of ShikataGaNai-encoded payloads.
  Updated-Date: '2024_08_07'
HvS_APT37_RAT_loader:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7d137d3b37ce2ad7f050ac3308d3dd09
  Ruleset: securityonion-yara
  Summary: This rule detects the BLINDINGCAN Remote Access Trojan (RAT) loader used by the APT37 threat group. The loader, identified by the filename "iconcash.db," is characterized by the presence of an original filename "MFC_DLL.dll" and the export functions "SMain" and "SMainW." The rule is created to identify this specific loader based on these attributes.
  Updated-Date: '2024_08_07'
HvS_APT37_cred_tool:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 92e9a14564e8e3f4e3a5d4593ef2800a
  Ruleset: securityonion-yara
  Summary: 'This rule detects an unknown credential tool associated with the APT37 group. It looks for specific text strings related to credential management and software execution within files smaller than 500KB. The detectable strings include references to user data, such as "User: %s" and "Pass: %s," and software execution contexts, including level requests and thread contexts. The tool appears to deal with domain login and has indicators that it interacts with Windows components and settings in XML format.'
  Updated-Date: '2024_08_07'
HvS_APT37_mimikatz_loader_DF012:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e213d165c14d12278bd60f1a5ed125db
  Ruleset: securityonion-yara
  Summary: This rule detects a loader utilized by APT37 that is responsible for deploying an encrypted variant of the Mimikatz tool. Mimikatz is a well-known utility used for extracting plaintext passwords, hashes, PINs, and Kerberos tickets from memory. The rule identifies the loader by checking for specific string patterns and characteristics within the file, such as a certain import hash and the presence of particular strings like ".?AVCEncryption@@" and "afrfa". Additionally, the file must be of a certain format and size, specifically a Portable Executable (PE) file under 200KB in size.
  Updated-Date: '2024_08_07'
HvS_APT37_smb_scanner:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: caf1f424573bf25079fb0b7ae95c7244
  Ruleset: securityonion-yara
  Summary: This rule detects an SMB login scanner utilized by the APT37 threat group, also known as Lazarus Group. The scanner executable, named "Scan.exe," attempts to scan a range of IP addresses and log results to a specified path, potentially using provided username and password credentials to perform deep scans. It interacts with network libraries like mpr.dll and Netapi32.dll, and logs various successes and errors related to credential validation, network information retrieval, and file shares. The scanner produces specific error messages and output formats indicating login success or failure, network configuration details, and share information.
  Updated-Date: '2024_08_07'
HvS_APT37_webshell_controllers_asp:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 86a26ae7a103ff5c5783f58063509c49
  Ruleset: securityonion-yara
  Summary: This rule detects a specific webshell named "controllers.asp" or "inc-basket-offer.asp" associated with APT37. The detection is based on the presence of a VBScript encoded with the Microsoft Script Encoder and various case permutations of the encoded string "SeRvEr" followed by ".scriptrimeOut". The rule is triggered when these characteristics are found within a file size range of 50KB to 200KB.
  Updated-Date: '2024_08_07'
HvS_APT37_webshell_img_thumbs_asp:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9a04baf83d43cc0989acb0fa31a63270
  Ruleset: securityonion-yara
  Summary: 'This rule detects specific webshells named `img.asp`, `thumbs.asp`, or `thumb.asp`, which are associated with the threat actor APT37. The signatures for detection include particular string patterns such as "strMsg = \"E : F\"" and script elements like "Server.CreateObject(\"Scripting.FileSystemObject\")" as well as variables and functions like "Dim tmpPath, workDir". Additional indicators include specific request handling lines, e.g., "fileData = Request.Form(\"fp\")". The focus is on identifying the script content that suggests malicious webshell activity within files smaller than 2KB.'
  Updated-Date: '2024_08_07'
HvS_APT37_webshell_template_query_asp:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 905556fb94fe9cc826a337524cbec821
  Ruleset: securityonion-yara
  Summary: This rule detects a webshell named "template-query.aspimg.asp" used by the cyber espionage group APT37. The detection checks for specific strings and patterns within files, such as script timeout settings, response configurations, and session timeout settings. Additionally, it looks for particular text strings like "redhat hacker," file references like "want_pre.asp," and variable assignments indicating administrative privileges. These identifiers suggest malicious activity associated with webshell exploitation. The rule applies to files sized between 70KB and 200KB, confirming the presence of the webshell based on these attributes.
  Updated-Date: '2024_08_07'
IDTools_For_WinXP_IdtTool:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7a70b4548eb1a3f4b4cfcda8588d36af
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the Chinese hacktool known as IdtTool.exe, which is a component of a hacktool set typically used on Windows XP systems. The detection is based on specific strings related to IdtTool, such as "IdtTool.sys," "Idt Tool bY tMd[CsP]," and "\\\\.\\slIdtTool," and checks if the file matches a particular hash and size criterion.
  Updated-Date: '2024_08_07'
IDTools_For_WinXP_IdtTool_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 67a11d1905855c0335d4995b86dd3e6c
  Ruleset: securityonion-yara
  Summary: This rule detects the Chinese hacktool set file named "IdtTool.sys" used in Windows XP environments. It identifies the presence of this malicious tool based on specific strings found within the file, such as "\Device\devIdtTool" and function calls related to device and symbolic link management like "IoDeleteSymbolicLink", "IoDeleteDevice", "IoCreateSymbolicLink", and "IoCreateDevice". The rule applies to files that begin with the magic number for Windows executables (0x5a4d) and are smaller than 7KB in size.
  Updated-Date: '2024_08_07'
IISPutScanner:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ccd53a5a1260484f9a457e5111eda54b
  Ruleset: securityonion-yara
  Summary: This rule detects the Chinese hacktool known as IISPutScanner, specifically targeting the executable file IISPutScanner.exe. The detection is based on identifying several key strings within the file, including references to common dynamic link libraries (DLLs) such as KERNEL32.DLL, ADVAPI32.DLL, and USER32.DLL, as well as functions like LoadLibraryA and GetProcAddress. Additionally, it looks for certain wide string patterns like "BBABORT" and "DLGTEMPLATE." The file size criteria are also checked to ensure the file size is between 350KB and 500KB with an initial signature of 0x5a4d.
  Updated-Date: '2024_08_07'
IISPutScannesr:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6036bd41be62e46c63c6ad558b4e6083
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a Chinese hack tool known as IISPutScannesr, referencing a file named IISPutScannesr.exe. The detection is based on specific string patterns within the file, such as "yoda & M.o.D." and "-> come.to/f2f **************". The rule is triggered if the file header matches specific criteria and the file size is less than 500KB.
  Updated-Date: '2024_08_07'
IMPLANT_10_v1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ccfcc21845981cccd13c6116ecaffa11
  Ruleset: securityonion-yara
  Summary: This rule detects the CozyDuke (also known as CozyCar or CozyBear) Implant attributed to the advanced persistent threat group APT29. It identifies specific byte sequences within files that match the characteristics of this malware, which is typically associated with espionage activities. The rule looks for a particular signature within executable files, flagged by specific patterns in the binary data, to determine the presence of the CozyDuke implant.
  Updated-Date: '2024_08_07'
IMPLANT_10_v2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f9dd85a8e22e100aaaf9dac09cd8be8d
  Ruleset: securityonion-yara
  Summary: This rule detects the CozyDuke (also known as CozyCar or CozyBear) implant, which is associated with the APT29 group. It identifies this malware by looking for specific hexadecimal patterns within a file. These patterns include an obfuscated sequence and a series of no-operation instructions that indicate the presence of the CozyDuke implant.
  Updated-Date: '2024_08_07'
IMPLANT_11_v12:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2f7a0bcca428d090c82a6dcdd10bee32
  Ruleset: securityonion-yara
  Summary: This rule detects the Mini Duke Implant associated with APT29, also known as GRIZZLY STEPPE. It targets specific byte patterns and sequences that are characteristic of the Mini Duke malware, including hexadecimal and string patterns such as "ct," "rote," "triV," and "Plau." It establishes a condition based on the presence of these byte patterns and ensures all specified conditions are met to confirm the presence of the malware.
  Updated-Date: '2024_08_07'
IMPLANT_12_v1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5e812c0ce4c84e9e63a935dd0d4ab078
  Ruleset: securityonion-yara
  Summary: This rule detects the Cosmic Duke Implant, which is malware associated with the APT29 group. The detection is based on the presence of a specific sequence of hexadecimal bytes within files whose first 16 bits match the value 0x5A4D.
  Updated-Date: '2024_08_07'
IMPLANT_1_v1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 467f2e17b41db6e9e03b485a6fec1656
  Ruleset: securityonion-yara
  Summary: This rule detects the Downrage Implant associated with APT28, a known cyber espionage group. It identifies the presence of a specific sequence of hexadecimal bytes indicative of the implant, verifying that the targeted file begins with the "MZ" signature common to Windows executables. This implant is historically linked to cyber activities highlighted by US CERT.
  Updated-Date: '2024_08_07'
IMPLANT_1_v2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8e859280b84b2711dbee59618bc2090c
  Ruleset: securityonion-yara
  Summary: This rule detects the Downrage implant, a type of malware associated with APT28, also known as GRIZZLY STEPPE. The rule identifies the presence of specific byte patterns in executable files that indicate the presence of this implant. The implant utilizes distinct code sequences in its operations, which can be recognized by the given hexadecimal string patterns. The rule ensures that these patterns are embedded within the executable files typically starting with the "MZ" header, signaling a Windows executable.
  Updated-Date: '2024_08_07'
IMPLANT_1_v3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 865b0d4f9b399b93f11708be7e1b557a
  Ruleset: securityonion-yara
  Summary: This rule detects the Downrage implant, a piece of malware associated with APT28, by identifying specific byte sequences in files. It looks for certain patterns and markers that indicate the presence of the malware, such as specific hexadecimal values found at the beginning of a file and a specific encoded string pattern. The rule is designed to identify the implant based on its known characteristics and signature.
  Updated-Date: '2024_08_07'
IMPLANT_1_v4:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4eefba4d32e89f83c60a1201ad171308
  Ruleset: securityonion-yara
  Summary: This rule detects the Downrage Implant associated with the APT28 group. It identifies a specific sequence of bytes that represents a characteristic XOR loop operation within executable files starting with the common "MZ" header indicator (0x5A4D).
  Updated-Date: '2024_08_07'
IMPLANT_1_v5:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b0d21924a8870625692a3941f5c66213
  Ruleset: securityonion-yara
  Summary: This rule detects the Downrage Implant associated with APT28. It identifies specific patterns in driver names and mutex names that are characteristic of this malware. These patterns are matched against certain file signatures to determine the presence of the implant. The detection criteria involve checking the first few bytes of the file for specific values and matching any of the defined string sequences.
  Updated-Date: '2024_08_07'
IMPLANT_1_v6:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5aa724440bc39194a3dfde6eff33063e
  Ruleset: securityonion-yara
  Summary: This rule detects the Downrage Implant, a malware associated with APT28, by inspecting binary files for specific XOR opcode patterns. It checks for particular hexadecimal signatures at the beginning of the file, indicating the presence of executable code or specific data formats, and matches XOR operation sequences within the file.
  Updated-Date: '2024_08_07'
IMPLANT_1_v7:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: dfa8af44a6965706dfdfe760cbc1a8de
  Ruleset: securityonion-yara
  Summary: This rule detects the Downrage Implant, which is linked to the APT28 threat group. It identifies the presence of the malware by checking for a specific sequence of hexadecimal bytes within files that begin with the 'MZ' header, commonly marking executable files in Windows operating systems. The rule aims to uncover instances of this implant by examining the file structure and embedded code patterns typical of this malicious software.
  Updated-Date: '2024_08_07'
IMPLANT_2_v1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e7250479199b6b5386fd990abee7c8cd
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the CORESHELL/SOURFACE implant associated with APT28 by looking for specific byte patterns in files that match the characteristics of executable files.
  Updated-Date: '2024_08_07'
IMPLANT_2_v10:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 748c2abe84731a26e97aff50bb19ee94
  Ruleset: securityonion-yara
  Summary: This rule detects the CORESHELL/SOURFACE Implant attributed to APT28. The implant is identified through specific byte patterns and conditions, including certain hexadecimal values and sequences found within the file format, indicating a potential threat related to this advanced persistent threat group.
  Updated-Date: '2024_08_07'
IMPLANT_2_v11:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 26e15470e8b4a9eef5fb6caa5145a803
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of CORESHELL/SOURFACE malware, which is associated with the APT28 group. The detection is based on a specific pattern of hexadecimal bytes found in executable files that typically signify the malicious implant.
  Updated-Date: '2024_08_07'
IMPLANT_2_v14:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 93c9dd743fe19ad6c163e62dceb9d5b1
  Ruleset: securityonion-yara
  Summary: This rule detects the CORESHELL/SOURFACE Implant, a malicious software tool attributed to the APT28 group. It identifies the implant by looking for specific hexadecimal byte patterns within executable files. The condition checks if the file's first two bytes match the "MZ" header, commonly indicating an executable file, and whether any of the defined byte patterns are present.
  Updated-Date: '2024_08_07'
IMPLANT_2_v15:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 33acc8a4c4ba2c25399537d7659cd55d
  Ruleset: securityonion-yara
  Summary: This rule detects the CORESHELL/SOURFACE implant, which is associated with the threat group APT28. The rule identifies specific XOR loop patterns in the binary data to determine the presence of this malware. The implant utilizes certain XOR instructions sequences which, when found together, indicate the malicious software. The conditions include specific header values at the beginning of the file indicating either a Windows executable or other known formats used by the implant.
  Updated-Date: '2024_08_07'
IMPLANT_2_v16:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3b38df03c5c076694e054ed061fca9a4
  Ruleset: securityonion-yara
  Summary: This rule detects the CORESHELL/SOURFACE implant associated with the APT28 group, identified by US CERT. The rule targets a specific obfuscated function sequence within executable files. This implant is known for its association with cyber-espionage activities and sophisticated malware deployment practices. The detection logic inspects files for particular executable headers combined with a sequence of hexadecimal bytes that characterize the obfuscated functionality of the implant.
  Updated-Date: '2024_08_07'
IMPLANT_2_v17:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 34deb39a0d0a97174e80bb593c5cd374
  Ruleset: securityonion-yara
  Summary: This rule detects the CORESHELL/SOURFACE implant attributed to the APT28 group. The implant is identified through specific byte sequences within executable files, confirmed by at least two of the defined hexadecimal string patterns, and the file must start with the characteristic "MZ" header indicating it is a Windows executable.
  Updated-Date: '2024_08_07'
IMPLANT_2_v18:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5b081df26a59058e341b64b16df949f8
  Ruleset: securityonion-yara
  Summary: This rule detects the CORESHELL/SOURFACE implant associated with APT28, a known cyber threat group. The detection is based on a specific byte sequence and header values often associated with executables (PE files). The rule scrutinizes patterns within the binary to identify the presence of this particular implant.
  Updated-Date: '2024_08_07'
IMPLANT_2_v19:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f6db03866028718ae5f940cae5e32b9c
  Ruleset: securityonion-yara
  Summary: This rule detects the CORESHELL/SOURFACE implant attributed to APT28, designed to match specific obfuscated and cleartext RSA keys embedded within executable files. By checking for particular file signatures at the start of the file, such as 0x5A4D, 0xCFD0, 0xC3D4, 0x46445025, or 0x6674725C, it identifies the presence of this malicious implant used for cyber-espionage activities.
  Updated-Date: '2024_08_07'
IMPLANT_2_v20:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1760cabcfb6f3c3a04c7ebb2ad988059
  Ruleset: securityonion-yara
  Summary: This rule detects the CORESHELL/SOURFACE implant associated with the activities of APT28, a group known for cyber-espionage. The detection is based on particular byte patterns found within the malware code, helping identify the presence of this specific malicious implant.
  Updated-Date: '2024_08_07'
IMPLANT_2_v3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a04a2b12cb86c5356e46d8aa318c4f86
  Ruleset: securityonion-yara
  Summary: This rule detects the CORESHELL/SOURFACE implant associated with APT28 by identifying specific hexadecimal string patterns within executable files. The condition checks if the file starts with the 'MZ' header, commonly signifying a Windows executable, and then looks for any of the defined hexadecimal sequences which signify characteristics of the CORESHELL/SOURFACE malware.
  Updated-Date: '2024_08_07'
IMPLANT_2_v5:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 757d3f82eb76fc10a926a35a0fc970a0
  Ruleset: securityonion-yara
  Summary: This rule detects the CORESHELL/SOURFACE implant developed by APT28. This malware is specifically recognized by a unique hexadecimal byte sequence and typically targets Windows executable files, as indicated by the presence of the "MZ" header.
  Updated-Date: '2024_08_07'
IMPLANT_2_v6:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: aee5e28118c1226a393e1b4841a142e5
  Ruleset: securityonion-yara
  Summary: This rule detects the CORESHELL/SOURFACE implant associated with the APT28 threat group. It identifies a specific byte pattern within executable files, indicating the presence of this malware. The CORESHELL/SOURFACE implant is known for espionage activities and is part of a broader category of threats linked to the GRIZZLY STEPPE campaign.
  Updated-Date: '2024_08_07'
IMPLANT_2_v7:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8636caa75d1463eef58b9da35db5abc7
  Ruleset: securityonion-yara
  Summary: This rule detects the CORESHELL/SOURFACE implant, which is associated with the cyber espionage group APT28. The rule identifies specific patterns in the binary structure, searching for particular hexadecimal sequences. These sequences are indicative of the implant's presence in a file, combined with the condition that the file header starts with the signature "0x5A4D," a common marker for executable files. This helps in the identification and analysis of malicious activities linked to APT28.
  Updated-Date: '2024_08_07'
IMPLANT_2_v9:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1878b43033c9915ec2eac0593f774e6b
  Ruleset: securityonion-yara
  Summary: This rule detects the CORESHELL/SOURFACE implant associated with APT28, also known as GRIZZLY STEPPE. It uses a specific hexadecimal string pattern and examines file headers to identify the presence of this implant. The condition checks for various possible magic numbers, indicating file types such as executable files or specific document formats, and ensures that all the specified byte sequences match. This implant is indicative of a sophisticated cyber-espionage group known for targeting government and military organizations.
  Updated-Date: '2024_08_07'
IMPLANT_3_v1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 247ad1d00fbea72131c38c969fb1cbc3
  Ruleset: securityonion-yara
  Summary: This rule detects the X-Agent/CHOPSTICK implant used by the cyber-espionage group APT28, often associated with GRIZZLY STEPPE activities. It looks for specific strings and patterns in files, including error messages, installation commands related to "USBGuard.exe" in the "System Volume Information" directory, a particular User-Agent string mimicking Mozilla Firefox 20 on Windows, and search parameters used in HTTP requests. The rule also identifies a specific sequence of bytes commonly found in the binary code of the implant.
  Updated-Date: '2024_08_07'
IMPLANT_3_v2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b09b2d5cde979f3adce8890419d65bd7
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the X-Agent, also known as CHOPSTICK, which is a type of malware implant utilized by the cyber-espionage group known as APT28. Specifically, it looks for certain hexadecimal patterns that are indicative of this implant within a file. The rule also checks for specific file headers, matching signatures that are commonly associated with executable files or document formats that may house the implant. By identifying these unique patterns and headers, the rule helps in recognizing infected systems potentially compromised by this advanced persistent threat.
  Updated-Date: '2024_08_07'
IMPLANT_3_v3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8b420e21464c9b8759c2cc1fa3727ba8
  Ruleset: securityonion-yara
  Summary: This rule detects the X-Agent/CHOPSTICK implant used by APT28, also known as GRIZZLY STEPPE, by identifying specific strings related to "AgentKernel" and "AgentModule" and ensuring the absence of the term "Panda Security S.L." in the file properties. The detection mechanism relies on checking the file header for specific values to ensure accurate identification.
  Updated-Date: '2024_08_07'
IMPLANT_4_v1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0d64cf0a738c5cb83e0250b0e1d823f6
  Ruleset: securityonion-yara
  Summary: This rule detects the BlackEnergy implant, also known as Voodoo Bear, associated with APT28, by identifying specific hexadecimal patterns within the file. The rule checks for particular sequences of bytes at the beginning of executable files, suggesting the presence of this malware on a system. This detection mechanism is based on known signatures of the malicious code embedded by the attackers.
  Updated-Date: '2024_08_07'
IMPLANT_4_v10:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 37eb6eabe12397562e5c8adbf55e6550
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the BlackEnergy malware, also known as Voodoo Bear, which is associated with APT28, a known cyber-espionage group. The rule specifically looks for unique hexadecimal strings within executable files, verifying key structural elements such as the "MZ" header and PE header location to confirm the file's legitimacy. It requires at least fifteen matches among the specified patterns, helping to accurately identify the malware's code. This helps in identifying malicious implants used by this sophisticated threat actor in their cyber operations.
  Updated-Date: '2024_08_07'
IMPLANT_4_v11:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4b65508e6163da869d47aef3292954ae
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the BlackEnergy or Voodoo Bear Implant associated with APT28 by identifying specific patterns within files that indicate malicious activity. It looks for commands related to disk formatting, a variety of file extensions including executable and document files, and temporary file naming conventions. The rule also checks for particular file signatures at the beginning of files, which can indicate executable or document formats, to help identify infected or malicious files.
  Updated-Date: '2024_08_07'
IMPLANT_4_v12:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0f53fcaf96398ca38e208e898ef34f2f
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the BlackEnergy malware, also known as Voodoo Bear, which is attributed to APT28. It identifies specific binary patterns and code sequences characteristic of the malware. Additionally, it looks for suspicious references to the `HAL.dll` system file and a specific sequence of hexadecimal values. The rule provides a means to identify known attack vectors used by this APT group by matching against particular file headers and code segments typical of the BlackEnergy implant.
  Updated-Date: '2024_08_07'
IMPLANT_4_v13:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0f396f91d3bac980c81352def33c120b
  Ruleset: securityonion-yara
  Summary: This rule detects the BlackEnergy malware, also known as Voodoo Bear, which is associated with the APT28 group. It identifies specific patterns within binary files, focusing on particular sequences of bytes characteristic of BlackEnergy. The rule looks for evidence of XML document object manipulation, parsing of XML data, command dispatching, and event dispatching functions, as well as specific binary data indicative of the malware's presence. Furthermore, it verifies the file signatures to ensure they match known patterns associated with BlackEnergy.
  Updated-Date: '2024_08_07'
IMPLANT_4_v2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9dda2d1df5ad75bbcb300af68936127f
  Ruleset: securityonion-yara
  Summary: This rule detects the BlackEnergy / Voodoo Bear Implant associated with APT28. It identifies specific hexadecimal patterns corresponding to the "User32" and "Advapi32" build identifiers and a particular constant value. These patterns are indicative of the malware's presence, allowing for effective detection. Additionally, the rule checks for specific file signatures commonly associated with executable files to enhance its accuracy.
  Updated-Date: '2024_08_07'
IMPLANT_4_v3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 83651a5485f321530d4d79d96d44a140
  Ruleset: securityonion-yara
  Summary: This rule detects the BlackEnergy malware, also known as Voodoo Bear, which is attributed to the APT28 group. The rule examines executable files for specific strings and byte sequences that are characteristic of this implant. It looks for references to "Adobe Flash Player Installer," "regedt32.exe," "WindowsSysUtility," and "USB MDM Driver," among others. The rule also searches for a variety of hexadecimal patterns that are present in the file's header and section tables as indicators of the malware's presence. These checks ensure that the rule targets the BlackEnergy implant variants by confirming specific structures and contents associated with malicious activities.
  Updated-Date: '2024_08_07'
IMPLANT_4_v4:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7b0e0c62e321c57d4574950faa8a64a6
  Ruleset: securityonion-yara
  Summary: 'This rule detects the BlackEnergy/Voodoo Bear Implant attributed to APT28. It identifies malicious software by checking for specific command strings used for disk formatting and shutdown operations. The rule looks for the presence of command options such as "/c format %c: /Y /Q" and "/c format %c: /Y /X /FS:NTFS" in ASCII format, as well as "PhysicalDrive%d" in wide format and "shutdown /r /t %d". These indicators help in identifying the implant based on known malicious behavior.'
  Updated-Date: '2024_08_07'
IMPLANT_4_v5:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 471d1731026ee18c7f00fe3672843f4b
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the BlackEnergy/Voodoo Bear implant associated with the APT28 threat group. It identifies this malicious software by examining specific patterns in the file's binary content and checking for particular header values that correspond to this malware, designed to disrupt or gain unauthorized access to a system.
  Updated-Date: '2024_08_07'
IMPLANT_4_v6:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6b352a66f5546a0f50c0ee0126c15864
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the BlackEnergy malware, also known as Voodoo Bear, which is reportedly used by the APT28 group. It identifies specific strings within executable files, such as "DispatchCommand" and "DispatchEvent," and checks for certain file signatures that correlate with the malware's known behaviors and characteristics.
  Updated-Date: '2024_08_07'
IMPLANT_4_v7:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 03c8cca715017095ac3ac585eb8a8fb3
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the BlackEnergy/Voodoo Bear implant, commonly associated with the APT28 threat actor group. It identifies specific byte patterns within files, particularly by checking for various sequences indicative of BlackEnergy code. The conditions for detection are based on matching a set number of these specific byte sequences in combination with particular file headers commonly found in executable or document files.
  Updated-Date: '2024_08_07'
IMPLANT_4_v8:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 30641855390922846af71c2a70a8df52
  Ruleset: securityonion-yara
  Summary: This rule detects the BlackEnergy implant, also known as Voodoo Bear, associated with APT28. The detection is based on specific byte patterns found within the executable code, which are indicative of the malware's presence. These patterns include sequences and operations related to memory management and string manipulation that are characteristic of the BlackEnergy malware family.
  Updated-Date: '2024_08_07'
IMPLANT_4_v9:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 78b9fc3e76364274ba5e474b3d0eb96a
  Ruleset: securityonion-yara
  Summary: This rule detects the BlackEnergy malware, also known as Voodoo Bear, associated with the APT28 group. It identifies the presence of specific strings and code patterns used by the malware, such as commands to clear logs and delete volume shadow copies, and unique global object names used by the malicious software. Additionally, it looks for specific byte sequences in the code indicative of techniques to overwrite physical disk data with zeros.
  Updated-Date: '2024_08_07'
IMPLANT_5_v1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6b4f576c365dc7f4d4b3ccf4de0a2650
  Ruleset: securityonion-yara
  Summary: This rule detects the XTunnel implant used by the APT28 threat group, identified through specific hex patterns and distinct error messages related to UDP communication failures and TPS (presumably Transport Protocol Service) send/receive errors. APT28 is known for its cyber espionage activities, and XTunnel is a tool they use for facilitating network traffic tunneling. The strings include a sequence of hex codes and error messages indicating failed communications that are unique to the XTunnel implant's operations, aiding in its identification.
  Updated-Date: '2024_08_07'
IMPLANT_5_v2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5e4a89aca0191d57a6735d995736812c
  Ruleset: securityonion-yara
  Summary: This rule detects the XTunnel implant associated with APT28, also known as Fancy Bear. XTunnel is a tool often employed by this threat actor for establishing network tunnels, facilitating data exfiltration and remote access. The rule identifies this implant by looking for a series of specific hexadecimal strings indicative of the XTunnel malware's unique signatures or cryptographic keys. The presence of any of these strings in a file or network transmission suggests the XTunnel implant is present, highlighting potential malicious activity linked to APT28.
  Updated-Date: '2024_08_07'
IMPLANT_5_v3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8d064e1149e46bd022eb1a725d5d02c8
  Ruleset: securityonion-yara
  Summary: This rule detects the XTunnel implant associated with APT28, utilizing byte sequences indicative of this specific malware. XTunnel is typically used for tunneling and obfuscating network traffic to evade detection during cyber-espionage activities.
  Updated-Date: '2024_08_07'
IMPLANT_5_v4:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: eff2f1e818fc9861caa43ddd43191712
  Ruleset: securityonion-yara
  Summary: This rule detects the XTunnel Implant associated with APT28 by identifying specific cryptographic keys within a file. Five distinct keys are targeted, suggesting a thorough approach to ensure accurate detection of this malware, which is linked to the activities outlined by US CERT.
  Updated-Date: '2024_08_07'
IMPLANT_6_v1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0664e21ef577cefe374b884ac469da8d
  Ruleset: securityonion-yara
  Summary: This rule detects the Sednit / EVILTOSS Implant, which is associated with APT28. It identifies specific strings such as "dll.dll", "Init1", and "netui.dll" within files that begin with specific hexadecimal patterns. These patterns are indicative of executable file headers or other recognizable structures, allowing for the identification of the malicious implant.
  Updated-Date: '2024_08_07'
IMPLANT_6_v2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4c551080c9e38f21b827c3ab3717da55
  Ruleset: securityonion-yara
  Summary: This rule detects the Sednit or EVILTOSS implant, utilized by the APT28 group. It looks for a specific obfuscated function pattern within files that begin with certain byte sequences, indicative of executable or potentially malicious content. The Sednit/EVILTOSS implant is associated with espionage activities, targeting various entities to gather intelligence.
  Updated-Date: '2024_08_07'
IMPLANT_6_v3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e11cad8a200f825ceaf309403a2d6ed2
  Ruleset: securityonion-yara
  Summary: This rule detects the Sednit or EVILTOSS Implant, which is associated with APT28, a known advanced persistent threat group. The detection is based on a specific sequence of byte patterns used in the deobfuscation function. The rule triggers when these byte patterns are found in files that match particular binary characteristics.
  Updated-Date: '2024_08_07'
IMPLANT_6_v4:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: cc52bb128eb0411ab873d675b4a6d4fb
  Ruleset: securityonion-yara
  Summary: This rule detects the Sednit/EVILTOSS implant associated with the cyber espionage group APT28. It identifies the presence of specific assembly code patterns and checks for the presence of certain PE (Portable Executable) file signatures or identifiers in the target file.
  Updated-Date: '2024_08_07'
IMPLANT_6_v5:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 101f2b2f6e2b4b6fd3e926e0992cc9a8
  Ruleset: securityonion-yara
  Summary: This rule detects the Sednit / EVILTOSS Implant, which is associated with the APT28 threat group, also known as Fancy Bear. This particular implant is used for espionage purposes and is known for its sophisticated capabilities in stealing information. The rule identifies the malware by matching specific hexadecimal patterns within files, combined with certain header signatures typical of executable files or specific file formats related to the implant.
  Updated-Date: '2024_08_07'
IMPLANT_6_v6:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6cc03705572a1fcbaf31078b2ba9924a
  Ruleset: securityonion-yara
  Summary: This rule detects an implant associated with Sednit, also known as EVILTOSS, which is attributed to the threat actor group APT28. The detection is based on specific byte sequences found in the binary code of the target file. These byte sequences are linked to certain functions typically used by this implant. The rule checks for specific signatures in the file's header to identify various executable formats and ensures that all specified byte patterns are present to confirm a positive identification.
  Updated-Date: '2024_08_07'
IMPLANT_6_v7:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 698ac6d1c1e201c8bac9a689a3b60dca
  Ruleset: securityonion-yara
  Summary: This rule detects the Sednit/EVILTOSS implant, attributed to APT28, by identifying specific strings and conditions related to its operation. The rule looks for the presence of certain strings such as "Init1", "ServiceMain", "netids", "netui", "svchost.exe", and "network" in both wide and ASCII formats. It also checks for specific byte sequences at the beginning of the file, which are indicators of the implant's presence. The detection criteria include identifying files with headers that match known patterns and the presence of at least two of the specified strings.
  Updated-Date: '2024_08_07'
IMPLANT_7_v1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 89087a3c276b6221a8654f311eb36c24
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of "Implant 7" malware associated with APT29, also known as GRIZZLY STEPPE. It identifies specific hexadecimal patterns within executable files that match characteristics of the implant's known code segments. The patterns searched include a series of byte sequences that are indicative of the malware's signature behavior or structure.
  Updated-Date: '2024_08_07'
IMPLANT_8_v1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9eb657e989e4975f9b053fd531388e00
  Ruleset: securityonion-yara
  Summary: This rule detects the HAMMERTOSS (also known as HammerDuke) implant associated with APT29. The detection focuses on characteristics specific to the HAMMERTOSS malware, such as the presence of the "mscorlib" string related to .NET usage and specific URL patterns that are consistent with the malware's known behavior. These URL patterns include various query parameters commonly used by the malware during its operations. Additionally, the rule checks for the presence of the "MZ" magic header in executable files.
  Updated-Date: '2024_08_07'
IMPLANT_8_v2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4170c32a54d4c58733375dffb0e43685
  Ruleset: securityonion-yara
  Summary: This rule detects the HAMMERTOSS / HammerDuke implant associated with APT29 by looking for specific strings within a file that indicate the presence of .NET components and a unique XOR sequence. These characteristics identify the implant, which is used by the threat actor known as APT29.
  Updated-Date: '2024_08_07'
IMPLANT_9_v1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c00ad888892b265086ea583486513049
  Ruleset: securityonion-yara
  Summary: This rule detects the Onion Duke Implant used by the advanced persistent threat group APT29. The detection is based on specific hexadecimal patterns found within the implant's code, and the condition checks for the presence of these patterns in combination with a particular header value.
  Updated-Date: '2024_08_07'
IP_Stealing_Utilities:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 009212c6852f457be5f4494fa788431b
  Ruleset: securityonion-yara
  Summary: This rule detects the executable file "IP Stealing Utilities.exe" by identifying strings "DarkKnight" and "IPStealerUtilities" within the file.
  Updated-Date: '2024_08_07'
IceFog_Malware_Feb18_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ba172024d02a25c67d50ec1a048ee14e
  Ruleset: securityonion-yara
  Summary: This rule detects the IceFog malware, which is identified by specific strings within the code, such as "cmd /c %c%s%c" and references to files like "temp.bat" and "c:\\windows\\debug\\wia\\help". It also looks for certain URL patterns and file names, such as "/getorder.aspx?hostname=", "\\filecfg_temp.dat", and "\\key.dat". These indicators suggest the presence of the IceFog malware, which typically involves operating system manipulation and data gathering. The rule triggers if the file size is under 2000KB and certain conditions in the code are met.
  Updated-Date: '2024_08_07'
Impacket_Keyword:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a8cad34a77e9e4fcd6d4813cac14ac9b
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of certain keywords related to Impacket within executable files. Impacket is a collection of Python classes focused on low-level network protocols, commonly used for building network security tools and for malicious purposes such as lateral movement and credential dumping. The rule specifically searches for the strings "impacket.smb(", "impacket.ntlm(", and "impacket.nmb(" within files smaller than 14000KB and verifies the file type by checking for the 'MZ' header signature found in executables.
  Updated-Date: '2024_08_07'
Impacket_Lateral_Movement:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 60749adb57dbb5ba0d4a249bc5e4806b
  Ruleset: securityonion-yara
  Summary: This rule detects network activity associated with Impacket, a collection of Python classes for working with network protocols, indicative of lateral movement within a network. It identifies specific strings related to Impacket's components such as DCERPC, SMB, SPNEGO, NTLM, and NMB, and triggers if two or more of these strings appear in a file smaller than 14MB with a typical executable file header.
  Updated-Date: '2024_08_07'
Impacket_Tools_Generic_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f0bb77b492413cc345bce18cafbeae37
  Ruleset: securityonion-yara
  Summary: This rule detects compiled tools from the Impacket suite, commonly utilized for network protocol manipulation and penetration testing. It identifies specific files associated with Impacket using unique characteristics, such as specific ASCII strings and well-known file names, and checks for particular file sizes and headers to confirm the presence of these tools.
  Updated-Date: '2024_08_07'
Impacket_Tools_atexec:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5f33e4702919da97ce48e67f5686192d
  Ruleset: securityonion-yara
  Summary: This rule detects compiled binaries related to Impacket Tools, specifically targeting files associated with the 'atexec' tool. It identifies these binaries by searching for specific strings within the file, such as "batexec.exe.manifest," "satexec," and "impacket.dcerpc," and checks whether the file has characteristics of a Windows executable with a size of less than 15,000 KB.
  Updated-Date: '2024_08_07'
Impacket_Tools_esentutl:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d13d07d91dff5a7c533d6b093d06f14e
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of compiled Impacket tools by identifying specific strings related to "impacket.ese" and "sesentutl" within executable files smaller than 11,000 KB that begin with the "MZ" header. Impacket is a collection of Python classes for working with network protocols, and this rule focuses specifically on identifying tools compiled from Impacket used for malicious purposes in Windows environments.
  Updated-Date: '2024_08_07'
Impacket_Tools_goldenPac:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 04b540a052b2e4d0f756b1384c33bc44
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of compiled tools from the Impacket suite, specifically targeting "goldenPac.exe." It looks for specific strings such as "impacket.examples.serviceinstall(" and "json.scanner(" within files that are less than 17000KB and begin with the "MZ" header, which indicates a Windows executable.
  Updated-Date: '2024_08_07'
Impacket_Tools_ifmap:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4a2da40530ed15d8fd791f05d92141a5
  Ruleset: securityonion-yara
  Summary: This rule detects compiled Impacket Tools by searching for specific characteristics within executable files. It looks for the presence of the string "bifmap.exe.manifest" and references to "impacket.dcerpc.v5.epm(" within files that are less than 15MB in size and start with the hexadecimal value 0x5a4d, which indicates a valid executable (PE) file.
  Updated-Date: '2024_08_07'
Impacket_Tools_lookupsid:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0f5bab1db8be066d9aad8caf3127c85c
  Ruleset: securityonion-yara
  Summary: This rule detects compiled Impacket tools related to "lookupsid" by identifying specific ASCII strings such as "slookupsid" and "impacket.dcerpc." It applies to files starting with the "MZ" header and smaller than 15 MB in size.
  Updated-Date: '2024_08_07'
Impacket_Tools_mimikatz:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f7a9b1712aaa3e9613f248bf2a746391
  Ruleset: securityonion-yara
  Summary: This rule detects compiled Impacket tools by searching for specific strings within the file, such as "impacket," "smimikatz," and "otwsdlc." It checks for these indicators within files smaller than 17,000 KB that have a specific header value. Impacket is often used to facilitate network protocol manipulation, making it a useful but potentially malicious tool if misused.
  Updated-Date: '2024_08_07'
Impacket_Tools_mmcexec:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5fbe545599093199acd7d9e1d86a099d
  Ruleset: securityonion-yara
  Summary: This rule detects a specific compiled Impacket tool named "mmcexec," which is used for executing commands remotely on Windows machines. It looks for the presence of the string "smmcexec" and a specific byte sequence within a file. The rule applies only to files that start with the "MZ" header (indicating a Windows executable) and are smaller than 16,000KB in size.
  Updated-Date: '2024_08_07'
Impacket_Tools_netview:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f9173c93a104280e4bdf1e0c80022254
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of compiled Impacket tools, specifically focusing on "netview," by looking for specific strings within executable files. These strings include references to "impacket.dcerpc.v5.wkst(", "dummy_threading(", and "snetview". The rule is triggered if these strings are found in an executable file that starts with the 'MZ' header and has a file size of less than 17,000 KB.
  Updated-Date: '2024_08_07'
Impacket_Tools_opdump:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 84f1ed2d8fe4a32aa426f12753d95998
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of compiled Impacket tools by identifying specific string patterns related to the "bopdump.exe.manifest" and "sopdump" within executable files. It applies to files with a PE file header and a size of less than 17,000 KB.
  Updated-Date: '2024_08_07'
Impacket_Tools_psexec:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0dcce58bf55c17a93e3b1e2d7ac75dc4
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of compiled Impacket tools, specifically targeting artifacts associated with "psexec." It identifies strings within files that signify Impacket examples related to service installation and remote command service, and triggers when these indicators are found in executable files smaller than 17,000 KB.
  Updated-Date: '2024_08_07'
Impacket_Tools_rpcdump:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 306bfd7b0859f7a43a2d02b03993dd37
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a compiled Impacket tool named "rpcdump," which interacts with the Microsoft RPC protocol. The detection criteria include specific string signatures related to "srpcdump" and "impacket.dcerpc.v5.epm(" within files that start with the "MZ" header and are smaller than 17000KB. This tool is used for dumping server RPC information, typically for network and service auditing.
  Updated-Date: '2024_08_07'
Impacket_Tools_secretsdump:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4b7424f3abb3a42a51caeacaa7d5ef22
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the compiled Impacket tool named `secretsdump`, which is used for extracting credentials including password hashes, plain text passwords, and Kerberos tickets from a system. The rule identifies this tool based on specific ASCII strings found within executables, ensuring the file has the correct header and is below a certain size.
  Updated-Date: '2024_08_07'
Impacket_Tools_smbexec:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: cf55ba47e02345393c3f7511eeeccaa6
  Ruleset: securityonion-yara
  Summary: This rule detects the compiled tools from the Impacket collection, specifically targeting the 'smbexec' executable. It looks for the presence of specific strings related to logging configuration and the name 'ssmbexec' within a file. Additionally, the file must start with the 'MZ' header, indicating a Windows executable, and have a size smaller than 17,000 KB.
  Updated-Date: '2024_08_07'
Impacket_Tools_smbrelayx:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5b2edac5447361543594dc404a5fc517
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of compiled Impacket tools, specifically targeting the `smbrelayx` component. It looks for specific ASCII strings related to Impacket examples, such as "impacket.examples.secretsdump" and "impacket.examples.serviceinstall," as well as references to `smbserver` and `SimpleHTTPServer`. These markers help identify binaries associated with these tools, ensuring the file size is under 18,000 KB. Impacket is a collection of Python classes used for working with network protocols, making it significant for network penetration tests and related activities.
  Updated-Date: '2024_08_07'
Impacket_Tools_smbtorture:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 37e6e94edc8fc384ebc398978b5d2fac
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of compiled Impacket tools, specifically targeting the `smbtorture` tool. It looks for the strings "impacket" and "ssmbtorture" in files smaller than 17,000 KB that start with the hexadecimal value 0x5a4d, which signifies a Windows executable file. The rule identifies these tools by matching all specified conditions.
  Updated-Date: '2024_08_07'
Impacket_Tools_sniff:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ec4f0efc69b1e6eccff808d237ec9579
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of compiled Impacket Tools based on specific signatures within the file. It identifies the use of "ssniff" and a reference to "impacket.eap(" within the file. Additionally, the file must begin with the standard MZ file header and be smaller than 15000KB to meet the detection criteria.
  Updated-Date: '2024_08_07'
Impacket_Tools_sniffer:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 059d98c04f6ccbf1cf58cc6477f6fe16
  Ruleset: securityonion-yara
  Summary: This rule detects compiled Impacket tools, specifically targeting strings associated with network sniffing functionalities such as "ssniffer" and Impacket's DHCP component. The rule is effective for executable files with a specific size and file signature conditions, ensuring that only relevant compiled tools are detected.
  Updated-Date: '2024_08_07'
Impacket_Tools_tracer:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9e2ec747b7ffbc52aed9437bab6ef986
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of compiled Impacket Tools by searching for specific strings within files. It looks for the identifiers "btk85.dll", "btcl85.dll", and "xtk\\unsupported.tcl" within files smaller than 21000KB that have a PE (Portable Executable) file header, indicated by the magic number 0x5a4d.
  Updated-Date: '2024_08_07'
Impacket_Tools_wmiexec:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7c88580039462f9617a3f3e347435023
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of specific compiled Impacket tools, focusing on identifying the "wmiexec" variant used for remote command execution. It examines files for the string "bwmiexec.exe.manifest" and the specific ASCII sequence "\\yzHPlU=QA" within files that start with the characteristic 'MZ' header and are smaller than 17,000KB in size.
  Updated-Date: '2024_08_07'
Impacket_Tools_wmipersist:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 857ac81919d43d0a589f39127182e658
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of Windows WMIPersist tools compiled using Impacket. Impacket is a collection of Python classes for working with network protocols. Specifically, this rule looks for particular strings indicative of tools used to persist in a target environment via Windows Management Instrumentation (WMI), hunting for signature hex values and specific ASCII strings within files of a certain size.
  Updated-Date: '2024_08_07'
Impacket_Tools_wmiquery:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 47287ec5f5dcdc53215e880b93ee0bc9
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of compiled Impacket tools, specifically targeting the "wmiquery" tool. It identifies the tools by looking for the string "swmiquery" and a specific ASCII sequence within files that are smaller than 17,000 KB and have a PE file signature.
  Updated-Date: '2024_08_07'
Imphash_UPX_Packed_Malware_1_TA17_293A:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ea74f370b37d28daa03f4a7c2ecd6b23
  Ruleset: securityonion-yara
  Summary: This rule detects malware based on the Import Hash (Imphash) of specific malware associated with the TA17-293A activity. It identifies files that start with the "MZ" header, indicating they are PE files, that are smaller than 5 MB in size, and have an Imphash value of "d7d745ea39c8c5b82d5e153d3313096c".
  Updated-Date: '2024_08_07'
Indetectables_RAT:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 894f6b98d0e21e61ec1bf74132809439
  Ruleset: securityonion-yara
  Summary: This rule detects the Indetectables Remote Access Trojan (RAT) by identifying specific strings associated with the malware. These strings include developer identifiers such as "Coded By M3," "Stub Undetector M3," and "M3n3gatt1hack3r." Additionally, it searches for terms like "TheMisterFUD," "KillZoneKillZoneKill," and "M3_F_U_D_M3," which are indicative of the malware's presence. The rule also references the website "www.webmenegatti.com.br" related to the malware's background. The conditions for detection include checking if the file has a particular header value and ensuring that the file size is less than 5000KB.
  Updated-Date: '2024_08_07'
Industroyer_Malware_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b2aa2789806be4ae57b2e956a65e06f7
  Ruleset: securityonion-yara
  Summary: This rule detects malware related to Industroyer by looking for specific characteristics and patterns. It targets the presence of certain files, registry paths, and hex string sequences associated with Industroyer, a malware known to affect industrial control systems. This includes identifying filenames like "haslo.exe" and "haslo.dat\x00Crash," registry paths involving "SYSTEM\\CurrentControlSet\\Services\\%ls," file types such as "*.pcmt" and "*.pcmi," and specific hex patterns common in the malware's structure. The rule also ensures that the file being inspected is a valid executable with a size less than 200KB.
  Updated-Date: '2024_08_07'
Industroyer_Malware_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: cbb4812459305ce4b9e32eff5eeb1713
  Ruleset: securityonion-yara
  Summary: This rule detects Industroyer malware by identifying specific patterns and behaviors associated with the software. It looks for certain strings in files, such as commands to create, stop, and start services, specific IP addresses, service names, and user-agent strings mimicking Mozilla/4.0. Additionally, it checks for the presence of temporary directory names often used by the malware. The rule triggers if any of these strings or patterns match, focusing on characteristic components and behaviors typical of Industroyer malware.
  Updated-Date: '2024_08_07'
Industroyer_Malware_4:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7300b43f1b38e1d09749a46616c549ba
  Ruleset: securityonion-yara
  Summary: This rule detects Industroyer malware by identifying specific indicators within executable files. It searches for the presence of the string "haslo.dat" in wide format and "defragsvc" in ASCII format. Additionally, the rule looks for a specific byte sequence that translates to ".dat\x00\x00Crash". The detection condition triggers if the file has an MS-DOS header and is smaller than 200KB, combined with the presence of all specified strings or the byte sequence.
  Updated-Date: '2024_08_07'
Industroyer_Malware_5:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d1b4b87f7661dd7585aacd5d00820620
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of Industroyer-related malware by identifying specific filenames and log entries indicative of its activity. It looks for the executable "D2MultiCommService.exe," the library "Crash104.dll," and the log file "iec104.log." Additionally, it checks for strings related to IEC-104 client connections and various error messages and commands, such as address resolution failures, remote command returns, and process termination errors. The rule triggers if it finds either one of the specified filenames or multiple log entries and error messages within executable files smaller than 400KB.
  Updated-Date: '2024_08_07'
Industroyer_Portscan_3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 72b3e49aab33e290f52e949b196ffd17
  Ruleset: securityonion-yara
  Summary: This rule detects a custom port scanner associated with the Industroyer malware. The detection relies on specific ASCII strings and error messages found within the target files. These include unique identifiers such as "!ZBfamily" and "GHIJKLMNOTST", as well as error messages indicating issues with parameters or IP ranges. Additionally, it looks for particular patterns such as executable file names followed by specific command-line arguments. The focus is on files under 500KB that contain these distinct characteristics.
  Updated-Date: '2024_08_07'
Industroyer_Portscan_3_Output:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 19455e88c5598117f002f11ac51771e8
  Ruleset: securityonion-yara
  Summary: This rule detects output files related to a custom port scanner associated with Industroyer malware. It identifies the presence of specific strings within the file, such as "WSA library load complite." and "Connection refused," indicative of the malware's network scanning activities.
  Updated-Date: '2024_08_07'
InjectionParameters:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b4e02b2480ff89e3b24eaea9df33c672
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific Chinese hacktool named "InjectionParameters.vb" by searching for particular strings within files smaller than 13KB. It looks for two specific pieces of code indicating the creation of a read-only object and the definition of the "InjectionParameters" class.
  Updated-Date: '2024_08_07'
InstGina:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 78589a83cda3340de6b306ad01e1eea8
  Ruleset: securityonion-yara
  Summary: 'This rule detects the presence of the hacktool InstGina.exe, an older disclosed hacktool, by identifying specific strings within the file: "To Open Registry," "I love Candy very much!!," and "GinaDLL."'
  Updated-Date: '2024_08_07'
Invoke_Metasploit:
  Created-Date: '2024_08_06'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2b6923dd99c848e67339ee8f792a50e8
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of an Invoke-Metasploit payload. It specifically looks for characteristic strings in files smaller than 20KB, which suggest the usage of a 64-bit environment with PowerShell, the execution of a download process in a new instance, and the use of default proxy credentials to download and execute a remote script.
  Updated-Date: '2024_08_06'
Invoke_Mimikatz:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d07ff0926b111d3873c9f3c90426ac83
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the Invoke-Mimikatz tool, a PowerShell script commonly used for post-exploitation activities, particularly credential dumping. It identifies specific strings related to the script, including encoded shellcode and memory manipulation commands used to write malicious code to memory addresses. This detection focuses on recognizing traces of the script's distinct operational patterns.
  Updated-Date: '2024_08_07'
Invoke_OSiRis:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2308d06678b0890ea51db3c1c3062f78
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the "Invoke-OSiRis.ps1" script, which is associated with Osiris Device Guard Bypass techniques. The script includes specific strings related to command execution for bypassing Device Guard, manipulating Windows Management Instrumentation (WMI) processes and configurations, and executing payloads. Key strings searched for include commands to create WMI processes with specific authentication and impersonation settings, using arguments and variables tied to the Osiris name, and executing Device Guard bypass commands with payload insertion into system configurations.
  Updated-Date: '2024_08_07'
Invoke_PSImage:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4e32881cd97f4edba585bd80ff6ade8f
  Ruleset: securityonion-yara
  Summary: This rule detects a specific command that executes PowerShell using encoded strings from within an image file. It identifies the presence of encoded PowerShell commands such as "IEX([System.Text.Encoding]::ASCII.GetString(" and the usage of the System.Drawing.Bitmap class to open a web client for reading. Additionally, it looks for the hexadecimal signature of a PNG image file header. This combination of elements is indicative of the Invoke-PSImage technique, which embeds and executes PowerShell commands from image files. The rule applies to files smaller than 3000KB and triggers if any of these patterns are found.
  Updated-Date: '2024_08_07'
Invoke_SMBExec:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4704214cfa8e550d98d97eea4298107c
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of Invoke-WmiExec or Invoke-SmbExec PowerShell scripts, which are tools used to execute commands on remote systems using WMI or SMB protocols. The rule targets specific strings associated with these scripts, such as "Invoke-SMBExec -Target" and "$packet_SMB_header = Get-PacketSMBHeader". It identifies outputs indicative of command execution through SMB services and binds RPC packets in a particular manner related to SMB named pipes, aiming to identify malicious activities leveraging these capabilities.
  Updated-Date: '2024_08_07'
Invoke_SMBExec_Invoke_WMIExec_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f5f75eeae91a84953ef8e66ab122eaef
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of specific strings associated with the PowerShell scripts Invoke-SMBExec.ps1 and Invoke-WMIExec.ps1, which are used for executing commands on remote systems through SMB and WMI, respectively. It looks for particular patterns in the script, such as modifying process IDs, detecting non-responsive targets, and handling packet call IDs in byte arrays.
  Updated-Date: '2024_08_07'
Invoke_WMIExec_Gen:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 85f97ec0598969739edafb35e6868a5d
  Ruleset: securityonion-yara
  Summary: This rule detects the use of specific PowerShell scripts, namely Invoke-SMBClient.ps1, Invoke-SMBExec.ps1, and Invoke-WMIExec.ps1, which are part of the Invoke-TheHash toolkit. The rule identifies these scripts by searching for unique strings related to NTLM hash computation, random client challenge generation, and conversion of NTLM hash bytes within the script's code. The detection of these specific strings reliably indicates the presence and use of these network command execution tools.
  Updated-Date: '2024_08_07'
Invoke_WMIExec_Gen_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7cf9284d5f5f92862b0a98f5666d2f94
  Ruleset: securityonion-yara
  Summary: This rule detects indicators associated with Invoke-WmiExec and Invoke-SmbExec, which are tools often used for lateral movement within a network. The rule looks for specific strings that include "Invoke-WMIExec," mathematical operations related to target addresses and subnet masks, and several import statements such as "Import-Module $PWD\\Invoke-TheHash.ps1" and "Import-Module $PWD\\Invoke-SMBClient.ps1". It also includes checks for domain and username parameters typically seen in these tools, aiding in pinpointing their usage based on characteristic code patterns.
  Updated-Date: '2024_08_07'
Invoke_mimikittenz:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f9c2de7fffae3763d77ff835e6f7fde4
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of "Invoke-mimikittenz.ps1," which is associated with the Mimikittenz malware. The rule targets specific strings within a file, including references to the `Mimikittenz.MemProcInspector`, various process access permissions, and API calls interfacing with `kernel32.dll`. It also identifies patterns related to email, password, and metadata structures within the file to confirm the presence of the malware. Mimikittenz is known for memory-scraping capabilities and unauthorized data access.
  Updated-Date: '2024_08_07'
IronGate_APT_Step7ProSim_Gen:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 514f709dc21df936e08788af88be3053
  Ruleset: securityonion-yara
  Summary: This rule detects the IronGate APT malware targeting systems using the Step7ProSim DLL. It identifies various specific string patterns associated with different stages and elements of the malware. These include references to certain file paths, execution payloads, process manipulation, and the presence of unique identifiers embedded in the code. The rule specifically looks for signatures and strings that indicate the presence of malicious functions and components within files less than 50KB in size, helping to identify infected systems.
  Updated-Date: '2024_08_07'
IronGate_PyInstaller_update_EXE:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c76ae9e0ade758d22b476383569955c2
  Ruleset: securityonion-yara
  Summary: This rule detects a PyInstaller file named update.exe, which is associated with the IronGate Advanced Persistent Threat (APT). It identifies the presence of several specific strings within the file, including references to "bpython27.dll," "update.exe.manifest," "bunicodedata.pyd," and certain patterns relating to the distutils module. Additionally, the condition for detection includes verifying that the file starts with the bytes '0x5a4d,' which is characteristic of executable files.
  Updated-Date: '2024_08_07'
IronPanda_DNSTunClient:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: be7096e036f0a9e1f5652072f916080d
  Ruleset: securityonion-yara
  Summary: "This rule detects the Iron Panda malware known as DnsTunClient, identifying specific patterns and commands associated with the tool. The strings include specific command-line arguments such as \"-d or -domain <domain>\" and \"-ip <server ip address>\", as well as various paths and error messages associated with the malware\u2019s operations. Additionally, it looks for scheduled task creation commands and error messages related to UDP operations and domain usage. The malware\u2019s source code file path and specific error messages related to packet handling and conversations are also identified. The detection mechanism utilizes a combination of these indicators to flag the presence of DnsTunClient malware."
  Updated-Date: '2024_08_07'
IronPanda_Malware1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4f0104c0c7e1494b777050cde1e1469e
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of Iron Panda Malware, which is identified through specific characteristics such as the string "activedsimp.dll" in wide format, and several ASCII strings related to login and password functionalities, including "get_BadLoginAddress," "get_LastFailedLogin," "ADS_UF_ENCRYPTED_TEXT_PASSWORD_ALLOWED," and "get_PasswordExpirationDate." The malware is further identified by checking if the file starts with the hexadecimal value 0x5a4d, which signifies a valid executable file, and ensuring the file size is less than 300KB.
  Updated-Date: '2024_08_07'
IronPanda_Malware2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: cc3c746cee9e1a8e054bdb706d4dc221
  Ruleset: securityonion-yara
  Summary: This rule detects the Iron Panda malware by searching for specific strings within a file, including paths and filenames such as "\\setup.exe" and "msi.dll.urlUT". It looks for patterns like "setup.exeUT" and deletion commands like "/c del /q %s". The rule targets files smaller than 180KB that begin with the hexadecimal value 0x5a4d.
  Updated-Date: '2024_08_07'
IronPanda_Malware3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 15744df10e178d7f63f466b8f1e44ffd
  Ruleset: securityonion-yara
  Summary: This rule detects the Iron Panda malware by looking for the presence of specific strings and characteristics within executable files. It targets references to "PluginDeflater.exe," ".Deflated," and "PluginDeflater" in both wide and ASCII character formats. Additionally, it looks for mentions of "DeflateStream," "CompressionMode," and "System.IO.Compression," which are associated with goodware but appear in conjunction with the malicious traits being identified. The rule further qualifies that the file must start with the MZ header and be less than 10KB in size.
  Updated-Date: '2024_08_07'
IronPanda_Malware4:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8eb03e825473c687cc76972e15a11c54
  Ruleset: securityonion-yara
  Summary: "This rule detects a specific variant of Iron Panda malware by identifying certain strings related to the malware\u2019s components and behaviors. It looks for the presence of \u201CTestPlugin.dll\u201D, a specific HTML snippet linking to Baidu, and references to \u201CZcg.Test.AspxSpyPlugins\u201D and \u201CTestPlugin\u201D within an executable file less than 10KB in size. The condition checks that the file starts with the \u201CMZ\u201D header, indicating a Windows executable."
  Updated-Date: '2024_08_07'
IronPanda_Malware_Htran:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 404d6f99d3c9ffed09666a391588dcaa
  Ruleset: securityonion-yara
  Summary: This rule detects the Iron Panda malware variant known as Htran, which includes specific strings to identify malicious activity. Htran is a trojan used primarily for network communication redirection and covert communication. The rule identifies unique error messages and operational commands associated with the malware, such as connection errors, client connections, and port communication. Strings like "gethostbyname error," "wait for client on port," and directives for slave connections highlight the malware's functionalities. It also captures internal function names and specific log references to ensure accurate detection of Iron Panda's Htran trojan activities.
  Updated-Date: '2024_08_07'
IronPanda_Webshell_JSP:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2f3a7812faacbde6b0d97e4cdf6ac3d2
  Ruleset: securityonion-yara
  Summary: This rule detects the Iron Panda malware specifically within JSP (JavaServer Pages) web shell scripts. It identifies this threat by searching for specific strings within the script, such as SQL command execution related to database operations and web functionalities involving JavaScript and Base64 encoding. The rule is designed to catch files under 330 KB that contain at least one of these distinctive strings, indicating the presence of this particular web shell malware.
  Updated-Date: '2024_08_07'
IronTiger_ChangePort_Toolkit_ChangePortExe:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7f25523b486e6fe76851754c3ce69b68
  Ruleset: securityonion-yara
  Summary: This rule detects the Iron Tiger malware, specifically the Toolkit ChangePort executable. It identifies malicious behavior by looking for strings associated with the malware, such as error messages indicating allocation failures, a profane command prompt message, usage instructions for the executable, a reference to "chkroot2007", and a message indicating a successful port binding. The condition for detection involves checking for a specific file header signature combined with the presence of at least two of the specified strings.
  Updated-Date: '2024_08_07'
IronTiger_ChangePort_Toolkit_driversinstall:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 827b324826cd7d88b98f4162e4089140
  Ruleset: securityonion-yara
  Summary: This rule detects the Iron Tiger Malware, specifically the Changeport Toolkit associated with the driver installation process. It identifies the presence of this malware by looking for signatures such as the phrases "openmydoor," "Install service error," "start remove service," and "NdisVersion" within executable files that begin with the "MZ" header.
  Updated-Date: '2024_08_07'
IronTiger_EFH3_encoder:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2590dc38f383110af10a3f1c7dc69acf
  Ruleset: securityonion-yara
  Summary: 'This rule detects the IronTiger EFH3 encoder, specifically designed to identify strings associated with its operation. The rule looks for particular wide and ASCII strings such as "EFH3 [HEX] [SRCFILE] [DSTFILE]", "123.EXE 123.EFH", and "ENCODER: b[i]: =". It also checks for the presence of a DOS header identifier to confirm the executable format.'
  Updated-Date: '2024_08_07'
IronTiger_GTalk_Trojan:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 893adae5131563e74c070f07be70655d
  Ruleset: securityonion-yara
  Summary: This rule detects the IronTiger malware, specifically the GTalk Trojan. It identifies the presence of certain strings, such as the domain "gtalklite.com," a specific data transmission format involving computer and network details, an identifier "D13idmAdm," and an error message related to a named pipe failure. These indicators are used to recognize the distinctive behavior and signatures of the GTalk Trojan.
  Updated-Date: '2024_08_07'
IronTiger_GetPassword_x64:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4c620e405270194604cb844353414f30
  Ruleset: securityonion-yara
  Summary: This rule detects the Iron Tiger malware, specifically the x64 version of the GetPassword component. It identifies strings associated with error messages, file paths related to the GetPassword binary, and phrases linked to authentication details and user information. The presence of these strings in a file, combined with a characteristic file header, signals potential malware activity.
  Updated-Date: '2024_08_07'
IronTiger_HTTP_SOCKS_Proxy_soexe:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8cb3524511df1d67b274af1562cce285
  Ruleset: securityonion-yara
  Summary: This rule detects the Iron Tiger Toolset's HTTP SOCKS Proxy named "soexe". It identifies the presence of specific error messages and HTTP status responses related to socket operations and connection handling. Key indicators include error messages such as "listen SOCKET error", "WSAAsyncSelect SOCKET error", "new SOCKETINFO error!", and the HTTP response "Http/1.1 403 Forbidden." The rule is triggered when these distinctive strings are found in conjunction with a typical Windows executable file header.
  Updated-Date: '2024_08_07'
IronTiger_NBDDos_Gh0stvariant_dropper:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 76c3606fec1f6c98257dfb546534cbac
  Ruleset: securityonion-yara
  Summary: This rule detects a variant of the Gh0st RAT malware associated with the Iron Tiger APT group, specifically targeting a dropper designed to deliver the NBDDos tool. The rule identifies this malicious software by looking for specific strings within the file, such as error messages and misleading service descriptions, as well as threats like "Kill You" and formatted strings indicating file size. This combination of unique strings and file characteristics helps in identifying the presence of this particular piece of malware.
  Updated-Date: '2024_08_07'
IronTiger_PlugX_DosEmulator:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3af60273c8bf5ec93671f561200a27bd
  Ruleset: securityonion-yara
  Summary: This rule detects Iron Tiger Malware, specifically focusing on the PlugX DosEmulator. It identifies the malware by scanning for specific strings associated with the emulator, such as "Dos Emluator Ver," "\\PIPE\\FASTDOS," "FastDos.cpp," and "fail,error code = %d." The condition for triggering this detection includes the presence of a 'MZ' header (identified by 0x5a4d) and at least two of the specified strings. The targeted malware component replicates DOS-related functionalities, potentially aiding in evasion techniques or executing legacy commands.
  Updated-Date: '2024_08_07'
IronTiger_PlugX_FastProxy:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ec4f3b6bc2fc79c90fa6f1b8fec9043d
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of Iron Tiger Malware, specifically the PlugX FastProxy, by identifying several distinctive strings related to its operation. These include references to a "SAFEPROXY" service, usage patterns involving process IDs and ports, and file paths such as "\\users\\whg\\desktop\\plug\\". The rule is triggered if any of these unique strings are found and the file header matches a specific signature, helping to identify and respond to this particular piece of malware.
  Updated-Date: '2024_08_07'
IronTiger_PlugX_Server:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d890598e858a1804457a501f1501de58
  Ruleset: securityonion-yara
  Summary: This rule detects the Iron Tiger malware, specifically the PlugX Server variant. It identifies specific strings within the malware related to keylogging and socket error handling, such as "\\UnitFrmManagerKeyLog.pas," "Input Name...," "TThreadRControl.Execute SEH!!!," and "OnSocket(event is error)!". Additionally, it checks for compiler-related strings like "\\UnitFrmManagerRegister.pas" and "\\UnitFrmRControl.pas," as well as certain prompt messages and warning statements indicating debugging features. The rule triggers if these characteristic strings are found within executables that start with the 'MZ' header.
  Updated-Date: '2024_08_07'
IronTiger_ReadPWD86:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 804892a300355ec6eeef512b25b9046c
  Ruleset: securityonion-yara
  Summary: This rule detects the Iron Tiger malware variant known as ReadPWD86. The rule identifies this threat by searching for specific error messages and strings within files, such as "Fail To Load LSASRV," "Fail To Search LSASS Data," and "User Principal" in both wide and ASCII encoding. The condition is further refined by ensuring the file has a portable executable (PE) file signature.
  Updated-Date: '2024_08_07'
IronTiger_Ring_Gh0stvariant:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ebc10434de0d3db92ab238e33e5a6cb0
  Ruleset: securityonion-yara
  Summary: This rule detects a variant of the Iron Tiger malware, specifically the Ring Gh0stvariant. It identifies certain characteristic strings in wide or ASCII format, such as "RING RAT Exception," "can not update server recently)!", "CreaetProcess Error," "Sucess!," and "user canceled!" Additionally, it checks for a Windows executable file signature.
  Updated-Date: '2024_08_07'
IronTiger_dllshellexc2010:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8328ff2bc1c20956fed101682e945953
  Ruleset: securityonion-yara
  Summary: This rule detects a backdoor and remote shell associated with the IronTiger group, specifically targeting Microsoft Exchange servers. It searches for specific file names and strings indicative of the malicious activity, such as "Microsoft.Exchange.Clients.Auth.dll," "Dllshellexc2010," and "please input path." These strings suggest the presence of the malicious "dllshellexc2010" component used to compromise Exchange environments by injecting backdoor capabilities and facilitating unauthorized remote access.
  Updated-Date: '2024_08_07'
IronTiger_dnstunnel:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b358af17b8608c059bc7cf6a441abdc6
  Ruleset: securityonion-yara
  Summary: This rule detects a DNS tunnel tool used in Operation Iron Tiger. It identifies specific wide ASCII strings associated with the tool, such as directory paths like "\\DnsTunClient\\" and "\\t-DNSTunnel\\", and the domain "xssok.blogspot". It also searches for identifying strings like "dnstunclient". To catch more subtle indicators, the rule looks for unique typos and erroneous phrasing in error messages, such as "because of error, can not analysis" and "can not deal witn the error". The presence of these distinctive string patterns suggests the presence of the malicious DNS tunneling tool.
  Updated-Date: '2024_08_07'
IronTiger_wmiexec:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: aefa1aa2156a5ef138e3d1073c26b0b7
  Ruleset: securityonion-yara
  Summary: This rule detects the Iron Tiger tool, specifically targeting the wmi.vbs script. It looks for particular strings within the script, such as references to temporary result files, the "wmiexec" function, and various comments by the author "Twi1ight". Additional identifying phrases include indications of different operational modes, discussions about the use of tools like "nc.exe" or Trojans, and notes regarding file permissions on Windows 2008 systems. The detection is based on the presence of at least two of these unique string patterns.
  Updated-Date: '2024_08_07'
IsDebug_V1_4:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9030743990b67a72602869d6e250729c
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a Chinese hacktool named "IsDebug V1.4.dll". It identifies this file through specific strings contained within, such as "IsDebug.dll", "SV Dumper V1.0", and "(IsDebuggerPresent byte Patcher)". Additionally, the rule looks for error messages and technical terms related to debugging processes, like "Error WriteMemory failed" and "IsDebugPresent". The file is also characterized by a particular size constraint, being less than 30KB, and starts with a specific file header identifier.
  Updated-Date: '2024_08_07'
IsmDoor_Jul17_A2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e7be7981a9c8cda67d2863c2f5152b0f
  Ruleset: securityonion-yara
  Summary: This rule detects the IsmDoor malware by identifying specific characteristics within a file. It looks for strings typically associated with the malware, such as a PowerShell command to execute a file with bypassed permissions, a specific encoded string, and references to "Documents" and "Libraries" directories. The rule checks if the file starts with the 'MZ' header (common for executable files), is less than 300KB in size, and contains at least three of the specified strings.
  Updated-Date: '2024_08_07'
JSP_Browser_APT_webshell:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e126b7fe6a66032ebbee594c894f2953
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the VonLoesch JSP Browser, which is utilized as a web shell by Advanced Persistent Threat (APT) groups. The rule specifically looks for particular code strings characteristic of the JSP File Browser 1.1a, including static final commands related to the command interpreter in Windows, execution of processes using the system runtime, and an indicator message for process timeout and destruction.
  Updated-Date: '2024_08_07'
JSP_jfigueiredo_APT_webshell:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 27d9c704558097092166d6d9974ca254
  Ruleset: securityonion-yara
  Summary: This rule detects a Java Server Page (JSP) file utilized as a web shell by Advanced Persistent Threat (APT) groups. The specific indicators include a Base64 encoding method used within the script and an HTML form for file uploading through the "POST" method directed to "ServFMUpload". These elements suggest unauthorized file management activities.
  Updated-Date: '2024_08_07'
JSP_jfigueiredo_APT_webshell_2:
  Created-Date: '2024_08_06'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 28b6e427df9f9db8bd2f37161b027dc1
  Ruleset: securityonion-yara
  Summary: This rule detects a JSP-based web shell known to be utilized by APT groups for malicious purposes. Indicators of compromise include specific HTML and JavaScript code fragments, such as an HTML division tag with a particular image source and a jQuery command that destroys a dialog. Additionally, it looks for form elements that upload files with a specific action attribute and hidden input fields with base64 encoded values. This type of web shell can be used by attackers to gain unauthorized access and control over web servers.
  Updated-Date: '2024_08_06'
Java_Shell_js:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 57fbf2d8dceb18b71644fe608987c0a9
  Ruleset: securityonion-yara
  Summary: This rule detects a Java-based shell script with specific characteristics indicative of Jython, a Python implementation in Java. It looks for references to initializing system properties using `PySystemState.initialize`, as well as the definition of a class named `JythonShell` that extends `JPanel` and implements `Runnable`. Additionally, it checks for the declaration of a static integer `DEFAULT_SCROLLBACK` set to 100, suggesting configuration of terminal scrollback settings. The presence of any two of these strings triggers detection.
  Updated-Date: '2024_08_07'
Jc_ALL_WinEggDropShell_rar_Folder_Install_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6ed4f69cde700d3cc05f56c39ad7139d
  Ruleset: securityonion-yara
  Summary: This rule detects a disclosed hacktool set revolving around an executable file named Install.exe. It identifies specific strings associated with this hacktool, including URLs, email addresses, and filenames like "Player.tmp," "Player.EXE," "S-Player.exe," and mentions of "http://go.163.com/sdemo" and "mailto:sdemo@263.net." These details suggest the hacktool may include components for unauthorized activities such as remote control or data exfiltration via email and internet addresses.
  Updated-Date: '2024_08_07'
Jc_WinEggDrop_Shell:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 91ad6bdcdfb3167603b474871541f6cb
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the Jc.WinEggDrop Shell, a disclosed hacktool set that includes various malicious components. The rule checks for specific indicators such as "Sniffer.dll," commands related to executing net.exe to change the Administrator password, references to "Fport.exe or mport.exe" for port scanning, indications of a password sniffing operation, and messages about modifying terminal service ports. It also looks for instructions related to deleting specific executable files and listing executable files in directories. These indicators collectively help identify the malicious activities associated with the Jc.WinEggDrop Shell.
  Updated-Date: '2024_08_07'
JspWebshell_1_2_jsp:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6f99f141ec8ce98421be77c20e3fc6f9
  Ruleset: securityonion-yara
  Summary: This rule detects a specific variant of the JspWebshell malware by matching strings related to its behavior and implementation. It looks for indicators such as the presence of the term "JspWebshell", an error message related to folder creation and deletion, specific HTML content within a table tag, and a string indicating a hardcoded password. These characteristics are used to identify the malicious web shell script that compromises web servers.
  Updated-Date: '2024_08_07'
KA_uShell:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 553256f053fa3445cafd1deaedc45186
  Ruleset: securityonion-yara
  Summary: This rule detects a PHP webshell known as KA_uShell. It identifies malicious scripts by searching for specific code patterns, including a condition where the server checks if a password is missing or incorrect and a file upload mechanism that handles file uploads when the 'path' post parameter is empty. These patterns indicate the presence of the KA_uShell PHP webshell.
  Updated-Date: '2024_08_07'
KHRAT_Malware:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: eef2a41d6b90425a5abff4732d787a30
  Ruleset: securityonion-yara
  Summary: This rule detects a specific version of KHRAT malware by identifying an Imphash value of "6a8478ad861f98f8428a042f74de1944." The detection criteria include the presence of a DOS header (indicated by the hex value 0x5a4d) and a file size of less than 100 KB. KHRAT malware has been noted in use during cyberattacks in Cambodia, as documented by Palo Alto Networks.
  Updated-Date: '2024_08_07'
KINS_DLL_zeus:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1f8cb21649ec55ab989d20202376f577
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the KINS malware, specifically a variant linked to the Zeus family, by identifying certain network protocol strings and crypted strings that are characteristic of the malware. The network protocol indicators include identifiers such as "%BOTID%", "%opensocks%", and "%openvnc%", along with other specific patterns. Additionally, the rule looks for specific crypted strings, such as "\x72\x6E\x6D\x2C\x36\x7D\x76\x77" and other similar patterns. This combination of network and crypted strings helps to match the default bot in a leaked dropper version of KINS, a known Zeus malware variant.
  Updated-Date: '2024_08_07'
KINS_dropper:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7063938095a3ac942a87ba005d47372e
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the KINS dropper malware by identifying specific network protocol strings, process injection techniques, and exploit patterns used for User Account Control (UAC) bypass. It looks for particular network-related strings such as formatted data transmission protocols and various process injection-related strings that implicate methods for injecting code into other processes. Additionally, it identifies certain indicators of a Windows exploit associated with UAC bypass techniques, which are characteristic of this malware.
  Updated-Date: '2024_08_07'
KR_Target_Malware_Aug17:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d6772e886be037640b5a77925a868216
  Ruleset: securityonion-yara
  Summary: This rule detects malware that specifically targeted South Korea in August 2017, identified by the file name MRDqsbuEqGxrgqtbXU.exe. It monitors for specific indicator strings within executable files smaller than 800KB in size that start with the hexadecimal header 0x5a4d. The strings include a combination of ASCII and wide character sequences such as "lnVMODvjSfOQQnfiuFogghlL," "E X I T  +R U N A S  /a P P d A T A," "uSEsHELLeXECUTE gETeNTRYaSSEMBLY GET," and "ZahUKBXz."
  Updated-Date: '2024_08_07'
KasperMalware_Oct17_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: bd7c146346207d196b0ebc3aa5e9fc92
  Ruleset: securityonion-yara
  Summary: "This rule detects the Kasper Backdoor malware by identifying specific characteristics such as the presence of the string \"\\\\Release\\\\kasper.pdb\" in ASCII encoding and \"C:\\\\D@oc@um@en@ts a@nd Set@tings\\\\Al@l Users\" in wide string format. Additionally, it checks if the file\u2019s import hash matches \"2bceb64cf37acd34bc33b38f2cddfb61\" and ensures the file size is less than 7000KB. The rule also confirms the file starts with the signature \"0x5a4d,\" indicating a Windows executable."
  Updated-Date: '2024_08_07'
KeeTheft_EXE:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c63d99d4d160889cd0f2aabeb466517f
  Ruleset: securityonion-yara
  Summary: This rule detects the KeeTheft.exe component of KeeTheft, a tool used to dump data from KeePass, a popular password manager. The detection is based on specific error messages, method names, and informational text strings associated with KeeTheft, such as thread creation errors, shellcode issues, and references to KeePass components and functionalities. Additionally, it checks for executable files under 200KB in size.
  Updated-Date: '2024_08_07'
KeeTheft_Out_Shellcode:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 51f6b854ddbfb9a860276e73583ac899
  Ruleset: securityonion-yara
  Summary: This rule detects a component of KeeTheft, a tool used to dump KeePass password manager data. Specifically, it identifies the file named Out-Shellcode.ps1, which contains specific strings indicative of this tool's presence. The detection is based on the appearance of particular strings related to shellcode operations and text section information within a file less than 2KB in size.
  Updated-Date: '2024_08_07'
KeeThief_PS:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ce84637033541e080413518b13669bf7
  Ruleset: securityonion-yara
  Summary: This rule detects the component of KeeTheft, specifically the PowerShell script file KeeThief.ps1. KeeThief is a tool designed to extract the contents of the KeePass password manager by targeting its process and utilizing Windows Management Instrumentation (WMI) and process file version checks.
  Updated-Date: '2024_08_07'
Kekeo_Hacktool:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a3a044162f92780bd44868a239c153d5
  Ruleset: securityonion-yara
  Summary: This rule detects the Kekeo Hacktool, a set of tools used for Kerberos ticket manipulation. It identifies specific strings within executable files that match known patterns from Kekeo, including error messages and session key statuses related to ticket dumping and SMB commands. The rule applies only to files smaller than 2000KB that have a specific header indicating they are executable files.
  Updated-Date: '2024_08_07'
KeyBoy_876_0x4e20000:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 07ffe5c4290a62c2eeee1833d6bdab99
  Ruleset: securityonion-yara
  Summary: This rule detects the KeyBoy backdoor, a malicious software variant employed in targeted cyber espionage campaigns. The rule identifies various distinctive string patterns used by the malware, such as specific commands involving "rundll32.exe," error messages related to screen capture and user logon failures, and other notable strings like "taskkill" and "TClient.exe." Additionally, it checks for specific filenames and error log formats used by the KeyBoy backdoor to ensure precise detection.
  Updated-Date: '2024_08_07'
KeyBoy_InstallClient:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4e0767e2d70cbe9e61aa1e6f64d4c124
  Ruleset: securityonion-yara
  Summary: This rule detects the KeyBoy InstallClient, a form of malware known for using specific strings related to executable commands and project directories. It looks for unique patterns in executable file names and command line operations involving common Windows utilities like "cmd.exe" and "rundll32.exe", along with other distinctive strings associated with the malware's behavior and file structure. The rule has conditions to ensure the validity of the executable files and checks for specific patterns to identify the presence of this particular malware.
  Updated-Date: '2024_08_07'
KeyBoy_rasauto:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5971431d56630efbedc017dbfa7f96dc
  Ruleset: securityonion-yara
  Summary: This rule detects the KeyBoy ServiceClient malware by identifying specific strings and patterns associated with its execution and functionality. KeyBoy, also known as "Tropic Trooper," uses "rundll32.exe %s SSSS & exit" to run its malicious code and references a debug path "D:\\Work\\Project\\VS\\HSSL\\HSSL_Unicode _2\\Release\\ServiceClient.pdb". It also searches for other indicative strings such as "cmd.exe /c \"%s\"", "CreateProcess failed (%d)", "ServiceClient.dll", and "NtWow64QueryInformationProcess64 failed". Additional detection markers include log and process manipulation strings such as "pid:%d CmdLine:%S", "rasauto32.ServiceMain", "del /q/f %s\\%s*", "szTmpDll:%s", "lpCmdLine:%s", and "ReleaseFileFromRes:%s ok!". The condition checks for the presence of these strings within a file of less than 1000KB in size and ensures its PE header starts with "MZ" (0x5a4d hexadecimal).
  Updated-Date: '2024_08_07'
KeyBoy_wab32res:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3d2319f07606016ab195bef9dc366f2d
  Ruleset: securityonion-yara
  Summary: This rule detects the KeyBoy Loader, specifically the DLL file named "wab32res.dll". This loader is associated with the cyber espionage group Tropic Trooper, known for targeting entities in East Asia. The rule identifies specific string patterns within the DLL related to unique file paths, process creation commands, and error messages linked to the loader's execution and resource management. The detection criteria include the presence of particular ASCII strings and a file size limitation, ensuring that the rule effectively identifies the malicious loader.
  Updated-Date: '2024_08_07'
KeyBoys_malware_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 018a86791da7a9044bffbfdc8042e23e
  Ruleset: securityonion-yara
  Summary: This rule detects the KeyBoys malware, known for its sophisticated techniques of system exploitation and persistence. It identifies suspicious activities such as adding registry entries to run a malicious ServiceDll, creating or modifying services to auto-start, altering Windows Winlogon settings to disable system file checks, and executing commands via renamed instances of cmd.exe or svchost.exe. The malware exhibits typical behavior like granting file permissions, confirming user group memberships, continuous loop using ping commands, and moving files to system directories like dllcache. The rule focuses on the presence of specific import hash values, exports, and characteristic strings found in the malware's binary.
  Updated-Date: '2024_08_07'
Keylogger_CN_APT:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4f2cb45c3ab940e2a50e9a255de439d4
  Ruleset: securityonion-yara
  Summary: This rule detects a Chinese variant of a keylogger by identifying specific strings and patterns associated with its behavior. These include user-agent strings mimicking old Internet Explorer versions, commands that manipulate file attributes, reference to system information gathering commands, system directory listings, and HTTP references used for command and control communication. Additionally, it looks for various temporary filenames used by the keylogger, such as "desktop.tmp" and "agc.tmp." The file must also meet certain conditions related to file signature and size. This detection helps in identifying malicious keylogging activities that collect and transmit system and user data.
  Updated-Date: '2024_08_07'
KiwiTaskmgr_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3a08bdbc1a6932af92dc95f3af61bca6
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the Chinese hacktool, specifically the KiwiTaskmgr.exe file. The detection parameters include specific strings found within the file such as "Process Ok, Memory Ok, resuming process :)", "Kiwi Taskmgr no-gpo", and "KiwiAndTaskMgr". Additionally, the file must have a PE header signature (0x5a4d) and a size of less than 300KB. These criteria collectively help in identifying the malicious KiwiTaskmgr.exe file.
  Updated-Date: '2024_08_07'
Korplug_FAST:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 493b8eb3e15215010f3ae9f06940f9e1
  Ruleset: securityonion-yara
  Summary: This rule detects the Korplug/PlugX malware FAST variant by identifying specific strings and patterns associated with its execution. It examines the presence of commands involving "rundll32.exe" and references to "ShadowPlay," "nvdisps.dll," and "nvdisps_user.dat," which are indicative of the malware's attempt to disguise itself as legitimate system components. The rule also looks for executable files under 500KB starting with the common DOS header identifier 0x5a4d.
  Updated-Date: '2024_08_07'
Kraken_Bot_Sample:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: fac5add3d358da72c165e4a684650955
  Ruleset: securityonion-yara
  Summary: This rule detects the Kraken Bot malware, specifically targeting a file named "inf.bin." The detection criteria are based on specific strings including "%s=?getname," "&COMPUTER=^," base64 encoded representations of '%appdata%' and '%WINDIR,' and the string "btcplug." The rule checks for the presence of the "MZ" header, indicating a Windows executable file, and matches all specified strings to confirm the presence of the malware.
  Updated-Date: '2024_08_07'
Kriskynote_Mar17_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2c1a84e6001344467a9bf0c7d2b93835
  Ruleset: securityonion-yara
  Summary: This rule detects the Kriskynote malware by identifying a specific string and opcode patterns in executable files. It searches for the string "gzwrite64" and two distinct sets of opcode patterns within files that contain the "MZ" header and are smaller than 400KB in size. The combination of these conditions allows for the accurate detection of the Kriskynote malware.
  Updated-Date: '2024_08_07'
Kriskynote_Mar17_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2ec9e895af28220fb0f1dd22880369c4
  Ruleset: securityonion-yara
  Summary: This rule detects the Kriskynote malware by identifying specific strings and opcode patterns within executable files. It checks for a particular string "fgjfcn8456fgjhfg89653wetwts" and a sequence of opcodes. Additionally, it verifies that the file starts with the "MZ" header (common in Windows executables) and has a file size of less than 600KB.
  Updated-Date: '2024_08_07'
Kriskynote_Mar17_3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 773c5043930673a22e051589eb1b644a
  Ruleset: securityonion-yara
  Summary: This rule detects the Kriskynote malware by identifying specific strings associated with its behavior. It looks for mentions of "rundll32 %s Check," paths and keys in the Windows registry such as "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\RecentDocs," and certain markers like "name=\"IsUserAdmin\"" and "zok]\\\\\\ZZYYY666564444." The detection criteria also include the presence of a particular executable file header and a file size constraint.
  Updated-Date: '2024_08_07'
LNK_Malicious_Nov1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 016e0b4bc3eafbe7e5e4b40e97e8744e
  Ruleset: securityonion-yara
  Summary: This rule detects a suspicious LNK (shortcut) file that triggers execution of the Windows command prompt (cmd.exe). It identifies patterns suggesting the invocation of command-line operations, specifically checking for direct or indirect references to cmd.exe and typical command syntax. The rule scans for specific string signatures which denote the usage of system paths and commands, and ensures the file size is less than 4KB. Additionally, it filters out files associated with legitimate Microsoft Visual references to reduce false positives.
  Updated-Date: '2024_08_07'
LOG_APT_WEBSHELL_Solarwinds_SUNBURST_Report_Webshell_Dec20_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6897ce7d4438bb45608becfd73139151
  Ruleset: securityonion-yara
  Summary: This rule detects webshell access associated with the SUNBURST malware, specifically by identifying patterns within HTTP requests to the "logoimagehandler.ashx" file that signify malicious usage as outlined in FireEye's report on the SolarWinds incident. The presence of certain parameters and strings in the requests indicates potential exploitation of this webshell.
  Updated-Date: '2024_08_07'
LOG_EXPL_ProxyToken_Exploitation_Aug21_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 494057a7156436d6a1743500d2527b50
  Ruleset: securityonion-yara
  Summary: This rule detects exploitation attempts of the ProxyToken vulnerability (CVE-2021-33766) on Microsoft Exchange Server, specifically focusing on unpatched systems. It identifies specific patterns in HTTP POST requests and error codes, as well as certain URL paths and parameters related to the Exchange Control Panel and security tokens, which are indicative of the vulnerability being exploited.
  Updated-Date: '2024_08_07'
LOG_ProxyNotShell_POC_CVE_2022_41040_Nov22:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 14d94c06cc87554bf4ff07e359b1a898
  Ruleset: securityonion-yara
  Summary: This rule detects logs generated after a successful exploitation attempt using proof-of-concept code targeting vulnerabilities CVE-2022-41040 and CVE-2022-41082, collectively known as ProxyNotShell, in Microsoft Exchange servers. It identifies specific HTTP request methods, such as "POST" and "GET," resulting in a "200" HTTP status code. Additionally, it matches certain URL patterns related to autodiscovery services, which are indicators of the exploitation attempt.
  Updated-Date: '2024_08_07'
LOG_TeamViewer_Connect_Chinese_Keyboard_Layout:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 92d69f81ae3cae3ec0b064f0118ddd5b
  Ruleset: securityonion-yara
  Summary: This rule detects a suspicious TeamViewer log entry indicating that the remote systems had a Chinese keyboard layout. It searches for specific strings within the log files that signify a change to Chinese simplified keyboard layouts, while avoiding repetitive and potentially false positive entries.
  Updated-Date: '2024_08_07'
LOG_TeamViewer_Connect_Russian_Keyboard_Layout:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b0d761516df3d7916dbb1d158965b903
  Ruleset: securityonion-yara
  Summary: This rule detects a suspicious log entry from TeamViewer indicating that the remote system's keyboard layout has been changed to Russian. This detection helps identify potentially unauthorized or anomalous remote access sessions associated with Russian systems, which may indicate malicious activity or misconfigurations.
  Updated-Date: '2024_08_07'
LSASS_memory_dump_file:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b531c2917a760420aa5c8501c7b7b19b
  Ruleset: securityonion-yara
  Summary: This rule detects a LSASS memory dump file by identifying the presence of specific strings associated with LSASS (Local Security Authority Subsystem Service), such as "lsass.exe" and "wdigest.DLL." The condition checks for a particular file header value (0x504D444D) to confirm the dump file's format.
  Updated-Date: '2024_08_07'
Laudanum_Tools_Generic:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9080af23f93b43026df07647c81cc444
  Ruleset: securityonion-yara
  Summary: This rule detects Laudanum Injector Tools by checking for specific file hashes and verifying the presence of strings related to the Laudanum Project, such as "***  laudanum@secureideas.net" and "*** Laudanum Project". The rule applies to files smaller than 60KB in size.
  Updated-Date: '2024_08_07'
Lazagne_PW_Dumper:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8e8b2eaf2efbd8e1db8a788c979915c9
  Ruleset: securityonion-yara
  Summary: This rule detects the Lazagne Password Dumper, a tool designed to retrieve various passwords stored on a local computer. It identifies the presence of Lazagne by checking for specific strings in the code, including "Crypto.Hash," "laZagne," and "impacket.winregistry." The condition is met if any three of these strings are found.
  Updated-Date: '2024_08_07'
Lazarus_Dec_17_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b10ce0b66d086efedfde3ddc3f1b872a
  Ruleset: securityonion-yara
  Summary: This rule detects Lazarus malware associated with an incident that occurred in December 2017. It identifies specific strings within the malware, such as "::DataSpace/Storage/MSCompressed/Transform/", "HHA Version 4.", a particular byte sequence, and "bUEeYE". The conditions for detection include a specific file signature and a file size of less than 4000KB.
  Updated-Date: '2024_08_07'
Lazarus_Dec_17_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e511842a9880cdec68f9c1586f10f184
  Ruleset: securityonion-yara
  Summary: This rule detects the Lazarus malware associated with a December 2017 incident. The malware is characterized by the presence of certain strings such as "SkypeSetup.exe" and "Skype Technologies S.A.". The condition for detection includes files beginning with the hexadecimal signature 0x5a4d and having a file size of less than 7000KB, with all specified strings present and excluding one related to Microsoft's code signing.
  Updated-Date: '2024_08_07'
Lazarus_Dec_17_4:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5aff3e6b55d5adc7606971505387cef1
  Ruleset: securityonion-yara
  Summary: This rule detects Lazarus malware associated with an incident that occurred in December 2017. It targets a specific malicious script file named "ithumb.js," recognizing it by searching for a unique obfuscated string pattern within the file. The rule is triggered when the file size is less than 9KB and the specified string pattern is found. The rule identifies the malware by comparing file hashes to known values, providing an efficient mechanism for detecting this specific threat.
  Updated-Date: '2024_08_07'
Lazarus_Dec_17_5:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 45b22dbd400b5744405a3a4633b23b8d
  Ruleset: securityonion-yara
  Summary: This rule detects Lazarus malware associated with an incident from December 2017. It identifies specific patterns in PowerShell scripts, HTTP request functions, scheduled task commands, and command execution strings commonly used by the malware. The rule checks for characteristic strings related to proxy server updates, hidden window styles in PowerShell executions, and commands verifying administrative privileges on the infected system. The condition is met if the file size is less than 500KB and at least one of the specified patterns is found.
  Updated-Date: '2024_08_07'
Leviathan_CobaltStrike_Sample_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9cd13f20a71a6ca4651dbd5dfc398021
  Ruleset: securityonion-yara
  Summary: This rule detects a specific sample of Cobalt Strike, a widely-used penetration testing tool often repurposed by threat actors for malicious activities. The rule identifies the sample by checking for particular string patterns associated with Cobalt Strike behaviors, including strings that script the use of PowerShell commands to bypass execution policies and download commands from local addresses. It also includes error messages related to process injection and memory writing, as well as the handling of process tokens. These characteristics are all indicative of the typical operational parameters and diagnostic messages generated during Cobalt Strike activity. The rule ensures its efficacy by validating that the file has an MZ header and is smaller than 600KB in size.
  Updated-Date: '2024_08_07'
LightFTP_Config:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 691b41e5d98d3eb055a749297fcee631
  Ruleset: securityonion-yara
  Summary: This rule detects configuration files of the LightFTP server, a lightweight FTP server. It identifies specific patterns and keywords within the file, such as "maxusers=", "[ftpconfig]", "accs=readonly", "[anonymous]", "accs=", and "pswd=" to ascertain its presence. The rule is triggered if the file meets certain criteria, including being less than 1KB in size and containing all the specified strings.
  Updated-Date: '2024_08_07'
LightFTP_fftp_x86_64:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ad14096b99b3252903cc3afcd255435a
  Ruleset: securityonion-yara
  Summary: This rule detects a light FTP server known as LightFTP, specifically targeting its x86_64 version. It identifies instances of the server by looking for specific string signatures within files, such as the configuration file "fftp.cfg", server response messages like "220 LightFTP server v1.0 ready" and "250 Requested file action okay, completed.", as well as log messages indicating successful logins and thread terminations. The rule also considers the file size, ensuring it is less than 250KB, and verifies the file header matches a known value to confirm the detection.
  Updated-Date: '2024_08_07'
LinuxHacktool_eyes_a:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d97dfc9c2aa0af5ed8f1bf9616d06f0a
  Ruleset: securityonion-yara
  Summary: This rule detects specific Linux hack tools, identifying scripts or commands within files that suggest malicious activity. It looks for the presence of certain strings related to the unauthorized emailing of user data, file manipulation, and deletion. These strings include commands such as sending an email with the subject "eyes" to a specific address, renaming and deleting a log file, and executing a port scan. Additionally, it identifies specific comments likely associated with the hacker group or individual named "Eyes." By detecting at least two of these specified strings, the rule helps in identifying potential hacking attempts or unauthorized system activities.
  Updated-Date: '2024_08_07'
LinuxHacktool_eyes_mass:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 59c2dea4e3a019a4c9221fdbe95e27af
  Ruleset: securityonion-yara
  Summary: This rule detects Linux hack tools utilized for mass file manipulation. It identifies specific strings used in scripts, such as commands to mass email user data, start private scanning activities, and terminate processes related to scanning tools. The rule also looks for text outputs indicating the presence of specific hackers and celebratory or stylistic messages within the script, suggesting its possible malicious intent.
  Updated-Date: '2024_08_07'
LinuxHacktool_eyes_pscan2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 075d984528f8c76ab15eaa90a0ebe690
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a Linux hack tool called "pscan2." The tool is identified by specific text patterns within files, which indicate functionalities related to network scanning and port scanning. Key strings include messages about scan completion, usage instructions, scanning progress, invalid IP addresses, and socket allocation issues. These indicators help identify the tool's presence on a system, flagging potential malicious use for network reconnaissance and exploitation.
  Updated-Date: '2024_08_07'
LinuxHacktool_eyes_pscan2_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 28e60143775e1ee9163d5ec3f2f98c47
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a Linux hack tool by identifying specific strings associated with the file `pscan2.c`. These strings include patterns related to network scanning outputs and usage instructions, such as formatting output logs, usage syntax for command-line arguments, completion messages, and network address family settings. The rule triggers if at least two of these specific strings are found.
  Updated-Date: '2024_08_07'
LinuxHacktool_eyes_scanssh:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 675648b32d6777e0a76b7c2594efa9dc
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of specific Linux hack tools focused on SSH scans by identifying certain debug and error messages associated with SSH connections and key management. These messages include phrases like "Connection closed by remote host," "Remote connection closed by signal SIG%s %s," and "Reading private key %s failed (bad passphrase?)." The rule particularly targets indicators such as issues with reading private keys, connection terminations, and discrepancies in server and user key preferences.
  Updated-Date: '2024_08_07'
Linux_Portscan_Shark_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e15a7f3efedf24c34282f7ba171a2613
  Ruleset: securityonion-yara
  Summary: This rule detects the Linux Port Scanner Shark by identifying specific patterns within files. It looks for commands that remove certain log and session files, indicative of scan activity cleanup. Additionally, it monitors for error messages related to buffer overflow and stack smashing detections, characteristics commonly associated with malicious port scanning activities. The rule applies these checks to files that start with a particular magic number.
  Updated-Date: '2024_08_07'
Linux_Portscan_Shark_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c074fb25a542f87bef0fb345a4451c5a
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a Linux port-scanning tool called "Shark." It identifies the tool by specific strings used within the program, such as command usage instructions that include parameters for IP files, user credentials, connection timeout, and other details, a warning about illegal server modulus differences, and a command to remove a scan log file. These distinct strings help in recognizing the activity of this port scanner on a Linux system.
  Updated-Date: '2024_08_07'
LiuDoor_Malware_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f1a15a4644c70f32d46a36cc5653b484
  Ruleset: securityonion-yara
  Summary: 'This rule detects the presence of the Liudoor Trojan, specifically used in the Terracotta APT. It identifies this malware by looking for specific string patterns such as "svchostdllserver.dll," "SvcHostDLL: RegisterServiceCtrlHandler %S failed," and "\\nbtstat.exe," along with using the file identifier "DataVersionEx." The rule also evaluates the file''s characteristics, verifying it begins with the typical Windows executable header (0x5a4d) and ensuring that the file size is less than 150KB.'
  Updated-Date: '2024_08_07'
LiuDoor_Malware_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: de800781f00af4cf853c215f53252e64
  Ruleset: securityonion-yara
  Summary: This rule detects the Liudoor Trojan, a type of malware used in the Terracotta Advanced Persistent Threat (APT). The detection focuses on identifying specific string patterns and file attributes unique to the Liudoor Trojan, including the filename "svchostdllserver.dll" and a distinctive encoded string. Additionally, the rule checks for a universal header value of 0x5a4d and ensures the file size is less than 100KB to confirm the presence of the trojan.
  Updated-Date: '2024_08_07'
Liz0ziM_Private_Safe_Mode_Command_Execuriton_Bypass_Exploit_php:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 174fde970f0b4ff799966e70c3690587
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the Liz0ziM Private Safe Mode Command Execution Bypass Exploit in a PHP file. It looks for specific strings within the file, such as mentions of "/var/cpanel/accounting.log" in HTML options, a reference to the exploit by name, and PHP code that prints a formatted message with a user ID.
  Updated-Date: '2024_08_07'
Loader_MSIL_AllTheThings_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 93f266709a7a9d4a6f5a96b7351430b4
  Ruleset: securityonion-yara
  Summary: This rule detects .NET Portable Executable (PE) files that contain a specific ProjectGuid, identified as "542ccc64-c4c3-4c03-abcd-199a11b26754," which is associated with the 'AllTheThings' .NET project. It identifies the presence of the TypeLibGUID in .NET binaries, comparing it with the ProjectGuid found in the '.csproj' file of the project. This helps in flagging .NET executables related to this particular project setup.
  Updated-Date: '2024_08_07'
Loader_MSIL_CSharpSectionInjection_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ec512c72260dd3201af811a2e9b9223c
  Ruleset: securityonion-yara
  Summary: This rule detects .NET PE files that include a specific ProjectGuid associated with a C# project, identified through a TypeLibGUID in the binary. This characteristic is indicative of a connection to the 'C_Sharp_SectionInjection' project. The detection is based on the presence of a distinct GUID string within the file.
  Updated-Date: '2024_08_07'
Loader_MSIL_Generic_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 03a73ed11a28b882cac19d5ebaa008d3
  Ruleset: securityonion-yara
  Summary: This rule detects a generic MSIL loader often involved in cyber attacks. It identifies specific patterns, such as "_CorExeMain" and certain opcode sequences, as well as the presence of key strings like "DllImportAttribute", "FromBase64String", "ResumeThread", "OpenThread", "SuspendThread", and "QueueUserAPC". These characteristics suggest the program is designed to manipulate threads and perform base64 decoding, typically behavior associated with malicious software loaders. The rule additionally checks for the PE file format signature to ensure accurate detection.
  Updated-Date: '2024_08_07'
Loader_MSIL_InMemoryCompilation_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b4d273c50fcba97dd769a5764af373cf
  Ruleset: securityonion-yara
  Summary: This rule detects a .NET Portable Executable (PE) file that includes a specific ProjectGuid associated with the "In-MemoryCompilation" project. It identifies the presence of the TypeLibGUID "524d2687-0042-4f93-b695-5579f3865205" within the binary, which corresponds to the unique identifier from a .NET project's '.csproj' file. This detection is primarily useful for identifying .NET binaries linked to specific project configurations, potentially used in malicious activities as detailed in the provided reference.
  Updated-Date: '2024_08_07'
Loader_MSIL_NETAssemblyInject_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 76fbe7e3491a510043e1acfe2f564e21
  Ruleset: securityonion-yara
  Summary: This rule detects .NET Portable Executables (PE) that contain specific Type Library GUIDs (Globally Unique Identifiers) associated with the 'NET-Assembly-Inject' project. The rule examines certain GUID strings within the .NET binary to identify if they map directly to the ProjectGuid from the '.csproj' file of a .NET project. This targeting mechanism is based on the details shared by FireEye regarding particular cyber-attack behavior.
  Updated-Date: '2024_08_07'
Loader_MSIL_NetshShellCodeRunner_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 336a7b702ee7377f1c36883d377e1159
  Ruleset: securityonion-yara
  Summary: This rule detects .NET PE files associated with the 'NetshShellCodeRunner' project by searching for a specific TypeLibGUID within the binary. This GUID corresponds to the ProjectGuid found in the project's '.csproj' file, enabling identification of the project-related binary.
  Updated-Date: '2024_08_07'
Loader_MSIL_RURALBISHOP_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8dbc1c27c53a7d1ffed473fc98b4b07f
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a malicious MSIL loader known as RURALBISHOP by identifying specific byte patterns and strings within executable files. It searches for hexadecimal patterns indicating functions such as `NtMapViewOfSection`, `NtOpenProcess`, `NtAlertResumeThread`, and `LdrGetProcedureAddress`, as well as the string `SharpSploit.Execution.DynamicInvoke`, which is associated with dynamic code execution in .NET applications. The use of these indicators suggests the operation of a sophisticated loader mechanism employed in malicious activities.
  Updated-Date: '2024_08_07'
Loader_MSIL_RURALBISHOP_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f80bb58a6513b74a7be351d52e7d6a95
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the Loader_MSIL_RURALBISHOP_2 malware. It identifies malicious activity by looking for specific Windows API functions and certain patterns in the assembly code strings. These functions include `NtMapViewOfSection`, `NtOpenProcess`, `NtAlertResumeThread`, and `LdrGetProcedureAddress`, all of which are indicative of process manipulation and injection techniques. Additionally, it searches for specific string patterns related to injection and cleaning operations, along with a reference to SharpSploit's dynamic invocation functionality. The rule applies to files starting with the 'MZ' header and containing the 'PE' signature.
  Updated-Date: '2024_08_07'
Loader_MSIL_RuralBishop_1b:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 48c2ccd3c4d6fd9620c42ee66750eb2c
  Ruleset: securityonion-yara
  Summary: This rule detects .NET Portable Executable (PE) files by identifying the presence of a specific TypeLibGUID, which is "FE4414D9-1D7E-4EEB-B781-D278FE7A5619". This GUID directly maps to a ProjectGuid found in the .csproj file of a public .NET project named RuralBishop. The rule ensures that the file in question is a PE file by checking for the 'MZ' header and PE signature before verifying the presence of the targeted TypeLibGUID.
  Updated-Date: '2024_08_07'
Loader_MSIL_SharPy_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d814c6348350f7ebf989671c2f5a9dbf
  Ruleset: securityonion-yara
  Summary: This rule detects .NET PE files associated with the 'SharPy' project by examining the TypeLibGUID value and matching it with the ProjectGuid found in the '.csproj' file. The specific TypeLibGUID being searched for is "f6cf1d3b-3e43-4ecf-bb6d-6731610b4866".
  Updated-Date: '2024_08_07'
Loader_MSIL_TrimBishop_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ef8ac9cdf126265427acc6de5892e6e7
  Ruleset: securityonion-yara
  Summary: This rule detects .NET PE files that exhibit characteristics associated with the TrimBishop tool, specifically the presence of the string "msg" more than 60 times within the file. It identifies unique function names and strings, such as "ReverseString" and "DTrim", which are indicative of TrimBishop. The rule also checks for strings like "RuralBishop" and others, denoting that although TrimBishop reverses strings found in RuralBishop, some overlap in string usage occurs between these tools. The detection criteria include the presence of the "_CorExeMain" string and multiple specific strings indicative of TrimBishop functionalities.
  Updated-Date: '2024_08_07'
Loader_MSIL_WMIRunner_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 469ddfb5e4d731bf70cb0df66c52e98c
  Ruleset: securityonion-yara
  Summary: This rule detects .NET PE files that contain a specific ProjectGuid from the 'WMIRunner' project. The TypeLibGUID present in such a .NET binary matches the ProjectGuid found in the corresponding '.csproj' file, which is identified by the specific GUID "6cc61995-9fd5-4649-b3cc-6f001d60ceda".
  Updated-Date: '2024_08_07'
Loader_MSIL_WildChild_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 119547c68469cf622c1d8614d39bcd73
  Ruleset: securityonion-yara
  Summary: This rule detects .NET PE files that contain a specific ProjectGuid associated with the WildChild project by identifying a TypeLibGUID within the binary. This GUID matches the one found in the WildChild project's '.csproj' file, helping to pinpoint files linked to this particular .NET project. The presence of this unique identifier in a PE file is used as a signature to identify these files effectively.
  Updated-Date: '2024_08_07'
Loader_Win_Generic_17:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 832c32f3aebc389f1eed618db7827862
  Ruleset: securityonion-yara
  Summary: This rule detects a specific loader malware targeting Windows systems. It identifies the presence of malicious code by searching for specific byte patterns commonly associated with loader operations, as well as the functions "fread" and "fwrite" within executable files. The condition for detection includes ensuring that the file headers match those typical of Windows executables.
  Updated-Date: '2024_08_07'
Loader_Win_Generic_18:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 026e1c7e116144133f985492c9943825
  Ruleset: securityonion-yara
  Summary: This rule detects a generic Windows loader associated with malicious activities. It recognizes specific byte sequences and function names such as "fread" and "fwrite" within executable files that follow the PE (Portable Executable) format, flagged by the presence of characteristic headers. The detection leverages unique patterns in the machine code to identify the loader's behavior and structure.
  Updated-Date: '2024_08_07'
Loader_Win_Generic_19:
  Created-Date: '2024_08_06'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 61e6ece2d752de2272f002fa6840557b
  Ruleset: securityonion-yara
  Summary: This rule detects a generic Windows loader by identifying specific byte sequences and string indicators commonly associated with loading processes. It checks for the presence of the "MZ" header and the PE signature in executable files alongside characteristic patterns such as certain byte sequences, the "VirtualProtect" function, and the "malloc" function, helping to flag potential malicious activity in Windows environments.
  Updated-Date: '2024_08_06'
Loader_Win_Generic_20:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b78ced258435498ae02985c39452b741
  Ruleset: securityonion-yara
  Summary: This rule detects a generic Windows loader by examining specific sequences of bytes and strings commonly associated with malicious behavior. It looks for byte patterns indicative of suspicious activities such as memory allocation and protection changes, marked by the presence of functions like "VirtualProtect" and "malloc". The rule also verifies that the file being analyzed is a PE (Portable Executable) file, indicating that it is a Windows executable.
  Updated-Date: '2024_08_07'
Locky_Ransomware:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0c4866a170d1ff3c4d7afc2175c5c969
  Ruleset: securityonion-yara
  Summary: This rule detects Locky Ransomware, a malicious software that encrypts users' files and demands ransom for their release. It matches specific byte sequences within the file, which are indicative of Locky's code at particular memory addresses. These sequences can also potentially match another malware known as Win32/Kuluoz.
  Updated-Date: '2024_08_07'
LokiBot_Dropper_Packed_R11_Feb18:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2046f44ea613dce96d5adff0402c5322
  Ruleset: securityonion-yara
  Summary: This rule detects a packed dropper associated with the LokiBot malware, identified within a file named "copy.pdf.r11." Specifically, it checks for a unique hash and a particular file path related to Microsoft Visual Studio, with restrictions on file size and structure.
  Updated-Date: '2024_08_07'
LokiBot_Dropper_ScanCopyPDF_Feb18:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 55880d2a9f713af93d3d1bc5851dde94
  Ruleset: securityonion-yara
  Summary: This rule detects the LokiBot dropper associated with the file named "Scan Copy.pdf.com." It identifies specific patterns within the file, including certain strings like a reference to "Win32 Scan Copy.pdf" in wide format, a path pointing to the Visual Basic library VB6.OLB in an ASCII string, and other strings like "Compiling2.exe," "Unstalled2," and "Compiling.exe." It triggers on files with a PE header and a file size less than 1000KB if these strings are present.
  Updated-Date: '2024_08_07'
MAL_APT_Operation_ShadowHammer_MalSetup:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 55cc0c16ab994c069ea2e7c6b4875fa1
  Ruleset: securityonion-yara
  Summary: This rule detects a malicious file employed by the BARIUM group in Operation ShadowHammer. The rule identifies the presence of specific strings related to AsusShellCode directories, such as "\\AsusShellCode\\Release" and "\\AsusShellCode\\Debug". It is designed to trigger based on the presence of the specified magic number at the beginning of the file and the occurrence of at least one of the targeted strings within the file content. The evaluation is based on predefined file hashes to ensure accurate detection of the malicious setup.
  Updated-Date: '2024_08_07'
MAL_ARM_LNX_Mirai_Mar13_2022:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d35bdfdf4ea623c684dcddf1492a8d4e
  Ruleset: securityonion-yara
  Summary: This rule detects a new ARM variant of the Mirai malware by identifying specific strings and attack patterns in the binary. The rule looks for references to file paths and certain functions within the malware's code, such as "attack.c," "attack_gre_eth," and "resolve_cnc_addr," among others. It also checks for the presence of the ELF file magic number at the beginning of the file to confirm it is an ARM executable.
  Updated-Date: '2024_08_07'
MAL_AirdViper_Sample_Apr18_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2e59b8c918aa9069d7ad364d1f13ca5a
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the Arid Viper malware sample by identifying specific command-line strings and file patterns linked to the malware's behavior. It looks for indications such as the use of "cmd.exe" to execute ping commands and delete tasks using a specified format, and strings that indicate data parameters like "daenerys" and "betriebssystem" used in the malware's operations. The rule also targets tasks related to termination commands and file paths that include "TaskWindows.exe," "MicrosoftOneDrives.exe," and "SeanSansom.txt." The detection is based on specific conditions related to file type and size.
  Updated-Date: '2024_08_07'
MAL_AveMaria_RAT_Jul19:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b75e9e6f753b637981638bb90fe6eda7
  Ruleset: securityonion-yara
  Summary: This rule detects AveMaria RAT, a Remote Access Trojan. It identifies the presence of certain string patterns within an executable file that starts with the 'MZ' header and is smaller than 3000KB in size. Specifically, it looks for strings such as "operator co_await," "uohlyatqn," and "index = [%d][%d][%d][%d]," all in ASCII format.
  Updated-Date: '2024_08_07'
MAL_BR_Report_TheDao:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 61a5dd4d5c5c89060b0dc2857dbd50e5
  Ruleset: securityonion-yara
  Summary: This rule detects a specific indicator within malicious UPX-packed samples. It identifies the presence of the bytes pattern "DA A0" located at the overlay section of Portable Executable (PE) files, which indicates modification often associated with malware. The rule applies if the PE file starts with the typical "MZ" header and the overlay size exceeds 100 bytes.
  Updated-Date: '2024_08_07'
MAL_BackNet_Nov18_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e2ed1506bc06af416ca71552589dce2e
  Ruleset: securityonion-yara
  Summary: This rule detects BackNet malware samples by looking for specific indicators within the executable file. It checks for unique strings used by BackNet, including indications of the program "ProcessedByFody," SQL commands querying antivirus products, and the usage of Windows network and user commands. It also identifies certain phrases such as "browsertornado," a specific mutex named "ThisIsMyMutex-2JUY34DE8E23D7," and patterns associated with administrative privileges and file deletion processes. The rule ensures that the target file is a Windows executable (indicated by the "MZ" header) and is smaller than 2MB, triggering an alert if at least two of these distinct characteristics are found.
  Updated-Date: '2024_08_07'
MAL_Backdoor_Naikon_APT_Sample1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 261c85ab3723539b990b995500706444
  Ruleset: securityonion-yara
  Summary: This rule detects backdoors associated with the Naikon APT group. It identifies specific patterns used in malicious HTTP GET and POST requests, connections to certain domains like "greensky27.vicp.net" and "otna.vicp.net," and distinguishing file paths like "\\tempvxd.vxd.dll" and "\\UserProfile.dll." Additionally, it looks for unique user-agent strings, HTTP headers, and success messages indicative of file execution, as well as references to specific filenames and commands such as "\\cmd.exe." The rule applies to files with an MZ header and a size less than 1000KB.
  Updated-Date: '2024_08_07'
MAL_Backdoor_SPAREPART_SleepGenerator:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 88237d2d5332ac6b61caa30cd3c396af
  Ruleset: securityonion-yara
  Summary: This rule detects the algorithm involved in determining the next sleep timer used by the Malware SPAREPART backdoor. It looks for specific sequences of bytes in the code that correspond to the calculations performed to establish the sleep duration in the malware's operations. These byte sequences are indicative of specific arithmetic and logical operations the malware uses to control its sleep intervals dynamically. The rule identifies these patterns to flag instances of the SPAREPART backdoor's presence within a system.
  Updated-Date: '2024_08_07'
MAL_Backdoor_SPAREPART_Struct:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 061ea2ec89562e498da8c9244654cd84
  Ruleset: securityonion-yara
  Summary: This rule detects a specific PDB file path and a defined struct pattern associated with the SPAREPART backdoor malware. The identified PDB path is "c:\\Users\\user\\Desktop\\ImageAgent\\ImageAgent\\PreAgent\\src\\builder\\agent.pdb", and the rule also looks for a particular byte sequence in the file structure. The conditions for detection include the file being a PE file with a filesize of less than 20KB. This is designed as a hunting rule by Mandiant to identify this malware based on its unique characteristics.
  Updated-Date: '2024_08_07'
MAL_Backdoor_Win_C3_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2d36f46988c39cb051fc0c1b28dd8deb
  Ruleset: securityonion-yara
  Summary: This rule detects Custom Command and Control (C3) binaries, particularly focusing on a specific malware variant. It identifies files smaller than 5MB with PE file headers. The detection is based on the presence of specific strings, including "Dropbox-API-Arg" and several known DLL names such as WINHTTP.dll, SHLWAPI.dll, NETAPI32.dll, and ODBC32.dll. Additionally, it targets specific token strings related to error messages involving tokens.
  Updated-Date: '2024_08_07'
MAL_BurningUmbrella_Sample_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: fdc2d8c180936bfab79ec031bc49c273
  Ruleset: securityonion-yara
  Summary: This rule detects a malware sample detailed in the Burning Umbrella report. The specific malware is identified through a combination of binary strings and characteristics, such as a specific import hash and certain strings located within the initial 1024 bytes. Additionally, the rule ensures that the file signature matches the typical executable format and that the file size is less than 4000KB.
  Updated-Date: '2024_08_07'
MAL_BurningUmbrella_Sample_10:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b933912eaa04171fcc5a7cb1115d7645
  Ruleset: securityonion-yara
  Summary: This rule detects a specific malware sample referenced in the Burning Umbrella report. It identifies the malware by checking if the file starts with the "MZ" header, indicating a Windows executable, and ensuring that the file size is less than 300KB. Additionally, it searches for the string "revjj.syshell.org" within the file to confirm the presence of this particular malware.
  Updated-Date: '2024_08_07'
MAL_BurningUmbrella_Sample_11:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 81ccf224dde84cce5b30c16300734140
  Ruleset: securityonion-yara
  Summary: This rule detects a malware sample associated with the Burning Umbrella report, identifying it by the presence of the string "Resume.app/Contents/Java/Resume.jarPK" within files. The condition checks that the file is a PKZIP archive and under 700KB in size.
  Updated-Date: '2024_08_07'
MAL_BurningUmbrella_Sample_12:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d76fefc37cacab48f83b7b4fdb78bba1
  Ruleset: securityonion-yara
  Summary: This rule detects a malware sample from the Burning Umbrella report, specifically designed to identify a malicious executable associated with particular strings and behaviors. The rule looks for the presence of certain indicators within files, such as the "%SystemRoot%\\System32\\qmgr.dll" file path and "rundll32.exe %s,Startup" command. It also checks for "nvsvcs.dll" and references to the Windows system registry and a specific URL ("http://www.sginternet.net 0"). Furthermore, it identifies a common string related to Microsoft Corporation in executable files smaller than 80KB that export the "SvcServiceMain" function. The combination of these conditions helps pinpoint the particular malware signature.
  Updated-Date: '2024_08_07'
MAL_BurningUmbrella_Sample_13:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 24ea0bf9d3f781c6bda780a51057f615
  Ruleset: securityonion-yara
  Summary: This rule detects a specific malware sample discussed in the Burning Umbrella report. It identifies the malware by verifying that the file begins with the "MZ" header (indicative of a Windows executable), has a file size of less than 100KB, and matches a particular import hash value.
  Updated-Date: '2024_08_07'
MAL_BurningUmbrella_Sample_14:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 723aecdf83ac8e9c128cc5284acdb077
  Ruleset: securityonion-yara
  Summary: This rule detects a specific malware sample referenced in the Burning Umbrella report. It identifies the malware by checking for the presence of the string "C:\\tmp\\Google_updata.exe" in the file, ensuring the file starts with the hexadecimal value 0x5a4d, and confirming the file size is under 40KB.
  Updated-Date: '2024_08_07'
MAL_BurningUmbrella_Sample_15:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e80876084486b58e759003f1fd8c29aa
  Ruleset: securityonion-yara
  Summary: This rule detects a specific malware sample associated with the Burning Umbrella report. The rule is designed to identify files that begin with the "MZ" header, indicating a Windows executable, have a file size of less than 50KB, and match a predefined PE import hash. The hashes listed in the rule correspond to known indicators of the malware sample reported by Burning Umbrella.
  Updated-Date: '2024_08_07'
MAL_BurningUmbrella_Sample_16:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 305364406fd7cd48b66f647331cf5c80
  Ruleset: securityonion-yara
  Summary: This rule detects a specific malware sample associated with the Burning Umbrella report. It identifies the presence of a particular ASCII string "http://netimo.net 0" within executable files smaller than 500KB, starting with the 'MZ' header indicating a Windows executable.
  Updated-Date: '2024_08_07'
MAL_BurningUmbrella_Sample_17:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3754a3c6ad8fcf92e37f51379d769740
  Ruleset: securityonion-yara
  Summary: This rule detects a specific malware sample identified in the Burning Umbrella report. It looks for the presence of particular strings such as "syshell," "Normal.dotm," and "Microsoft Office Word." The condition for detection includes files that begin with the hex value 0x5a4d, which is typical for executable files, and have a file size of less than 400KB.
  Updated-Date: '2024_08_07'
MAL_BurningUmbrella_Sample_18:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: cb2b39e831bafd35abd79138a6f26497
  Ruleset: securityonion-yara
  Summary: This rule detects a malware sample referenced in the Burning Umbrella report. It identifies the presence of the malware by checking if the first two bytes of the file match the hexadecimal value 0x5a4d, which indicates a DOS header. Additionally, the file size must be less than 200KB. It uses various methods to identify the malware, including matching specific import hashes or looking for a particular exported function named "deKernel". It also scans for a specific string "c:\\tmp\\tran.exe" within the file.
  Updated-Date: '2024_08_07'
MAL_BurningUmbrella_Sample_19:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d4bc28217d3fbd2caa7450772608d2ec
  Ruleset: securityonion-yara
  Summary: This rule detects a specific malware sample described in the Burning Umbrella report. It identifies the presence of files such as "Cryption.dll," "tran.exe," and "Kernel.dll," as well as the text string "Now ready to get the file %s!" in a file. The condition checks if the file starts with the hexadecimal value 0x5a4d, which indicates a Windows executable file (MZ file header), has a file size of less than 200KB, and matches at least three of the specified strings.
  Updated-Date: '2024_08_07'
MAL_BurningUmbrella_Sample_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9b91c86536163490a8063b1e1d8dd24b
  Ruleset: securityonion-yara
  Summary: This rule detects a malware sample identified in the Burning Umbrella report. It targets files starting with the sequence 0x5a4d with a size less than 3000KB. Specific string patterns include hexadecimal sequences `{40 00 00 E0 63 68 72 6F 6D 67 75 78}` and `{40 00 00 E0 77 62 68 75 74 66 6F 61}` within the first 1024 bytes, as well as the presence of the string "ActiveX Manager" in a wide format.
  Updated-Date: '2024_08_07'
MAL_BurningUmbrella_Sample_20:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 17559c43b3e26e9db1da5ed38506fad3
  Ruleset: securityonion-yara
  Summary: This rule detects a malware sample detailed in the Burning Umbrella report, characterized by specific hash values and strings within the binary. The rule identifies executable files smaller than 500KB, beginning with a standard Windows executable header (0x5a4d). It targets files which either match a particular import hash value or contain at least two of the specified strings, such as registry paths related to Wordpad and a phrase indicating "expanding computer".
  Updated-Date: '2024_08_07'
MAL_BurningUmbrella_Sample_21:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5cea045e83dc968050a34ae3647053a8
  Ruleset: securityonion-yara
  Summary: This rule detects a specific malware sample detailed in the Burning Umbrella report. The malware is characterized by certain strings found within its code, such as references to a Windows executable file located at "c:\windows\ime\setup.exe," script commands like "ws.run \"later.bat /start\",0Cet," and a command to delete a batch file with "del later.bat." Additionally, the malware's code includes references to an Excel file named "mycrs.xls" and specific shell script parameters like "-el -s2 \"-d%s\" \"-p%s\" \"-sp%s\"" and the creation of WScript objects, indicating attempts to execute commands via the Windows Script Host. The rule applies to files under 500KB and begins with the typical "MZ" file header for executable files.
  Updated-Date: '2024_08_07'
MAL_BurningUmbrella_Sample_22:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c82849544541e1b17898a471115c4b73
  Ruleset: securityonion-yara
  Summary: This rule detects a specific malware sample identified in the Burning Umbrella report by looking for particular strings indicative of the malware's behavior. The rule searches for the presence of registry paths and error messages commonly associated with the infection, such as "SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\", "Fail To Enum Service", and "Host Power ON Time". It also checks for patterns in file upload form data and specific time formatting strings. The malware sample is identified if the file meets these string conditions, has a specific PE header signature, and is below 200KB in size.
  Updated-Date: '2024_08_07'
MAL_BurningUmbrella_Sample_3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b93f54563fcec0979be4e23dda3ab18f
  Ruleset: securityonion-yara
  Summary: This rule detects malware associated with the Burning Umbrella report. It identifies the malware by looking for a specific registry key string related to Word document commands and ensuring the file has an MZ header (indicative of a Windows executable) and a file size smaller than 400KB.
  Updated-Date: '2024_08_07'
MAL_BurningUmbrella_Sample_4:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0cd1a035eb8771186930e098cb2b9cf5
  Ruleset: securityonion-yara
  Summary: This rule detects a specific malware sample associated with the Burning Umbrella report. It identifies executable files named "dumpodbc.exe" and "photo_Bundle.exe", specific error messages related to connection failures, network activity logs, and references to stopping Windows services like "stisvc," "spooler," and "wuauserv." The rule also searches for user-agent strings and specific file paths indicative of malware activity, all within executable files under 50KB in size, particularly those exporting a function named "Print32."
  Updated-Date: '2024_08_07'
MAL_BurningUmbrella_Sample_6:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9843478ffd92996de85d341a4437f210
  Ruleset: securityonion-yara
  Summary: This rule detects a malware sample as described in the Burning Umbrella report. It identifies the presence of specific strings within executable files, such as "ExecuteFile=\"hidcon:nowait:\\\"Word\\\\r.bat\\\"\"" and "InstallPath=\"%Appdata%\\\\Microsoft\"", and applies additional conditions based on the file's header signature and size. This malware operates by hiding its command execution and installing itself in the Microsoft AppData directory.
  Updated-Date: '2024_08_07'
MAL_BurningUmbrella_Sample_7:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3d02c41bdfb6998462848177a5d5bc79
  Ruleset: securityonion-yara
  Summary: This rule detects a specific malware sample associated with the Burning Umbrella report, identified by its unique hashes and import hash. The malware is characterized by having a specific PE header signature (0x5a4d) and a file size of less than 400KB.
  Updated-Date: '2024_08_07'
MAL_BurningUmbrella_Sample_8:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2efcbf06f295912142d0a19db32c8dba
  Ruleset: securityonion-yara
  Summary: This rule detects a specific malware sample described in the Burning Umbrella report. It targets executable files beginning with the "MZ" header and smaller than 400KB in size. The rule identifies the malware by searching for the ASCII string "cmd /c open %s" within the file.
  Updated-Date: '2024_08_07'
MAL_CMD_Script_Obfuscated_Feb19_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: af2a71c90c5e24c93ffe8011e1867d01
  Ruleset: securityonion-yara
  Summary: This rule detects an obfuscated batch script utilizing environment variable substrings, identified by specific hexadecimal patterns within the file. The script is recognized by the presence of certain byte sequences and conditions, including a signature at the beginning and end of the file, as well as specific patterns occurring near the end of the script file. The total file size must be less than 200KB for the rule to match.
  Updated-Date: '2024_08_07'
MAL_CN_FlyStudio_May18_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c8869e114b5fb7f9941d168e3dbcd32d
  Ruleset: securityonion-yara
  Summary: This rule detects a specific malware or hacktool identified in May 2018. It specifically targets files that start with the "MZ" header, which indicates a Windows executable, and are smaller than 5000KB in size. The detection is based on the presence of certain strings, such as "WTNE / MADE BY E COMPILER - WUTAO" and "www.cfyhack.cn", or a specific PE import hash ("65ae5cf17140aeaf91e3e9911da0ee3e").
  Updated-Date: '2024_08_07'
MAL_CRIME_CobaltGang_Malware_Oct19_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3119f478061e0c7563ef75c50977d5e8
  Ruleset: securityonion-yara
  Summary: This rule detects CobaltGang malware based on specific hexadecimal byte patterns and imports hash values within the executable file. It searches for unique code sequences and validates the file type and size to identify malicious samples associated with the CobaltGang group. The malware is identified through a combination of file headers, file size constraints, and pattern matching within the code sections.
  Updated-Date: '2024_08_07'
MAL_CRIME_RANSOM_DearCry_Mar21_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 82e0e699f5feabcb4528de9296010903
  Ruleset: securityonion-yara
  Summary: This rule detects the DearCry ransomware that targets Exchange servers. The malware is identified through the presence of specific strings, such as "dear!!!", "EncryptFile.exe.pdb", "/readme.txt", "C:\\Users\\john\\", and the phrase instructing victims to send a hash. Additionally, certain distinctive byte patterns and file size constraints are used as part of the detection criteria.
  Updated-Date: '2024_08_07'
MAL_CrypRAT_Jan19_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5b8f7bdd5c08c08d5c8ea4a3eb4bf10f
  Ruleset: securityonion-yara
  Summary: This rule detects CrypRAT, a specific type of remote access Trojan (RAT). It scans for files smaller than 600KB that start with the characteristic 'MZ' header of executable files. The detection criteria include the presence of the string "Cryp_RAT" and a particular import hash value.
  Updated-Date: '2024_08_07'
MAL_DNSPIONAGE_Malware_Nov18:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 34a97348e732213a3c2298198463f963
  Ruleset: securityonion-yara
  Summary: 'This rule detects DNSpionage malware by identifying specific strings and characteristics within executable files. It looks for the presence of the string ".0ffice36o.com" and other indicators such as "/Client/Login?id=", ".\\Configure.txt", a specific user-agent string "Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko", and the text "Content-Disposition: form-data; name=\"txts\"". The rule is applicable to files smaller than 1000KB and also checks that the file starts with the "MZ" header, indicative of Windows executable files.'
  Updated-Date: '2024_08_07'
MAL_DOC_ZLoader_Oct20_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b77ceae584ac86697ba2b3b225cb3d30
  Ruleset: securityonion-yara
  Summary: This rule detects weaponized ZLoader documents by identifying specific hexadecimal patterns within files that fall within a size range of 30KB to 40KB and match particular hash values. ZLoader is a type of malware loader often used to deliver banking trojans and other malicious payloads. This detection aids in identifying harmful documents that have been designed to deliver ZLoader malware.
  Updated-Date: '2024_08_07'
MAL_DevilsTongue_HijackDll:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 44e65be3aa8e91bf61c70a5222fd8405
  Ruleset: securityonion-yara
  Summary: This rule detects the SOURGUM's DevilsTongue hijack DLL, which includes specific strings related to Windows system paths like "windows.old\windows," API functions such as "NtQueryInformationThread," and libraries including "dbgHelp.dll" and "SMNew.dll." It also identifies hexadecimal patterns linked to stack manipulation and pseudo-random number generation logic found in the malicious code. Additionally, the rule checks for specific PE characteristics and an import hash to accurately pinpoint the DLL in question.
  Updated-Date: '2024_08_07'
MAL_Dropper_Win_Darkside_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 10b7b2cdfbc602b1c9a431746496cb95
  Ruleset: securityonion-yara
  Summary: This rule detects a binary dropper associated with the DARKSIDE ransomware. It identifies the presence of specific commonly used DLLs such as KERNEL32.dll, USER32.dll, ADVAPI32.dll, and ole32.dll. Additionally, the rule looks for unique byte sequences related to the strings "Microsoft.Windows.Common-Controls" and "Microsoft.VC90.MFC," suggesting checks for specific elements associated with Windows components and versioning. A distinctive pattern of repetitive slashes is also used as an indicator. The binary's size is expected to be between 500KB and 2MB, and the rule verifies the PE header for validity by checking for specific magic values.
  Updated-Date: '2024_08_07'
MAL_ELF_LNX_Mirai_Oct10_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 61e99350452c04c9e3c9a3110670a505
  Ruleset: securityonion-yara
  Summary: This rule detects an ELF variant of the Mirai malware by examining specific string patterns and characteristics within the file. It identifies unique command and control communication strings such as "POST /ctrlt/DeviceUpgrade_1 HTTP/1.1" and "/bin/busybox chmod 777 * /tmp/" among others. The rule is designed to trigger when the file begins with the ELF header, is smaller than 200KB, and contains a combination of specified sequences associated with Mirai's typical behavior or communication protocols.
  Updated-Date: '2024_08_07'
MAL_ELF_LNX_Mirai_Oct10_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3b5b6cdaa1ad73b65edfd6585eee2a57
  Ruleset: securityonion-yara
  Summary: This rule detects ELF malware associated with Mirai, a notorious family of malware primarily known for targeting Internet of Things (IoT) devices to create botnets for launching distributed denial-of-service (DDoS) attacks. It identifies this malware by examining specific byte sequences and verifying that the target file is an ELF format with a size of less than 200KB.
  Updated-Date: '2024_08_07'
MAL_ELF_TorchTriton:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d4c7642cd5a48d55ad8cca644af708ba
  Ruleset: securityonion-yara
  Summary: This rule detects the TorchTriton backdoor, which was distributed with a nightly build of PyTorch. It identifies specific strings, such as error messages related to packet sending failures, an AES key and initialization vector, and various function names including "splitIntoDomains", "packageForTransport", "gatherFiles", and "sendFile". Additionally, the rule looks for an encrypted domain string "&z-%`-(*". The presence of these strings in an ELF file format with the header signature 0x464c457f triggers detection of the backdoor.
  Updated-Date: '2024_08_07'
MAL_ELF_VPNFilter_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6198bae73be4e5e750e3cdae8d6a7a0a
  Ruleset: securityonion-yara
  Summary: 'This rule detects the VPNFilter malware, which targets ELF binaries. The rule searches for specific strings associated with the malware operation, including "Login=", "Password=", "Authorization: Basic", and various formats involving binary file paths and network addresses. The condition for detection ensures the file starts with the appropriate ELF magic number, is less than 100KB in size, and contains all the specified strings.'
  Updated-Date: '2024_08_07'
MAL_ELF_VPNFilter_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1b6a13cbe19357e60482ea917d62ee5d
  Ruleset: securityonion-yara
  Summary: This rule detects the VPNFilter malware, which is identified by specific string indicators such as the User-Agent string for an outdated version of Internet Explorer, the presence of the phrase "passwordPASSWORDpassword," and a reference to a "/tmp/client.key" file. The malware likely targets the ELF file format and is less than 1000KB in size, triggering the rule when these conditions are met.
  Updated-Date: '2024_08_07'
MAL_ELF_VPNFilter_3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 23c96be07b5eeefcdcd487b90570c82a
  Ruleset: securityonion-yara
  Summary: 'This rule detects the presence of the VPNFilter malware, a type of malicious software that targets network routers and other network-attached devices. It searches for specific patterns in executable files smaller than 1000KB, including particular strings related to user-agents and command executions, such as "User-Agent: Mozilla/6.1," "Execute by shell[%d]:," "CONFIG.TOR.name:," and several variations of Mozilla Firefox user-agent strings. Additionally, it checks for certain formatting in command-line and execution process strings, making use of the Linux `/proc` filesystem.'
  Updated-Date: '2024_08_07'
MAL_EXE_LockBit_v2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9937c256613e5b6319163526fa6dad02
  Ruleset: securityonion-yara
  Summary: This rule detects the LockBit version 2.x ransomware, which originated in 2011. It identifies specific indicators such as ransom notes and unique strings associated with the ransomware. These strings include phrases found in encrypted folders and promotional content, as well as distinct URLs and file paths related to the ransomware's operations. The rule looks for specific patterns in the executable file and flags them based on the presence of these characteristic strings.
  Updated-Date: '2024_08_07'
MAL_EXE_PrestigeRansomware:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0d7216ee221661f92a46f4e5c7bdd915
  Ruleset: securityonion-yara
  Summary: This rule detects Prestige Ransomware, a malicious software known for encrypting user data and demanding a ransom for its release. The rule identifies associated ransom notes and messages, which instruct victims on how to contact the attackers via a specific email address and caution against using third-party decryption software or renaming encrypted files to avoid permanent data loss. It also checks for a registry command that modifies how encrypted files are opened using Notepad. The detection is based on these indicators and specific file characteristics.
  Updated-Date: '2024_08_07'
MAL_EXE_RoyalRansomware:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: dfa95c4836e57a228bdd7eddcee8ed7c
  Ruleset: securityonion-yara
  Summary: This rule detects Royal Ransomware, a harmful software variant active since December 2022. It identifies the ransomware through specific indicators, including the extension ".royal_" and the presence of "royal_dll.dll" file name. It also looks for the ransom note titled "README.TXT", command line flags "-networkonly" and "-localonly", messages indicating system compromise by Royal ransomware, and a specific onion URL used by the ransomware operators. The condition checks for these patterns while confirming the presence of a valid executable file structure by inspecting the initial bytes of the file.
  Updated-Date: '2024_08_07'
MAL_Emdivi_Gen3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: cc6aa78a6554782d05d671f1c004b76f
  Ruleset: securityonion-yara
  Summary: This rule detects the Emdivi malware, which is associated with the Blue Termite APT group. It identifies the presence of this malware by looking for specific patterns in the code, such as a particular string that mimics the user agent of Mozilla Internet Explorer 8.0 on Windows XP and directories associated with Mozilla Firefox profiles. It also checks for the presence of certain ASCII strings like "\auto.cfg", "/ncsi.txt", "/en-us/default.aspx", and "cmd /c". Additionally, it examines the use of environment variable "APPDATA". The detection is triggered based on specific file size criteria and a combination of these identifiable patterns within executable files.
  Updated-Date: '2024_08_07'
MAL_Emotet_BKA_Cleanup_Apr21:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8f3d12cff914995958516cf03ff1771a
  Ruleset: securityonion-yara
  Summary: This rule detects a modified Emotet binary that was deployed by the Bundeskriminalamt (Federal Criminal Police Office of Germany) on January 26, 2021. The binary aims to replace the original Emotet by copying it to a quarantine and includes a self-deinstallation routine set for April 25, 2021. This timeframe was selected to gather evidence and facilitate remediation efforts. The rule identifies this specific binary based on its unique size parameters and a particular signature.
  Updated-Date: '2024_08_07'
MAL_Emotet_BKA_Quarantine_Apr21:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ffaa93bc3c86f90628d8641a85a00e4b
  Ruleset: securityonion-yara
  Summary: This rule detects a modified Emotet binary that replaces the original Emotet malware on the infected system. The original Emotet malware is moved to a quarantine directory to preserve evidence. The quarantine location is determined by the initial scope of the infection (whether affecting the user or administered by an administrator) and is stored in a temporary folder. The malware is encrypted using RC4 encryption with a 0x20 byte key, which is located at the beginning of the quarantined file, to prevent accidental reinfection.
  Updated-Date: '2024_08_07'
MAL_Emotet_JS_Dropper_Oct19_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f26c67c210143402864b75d858bca361
  Ruleset: securityonion-yara
  Summary: This rule detects the Emotet JS dropper, specifically identifying a malicious JavaScript file associated with the Emotet malware, which is known for delivering banking trojans and other malware. The detection is based on a unique pattern in the file's content and specific file properties, such as file size and certain byte sequences at the beginning of the file.
  Updated-Date: '2024_08_07'
MAL_Emotet_Jan20_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8c0bdd00ce895d4d84ac322f56d9f55e
  Ruleset: securityonion-yara
  Summary: This rule detects the Emotet malware, a sophisticated banking trojan often used for stealing sensitive information and delivering other malicious payloads. It identifies the presence of Emotet by checking for specific byte patterns within the file and confirms the detection if the file has a particular PE header signature and an import hash value. The rule targets files up to 200KB in size and focuses on unique code sequences typically found in the Emotet malware.
  Updated-Date: '2024_08_07'
MAL_Enfal_Nov22:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c5c1331d8702c3ea5e4f3f6ee03a92cf
  Ruleset: securityonion-yara
  Summary: This rule detects a type of Enfal Malware by identifying its specific byte sequence pattern and checking for certain strings associated with the malware's behavior and typical environment. It flags files under 200KB in size that either match the defined hexadecimal pattern or contain at least three out of five specific strings, such as references to "POWERPNT.exe," "%APPDATA%\\Microsoft\\Windows\\," "%HOMEPATH%," "Server2008," or "%ComSpec%." These strings indicate potential use of directories, executable names, and operating system versions commonly exploited by the malware.
  Updated-Date: '2024_08_07'
MAL_Envrial_Jan18_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 03ac05fd32e7024d459730db8696e5e1
  Ruleset: securityonion-yara
  Summary: This rule detects the Encrial credential stealer malware, which targets login data from various web browsers, including Opera, Comodo Dragon, Google Chrome, Orbitum, and Kometa. It identifies specific file paths and strings associated with the malware's behavior, such as "dlhosta.exe" and "passwords.log," as well as patterns related to exfiltration and storage of stolen credentials.
  Updated-Date: '2024_08_07'
MAL_ExileRAT_Feb19_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ffcd521f52a286e8cf5ef122236d8cbc
  Ruleset: securityonion-yara
  Summary: This rule detects Exile RAT, a type of remote access Trojan. It identifies the presence of Exile RAT by looking for specific strings typically associated with it, such as "Content-Disposition:form-data;name=\"x.bin\"", "syshost.dll", "\\scout\\Release\\scout.pdb", "C:\\data.ini", "my-ip\" value=\"", and "ver:%d.%d.%d". Additionally, the rule checks for a particular import hash and ensures the file size is less than 500KB.
  Updated-Date: '2024_08_07'
MAL_Floxif_Generic:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b3ae2e6ff2016671cc52a959375071c3
  Ruleset: securityonion-yara
  Summary: This rule detects the Floxif malware, a malicious software known for compromising systems. The detection is based on specific characteristics, including a matching PE header signature, file size constraints, an import hash, and the presence of particular export function names ("FloodFix" or "FloodFix2").
  Updated-Date: '2024_08_07'
MAL_GOLDBACKDOOR_LNK:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 28763f5fda587054f5a7fe2e9802b2ac
  Ruleset: securityonion-yara
  Summary: This rule detects a malicious Goldbackdoor LNK file. It looks for a Microsoft Office document header and the specific path to the Word executable. It identifies hexadecimal-encoded strings used in scripts that reference significant functions and DLLs, such as apionedrive.com, kernel32.dll, GlobalAlloc, VirtualProtect, WriteByte, and CreateThread. These checks are used to identify characteristics common to a Goldbackdoor LNK file.
  Updated-Date: '2024_08_07'
MAL_GandCrab_Apr18_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 629a1d4bde3d5e88410774f12f0e35a5
  Ruleset: securityonion-yara
  Summary: This rule detects the GandCrab malware by identifying files with a specific file signature indicating they start with the characters 'MZ', a filesize of less than 800KB, and a specific Import Hash (imphash) value of "7936b0e9491fd747bf2675a7ec8af8ba".
  Updated-Date: '2024_08_07'
MAL_Github_Repo_Compromise_MyJino_Ru_Aug22:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a0af6e2378af055763cc36a4b4c6bb89
  Ruleset: securityonion-yara
  Summary: This rule detects specific URL patterns associated with compromised Github repositories reported in August 2022. The strings mentioned indicate potentially malicious activity involving HTTP requests to a domain hosted on myjino.ru, including 'curl' and 'Post' methods directed toward the URL 'http://ovz1.j19544519.pr46m.vps.myjino.ru'.
  Updated-Date: '2024_08_07'
MAL_GoziCrypter_Dec20_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 619cac0499e769d93a56aafd0ac9d913
  Ruleset: securityonion-yara
  Summary: This rule detects a crypter linked to multiple samples of the Gozi malware. It searches for a specific sequence of hexadecimal bytes within executable files under 1MB in size that start with the 'MZ' header, which is a common signature of Windows executables.
  Updated-Date: '2024_08_07'
MAL_HawkEye_Keylogger_Gen_Dec18:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4a2dcc8278b9fdc4d456b5b0d297a681
  Ruleset: securityonion-yara
  Summary: This rule detects the HawkEye Keylogger Reborn, a malicious software designed for unauthorized monitoring and data theft. It identifies the presence of this keylogger through specific strings indicative of its functionalities, such as "HawkEye Keylogger," "_ScreenshotLogger," and "_PasswordStealer," requiring at least two of these strings to be found to trigger detection.
  Updated-Date: '2024_08_07'
MAL_Hogfish_Report_Related_Sample:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 70e6bfdc83739c3f82cb20da612c3148
  Ruleset: securityonion-yara
  Summary: This rule detects APT10-related malware samples, specifically those associated with Hogfish. It identifies executable files by checking for a PE header signature and a file size less than 1000KB. The rule scrutinizes the PE import hash to match a specific hash ("efad9ff8c0d2a6419bf1dd970bcd806d") and searches for the string "R=user32.dll" within the file to confirm the presence of this malware. This detection approach combines file signature, file size, and specific indicators to accurately identify Hogfish malware samples.
  Updated-Date: '2024_08_07'
MAL_IceId_Core_202104:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d2488185b9386d3dad672482ed03dc4f
  Ruleset: securityonion-yara
  Summary: "This rule detects the Bokbot / IcedID banking trojan, focusing specifically on its core functionalities. It identifies files named \"fixed_loader64.dll\" and scans for various specific strings such as \"mail_vault,\" \"ie_reg,\" \"outlook,\" \"user_num,\" \"cred,\" \"Authorization: Basic,\" \"VaultOpenVault,\" \"sqlite3_free,\" \"cookie.tar,\" and \"DllRegisterServer,\" which are indicative of the malware\u2019s behavior and components. The condition evaluates the file size and ensures the presence of key strings or a combination of them to confirm the detection. This rule is designed to identify the presence of this malware by examining these particular characteristics."
  Updated-Date: '2024_08_07'
MAL_IcedID_Fake_GZIP_Bokbot_202104:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 501aa9dd7170f560c5054ce5f228b7c1
  Ruleset: securityonion-yara
  Summary: This rule detects a signature pattern of the IcedID (also known as Bokbot) banking trojan, focusing on identifying a fake gzip stream provided by the command and control (CC) server. The pattern includes a specific sequence in the gzip header, allowing for recognition of malicious network traffic indicative of IcedID infections.
  Updated-Date: '2024_08_07'
MAL_IcedID_GZIP_LDR_202104:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0639afdb49ca5a830e1a23b6c475798d
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the 2021 initial Bokbot/IcedID loader, which targets fake GZIP payloads. It identifies specific strings often associated with the malware, such as "loader_dll_64.dll," various identifier strings like "_gat=", "_ga=", "_gid=", "_io=", and API functions like "GetAdaptersInfo". Additional markers include references to "WINHTTP.dll," "DllRegisterServer," "PluginInit," and HTTP methods like "POST." The rule also checks for the inclusion of "aws.amazon.com" within the payload. This rule ensures that the identified file follows the specific header format and size constraints typically associated with this malware loader.
  Updated-Date: '2024_08_07'
MAL_IcedId_Core_LDR_202104:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 13fc2d29a73f69b0b77803d67e5ab8dc
  Ruleset: securityonion-yara
  Summary: This rule detects the 2021 loader for the Bokbot/Icedid core by identifying specific attributes and behaviors. The rule looks for the internal name "sadl_64.dll" and checks for the presence of certain strings commonly associated with this malware, such as "GetCommandLineA", "LoadLibraryA", "ProgramData", "SHLWAPI.dll", "SHGetFolderPathA", "DllRegisterServer", "update", "SHELL32.dll", and "CreateThread". Additionally, the rule ensures that the file starts with the "MZ" executable signature and is smaller than 5000KB in size.
  Updated-Date: '2024_08_07'
MAL_JRAT_Oct18_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: fa777b0ae652348a48ab3ea9969a0eee
  Ruleset: securityonion-yara
  Summary: This rule detects the JRAT malware by identifying a specific string, "/JRat.class," within files. It targets files that begin with the hexadecimal value 0x4b50 and are smaller than 700KB in size.
  Updated-Date: '2024_08_07'
MAL_JS_EFile_Apr23_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 22e1bec59e69cebbb01e3f507a9aff54
  Ruleset: securityonion-yara
  Summary: This rule detects JavaScript malware associated with an eFile compromise by identifying specific patterns in the code, such as the initialization of a payload for Chrome and a conditional check for Firefox within the user agent string.
  Updated-Date: '2024_08_07'
MAL_Janicab_LNK:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7e9fd1d584120f0c5692640df5f9e6ba
  Ruleset: securityonion-yara
  Summary: This rule detects LNK (shortcut) files associated with the Janicab malware infection chain by examining specific characteristics. It looks for files that include identifiers such as PDF-related markers ("%PDF-1.5" and "endstream"), command line references related to Windows system utilities ("\\Windows\\System32\\cmd.exe"), and particular binary patterns. It ensures that these LNK files match predefined hashes and checks for specific byte sequences that suggest the file is intended to perform malicious actions.
  Updated-Date: '2024_08_07'
MAL_KHRAT_script:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7b12552f643f0d950ef8b6b6c1c7bae4
  Ruleset: securityonion-yara
  Summary: This rule detects malicious scripts, specifically targeting those derived from the KHRAT malware, which has been used in cyber attacks, including those in Cambodia. It identifies suspicious activities such as the creation of scheduled tasks using `WScript.Shell` and the execution of JavaScript via `rundll32.exe`, as well as the presence of specific class registrations indicative of KHRAT's malicious behavior.
  Updated-Date: '2024_08_07'
MAL_KHRAT_scritplet:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 75f3c1f21f407d5b08b9b2333c5e30a0
  Ruleset: securityonion-yara
  Summary: "This rule detects malicious scriptlets associated with the KHRAT malware used in targeted attacks in Cambodia. It identifies specific strings within the scriptlet, including HTTP requests to a known malicious domain \u201Cupload-dropbox[.]com,\u201D references to Windows Management Instrumentation (WMI) for process enumeration, and commands for setting HTTP request headers. The scriptlet is designed to operate under 1KB in size and leverages VBScript syntax involving HTTP requests and process descriptions, indicating its likely intention for process enumeration and exfiltration activities."
  Updated-Date: '2024_08_07'
MAL_Kwampirs_Apr18:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 874f3e4de7f2bad5ad48dfa36eb15322
  Ruleset: securityonion-yara
  Summary: This rule detects components of the Kwampirs malware, specifically targeting its dropper and main payload elements. It identifies unique byte patterns associated with Kwampirs, including a specific public key, a network XOR key, and characteristic sequences used for decryption and initialization. Kwampirs is known for its involvement in cyber-attacks, particularly against the healthcare sector. This rule helps to pinpoint malicious activities related to this threat by recognizing its distinct binary signatures.
  Updated-Date: '2024_08_07'
MAL_LNX_LinaDoor_Rootkit_May22:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: bda59a0d6630cf2314a1f069c25d4b5e
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the LinaDoor Linux Rootkit on a system. It identifies specific file path strings such as "/dev/net/.../rootkit_/", and particular keywords associated with the rootkit's behavior, such as "did_exec," "rh_reserved_tp_target," "HIDDEN_SERVICES," "bypass_udp_ports," and "DoBypassIP." Additionally, it matches hex patterns representing certain operations within the rootkit's code. The rule sets further conditions that the file must be an ELF executable with a size smaller than 2000KB, while also considering the exclusion of certain file paths like "/wgsyncdaemon.pid."
  Updated-Date: '2024_08_07'
MAL_LNX_RedMenshen_BPFDoor_May23_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0c7d4814cd14cb9b4bd1b1520c3fc14c
  Ruleset: securityonion-yara
  Summary: This rule detects the BPFDoor malware by identifying specific characteristics unique to it. The detection conditions include the presence of specific error messages related to command execution failures, specific file paths like "/var/run/initd.lock", and particular byte sequences and patterns in the file. Additionally, byte sequences associated with the TLS-CHACHA20-POLY1305-SHA256 encryption algorithm are also checked. The rule is designed to detect both file-based features within executables less than 900KB in size and in-memory artifacts by verifying the occurrence of multiple specified strings and byte patterns, ensuring accurate identification even if the malware tries to evade detection through various methods.
  Updated-Date: '2024_08_07'
MAL_LNX_SSHDOOR_Triton:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4ed103237a4583a399ea06c36538b807
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the SSH backdoor known as Triton, which targets Linux systems. It identifies malicious activity by matching specific strings found in SSH-related binaries and various malware components. Some of the key indicators include typical SSH usage messages and connection logs, along with strings and patterns indicative of several malicious files and behaviors such as capturing user credentials, log manipulation, and communication with remote hosts. The rule also identifies characteristics of various code-named malware artifacts and functionalities, including specific log formats, command executions, cryptographic operations, and network interactions commonly associated with Triton.
  Updated-Date: '2024_08_07'
MAL_ME_RawDisk_Agent_Jan20_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4bb7ac4a1203575a24bf5ea148b700a6
  Ruleset: securityonion-yara
  Summary: This rule detects suspicious malware using ElRawDisk, which is associated with the DUSTMAN destructive attack. It identifies specific strings and patterns indicative of such malware, including file paths, error messages, and unique signatures. The rule searches for specific ASCII and wide character strings such as file paths and politically charged messages, as well as distinct hexadecimal patterns within files. The condition checks for a particular file header and ensures the file size is within a specified limit, triggering detection based on the presence of these defining characteristics.
  Updated-Date: '2024_08_07'
MAL_ME_RawDisk_Agent_Jan20_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9c4b803a182a11e3e4a317ad52c02d41
  Ruleset: securityonion-yara
  Summary: This rule detects suspicious malware associated with ElRawDisk. The malware exhibits several characteristic strings and patterns including references to specific executable paths, phrases, and file names such as `\\Release\\Dustman.pdb`, `agent.exe`, and `cmd.exe`. Additionally, it checks for the presence of certain wide strings linked to VirtualBox software and specific entity names like "Down With Bin Salman". The rule also looks at certain hexadecimal sequences that may signal the presence of this malware. It triggers if the file meets specific conditions regarding its header and size, and if any of the suspicious strings or patterns are found.
  Updated-Date: '2024_08_07'
MAL_Malware_Imphash_Mar23_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: fe49998175043a8ce6ce402f38609a85
  Ruleset: securityonion-yara
  Summary: This rule detects malware by identifying known malicious import hash values or specific rich PE header hash values. The rule contains multiple hardcoded hashes, which are indicative of known malware samples. It triggers upon the presence of executables with import hashes matching any of the specified values, ensuring effective detection of variants of the malware. Additionally, it includes strings related to the "Win32 Cabinet Self-Extractor" and "EXTRACTOPT" within the file, adding another layer of detection for potential malicious files. The approach focuses on the initial part of the executable file, given that some samples can be significantly large, exceeding 20MB.
  Updated-Date: '2024_08_07'
MAL_Metasploit_Framework_UA:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6ba9c8de126750c31f2522c0043822d0
  Ruleset: securityonion-yara
  Summary: This rule detects the use of a specific User Agent string, "Mozilla/4.0 (compatible; MSIE 6.1; Windows NT)", which is associated with the Metasploit Framework. The detection is based on matching this User Agent within files smaller than 400KB that begin with the hexadecimal value 0x5a4d.
  Updated-Date: '2024_08_07'
MAL_Mirai_Nov19_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: bc5d7fc9d5375e9054f588a7c9889061
  Ruleset: securityonion-yara
  Summary: This rule detects the Mirai malware, which is identified using specific ASCII strings and hex sequences typical of Mirai's presence. The rule examines files that start with the magic number for the ELF format and are no larger than 100KB. The detection criteria include unique strings like "SERVZUXO", "-loldongs", "/dev/null", and "/bin/busybox". Additionally, a specific hex pattern is also checked within the file.
  Updated-Date: '2024_08_07'
MAL_MuddyWater_DroppedTask_Jun18_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7de44ade95df2ec3baf54155ce97728e
  Ruleset: securityonion-yara
  Summary: This rule detects a dropped Windows task associated with the MudyWater malware campaign that occurred in June 2018. The rule identifies specific characteristics in the dropped task, including the presence of the string "scrobj.dll" with parameters and various configuration-related strings, such as references to Microsoft Connection Manager and DefenderService. Additionally, it looks for markers that indicate an attempt to unregister certain components. The rule triggers if the file starts with a specific byte order mark, is less than 1 KB in size, and contains at least one of the primary indicators or multiple specified strings.
  Updated-Date: '2024_08_07'
MAL_Netfilter_Dropper_Jun_2021_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2d485c5be187ff9b0b75fcf085eeeaa6
  Ruleset: securityonion-yara
  Summary: This rule detects the dropper component of the Netfilter rootkit, which has been identified as being associated with a Chinese Advanced Persistent Threat (APT) group. It works by checking for specific byte sequences and strings that are characteristic of Netfilter's malicious activities, including references in the system to "netfilter.sys" and registry entries related to Netfilter. The detection criteria ensure that the rule is applied only to executable files within a particular size range, enhancing its accuracy in identifying the dropper.
  Updated-Date: '2024_08_07'
MAL_Netfilter_May_2021_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2cca5015794d16acb6e3b74fe248182f
  Ruleset: securityonion-yara
  Summary: This rule detects a Netfilter rootkit associated with a Chinese APT group. It looks for specific byte sequences and string patterns in Windows executable files, particularly between 20KB and 1000KB in size. The detection focuses on unique characteristics of the malicious NETIO.SYS driver as well as specific ASCII patterns and hexadecimal sequences within the file.
  Updated-Date: '2024_08_07'
MAL_Nitol_Malware_Jan19_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4c215e304bf1f44c3e1df3046789664c
  Ruleset: securityonion-yara
  Summary: This rule detects the Nitol malware by identifying specific byte sequences and text strings within the files. It looks for certain hexadecimal patterns and specific strings associated with HTTP GET requests and known user-agent headers that mimic popular web browsers. The user-agent headers include patterns resembling Internet Explorer and Firefox on both Windows and Linux platforms. Additionally, the rule checks for a specific PE (Portable Executable) import hash and ensures the file size is less than 1000KB. The presence of these patterns and conditions helps in identifying and flagging the Nitol malware.
  Updated-Date: '2024_08_07'
MAL_OBFUSC_Unknown_Jan22_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: da82c110de258d30ed92659c9dbb37c5
  Ruleset: securityonion-yara
  Summary: This rule detects samples similar to the reversed Stage3 payload found in the WhisperGate malware observed in a Ukrainian wiper incident. It scans files for specific hexadecimal patterns and string sequences, such as portions of hex code and certain string markers like ".dll" and formatted ASCII sequences. The condition triggering detections includes matching specific file signatures, ensuring that the file size is less than 1000KB, and identifying partially observed patterns to confirm the malicious sample.
  Updated-Date: '2024_08_07'
MAL_OSX_FancyBear_Agent_Jul18_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 951163855ed2485c0748897208c41148
  Ruleset: securityonion-yara
  Summary: This rule detects a FancyBear Agent targeting OSX systems. The malware involves various suspicious activities such as creating directories in the shared users folder, modifying permissions of scripts and binaries, and manipulating launch agent configurations to ensure persistence on the infected system. Specifically, strings indicating filesystem and permission changes, as well as command-line instructions to load launch agents, are used as detection indicators.
  Updated-Date: '2024_08_07'
MAL_PE_Type_BabyShark_Loader:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b3e57b903e12dfd6e427af54f754f65c
  Ruleset: securityonion-yara
  Summary: This rule detects the PE type BabyShark loader, which was identified in a February 2019 blog post by Palo Alto Networks. The rule targets specific characteristics such as the presence of a command to set a registry key for auto-running, the usage pattern of the `mshta.exe` tool to execute an HTA file from a URL, and specific binary sequences indicative of the WinExec function in `kernel32.dll`. It also looks for a particular Import Hash (imphash), and checks the signatures within the PE file for specific issuer information and serial number.
  Updated-Date: '2024_08_07'
MAL_PHP_EFile_Apr23_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a7608be60a9584b8a41d7b17f99da2c1
  Ruleset: securityonion-yara
  Summary: This rule detects PHP-based malware by identifying specific patterns in the code, including the use of the `mt_rand` function with specified parameters, the presence of the file path `"C:\\ProgramData\\Browsers"`, and the usage of `curl_https` to connect to an `$api_url`.
  Updated-Date: '2024_08_07'
MAL_PY_Dimorf:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 930ef7ad4afdb7459ffc36f7330a28f3
  Ruleset: securityonion-yara
  Summary: This rule detects Dimorf ransomware by identifying specific functions and file indicators associated with it. It searches for the presence of Python function definitions like "def find_and_encrypt" and "def check_os," as well as the logging file "log_dimorf.log" and the file extension ".dimorf". These elements collectively help identify the ransomware's presence and activity.
  Updated-Date: '2024_08_07'
MAL_Parite_Malware_May19_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b43051c86efcf72ca291300688540c30
  Ruleset: securityonion-yara
  Summary: This rule detects Parite malware by identifying specific characteristics within a file, such as the presence of a command to kill the cmd.exe process, the "LOADERX64.dll" string, and certain patterns related to "dllhot.exe." The rule checks for the "dllhot.exe" executable with specific parameters, ensuring that if any combination of these patterns is found and the file matches the specified criteria, the file is flagged as potentially containing the Parite malware.
  Updated-Date: '2024_08_07'
MAL_Parite_Malware_May19_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ff7c1866e6656ee516e511fa8af56f37
  Ruleset: securityonion-yara
  Summary: This rule detects the Parite malware by examining specific Import Hash (Imphash) values. It identifies files with an MZ header that are smaller than 18000KB and match an Imphash of either "b132a2719be01a6ef87d9939d785e19e" or "78f4f885323ffee9f8fa011455d0523d". Parite is a type of malware known for infecting executable files.
  Updated-Date: '2024_08_07'
MAL_Passwordstate_Moserware_Backdoor_Apr21_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6dd2c3a65368dd8c0ee80f6e6d654886
  Ruleset: securityonion-yara
  Summary: This rule detects a backdoor used in an incident involving the Passwordstate software, a password manager. Indicators include a specific URL associated with the attack, references to system settings and cryptographic functions within Passwordstate, and a User-Agent string mimicking a common web browser. Additionally, it looks for particular hexadecimal patterns in the code, checks for a Windows executable file header, and ensures the file size is under 200KB.
  Updated-Date: '2024_08_07'
MAL_Payload_F5_BIG_IP_Exploitations_Jul20_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 85cfc13d798d9c0fa643e279f50229a5
  Ruleset: securityonion-yara
  Summary: This rule detects malicious activities exploiting the CVE-2020-5902 vulnerability in F5 BIG-IP software. It identifies specific strings within files smaller than 300KB that correlate with malicious behavior, such as altering system configurations, scheduled task creation, adjusting file permissions, and using wget for downloading resources. These indicators suggest an attack leveraging the F5 BIG-IP's Traffic Management User Interface (TMUI) remote code execution vulnerability to perform unauthorized actions on the system.
  Updated-Date: '2024_08_07'
MAL_Prolock_Malware:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3f4f0d3b81908fc84d0c33eed31d474c
  Ruleset: securityonion-yara
  Summary: This rule detects Prolock malware, including both its encrypted and decrypted forms. The detection is based on the presence of specific code patterns related to decryption routines and identifiable strings that indicate ransomware activity, such as decryption instructions and ransom payment contact info. The rule looks for Prolock-specific strings and cryptographic code segments within files smaller than 100KB, ensuring a focus on relevant file characteristics that signify the presence of this malware.
  Updated-Date: '2024_08_07'
MAL_QBot_HTML_Smuggling_Indicators_Oct22_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3f77e55827138cea892fcd251f0aea8e
  Ruleset: securityonion-yara
  Summary: This rule detects double and triple base64 encoded PKZIP headers as found in HTML files and email attachments associated with QBot malware. QBot, a type of banking Trojan, leverages these encoding methods to smuggle malicious payloads through HTML files and emails. The rule identifies specific encoded strings and reversed versions, distinguishing between their usage in HTML content and email attachments, ensuring the detection of these encoding techniques while avoiding false positives in email transfer encodings.
  Updated-Date: '2024_08_07'
MAL_QakBotAntiVM_AntiVM_Bypass_Feb23:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 02bc276a8968765a4e25d3ea83883e44
  Ruleset: securityonion-yara
  Summary: This rule detects a specific code sequence used by the QakBot malware to bypass anti-virtual machine (anti-VM) checks. QakBot is a notorious banking trojan known for its evasion techniques and data-stealing capabilities. The rule focuses on identifying patterns in the code that indicate efforts to evade detection within virtual environments, thereby facilitating its malicious operations.
  Updated-Date: '2024_08_07'
MAL_QakBotLoader_Export_Section_Feb23:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0debadd43c98c80a4665d944da879b20
  Ruleset: securityonion-yara
  Summary: This rule detects QakBot malware by identifying specific patterns within the export section of a file. QakBot is a banking trojan known for stealing sensitive information and creating backdoors. The rule searches for particular hexadecimal strings that match known QakBot export function signatures, ensuring the file has a valid DOS header before these checks.
  Updated-Date: '2024_08_07'
MAL_QakBot_ConfigExtraction_Feb23:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0ce0afab0f3e36510ce22adde5f9c9c3
  Ruleset: securityonion-yara
  Summary: This rule detects the extraction of configuration data from QakBot, a banking Trojan designed to steal financial data and provide remote access to infected systems. The rule identifies specific byte patterns associated with the parameters, command-and-control (C2) list management, and configuration extraction processes used by QakBot. These patterns are crucial in pinpointing various stages of QakBot's operation within a given file, facilitating the identification of its malicious activities.
  Updated-Date: '2024_08_07'
MAL_QuasarRAT_May19_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4abd112f9d648fdf64615aea8c33170b
  Ruleset: securityonion-yara
  Summary: This rule detects the QuasarRAT malware by identifying specific strings related to its functionality and components. The strings include references to internal components like "Quasar.Common.Messages," tools such as "Client.MimikatzTools," and resource files like "Resources.powerkatz_x86.dll." It also includes certain uninstall messages and specific hexadecimal patterns. The conditions specify that the file must start with the MZ header characteristic of executable files and be less than 10 MB in size, with at least one of the identified strings or patterns being present.
  Updated-Date: '2024_08_07'
MAL_RANSOM_COVID19_Apr20_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5760e46cb60feed8096c1b2775f6aa1a
  Ruleset: securityonion-yara
  Summary: This rule detects ransomware that is distributed using a COVID-19 theme. It identifies malicious code by checking for the presence of a specific file path string ("/savekey.php") and several unique hexadecimal patterns within executable files. The file must be a Windows portable executable (PE) with a size less than 700KB and any two of the specified strings or opcodes must be present.
  Updated-Date: '2024_08_07'
MAL_RANSOM_ContiCrypter:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 78341a364fd3264f8233692673a85c9e
  Ruleset: securityonion-yara
  Summary: This rule detects a specific crypter associated with the Conti ransomware. It identifies unique patterns in the code, characterized by two specific sets of byte sequences labeled as "handoff" and "garbageLoad." The presence of these byte sequences is indicative of the behavior and structure of the Conti crypter, aiming to recognize and flag files that exhibit these signature traits associated with this particular malware.
  Updated-Date: '2024_08_07'
MAL_RANSOM_Crime_DearCry_Mar2021_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 66e18d7d7d4164728e15be5175b82168
  Ruleset: securityonion-yara
  Summary: This rule detects the DearCry ransomware, identified by specific substrings and characteristics in executable files. It triggers on the presence of various file extensions like .DOC, .PDF, .TXT, .XML, .EXE, and others, alongside notable strings such as "create rsa error", "DEARCRY!", "/readme.txt", and "msupdate". Additionally, it looks for the message "Your file has been encrypted!" and specific path patterns. The executable criteria include a specific header signature (0x5a4d), and a file size between 1MB and 2MB.
  Updated-Date: '2024_08_07'
MAL_RANSOM_DarkBit_Feb23_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: dc5942dc82c2114551fbedbadf2eb32d
  Ruleset: securityonion-yara
  Summary: This rule detects indicators associated with the DarkBit ransomware, such as specific strings and ransom note content. It looks for the presence of certain identifiable text strings like ".onion" for Tor network addresses, "GetMOTWHostUrl," and specific phrases like "hus31m7c7ad.onion," "iw6v2p3cruy," and key ransom communication text "You will receive decrypting key after the payment." Additionally, it checks file properties including the file size and file header values.
  Updated-Date: '2024_08_07'
MAL_RANSOM_DarkBit_Feb23_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 53dcd25035abcbbc1b8c4eeddfa1e7c6
  Ruleset: securityonion-yara
  Summary: This rule detects the Go-based DarkBit ransomware, which may contain garbled code and could also trigger on other obfuscated samples. It identifies this ransomware by looking for specific strings and byte patterns associated with the malware, such as "runtime.initLongPathSupport" and a sequence of hex values. The rule applies to executable files smaller than 20,000 KB that start with the signature "MZ."
  Updated-Date: '2024_08_07'
MAL_RANSOM_Darkside_May21_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 87747af70d9d7db0ec0e9ef6f81e1b76
  Ruleset: securityonion-yara
  Summary: This rule detects Darkside Ransomware by identifying specific hexadecimal patterns and ASCII strings within executable files. The criteria include the presence of particular byte sequences and strings related to Darkside, such as "http://darksid", "[ Welcome to DarkSide ]", and ".onion/". Additionally, the rule checks for a file size under 200KB and ensures that the file's header matches the characteristic "MZ" identifier, commonly found in executable files.
  Updated-Date: '2024_08_07'
MAL_RANSOM_ELF_ESXi_Attacks_Feb23_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 38ae4c650e28076d5dc60b64ec63d3a6
  Ruleset: securityonion-yara
  Summary: This rule detects ransomware targeting and encrypting ESXi servers. It identifies specific strings and operational codes that are indicative of ransomware activities, such as the usage of encryption commands and error messages related to key files. It looks for particular patterns in assembly code that are consistent with ransomware behavior. The detection works by checking for an ELF file format, ensuring the file size is under 200KB, and matching either one specific string or several of the defined patterns.
  Updated-Date: '2024_08_07'
MAL_RANSOM_LNX_macOS_LockBit_Apr23_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a5f83009cba5b1d546d7128f7fee091d
  Ruleset: securityonion-yara
  Summary: This rule detects LockBit ransomware samples targeting Linux and macOS systems. It identifies specific text strings associated with the ransomware, such as "restore-my-files.txt" and "lockbit," as well as other filenames like "ntuser.dat.log" and "bootsect.bak" that are typically encrypted by the malware. The rule also includes hexadecimal patterns corresponding to the extensions that get encrypted and specific file names used by the ransomware. Additionally, certain operation codes indicative of the ransomware's behavior are specified to strengthen detection. The rule uses multiple conditions involving these patterns to accurately identify instances of LockBit ransomware.
  Updated-Date: '2024_08_07'
MAL_RANSOM_LockBit_Apr23_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: aa7fdba484a92074c10002f4702a09b9
  Ruleset: securityonion-yara
  Summary: This rule detects indicators associated with LockBit ransomware, specifically focusing on certain ASCII strings such as "idelayinmin," "bVMDKmode," "bSelfRemove," and "iSpotMaximum." Additionally, it looks for XOR-encoded strings like "-i '/path/to/crypt'" and "http://lockbit." The detection is based on the presence of these strings while ensuring that specific HTML-related false positives are not matched.
  Updated-Date: '2024_08_07'
MAL_RANSOM_LockBit_ForensicArtifacts_Apr23_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b4ce8cad11d8f5543980f824e15a496e
  Ruleset: securityonion-yara
  Summary: This rule detects forensic artifacts associated with LockBit ransomware intrusions. It identifies log files and executable references related to LockBit locker, as well as specific patterns and links related to the Tor Browser, indicating LockBit-related activity.
  Updated-Date: '2024_08_07'
MAL_RANSOM_LockBit_Locker_LOG_Apr23_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5b24a3212934849ed93b014794cbb43c
  Ruleset: securityonion-yara
  Summary: This rule detects specific indicators in log files associated with LockBit ransomware, including phrases like "is encrypted. Checksum after encryption," "~~~~~Hardware~~~~," "[+] Add directory to encrypt:", and "][+] Launch parameters:." Identifying at least two of these strings in a file triggers the rule, revealing potential ransomware activity.
  Updated-Date: '2024_08_07'
MAL_RANSOM_Lorenz_May21_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: df5946e5654b96a2e30bdf9b794a217a
  Ruleset: securityonion-yara
  Summary: This rule detects Lorenz Ransomware samples by identifying specific strings and byte patterns found within the malware. It searches for specific command-line activity involving "cmd.exe" and "schtasks" as well as certain public key indicators. Additionally, the rule examines for the presence of particular strings such as "twr.ini" and patterns within the executable code. The detection is triggered if any one of the specified strings, all defined byte sequences, or a combination of these elements are found in a file that has a valid PE header and is less than 4000KB in size.
  Updated-Date: '2024_08_07'
MAL_RANSOM_REvil_Oct20_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: fbbbc4593ad42d9370b9fafe51b33241
  Ruleset: securityonion-yara
  Summary: This rule detects REvil ransomware by checking for unique hexadecimal patterns within the binary code of files that are smaller than 400KB in size and start with the "MZ" header signature (indicative of executable files). The specific patterns monitored include sequences of bytes that correlate with known characteristics of the ransomware's operational code. If any two out of the five specified byte sequences are found within such a file, the rule indicates a positive match, helping to identify and thus defend against this malicious software.
  Updated-Date: '2024_08_07'
MAL_RANSOM_Ragna_Locker_Apr20_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 278dacce39994beb0c398ffe54e62e7e
  Ruleset: securityonion-yara
  Summary: This rule detects the Ragna Locker ransomware by identifying specific patterns and strings associated with it. It searches for the presence of the text "---RAGNAR SECRET---", hexadecimal code sequences that correlate with unique segments of the ransomware, and specific filenames like "bootfont.bin." Additionally, the rule includes signature byte patterns from the ransomware's code. The targeted file is confirmed to be an executable based on its header and is limited to being under 200KB in size.
  Updated-Date: '2024_08_07'
MAL_RANSOM_RobinHood_May19_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4605594b0bc1c19562359e9aa1aa271e
  Ruleset: securityonion-yara
  Summary: This rule detects the RobinHood Ransomware based on specific indicators within files. It identifies the presence of the ".enc_robbinhood" string, a reference to a public key file path located in "c:\windows\temp\pub.key," and the execution of commands related to network shares and stopping SQL services. Additionally, it looks for specific function names associated with disabling system features like shadow copies, recovery, and certain services. The rule triggers if it finds any one of these indicators in an executable file with a particular header and size constraint.
  Updated-Date: '2024_08_07'
MAL_RANSOM_SH_ESXi_Attacks_Feb23_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 393e7cf9b55166f81275f6677e52d4ac
  Ruleset: securityonion-yara
  Summary: This rule detects a script associated with ransomware attacks that target and encrypt ESXi servers, specifically looking for the file named "encrypt.sh". The detection is based on identifying a combination of specific strings and commands related to the script's functionality. These include commands to find and remove log files, touch a configuration file, and grep for encryption activities. The rule checks for files smaller than 10KB and uses these distinct patterns to pinpoint the malicious script effectively.
  Updated-Date: '2024_08_07'
MAL_RANSOM_SH_ESXi_Attacks_Feb23_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d528822266361072fa52f7ba863d9bc0
  Ruleset: securityonion-yara
  Summary: 'This rule detects a specific script used in ransomware attacks that target and encrypt VMware ESXi servers. The identifying characteristic of the script is a particular string that starts with the phrase "echo \"START ENCRYPT: $file_e SIZE: $size_kb STEP SIZE: ", which is typical of the ransomware''s encryption process. The rule is triggered when the file size is less than 10KB and the specified string is present.'
  Updated-Date: '2024_08_07'
MAL_RANSOM_Stealbit_Aug21:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f51b39dc8fff1fef71095f6b13835c44
  Ruleset: securityonion-yara
  Summary: This rule detects Stealbit, a tool used by the Lockbit 2.0 ransomware gang. It identifies the presence of Stealbit by looking for a specific sequence of bytes that correspond to a command-and-control decryption routine within executable files smaller than 100KB in size that start with the "MZ" header.
  Updated-Date: '2024_08_07'
MAL_RANSOM_Venus_Nov22_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ad475867abd448b0e3b0510a19f05087
  Ruleset: securityonion-yara
  Summary: This rule detects Venus Ransomware samples, a malicious software known for encrypting victims' data and demanding a ransom for decryption. It identifies specific strings and patterns within the malware, such as HTML and title tags containing "Venus" and encoded strings, as well as command sequences for deleting files and references to file paths. Additionally, the rule checks for characteristic opcode sequences and matches against known file hashes and import hash patterns. The detection conditions are stringent, focusing on file size and specific patterns present in the Portable Executable (PE) file header.
  Updated-Date: '2024_08_07'
MAL_RTF_Embedded_OLE_PE:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e2bac685689cf860497a24ece15f19d9
  Ruleset: securityonion-yara
  Summary: This rule detects a suspicious string commonly found in Portable Executable (PE) files that are hex encoded within an object stream. It identifies specific hex strings such as "This program cannot be run in DOS mode," "KERNEL32.dll," and "C:\fakepath\," along with DOS Magic Header values within Rich Text Format (RTF) files, indicating potential embedded executable content.
  Updated-Date: '2024_08_07'
MAL_Ramnit_May19_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: caa173b8d6805aa76a4a4c57d5a307ee
  Ruleset: securityonion-yara
  Summary: This rule detects Ramnit malware by identifying executable files smaller than 300KB with a specific hash value and a PE file's import hash indicating a particular characteristic pattern of the malware.
  Updated-Date: '2024_08_07'
MAL_Ransom_Ragnarlocker_July_2020_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8409f30285a52362b066edb8a8f57ead
  Ruleset: securityonion-yara
  Summary: This rule detects Ragnarlocker ransomware, specifically referencing a variant identified in July 2020. It identifies notable strings within the ransomware, including filenames related to boot processes, indicators of encrypted files, and specific patterns associated with Ragnarlocker keys. The rule also detects strings that parse disk information, handle GUIDs, and refer to Microsoft Cryptography software. Additionally, it looks for command-line parameters indicating backup and force operations, strings referencing ransom notes, notepad.exe as a ransom note viewer, and exclusions for certain browsers to facilitate communication with the victim. Files matching this pattern will typically be under 30KB in size, with a specific PE import hash.
  Updated-Date: '2024_08_07'
MAL_Ransomware_GermanWiper:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6f742de85d3e309c311ca5d09c5b5770
  Ruleset: securityonion-yara
  Summary: This rule detects the GermanWiper ransomware in memory or when it is unpacked. It looks for specific mutex values and code patterns associated with process termination attempts. The rule also searches for certain process names such as "sqbcoreservice.exe" and "isqlplussvc.exe," the command to delete shadow copies using "vssadmin.exe," specific domain names, and the ransom note titled "Entschluesselungs_Anleitung.html."
  Updated-Date: '2024_08_07'
MAL_Ransomware_Wadhrama:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7d708b14ec30ea73a3b5dfe9f68321ed
  Ruleset: securityonion-yara
  Summary: This rule detects Wadhrama Ransomware by checking for a specific Import Hash (Imphash). It first ensures that the file starts with the common 'MZ' header indicative of a Windows executable and then matches the Import Hash against a known value unique to Wadhrama Ransomware.
  Updated-Date: '2024_08_07'
MAL_Ransomware_Win_DARKSIDE_v1_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3ee1fb6097584b3556b23080f221eb9a
  Ruleset: securityonion-yara
  Summary: This rule detects early versions of DARKSIDE ransomware by identifying specific encryption mode configuration values within the executable file. It searches for a series of constants associated with the ransomware's encryption behavior, distinguishing it from other potentially benign software.
  Updated-Date: '2024_08_07'
MAL_RedLeaves_Apr18_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8757612e7ec69340e44be6492fd24bc3
  Ruleset: securityonion-yara
  Summary: This rule detects the RedLeaves malware, which is identified by its PE file's initial bytes matching a specific hexadecimal value and a file size of less than 1000KB. It further confirms the presence of RedLeaves by checking if the malware's import hash matches any of the known hashes unique to this threat, enhancing the precision of the detection.
  Updated-Date: '2024_08_07'
MAL_Ryuk_Ransomware:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2af4a0045473b79e3fb8cd15a28c5929
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of Ryuk Ransomware by identifying specific strings and characteristics associated with it. Ryuk Ransomware, known for targeting organizations with the aim of encrypting critical data to demand ransoms, includes notable strings such as file paths and filenames like "RyukReadMe.txt" and "lsaas.exe." Additionally, it checks for certain PE import hashes and specific file properties, such as size and header identifiers, to confirm the malware's identity.
  Updated-Date: '2024_08_07'
MAL_SUSP_Gamaredon_GetImportByHash:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9b23f3075a010288fa983a3325b5dad1
  Ruleset: securityonion-yara
  Summary: This rule detects Gamaredon malware that employs API hashing techniques to obscure its use of system functions. It identifies the specific hashing process used by Gamaredon through unique code patterns, such as those related to parsing image export directories and implementing DJB2 hashing functions. The rule matches these patterns to recognize suspicious executable files by analyzing their internal structure and identifying specific hexadecimal sequences associated with this malware's behavior.
  Updated-Date: '2024_08_07'
MAL_Sednit_DelphiDownloader_Apr18_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e24bc8c69f515d551d007806299d44fe
  Ruleset: securityonion-yara
  Summary: This rule detects malware associated with the Sednit Delphi Downloader by identifying specific hexadecimal encoded strings. These include markers for download operations, file upload and execution commands, a Mozilla user agent identifier, an Adobe update string, system information and task list commands, the executable name 'csrsvc.exe', and registry paths related to Microsoft Windows software and version information. The rule applies if the file size is less than 4000KB and at least one of the specified strings is present, excluding certain key names in profiles.
  Updated-Date: '2024_08_07'
MAL_Sednit_DelphiDownloader_Apr18_3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 19cc5701ffd9c8909fe050cd7dd7347d
  Ruleset: securityonion-yara
  Summary: 'This rule detects malware associated with the Sednit Delphi Downloader, identifying specific strings within the malicious files. It looks for particular terms such as "Processor Level: ", "CONNECTION ERROR", "FILE_EXECUTE_AND_KILL_MYSELF", "-KILL_PROCESS-", "-FILE_EXECUTE-", "-DOWNLOAD_ERROR-", "CMD_EXECUTE", and "\\Interface\\Office\\{31E12FE8-937F-1E32-871D-B1C9AOEF4D4}\\". Additionally, it searches for the user-agent string "Mozilla/3.0 (compatible; Indy Library)", ensuring that at least three of these conditions are met in an executable file smaller than 2000KB.'
  Updated-Date: '2024_08_07'
MAL_Sharpshooter_Excel4:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ce76027aafdcf7ab6181086ef724f92b
  Ruleset: securityonion-yara
  Summary: This rule detects Excel documents weaponized with Sharpshooter by identifying specific characteristics associated with malicious Excel 4.0 Macros. It scans for the file header signature, the presence of macros, and notable function calls such as "CreateThread" and "WriteProcessMemory" within the document, which are indicative of malicious activity. Additionally, it checks for the occurrence of specific byte patterns multiple times within the file to ensure a higher confidence in the detection. The rule applies to files smaller than 1000KB in size.
  Updated-Date: '2024_08_07'
MAL_Shellcode_Loader_Apr23:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ee9206272d8de9d198812904888f508b
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a shellcode loader associated with the Gopuram backdoor. The shellcode loader identified in this rule is linked to a supply chain attack involving the 3CX software. The detection is based on specific sequences of operations used for API hashing and pushing API hashes, which are indicative of the shellcode loader's behavior. These sequences match identified patterns, suggesting the involvement and operation of the malicious loader used by the Gopuram backdoor.
  Updated-Date: '2024_08_07'
MAL_Trickbot_Oct19_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 73c634008feab6645c652ccda123ae74
  Ruleset: securityonion-yara
  Summary: This rule detects Trickbot malware by identifying specific patterns such as particular email addresses, strings referencing password requests, and error messages within its code. Additionally, it matches specific byte sequences associated with Trickbot's operations. The rule applies to files with a size of 2000KB or less and confirms the presence of the malware if at least three of the defined patterns are detected.
  Updated-Date: '2024_08_07'
MAL_Trickbot_Oct19_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 554f6c4deeb6e6c8e854d09dd081c649
  Ruleset: securityonion-yara
  Summary: This rule detects the Trickbot malware by identifying specific strings and file characteristics associated with it. It checks for the presence of the path "C:\Users\User\Desktop\Encrypt\Math_Cad\Release\Math_Cad.pdb" and the string "AxedWV3OVTFfnGb" within files that have a "MZ" header and are 2000KB or smaller in size.
  Updated-Date: '2024_08_07'
MAL_Trickbot_Oct19_3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2de899d0363a654bff10badb07812329
  Ruleset: securityonion-yara
  Summary: This rule detects Trickbot malware by identifying the presence of the string "Decrypt Shell Fail," ensuring the file matches specific internal characteristics, such as the initial bytes indicating a 'MZ' header and a filesize of 2000KB or less. Additionally, it checks for a specific PE import hash to confirm the presence of Trickbot.
  Updated-Date: '2024_08_07'
MAL_Trickbot_Oct19_4:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: aa1447d1a7bd90d8a1b7e874eb14f4c7
  Ruleset: securityonion-yara
  Summary: This rule detects the Trickbot malware by inspecting files for specific characteristics and strings associated with its presence. It checks for certain file paths, like those of project and release directories from Visual Studio, as well as URLs linked to hacking websites (root-hack.org and hax-studios.net). Additionally, the rule looks for specific strings within the file content. Files matching these unique markers and certain size and structure criteria are flagged as the Trickbot malware.
  Updated-Date: '2024_08_07'
MAL_Trickbot_Oct19_5:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d388ffd7e62b8f24b75fe6a9c348d12a
  Ruleset: securityonion-yara
  Summary: This rule detects Trickbot malware, a sophisticated banking Trojan primarily involved in stealing financial information and delivering additional malicious payloads. It looks for specific keywords associated with shellcode loading and initialization within the file, while also checking if the file size is 2000KB or less and if the file header matches a particular pattern.
  Updated-Date: '2024_08_07'
MAL_Trickbot_Oct19_6:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0c7a6c8ffb20fb5bb62668661d5d72a9
  Ruleset: securityonion-yara
  Summary: This rule detects Trickbot malware by identifying specific string patterns associated with the malware's files and behavior. It looks for references to a project directory named "spreader" and a specific file path for "ssExecutor_x86.pdb". Additionally, it scans for file paths indicating locations within the Windows operating system, such as directories under the "appdata" folder, the "Startup" program group, and the "SYSTEM32\TASKS" directory. The rule is designed to trigger based on the presence of these strings in executable files smaller than 400KB and having a specific initial file signature.
  Updated-Date: '2024_08_07'
MAL_Turla_Agent_BTZ:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 001a8b01b4a39f99e4c763d99bea7211
  Ruleset: securityonion-yara
  Summary: This rule detects the Turla Agent.BTZ malware by identifying specific strings and file patterns associated with it. Key indicators include certain encoded strings, specific file names such as "mstotreg.dat," "Bisuninst.bin," "mfc42l00.pdb," and "ielocal~f.tmp," as well as strings related to Windows directory paths and logging conventions. The match conditions focus on files that start with the "MZ" header and are smaller than 100KB, ensuring that any file meeting at least one of the encoded string patterns or four broad string patterns triggers detection.
  Updated-Date: '2024_08_07'
MAL_Turla_Sample_May18_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7012abe31e4a36a1b69f0fe88bfd60cc
  Ruleset: securityonion-yara
  Summary: This rule detects samples of the Turla malware, which is known for engaging in sophisticated cyber espionage activities. It identifies specific patterns within executable files that align with typical Turla behavior, such as the manipulation of system services, execution of command-line operations, and logging of inject activities. It also matches against known file paths and temporary file naming conventions used by the malware. The rule covers various strings related to process creation, logging, and error codes that inform about login failures. Detection is based on the presence of these strings within Windows executables smaller than 500KB in size.
  Updated-Date: '2024_08_07'
MAL_UNC2891_Caketap:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 41bcc907e58e57bb0be510f7a0affb1d
  Ruleset: securityonion-yara
  Summary: This rule detects the UNC2891 Rootkit known as Caketap. It identifies the presence of specific ASCII strings such as ".caahGss187" and "ipstat," which are characteristic of the rootkit. Additionally, it looks for specific byte sequences in the code that correspond to command keyword checks and mode flag switches used by the malicious software. The rule ensures that the identified file is an ELF format by checking its header before applying these string and code patterns to confirm the presence of the rootkit.
  Updated-Date: '2024_08_07'
MAL_UNC2891_Slapstick:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 002af6b4e614159ea7bd781dd1e5c32b
  Ruleset: securityonion-yara
  Summary: This rule detects the UNC2891 Slapstick PAM backdoor, which is characterized by specific code and string patterns within the file. It searches for a distinct string decrypter, a log buffer crypter, and certain strings related to executable paths and format strings common in PAM authentication modules. It also looks for specific authentication function names and a replacement string used for potential in-memory message handling. The rule applies to files that match certain size and header criteria, indicating a likely ELF executable under 100KB.
  Updated-Date: '2024_08_07'
MAL_UNC2891_Steelcorgi:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e740972082c05507a3764d6c006a713a
  Ruleset: securityonion-yara
  Summary: This rule detects UNC2891 Steelcorgi packed ELF binaries. It identifies these binaries through specific patterns within the executable's code, including the strings "padlck" and a sequence mimicking parts of the file path for "/proc/self/exe". The rule triggers when both patterns are found and the file's magic number corresponds to that of ELF binaries.
  Updated-Date: '2024_08_07'
MAL_UNC2891_Winghook:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 86e36c53e01b3c6e03effbfc031a3008
  Ruleset: securityonion-yara
  Summary: This rule detects the UNC2891 Winghook Keylogger, which is characterized by its ability to cryptographically modify log file data and decrypt the paths and names of log files. The rule specifically targets the presence of certain hexadecimal code patterns and the occurrence of ASCII strings associated with hook functions, such as "fgets" and "read". It ensures identification by checking the file's magic number and size, and by verifying the presence of these specific patterns and strings within the file.
  Updated-Date: '2024_08_07'
MAL_Unknown_Discord_Characteristics_Jan22_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8cfeb87016a940b9b75fadef8336b597
  Ruleset: securityonion-yara
  Summary: This rule detects unknown malware exhibiting characteristics similar to Wiper malware. It specifically looks for files that start with the 'MZ' header, are smaller than 1000 kilobytes, and contain certain wide text strings such as "xownxloxadDxatxxax" and URLs with "https://cdn.discordapp.com/attachments/".
  Updated-Date: '2024_08_07'
MAL_Unknown_PWDumper_Apr18_3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 08c07ba2ff729e8756a5a19c03d67405
  Ruleset: securityonion-yara
  Summary: This rule detects a specific malware sample originating from an unknown set, which likely has a connection to a password dumper tool. It identifies the presence of particular strings such as "loaderx86.dll," "tcpsvcs.exe," and certain directory patterns like "%Program Files, Common FOLDER%" and "%AllUsers, ApplicationData FOLDER%." Additionally, it searches for "loaderx86" and "TNtDllHook$" in executable files that start with the "MZ" header and are smaller than 3000KB in size.
  Updated-Date: '2024_08_07'
MAL_Visel_Sample_May18_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 600135cb46b46df6c7c09a74c494a25d
  Ruleset: securityonion-yara
  Summary: This rule detects the Visel malware sample, as described in the Burning Umbrella report. It identifies specific patterns, such as the presence of "print32.dll", a reference to "c:\\a\\b.txt", and a wide string matching "\\temp\\s%d.dat". The rule applies to files smaller than 200KB that have a specific header signature (0x5a4d) and either export a function named "szFile" or match at least two of the specified string patterns.
  Updated-Date: '2024_08_07'
MAL_WIPER_CaddyWiper_Mar22_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b4547e6f207a8b35119ca3d556e25727
  Ruleset: securityonion-yara
  Summary: This rule detects the CaddyWiper malware by identifying a specific sequence of operations and patterns within the code. It looks for particular sets of hexadecimal values that represent a unique combination of operations commonly found in CaddyWiper. The rule is triggered if the file being analyzed begins with the "MZ" header (indicating it is a Windows PE executable) and is smaller than 50 KB, satisfying the specified conditions based on the identified hexadecimal strings.
  Updated-Date: '2024_08_07'
MAL_WIPER_IsaacWiper_Mar22_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0a42e64117454efa7c090d0cebc63853
  Ruleset: securityonion-yara
  Summary: 'This rule detects the IsaacWiper malware, which specifically targets systems with malicious wiping functionalities. It identifies unique attributes associated with the malware, including specific file paths such as "C:\ProgramData\log.txt" and the presence of the "Cleaner.dll" file. The rule also looks for particular log messages like "-- system logical drive: " and "-- FAILED". Additionally, it scans for distinct hexadecimal patterns in the code and checks for a particular import hash and a file size less than 700KB.'
  Updated-Date: '2024_08_07'
MAL_WebMonitor_RAT:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a07ef4920c1b4e47ead8cffe1292acde
  Ruleset: securityonion-yara
  Summary: This rule detects the WebMonitor Remote Access Trojan (RAT), a malicious software used for unauthorized remote control of infected systems. It identifies specific strings related to keylogging ("send_keylog_stream_start", "KEYLOG_STREAM_STOP"), shell execution commands ("SHELL_EXEC", "send_shell_exec"), and network connection collection ("send_connections_get"). Additionally, it targets strings associated with Windows Management Instrumentation (WMI) queries and processes ("Select * from Win32_PerfRawData_PerfProc_Process where IDProcess =", "The service is in the process of being continued"), as well as references to network analysis tools ("tcpdump" and "memdump"). This rule triggers if pattern matches are found in files under 1000KB with a specified header.
  Updated-Date: '2024_08_07'
MAL_Winnti_BR_Report_MockingJay:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2c90bee00146be9510cf0476fcddd924
  Ruleset: securityonion-yara
  Summary: This rule detects Winnti malware samples by scanning for specific byte patterns in executable files. It identifies characteristics such as particular magic bytes indicating image files, specific iterated byte sequences, and markers suggesting JPEG header presence. The rule ensures these patterns align correctly within the file structure, indicating potential compromise by Winnti.
  Updated-Date: '2024_08_07'
MAL_Winnti_BR_Report_TwinPeaks:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ab828f6f484e204446100263e20a396f
  Ruleset: securityonion-yara
  Summary: This rule detects Winnti malware by searching for specific indicators within executable files. It identifies the presence of the string "Cooper" and a distinct sequence of bytes, { e9 ea eb ec ed ee ef f0 }, occurring close to this string. The detection is specifically within files that start with the "MZ" magic number, indicating a Windows executable.
  Updated-Date: '2024_08_07'
MAL_Winnti_Sample_May18_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b7f87c79747c4bffdb339e6e2da7b773
  Ruleset: securityonion-yara
  Summary: This rule detects a specific malware sample linked to the Winnti cyber espionage group, as discussed in the Burning Umbrella report. It identifies the presence of the malware by searching for references to "wireshark" and "procexp" within files smaller than 100KB, starting with the "MZ" header indicative of a Windows executable.
  Updated-Date: '2024_08_07'
MAL_WshRAT_Dotnet_Packer_Feb21:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: dbe7702fb6c973ab97f3878d0b6b0914
  Ruleset: securityonion-yara
  Summary: This rule detects the WSH RAT .NET packer variant from February 2021 by identifying sequences of hexadecimal patterns within the packed malware binary. The conditions specified by various distinctive byte sequences are used to match the malware's characteristics, ensuring accurate detection. The rule triggers when three of the specified patterns are found in a file that starts with the standard "MZ" header indicative of executable files.
  Updated-Date: '2024_08_07'
MAL_Xbash_JS_Sep18:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b82902a523d3d308a908f962d7a0963c
  Ruleset: securityonion-yara
  Summary: This rule detects the XBash malware, which is known for combining botnet, ransomware, coinmining, and worm functionalities targeting both Linux and Windows operating systems. It identifies specific strings within files smaller than 5KB, including references to scripting and ActiveXObject creation, which are indicative of potentially malicious JScript.
  Updated-Date: '2024_08_07'
MAL_Xbash_PY_Sep18:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: cd6ab8bb114e523a21baaf971ca3cd96
  Ruleset: securityonion-yara
  Summary: This rule detects the Xbash malware, a multi-functional malicious software that combines botnet, ransomware, coin mining, and worm features targeting both Linux and Windows systems. It identifies the presence of Xbash through a specific sequence of bytes and enforces conditions based on file type and size.
  Updated-Date: '2024_08_07'
MAL_Xbash_SH_Sep18:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1a11fc76fa0cbb5f095abb25a839ea99
  Ruleset: securityonion-yara
  Summary: This rule detects Xbash malware, a multifaceted threat that targets both Linux and Windows systems. Xbash combines functionalities such as botnet operations, ransomware, cryptocurrency mining, and worm-like spreading. The detection indicators include specific command and script patterns such as scheduled tasks for downloading and executing scripts, permission modifications of files in the /tmp directory, and verification checks for the existence of certain files. These observed behaviors are indicative of the Xbash malware's activities and help in identifying its presence on infected systems.
  Updated-Date: '2024_08_07'
MAL_crime_win32_loader_guloader_1_experimental:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 08f46a297a7f60bf517bcbec39e1cef2
  Ruleset: securityonion-yara
  Summary: This rule detects injected GuLoader shellcode, which is known to be utilized by malware families as a loader to download and execute additional payloads. Specifically, it identifies key patterns found within the shellcode, such as certain hash values and loader injection sequences. The detection mechanism hinges on matching predefined hexadecimal patterns and byte sequences typically observed in GuLoader shellcode, ensuring the executable starts with the 'MZ' magic number, indicative of a Windows executable file.
  Updated-Date: '2024_08_07'
MAL_crime_win32_rat_parallax_shell_bin:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: af8d4d465e3a4f22318a48e9206c3154
  Ruleset: securityonion-yara
  Summary: This rule detects Parallax, a remote access trojan (RAT), by identifying specific patterns in injected code. The rule focuses on characteristics such as specific sequences of bytes and hexadecimal strings found within the executable, related to the malicious activity caused by Parallax. These bytecode patterns and encrypted hexadecimal values are scrutinized to flag indicators of the RAT's injected code, ensuring any presence of Parallax within a given file can be detected through this analytical method. The condition checks for DOS header signatures and demands multiple signature matches to confirm detection.
  Updated-Date: '2024_08_07'
MAL_unspecified_Jan18_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: aec1e4173e9d2c01abeb859af521b514
  Ruleset: securityonion-yara
  Summary: This rule detects an unspecified malware sample that exhibits specific patterns and behaviors. It looks for strings associated with a User-Agent indicating Internet Explorer on Windows, a ping command aimed at a specific IP address, and distinct log messages with timestamps. Additionally, it checks for strings related to batch file operations and deletion commands. The rule targets files smaller than 300KB containing at least two of these indicative strings.
  Updated-Date: '2024_08_07'
ME_Campaign_Malware_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0b3ceb413dd3c31d2379c45d5161d854
  Ruleset: securityonion-yara
  Summary: This rule detects malware associated with a Middle Eastern campaign as reported by Talos. It identifies files that are Windows executables and have a specific import hash. The executable files being flagged are additionally constrained to a size less than 5000KB, ensuring the rule targets a particular profile of malware used in these attacks.
  Updated-Date: '2024_08_07'
ME_Campaign_Malware_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c3f8c1683e6e78ba859014cdb66d763a
  Ruleset: securityonion-yara
  Summary: This rule detects malware associated with a Middle Eastern campaign, as reported by Talos. It identifies a malicious executable file named "QuickAssist.exe" that masquerades as a legitimate Microsoft application by referencing terms like "Microsoft Modern Sharing Solution" and "QuickAssist." The malware also includes specific strings such as "GBEWCWA" and "Cimzal." The condition checks that the file has a valid PE header, is less than 600KB in size, and either matches a specific import hash or includes a combination of four specified strings.
  Updated-Date: '2024_08_07'
ME_Campaign_Malware_3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a45e1e98eefc04ba6601a8215ee11812
  Ruleset: securityonion-yara
  Summary: This rule detects malware involved in a targeted campaign in the Middle East, as reported by Talos. It identifies malicious activity by checking for specific PowerShell commands that manipulate files and directories within the APPDATA directory. The malware aims to execute a PowerShell script located at "sys.ps1" and creates or modifies directories and files within the "Microsoft\Templates" path in APPDATA, such as "Report.doc." The rule triggers when the file size is less than 400KB and meets specific criteria based on predefined strings.
  Updated-Date: '2024_08_07'
ME_Campaign_Malware_4:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c5a1368cc1a089ccfd2a7ff93dce468e
  Ruleset: securityonion-yara
  Summary: This rule detects malware associated with a targeted campaign in the Middle East, as reported by Talos. It identifies executable files starting with the hex value 0x5a4d, ensuring the file size is less than 1000KB, and matches a specific import hash value ("fb7da233a35ac523d6059fff543627ab").
  Updated-Date: '2024_08_07'
ME_Campaign_Malware_5:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 39b4806e338463c4febd394460d987a6
  Ruleset: securityonion-yara
  Summary: This rule detects malware associated with a Middle Eastern campaign as reported by Talos. It specifically identifies malware by searching for certain strings related to the compilation path ("D:\\me\\do\\do\\obj\\"), Windows Management Instrumentation queries (such as "Select * from Win32_ComputerSystem"), and references to antivirus checks ("Get_Antivirus"). Additionally, it looks for JSON formatting strings, phrases about updating software online, and the time server "time.nist.gov." The rule targets executable files smaller than 60KB, verifying they start with the "MZ" header, which indicates a Windows executable file.
  Updated-Date: '2024_08_07'
MS08_067_Exploit_Hacktools_CN:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5f17e573f54a69da4c362a808e310be0
  Ruleset: securityonion-yara
  Summary: This rule detects a hacktool known as "cs.exe" associated with the exploitation of the MS08-067 vulnerability, which targets the Windows Server service. Specific strings within the file, such as "MS08-067 Exploit for CN by EMM@ph4nt0m.org," "Make SMB Connection error:%d," "Send Payload Over!," "Maybe Patched!," "RpcExceptionCode() = %u," and the identifier "ph4nt0m," are used to identify the malicious activity. The presence of these strings signifies the use of this exploit, likely designed by an entity associated with "ph4nt0m.org," intended for unauthorized access or disruption through the targeted vulnerability.
  Updated-Date: '2024_08_07'
MSBuild_Mimikatz_Execution_via_XML:
  Created-Date: '2024_08_06'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9af2be8df54820008e037d280cdf1a53
  Ruleset: securityonion-yara
  Summary: This rule detects an XML file that executes Mimikatz on an endpoint through MSBuild. It identifies specific strings within the XML file such as `<Project ToolsVersion="`, `</SharpLauncher>`, and Base64-encoded payloads. Other indicative patterns include methods like `System.Convert.FromBase64String(`, `.Invoke(`, `Assembly.Load(`, and `.CreateInstance(`, all of which suggest the execution of code directly from memory, a technique Mimikatz often uses.
  Updated-Date: '2024_08_06'
MSIL_Launcher_DUEDLLIGENCE_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ea6318970a08efcb12e309589dee87d6
  Ruleset: securityonion-yara
  Summary: This rule detects .NET Portable Executable (PE) files containing a specific ProjectGuid, which is also present in the 'DUEDLLIGENCE' project. The detection mechanism relies on identifying the particular TypeLibGUID within the .NET binary that matches the ProjectGuid found in the '.csproj' file of the specified project.
  Updated-Date: '2024_08_07'
MSIL_SUSP_OBFUSC_XorStringsNet:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e57df1a1d6a8348efbde2315b7eb9eb9
  Ruleset: securityonion-yara
  Summary: This rule detects the XorStringsNET string encryption and other related .NET obfuscators. It identifies a specific hexadecimal pattern and recognizes particular .NET markers such as "_CorDllMain", "_CorExeMain", "mscorlib", ".cctor", "System.Private.Corlib", "<Module>", and "<PrivateImplementationsDetails{". The rule applies to files with a "MZ" header and a filesize of less than 25MB, ensuring that at least two of the identified .NET markers are present.
  Updated-Date: '2024_08_07'
MSSqlPass:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 59f01880defcca27875beacb472390f8
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a Chinese hack tool named MSSqlPass.exe, which is used to reveal passwords stored in the Registry by the Enterprise Manager of SQL Server. The tool identifies specific strings related to the functionality, including references to "Enterprise Manager PassView" and "empv.exe." The file must start with the 'MZ' header and be less than 120KB in size for the rule to trigger.
  Updated-Date: '2024_08_07'
M_APT_Downloader_BEATDROP:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 612eb7aea786c8b7b508f7a689851887
  Ruleset: securityonion-yara
  Summary: This rule detects the BEATDROP malware by looking for specific indicators within executable files smaller than 1MB. It identifies the presence of string references to "ntdll," the path "C:\\Windows\\System32\\ntdll.dll," and URLs associated with "api.trello.com" that request user boards and cards data using an API key. The rule ensures that the executable file starts with the "MZ" and "PE" headers, typical of Windows executables.
  Updated-Date: '2024_08_07'
M_APT_Downloader_BOOMMIC:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0f3962f2510fbcc89b1e875b07203535
  Ruleset: securityonion-yara
  Summary: This rule detects the BOOMMIC malware, which is identified through specific patterns in its code, such as certain sequences of hexadecimal bytes and the presence of the functions "GetComputerNameExA" and "HttpQueryInfoA". The rule applies to executable files that are less than 1MB in size and start with the "MZ" header, indicating a Windows executable.
  Updated-Date: '2024_08_07'
M_APT_VIRTUALPITA_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 009512efd704860ced1cb8b3c63e32a0
  Ruleset: securityonion-yara
  Summary: This rule detects specific opcodes related to setting a network port for binding at port 2233, including the operations setsockopt(), htons(), and bind() within a particular section of a file with the MD5 hash fe34b7c071d96dac498b72a4a07cb246. The detection is based on a sequence of hexadecimal patterns representing those operations. The rule applies to files that begin with the ELF (Executable and Linkable Format) magic number 0x464c457f, ensuring the file is likely an ELF executable.
  Updated-Date: '2024_08_07'
M_APT_VIRTUALPITA_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d04c6782676f3baef440fca8c30aea69
  Ruleset: securityonion-yara
  Summary: This rule detects a specific sequence of opcodes used to decode and parse data received in the socket buffer. The opcodes are within the range from `401a36` to `401adc`. This detection targets malicious behavior identifiable by the particular pattern of operations associated with these opcodes.
  Updated-Date: '2024_08_07'
M_APT_VIRTUALPITA_3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5190b262fa1d7296bf09f9ad3bfd6723
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of specific opcodes in a binary file, particularly ones that set the HISTFILE environment variable to 'F' via the `putenv()` function after incrementally loading each character. It scans for these opcodes within a specific hexadecimal range, ensuring precise targeting of the malicious activity.
  Updated-Date: '2024_08_07'
M_APT_VIRTUALPITA_4:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: afe8aac652b148544b7ec8cae38833d0
  Ruleset: securityonion-yara
  Summary: This rule detects a specific malware variant by identifying a distinct sequence of opcodes within a file whose MD5 hash matches "fe34b7c071d96dac498b72a4a07cb246." The targeted opcodes include a series of logical and binary operations that are used to decode text through multiple XOR operations. The condition for detection checks that the file is an ELF executable (indicated by the magic number 0x464c457f) and that all specified opcode patterns are present in the file.
  Updated-Date: '2024_08_07'
M_Hunting_Python_Backdoor_CommandParser_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c533c8c40bc54e9cf7c5dbe3d7a7daa0
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a Python backdoor script known as "vmsyslog.py" by identifying specific strings and patterns within the file. The script contains functions and commands such as "self.conn.readInt8()", "upload", "download", "shell", and "execute". Additionally, it matches a regular expression that signifies a method definition for running commands related to these functions. This rule triggers if all these substrings are found within a file smaller than 200KB.
  Updated-Date: '2024_08_07'
Mal_Dropper_httpEXE_from_CAB:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0f4dc77ba7f06505457d887d66fb3628
  Ruleset: securityonion-yara
  Summary: This rule detects a dropper originating from a CAB file. The detection is triggered when the file starts with the hexadecimal value 0x5a4d, indicating it is a Windows executable. Additionally, the file size must be less than 1000KB, and it must contain specific strings, "029.Hdl" and "http.exe", both in full word and ASCII encoding. The rule is designed to identify malicious activity linked to the distribution of this dropper as detailed in a referenced article.
  Updated-Date: '2024_08_07'
Mal_PotPlayer_DLL:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2170e60f01255d329edb9e4a3ee88aca
  Ruleset: securityonion-yara
  Summary: This rule detects a malicious PotPlayer.dll file by identifying specific characteristics within the file. It looks for a particular directory path associated with the PotPlayer program and the string "PotPlayer.dll" in conjunction with the presence of another string, "\update.dat". Additionally, the file must start with a common executable file signature and be less than 200KB in size.
  Updated-Date: '2024_08_07'
Mal_http_EXE:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f209798691e5ac3befbc915ba10c52bc
  Ruleset: securityonion-yara
  Summary: This rule detects a specific trojan identified in an APT report as "http.exe." The malware exhibits particular traits and behaviors, such as components related to file uploads with specific content-dispositions, the presence of certain executable and data files (like "wordpade.exe" and "dumps.dat"), and specific patterns indicating base64-encoded strings. Additionally, the trojan interacts with Mozilla Firefox profiles, performs SQL queries on login data, and references outdated operating systems like Windows 95 SR2. The rule triggers detection based on file size constraints and identifying patterns within the trojan's code and behavior.
  Updated-Date: '2024_08_07'
Malicious_BAT_Strings:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a0d8824045f33eb9df01d9459951f89a
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific string, "call :deleteSelf&exit /b," which is also used in auxiliary components of the Netwire Remote Access Trojan (RAT). This detection is applicable to files smaller than 600KB in size.
  Updated-Date: '2024_08_07'
Malicious_SFX1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a65d8da7038b392a74cb6434584b1ce6
  Ruleset: securityonion-yara
  Summary: This rule detects a malicious self-extracting archive (SFX) that contains voicemail content. It identifies this type of threat by looking for specific strings such as "voicemail" and ".exe" within the initial 80 bytes of the file, ensuring the file size is under 1000KB, and checking for the magic number "0x4b50" at the beginning of the file. This rule is designed to catch malicious SFX files leveraging voicemail themes to deceive users.
  Updated-Date: '2024_08_07'
Malicious_SFX2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b4215c8c57374331a8738d5f12f8e799
  Ruleset: securityonion-yara
  Summary: This rule detects a potentially malicious self-extracting archive (SFX) that contains a file named "adobe.exe." The detection is based on specific strings found within the file, including "adobe.exe," messages related to extracting files to a folder, and the string "GETPASSWORD1." The rule targets files that are less than 1000KB in size and start with the "MZ" header, which indicates a Windows executable.
  Updated-Date: '2024_08_07'
Malware_JS_powershell_obfuscated:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 60e7468db4991b44270732e1ffc59b33
  Ruleset: securityonion-yara
  Summary: This rule detects an obfuscated JavaScript file named "rechnung_3.js" that includes indications of invoking PowerShell by piecing together the term "powershell" in a fragmented manner. It targets files smaller than 30KB.
  Updated-Date: '2024_08_07'
Malware_MsUpdater_String_in_EXE:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2765cfe14a566247a47bd51fc5a7ffcc
  Ruleset: securityonion-yara
  Summary: This rule detects specific executable files that contain strings related to "msupdate" or "msupdater," commonly associated with malicious software masquerading as a legitimate Microsoft update. It scans for various forms of these strings, such as "msupdate.exe," "msupdater.exe," "msupdater32.exe," and "msupdate.pif," both in their ASCII and wide character forms. The rule aims to identify potentially malicious files by ensuring these strings are present in an executable with a file size smaller than 500KB while excluding false positives associated with benign applications like those containing "_msupdate_" or "/kies".
  Updated-Date: '2024_08_07'
Malware_QA_1177:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 43f5618adc1598938683a8f41d700144
  Ruleset: securityonion-yara
  Summary: This rule detects a specific malware uploaded for QA purposes, identified as a VBS file. It looks for strings indicating the malware's attempt to run executables from the startup folder and expand environment strings. Additionally, it searches for typical malware code patterns such as creating and running WScript shell objects, payload-like binary data, references to a third-party website, HTML element creation, and startup folder copy commands. The rule matches if either certain combination patterns or a sufficient number of these indicators are found within files smaller than 100KB.
  Updated-Date: '2024_08_07'
Malware_QA_get_The_FucKinG_IP:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 692f19dd56998d518c3c40848eacfe72
  Ruleset: securityonion-yara
  Summary: 'This rule detects a specific malware executable named "get The FucKinG IP.exe," identified by its association with user paths and projects specific to an individual named Mdram Ahmed. The rule targets particular strings embedded within the file, including project directory paths and the executable name itself, as well as identifiers like "get ip by mdr3m" and contact information "MDR3M kik: Mdr3mhm." The detection criteria incorporate checks for specific file headers and file size restrictions, ensuring that the identified file matches the malware characteristics accurately.'
  Updated-Date: '2024_08_07'
Malware_QA_not_copy:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8d32a2c6c6fe90e441970414dfda09fa
  Ruleset: securityonion-yara
  Summary: This rule detects a specific malware file known as "not copy.exe" associated with VT Research QA. The rule identifies the malware by checking for certain base64 encoded strings, file paths, URLs, and command-line patterns. Specifically, it looks for the encoded string "Server.exe," the file path "\\not copy\\obj\\Debug\\not copy.pdb," and the URL "fuckyou888.ddns.net." Additionally, it searches for command-line instructions involving "cmd.exe," delete operations, and firewall modifications. The malware exhibits distinct strings such as "Server.exe," "Execute ERROR," "not copy.exe," and "Non HosT." It uses a combination of these identifiers to confirm the presence of the malicious file, which is less than 1000KB in size and begins with the signature MZ header.
  Updated-Date: '2024_08_07'
Malware_QA_tls:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 91569c2a6ab1ad84a6c6bc43fab37e15
  Ruleset: securityonion-yara
  Summary: This rule detects the malware known as "tls.exe," which was associated with a QA upload on VT Research. The detection criteria include specific string patterns related to the "ultimate-payload-template1" and its variations. The rule triggers if the file matches these patterns and certain characteristics, such as a "MZ" header indicating a Windows executable and a file size less than 300KB.
  Updated-Date: '2024_08_07'
Malware_QA_update:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b1d123f88352bf1f2eb43438d9ed4c79
  Ruleset: securityonion-yara
  Summary: This rule detects a specific malware that identifies itself through various strings and behaviors related to keylogging, file downloads, and system modifications. Key characteristics captured in the rule include references to "UnActiveOfflineKeylogger," "ActiveOnlineKeylogger," and notifications regarding file downloads and updates executed in the temporary directory. The rule also looks for the presence of a directory path "C:\\Users\\DarkCoderSc\\" and file paths such as "Celesty Binder\\Stub\\STATIC\\Stub.pdb." Additional identified behaviors include the execution of the "MSRSAAP.EXE" process, successful command execution messages, and attempts to open the hosts file possibly hindered by UAC settings. Finally, the presence of specific strings like "BTMemoryLoadLibary" errors and IE browser paths further contribute to the identification of this malicious activity.
  Updated-Date: '2024_08_07'
Malware_QA_vqgk:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f6e4501c5f00de04d9725d4b46e933fe
  Ruleset: securityonion-yara
  Summary: This rule detects a specific malware sample named vqgk.dll, identified primarily through various unique code strings and behavioral patterns. These indicators include specific file paths, several error messages related to process injection failures, PowerShell commands often employed for malicious purposes, and the presence of certain encoded or obfuscated web communication commands. Additionally, it looks for identifiable markers associated with impersonation failures and references to "beacon.dll." The rule uses these characteristics to determine the likelihood of the malware's presence, ensuring it captures various forms of the sample while minimizing file size constraints.
  Updated-Date: '2024_08_07'
MarathonTool:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b29b04093eb668f1221046e2707deb35
  Ruleset: securityonion-yara
  Summary: This rule detects a specific Chinese hack tool named MarathonTool which is associated with the executable file MarathonTool.exe. It identifies the tool by checking for strings related to blind SQL injection techniques, particularly those utilizing heavy queries and querying system user information. Additionally, the rule ensures that the file has a specific hash and size criteria.
  Updated-Date: '2024_08_07'
MarathonTool_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 60c41a25db5d9c5a3c9840eb381dec35
  Ruleset: securityonion-yara
  Summary: This rule detects the Chinese hack tool identified as MarathonTool.exe based on specific characteristics within the file. These characteristics include certain strings such as a local URL endpoint ("http://localhost/retomysql/pista.aspx?id_pista=1"), a SQL query string ("SELECT ASCII(SUBSTR(username,{0},1)) FROM USER_USERS"), and a reference to a Blind SQL injection tool. The detection is conditioned on the file having a particular header signature, a size less than 1000KB, and the presence of all the defined strings.
  Updated-Date: '2024_08_07'
Metasploit_Loader_RSMudge:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c7b6b313b0bc82746effc013f44f702a
  Ruleset: securityonion-yara
  Summary: This rule detects a specific Metasploit Loader created by RSMudge, particularly the file named loader.exe. It identifies this malware by looking for certain ASCII strings within the executable, such as error messages related to network issues and library updates, as well as specific format strings. The rule applies additional conditions by checking the file's signature and ensuring the file size is less than 200KB.
  Updated-Date: '2024_08_07'
Methodology_Contains_Shortcut_OtherURIhandlers:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: cc2e3a15860948143386aa6ea15339fe
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of .URL shortcut files that contain unique URI handlers, which may indicate an attempt to establish persistence via shortcut usage. It looks for specific patterns and strings that characterize .URL shortcuts, but excludes common and legitimate URL formats and ensures the file is not an executable by checking against different file signatures. Additionally, it limits the file size to under 30KB to avoid false positives from larger files.
  Updated-Date: '2024_08_07'
Methodology_OLE_CHARENCODING_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6a318d0f0f1e3fb9a51f0e0271430322
  Ruleset: securityonion-yara
  Summary: This rule detects suspicious character encoding patterns commonly seen in malicious documents. It looks for specific hexadecimal sequences and formats, such as "101;99;104;111;32;111;102;102;" and variations like "101:99:104:111:32:111:102:102:" and "101x99x104x111x32x111x102x102x". Additionally, the rule identifies certain markers associated with executable files ("77;90;144;" and its variations) and ZIP file headers ("80;75;3;4;" and its variations). This rule focuses on files that follow the OLE Compound Document file structure and are less than 10MB in size. The goal is to pinpoint documents potentially manipulated for cyber attacks.
  Updated-Date: '2024_08_07'
Methodology_Shortcut_HotKey:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5a827b57ecdfec9d19d36671486b8c2b
  Ruleset: securityonion-yara
  Summary: This rule detects possible persistence mechanisms through the use of shortcut (.URL) files, focusing specifically on hotkey configurations. It examines files for the presence of a hotkey assignment, denoted by the "HotKey" keyword, and characteristics unique to internet shortcuts, such as specific CLSID and explicit internet shortcut markers. The rule also ensures that the file is not a common executable format and is smaller than 30KB in size.
  Updated-Date: '2024_08_07'
Methodology_Suspicious_Shortcut_BaseURLSyntax:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 106ac54421791c4ba67d1227c2e4210f
  Ruleset: securityonion-yara
  Summary: This rule detects potential use of shortcuts for URL-based persistence mechanisms by identifying specific strings commonly associated with such shortcuts. It looks for the presence of "BASEURL=file://", "[DEFAULT]", "[{000214A0-0000-0000-C000-000000000046}]", and "[InternetShortcut]" within a file. Moreover, it ensures the file type is not one of several common executable formats and that the file size is less than 30KB. This approach helps to identify suspicious files that might be used to maintain persistence on a system through URL shortcuts.
  Updated-Date: '2024_08_07'
Methodology_Suspicious_Shortcut_Evasion:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 025ae47ed59363b83f9c0cb1906d4248
  Ruleset: securityonion-yara
  Summary: This rule detects non-standard .URL files and evasion techniques by identifying specific patterns associated with Internet shortcuts. It looks for the presence of strings indicating an Internet Shortcut file type, including "IconFile" and "BaseURL," and ensures that the file is not a standard executable format. This rule also checks that the file size is less than 30KB.
  Updated-Date: '2024_08_07'
Methodology_Suspicious_Shortcut_IconNotFromExeOrDLLOrICO:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b9d85dc5118ba4e1312e0a80467180b3
  Ruleset: securityonion-yara
  Summary: This rule detects potential malicious use of shortcut files for persistence by identifying .URL files that specify an icon file not sourced from .exe, .dll, or .ico files. It looks for specific strings indicating it is a URL shortcut, such as "[InternetShortcut]" and "[{000214A0-0000-0000-C000-000000000046}]", while ensuring the icon file tag ("IconFile=") is present but not followed by typical executable or icon file types. Additionally, it excludes certain file signatures and limits the file size to less than 30KB.
  Updated-Date: '2024_08_07'
Methodology_Suspicious_Shortcut_IconRemote_HTTP:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4ed53f55c78d5eeb747b0a5bced1baba
  Ruleset: securityonion-yara
  Summary: This rule detects potentially malicious use of .URL files for persistence by identifying shortcuts with icon files set via HTTP URLs. It checks for the presence of specific keywords, such as "IconFile" followed by an HTTP address, and the CLSID or InternetShortcut header. The rule excludes legitimate executable file formats and restricts the detection to files smaller than 30KB to avoid false positives from larger, legitimate files.
  Updated-Date: '2024_08_07'
Methodology_Suspicious_Shortcut_IconRemote_SMBorLocal:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 09336fef19b06219fdd446b51ede098d
  Ruleset: securityonion-yara
  Summary: This rule detects attempts to steal NTLM hashes using a methodology described for the Responder tool. It looks for suspicious strings and patterns in shortcut files. Specifically, it identifies the presence of an "IconFile=file://" entry, paired with either a URL CLSID or an explicit internet shortcut, excluding common binary formats and ensuring the file size is less than 30KB.
  Updated-Date: '2024_08_07'
Methodology_Suspicious_Shortcut_IconShenanigans_dotDL:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0fa13f50f97ac6d87b97128703b43813
  Ruleset: securityonion-yara
  Summary: This rule detects suspicious usage of shortcuts that may indicate .URL persistence mechanisms exploiting the "IconFile" attribute while excluding specific file signatures common to legitimate executables and libraries. The rule looks for the presence of patterns typical to internet shortcuts, such as specific CLSID identifiers and references to the "[InternetShortcut]" section, particularly targeting cases where the "IconFile" directive points to files with ".dl" extensions. This technique may be used by malware to maintain persistence on a system through seemingly benign shortcuts.
  Updated-Date: '2024_08_07'
Methodology_Suspicious_Shortcut_LOLcommand:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1f2390652be0f7071ca4faac03554696
  Ruleset: securityonion-yara
  Summary: This rule detects potentially malicious usage of shortcut files (.URL) for persistence by identifying the presence of references to powerful system commands or utilities such as PowerShell, CMD, CertUtil, MSHTA, WScript, CScript, Rundll32, WMIC, RegSvr32, and MSBuild within these files. The rule specifically searches for entries involving "IconFile" or "URL" parameters that invoke these commands and ensures the file does not match certain known binary formats (such as PE, ELF, or Mach-O) and is less than 30KB in size.
  Updated-Date: '2024_08_07'
Methodology_Suspicious_Shortcut_Local_URL:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 92afca0c5c6d01abcda99ca74ee0276e
  Ruleset: securityonion-yara
  Summary: This rule detects the usage of local scripts within URL files that are potentially being used for persistence mechanisms. It identifies components of the URL file structure such as "URL=file:///" and checks for markers like "{000214A0-0000-0000-C000-000000000046}" and "[InternetShortcut]". To ensure accuracy, the rule also excludes common binary file signatures and ensures the file size is less than 30KB. This detection method is relevant for identifying suspicious shortcuts that could be indicative of malicious activity aimed at maintaining persistence on a system.
  Updated-Date: '2024_08_07'
Methodology_Suspicious_Shortcut_SMB_URL:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 791327a6d51a9b98880b65ebeff890a2
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a remote SMB path used for persistence through a .URL file. It identifies malicious components by looking for specific patterns, including a URL scheme that points to a network address, and explicit markers within the file such as class identifiers and shortcuts. Additionally, the rule filters out known file headers for executable formats and other non-relevant file types, while ensuring that the file size is less than 30KB, which is typical for shortcut files.
  Updated-Date: '2024_08_07'
Methodology_Suspicious_Shortcut_ScriptURL:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 42502177ef5f0a16daf2bf6bc05a19cb
  Ruleset: securityonion-yara
  Summary: This rule detects potentially malicious use of shortcut files (.URL) that leverage scripting for persistence mechanisms. It identifies specific patterns in the shortcut by scanning for instances of "IconFile" or "URL" parameters followed by a script, as well as characteristic identifiers for .URL files such as specific CLSID and "InternetShortcut." Additionally, it ensures the inspected file is not a common executable format and is smaller than 30KB in size.
  Updated-Date: '2024_08_07'
Methodology_Suspicious_Shortcut_WebDAV:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 05783c535fa1cf26bc033e3257d97c09
  Ruleset: securityonion-yara
  Summary: This rule detects potential shortcut use for .URL persistence by identifying suspicious WebDAV-related elements within shortcut files. It specifically looks for strings that indicate the presence of Internet shortcut CLSIDs and patterns related to URLs or icon files in WebDAV format. The condition checks that the file is not a known executable format and ensures it is less than 30KB in size.
  Updated-Date: '2024_08_07'
Methodology_Suspicious_Shortcut_WorkingDirRemote_HTTP:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0fb53266a5e1d0f584c66921d4785811
  Ruleset: securityonion-yara
  Summary: This rule detects potential malicious persistence mechanisms using shortcut (.URL) files. It specifically identifies files mentioning "WorkingDirectory=http" and certain markers indicative of Internet shortcuts, combined with constraints to ensure the file is not a known executable format and is relatively small in size (under 30KB).
  Updated-Date: '2024_08_07'
Methodology_Suspicious_Shortcut_WorkingDirRemote_SMB:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1e598b15ce06c97ac9251cb99b1d05d6
  Ruleset: securityonion-yara
  Summary: This rule detects potential malicious usage of shortcut files for persistence by identifying specific characteristics that suggest shortcuts (with extensions such as .URL) are being used to point toward remote SMB shares. It checks for the presence of the string "WorkingDirectory=file://" and other indicators such as specific URL CLSIDs and InternetShortcut notations within a file. The rule also ensures the file is not a known executable type by excluding common file signatures and limits detections to files smaller than 30KB.
  Updated-Date: '2024_08_07'
Miari_2_May17:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2156f67ba91e71abad1f6fbdaee4eed9
  Ruleset: securityonion-yara
  Summary: This rule detects the Mirai malware by identifying specific characteristics in files smaller than 5000KB. It looks for the presence of particular strings, such as a User-Agent string mimicking a Windows-based Chrome browser, a specific HTTP GET request, a formatted URL structure, and patterns often associated with user credentials. Additionally, it checks for a specific domain related to the malware's activities.
  Updated-Date: '2024_08_07'
Microcin_Sample_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5c298aa2e9dd6b278dbe49bbcc74e5e4
  Ruleset: securityonion-yara
  Summary: This rule detects a malware sample discussed in the Microcin technical report by identifying specific strings and a hash associated with the malware. It looks for specific class descriptors and matches against known hashes to confirm the presence of the malware. The condition triggers if the file starts with the "MZ" signature, is less than 300KB in size, and either contains at least four of the specified strings or matches a particular PE import hash (imphash).
  Updated-Date: '2024_08_07'
Microcin_Sample_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: fc8143e2a79c1b03761051b9757a827c
  Ruleset: securityonion-yara
  Summary: This rule detects a specific malware sample mentioned in the Microcin technical report by Kaspersky. It looks for executable files smaller than 200KB that begin with the 'MZ' header, indicative of Windows executables. The detection criteria are based on the presence of the strings "[Pause]" and "IconCache_%02d%02d%02d%02d%02d" within the file.
  Updated-Date: '2024_08_07'
Microcin_Sample_3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0faf0b0188d6c14e0842382ca0034748
  Ruleset: securityonion-yara
  Summary: This rule detects a specific malware sample associated with the Microcin malware family, as described in a technical report by Kaspersky. It identifies the presence of particular strings within a file, such as a file path referencing "C:\Users\Lenovo\Desktop\test\Release\test.pdb" and the version string "test, Version 1.0". The rule is triggered if the conditions of having a PE file header, a file size less than 200KB, and the presence of these specific strings are met.
  Updated-Date: '2024_08_07'
Microcin_Sample_4:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3a37e48ab502eea475cf226039b5df06
  Ruleset: securityonion-yara
  Summary: This rule detects the Microcin malware sample referenced in a Kaspersky technical report. It identifies command execution strings and specific filenames associated with the malware, such as "cmd /c dir /a /s" and "ini.dat." The rule also matches unique file patterns, including "%s\\(%08x%08x)%s" and database files with hexadecimal naming conventions. These indicators help pinpoint the presence of the Microcin malware based on its known behavioral patterns and characteristics.
  Updated-Date: '2024_08_07'
Microcin_Sample_5:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2c3d01eee8e01daa45ae69daa61cd842
  Ruleset: securityonion-yara
  Summary: This rule detects a Microcin malware sample mentioned in a technical report by Kaspersky. The malware includes specific strings related to password cracking, such as error messages and output related to password attempts, attempts to find a password dictionary file, and successful or unsuccessful password retrieval. The detection criteria involve checking for particular text strings within executable files under 100KB in size, indicating activities involving password dictionary files and password guessing attempts.
  Updated-Date: '2024_08_07'
Microcin_Sample_6:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0d020299d5e22db6570be858cba133f8
  Ruleset: securityonion-yara
  Summary: This rule detects a malware sample discussed in the Microcin technical report by Kaspersky. The malware is identified using specific strings within the file, such as error messages and data placeholders, as well as the file size and header values.
  Updated-Date: '2024_08_07'
Mimikatz_Gen_Strings:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8edb8da785bb7ec685ed9636f1379a97
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of Mimikatz, a post-exploitation tool used for extracting credentials, by identifying specific strings associated with its operation. Notable strings include messages related to starting services, security callbacks, exporting software certificate authorities, references to "enterpriseadmin" accounts, requesting debug privileges, successful code injection notifications, and security account manager (SAM) account information. This detection method is based on the analysis of the file's content and size.
  Updated-Date: '2024_08_07'
Mimikatz_Logfile:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e0fe95716103d3acea7c45c93df358e8
  Ruleset: securityonion-yara
  Summary: This rule detects a log file generated by the malicious hack tool Mimikatz, which is often used for extracting sensitive information such as passwords and authentication data. The indicators include specific ASCII strings like "SID               :", "* NTLM     :", "Authentication Id :", and "wdigest :". These strings are characterized by their exact format and full word presence, collectively identifying the telltale outputs of a Mimikatz-generated log file.
  Updated-Date: '2024_08_07'
Mimikatz_Strings:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 175548d6eea7599a1dbe5f20d37c4325
  Ruleset: securityonion-yara
  Summary: "This rule detects various strings associated with the Mimikatz tool, which is commonly used for extracting passwords and authentication details from Windows systems. It includes specific indicators like \u201Csekurlsa::logonpasswords\u201D, references to Kerberos ticket injection, and the presence of \u201Cmimidrv.sys\u201D. Additional identifiable phrases include \"Lists LM & NTLM credentials,\" \"masterkey with password\", and session key warnings. These detections help identify the presence or activity of Mimikatz on a system, strengthening security measures against credential theft and unauthorized access."
  Updated-Date: '2024_08_07'
Mimipenguin_SH:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3d0a538de8988e9642fac6363571f278
  Ruleset: securityonion-yara
  Summary: This rule detects Mimipenguin, a Linux password extractor. The presence of specific strings associated with Mimipenguin's operations, such as commands used to extract password hashes and process information, and indicators of its results, are used as identifiers.
  Updated-Date: '2024_08_07'
MiniDionis_VBS_Dropped:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ec0cb071d6c156f71714ecffa499728a
  Ruleset: securityonion-yara
  Summary: This rule detects a VBS script named "1.vbs" associated with the MiniDionis malware. The script relies on Windows Script Host (WSH) to execute commands with `Wscript.Sleep` to delay execution and creates objects for filesystem manipulation and shell commands using `CreateObject`. Specific behaviors include checking for the existence of files and potentially deleting them, indicated by strings related to `FileSystemObject` and shell operations. The script's size is constrained to under 1KB.
  Updated-Date: '2024_08_07'
MiniDionis_readerView:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c991a1676b036f17d3bc6c9fb409b5e7
  Ruleset: securityonion-yara
  Summary: This rule detects the MiniDionis malware specifically within files named readerView.exe or adobe.exe. The detection is based on specific strings and opcode patterns found in the file content. Strings such as "%ws_out%ws" in a wide character format and "dnlibsh" in ASCII, along with particular opcode sequences, are indicators of this malware. The targeted file should start with the "MZ" file signature and be less than 500KB in size for the rule to trigger.
  Updated-Date: '2024_08_07'
MiniDumpTest_msdsc:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 85656ecb9af3e72009735121fb8d5a69
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the msdsc.exe file, specifically targeting its unique hash and various strings associated with it such as "MiniDumpTest1.exe," "MiniDumpWithTokenInformation," "MiniDumpTest1," and "Microsoft 2008." It confirms the file is an executable (indicated by the MZ header), ensures the file size is less than 20KB, and looks for all specified string patterns within the file.
  Updated-Date: '2024_08_07'
MiniRAT_Gen_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: cf5adb253eb3e99dbf47db7b290bf05e
  Ruleset: securityonion-yara
  Summary: This rule detects the Mini RAT malware by identifying specific file signatures and strings within executable files. The condition checks for files that start with the hexadecimal value 0x5a4d, indicating a Windows executable, have a file size of less than 7000KB, and contain one of the specified strings. The relevant strings include paths associated with "Mini rat" and a project directory under "Clever Components v7."
  Updated-Date: '2024_08_07'
Mirai_1_May17:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f103724e5c9dfee9e2d157e6b992adbe
  Ruleset: securityonion-yara
  Summary: This rule detects Mirai malware by looking for a specific string in network traffic that indicates a request to download a file named "mirai.x86" using the HTTP protocol. The rule activates when the target file has an initial 16-bit value of 0x457f and the file size is less than 5000KB.
  Updated-Date: '2024_08_07'
Mirai_Botnet_Malware:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 55a297c7ef9bbb9fde1dcbb7cba80b89
  Ruleset: securityonion-yara
  Summary: This rule detects Mirai Botnet Malware, which is known for targeting IoT devices to form a botnet for launching distributed denial of service (DDoS) attacks. It identifies the malware through specific file hashes and unique strings associated with the Mirai malware. The rule checks for certain patterns such as HTTP POST requests to specific paths, and the presence of certain device file paths related to the system watchdog. Additionally, it looks for distinct sequences of characters indicative of the malware's code or configurations. The file size constraint ensures the detection is relevant for typical payload sizes used by Mirai.
  Updated-Date: '2024_08_07'
Mithozhan_Trojan:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0621d3dcf277a2225bf80f567cc02011
  Ruleset: securityonion-yara
  Summary: 'This rule detects the Mitozhan Trojan used by the APT group Terracotta. It identifies the Trojan by checking for specific string signatures within files that start with the standard ''MZ'' header, indicative of executable files, and have a file size of less than 300KB. The strings include "adbrowser" in wide character format and two encoded ASCII strings: "IJKLlGdmaWhram0vn36BgIOChYR3L45xcHNydXQvhmloa2ptbH8voYCDTw==" and "EFGHlGdmaWhrL41sf36BgIOCL6R3dk8=". These characteristics help in pinpointing the presence of the Mitozhan Trojan, which is known for its association with advanced persistent threat activities.'
  Updated-Date: '2024_08_07'
Mithril_Mithril:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 702d8bb1622a8376c9593bbcde2c6111
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a web shell named Mithril.exe by identifying specific error messages and strings associated with its operation. Key indicators include error messages like "OpenProcess error!", "WriteProcessMemory error!", "GetProcAddress error!", "CreateRemoteThread error!", and "VirtualAllocEx error!", as well as distinct strings such as "HHt`HHt\\," "Cmaudi0," and "Kernel32." The combination of these strings and error messages serves to identify this particular file as a malicious web shell.
  Updated-Date: '2024_08_07'
Mithril_dllTest:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c8f5f9e237a45839c8fcbb5cb0411307
  Ruleset: securityonion-yara
  Summary: 'This rule detects the presence of a specific webshell, identified by the file name "dllTest.dll." It operates by searching for two key strings within a file: the phrase "please enter the password:" and the path "\\dllTest.pdb." These indicators suggest the file may be a webshell, potentially used for unauthorized access or control over a system.'
  Updated-Date: '2024_08_07'
Mithril_v1_45_Mithril:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 754ccbe31c7f224c8c6d3a2e0e1ffba0
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the Mithril.exe file, which is associated with webshells that are auto-generated. It identifies specific strings within the file, such as "cress.exe" and "\Debug\Mithril.", to confirm its presence.
  Updated-Date: '2024_08_07'
Mithril_v1_45_dllTest:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3d710b551ea80012a99d390b85d1252c
  Ruleset: securityonion-yara
  Summary: This rule detects a specific type of webshell identified by the file name "dllTest.dll." It identifies the presence of this webshell by searching for the string "syspath", the directory path containing "\Mithril", and the command "--list the services in the computer." These indicators together confirm the existence of this webshell on a system.
  Updated-Date: '2024_08_07'
MockDll_Gen:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4a1b5bb1bc3f57cce0f845df5141f542
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the MockDll, a malicious DLL loader utilized via the `regsvr` command. It identifies specific string patterns associated with certain DLL files like "mock_run_ini_Win32.dll" and "mock_run_ini_x64.dll," as well as configuration syntax within the files such as "RealCmd=%s %s" and "MockModule=%s." The rule targets files under 20KB in size, confirming their signature integrity with a specified file header identifier.
  Updated-Date: '2024_08_07'
Molerats_Jul17_Sample_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0f603ba2d95913c600d900c033aba38d
  Ruleset: securityonion-yara
  Summary: This rule detects a sample of the Molerats malware from July 2017. It checks for a specific sequence of bytes within files that are less than 200KB in size and start with the 'MZ' header, indicating a Windows executable. The presence of these indicators is used to identify the particular Molerats sample known to be used in cyber espionage activities, as documented in 2017.
  Updated-Date: '2024_08_07'
Molerats_Jul17_Sample_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 83211669acc162bf11f57e149d77460f
  Ruleset: securityonion-yara
  Summary: This rule detects a sample of the Molerats malware, specifically from July 2017. The rule triggers when a file contains certain strings such as "Folder.exe," "Notepad++.exe" in wide format, and "RSJLRSJOMSJ" in ASCII. Additionally, the executable file must have a "MZ" header (indicating a Windows PE file) and must be less than 1000KB in size. These conditions collectively identify the presence of the targeted Molerats malware sample.
  Updated-Date: '2024_08_07'
Molerats_Jul17_Sample_3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 888d88b399928dd53946dad167940265
  Ruleset: securityonion-yara
  Summary: This rule detects a sample from the Molerats malware family, identified in July 2017, that masquerades as legitimate software by using file names such as "ccleaner.exe" and "Folder.exe". The rule looks for executable files smaller than 600KB that begin with the characteristic "MZ" header.
  Updated-Date: '2024_08_07'
Molerats_Jul17_Sample_4:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 10482dc137fb4e780873c8b0bcbe1999
  Ruleset: securityonion-yara
  Summary: This rule detects a sample of Molerats malware from July 2017. It identifies malicious activity by looking for specific strings related to registry operations and file execution. These strings include commands to retrieve item properties from the Windows registry, specifically under the 'HKCU\SOFTWARE\Microsoft\' path, and a method to run file operations using the .NET System.IO namespace. The rule applies to files less than 700KB in size and triggers if any one of the specified strings is found within the file.
  Updated-Date: '2024_08_07'
Molerats_Jul17_Sample_5:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 94f43515743118e9485bd0037380c6d8
  Ruleset: securityonion-yara
  Summary: This rule detects a specific Molerats malware sample from July 2017. It identifies the presence of suspicious PowerShell execution commands, particularly those related to downloading code from the internet. The rule looks for strings indicating the use of PowerShell to execute scripts without prompts and commands that use the .NET WebClient class to download content from the GitHub Gist service.
  Updated-Date: '2024_08_07'
Molerats_Jul17_Sample_Dropper:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 95406a6b191875e6d28ad30b6324458e
  Ruleset: securityonion-yara
  Summary: This rule detects a Molerats sample dropper, specifically a self-extracting archive (SFX) used by the Molerats APT group in July 2017. It identifies the threat through specific strings within the file, including an error message advising the removal of an insecure file, the executable name "sfxrar.exe," and an associated file named "attachment.hta." The detection criteria also check that the file starts with the common executable signature "MZ" and is smaller than 1000KB.
  Updated-Date: '2024_08_07'
Monsoon_APT_Malware_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 67fee451738bccecbcc5041f8c1470c0
  Ruleset: securityonion-yara
  Summary: This rule detects malware associated with the Monsoon APT group by identifying specific characteristics within executable files. The rule searches for the presence of certain strings, such as commands related to "cmd.exe /c start" and file paths referencing "Microsoft\\Templates\\" and "Microsoft\\Windows\\". Additionally, it checks if the file matches specific structural attributes, such as having a 'MZ' header and a file size smaller than 300KB. The condition is met if the file's import hash matches a known value or all the specified strings are found. This helps in identifying malicious software variants used by the Monsoon APT group.
  Updated-Date: '2024_08_07'
Monsoon_APT_Malware_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: edf1bb68755d3959c28f203b5c6fa990
  Ruleset: securityonion-yara
  Summary: This rule detects malware associated with Monsoon APT by identifying specific characteristics and indicators within executable files. It looks for the presence of certain file paths and names, such as "\\Microsoft\\Windows\\coco.exe" and "\\Microsoft\\Templates\\msvcrt.dll", as well as specific strings related to the configuration and data files like ":\\System Volume Information\\config" and "DMCZ0001.dat". Additionally, it detects unusual string formations like " cscript.[BACKSPA[PAGE DO[CAPS LO[PAGE UPTPX498.dTPX499.d" and "wininet.dll    ". The condition for this rule to trigger is based on the file having an initial 0x5a4d header, being smaller than 400KB, and containing at least one of the specific or a combination of these indicative strings.
  Updated-Date: '2024_08_07'
Moroccan_Spamers_Ma_EditioN_By_GhOsT_php:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2a51bc373d4bc6ea2c3714597be5c5fa
  Ruleset: securityonion-yara
  Summary: This rule detects a PHP file associated with the Moroccan Spammers Ma-Edition by GhOsT. It identifies the file through specific strings, such as a hardcoded email address, text indicating the action of sending mail, and a reference to an HTML tag for a table cell with particular image attributes. These indicators suggest the file's role in email spamming activities.
  Updated-Date: '2024_08_07'
Ms_Viru_racle:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f0effd290eebdfb05a3c0ed0c2370632
  Ruleset: securityonion-yara
  Summary: This rule detects a Chinese hack tool known as "racle.dll." This specific file is identified by its hash value and contains several unique text strings, including "PsInitialSystemProcess @%p," "PsLookupProcessByProcessId(%u) Failed," "PsLookupProcessByProcessId(%u) => %p," and "FirstStage() Loaded, CurrentThread @%p Stack %p - %p." The rule identifies the file by checking if it is a PE format file (starting with "MZ" bytes) and ensuring the file size is less than 210KB, alongside the presence of the specified strings.
  Updated-Date: '2024_08_07'
Ms_Viru_v:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7ae8f9e3e0c1d6943b2ba82d3ca43c29
  Ruleset: securityonion-yara
  Summary: This rule detects a Chinese hacktool named v.exe. Indicators of this tool include specific strings such as command prompts and usage messages found in the executable. These strings encompass paths to command.com, various status messages, and errors related to exploiting virtual address space. The detection conditions are based on the file's structure and size, ensuring that the file is a Windows executable with a maximum size of 100KB.
  Updated-Date: '2024_08_07'
Msfpayloads_msf:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4b4466ca3c7ecbb9846372e80b4d2549
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of Metasploit payloads, specifically identifying the file 'msf.sh'. It searches for the occurrence of the ASCII string "export buf=\\" within files smaller than 5MB to determine the presence of the payload.
  Updated-Date: '2024_08_07'
Msfpayloads_msf_10:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8fd230601c9e2ff8c3d26586f5849c33
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a particular Metasploit payload, specifically a file named "msf.exe". The rule identifies this payload through a set of unique hexadecimal string patterns found within the file. These patterns include specific sequences of bytes that are common in the payload, and the rule checks that the file has a valid DOS header (indicated by the hex value 0x5a4d) and is less than 200KB in size. This helps in identifying malicious executable files associated with Metasploit, a common penetration testing tool.
  Updated-Date: '2024_08_07'
Msfpayloads_msf_11:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 782c400d535062f7ed61ac8a934db79c
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific Metasploit payload, particularly the "msf.hta" file. It looks for unique strings within the file that suggest malicious behavior, such as the use of environment variables to launch PowerShell, the creation of Scripting.FileSystemObject, and the creation of Wscript.Shell objects. These components are indicative of scripts designed to conduct various exploitative actions on a system.
  Updated-Date: '2024_08_07'
Msfpayloads_msf_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 380bf4681a5649cf65a9ae023c040a8d
  Ruleset: securityonion-yara
  Summary: This rule detects Metasploit payloads specifically within the "msf.asp" file. It identifies malicious scripts based on the presence of specific strings, such as a reference to "svchost.exe", the creation of a Wscript Shell object, and a VBScript language tag. These indicators suggest the script is designed to execute commands or load additional payloads, characteristic of Metasploit's exploitation framework.
  Updated-Date: '2024_08_07'
Msfpayloads_msf_3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 13fcaeb59d6694c750d84d2b0fbeef3b
  Ruleset: securityonion-yara
  Summary: This rule detects specific patterns associated with Metasploit payloads, particularly targeting the file named msf.psh. It looks for unique strings within the file that indicate the presence of Metasploit activities, such as the usage of certain DLL imports, memory protection enumerations, the creation of threads, compiler parameter objects, and the conversion from Base64 strings. This detection helps identify scripts that may be used for malicious purposes, specifically those that allocate memory for executing arbitrary code and manage memory and thread operations typically leveraged by Metasploit payloads.
  Updated-Date: '2024_08_07'
Msfpayloads_msf_4:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b9e3dc33307d139c45f5b6dbf1280211
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a Metasploit payload specifically found in the file msf.aspx. It searches for specific patterns in the code including string references to functions like `VirtualAlloc` and memory allocation constants such as `PAGE_EXECUTE_READWRITE`. Additionally, the rule checks for DllImport directives for `kernel32`. The detection focuses on identifying these unique patterns to recognize the embedded Metasploit payload.
  Updated-Date: '2024_08_07'
Msfpayloads_msf_5:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: dc7d172f96ce1593096d86a6e80b3e90
  Ruleset: securityonion-yara
  Summary: This rule detects a specific Metasploit payload file named "msf.msi" by identifying three distinct strings within the file. The first string references an installation requirement for "Foobar 1.0". The second string is a copyright notice from the Apache Software Foundation dated 2009, presented in wide character format. The third string is a globally unique identifier (GUID) "{50F36D89-59A8-4A40-9689-8792029113AC}". All three strings must be present for the file to be detected.
  Updated-Date: '2024_08_07'
Msfpayloads_msf_6:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 827b47ee785ee66b8ef31835980d406f
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of Metasploit payloads within a file named msf.vbs. Metasploit is a security framework commonly used for developing and executing exploit code against a remote target machine. The rule identifies specific code patterns associated with this payload, such as the creation of scripting objects, use of special folders, specific character writing sequences, hexadecimal values indicating a payload signature, and iteration through string lengths. These code patterns are indicative of common operations performed by Metasploit scripts to facilitate exploitation or payload delivery.
  Updated-Date: '2024_08_07'
Msfpayloads_msf_7:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 04e492d672f3504f51daa4fc37e427af
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific Metasploit payload file named "msf.vba" by identifying certain strings commonly associated with the payload's functionality. These strings include declarations and function calls related to thread creation and memory allocation from the Windows kernel library, as well as memory manipulation functions. The presence of these strings indicates the use of this payload, allowing for its detection in a system.
  Updated-Date: '2024_08_07'
Msfpayloads_msf_8:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b5ee59861f3b1c679c8717452977b563
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a Metasploit payload script, specifically a file named `msf.ps1`. It identifies certain characteristics within the script, such as calls to Windows API functions through `[DllImport]` directives for `kernel32.dll` and `msvcrt.dll`, as well as typical memory manipulation operations like `VirtualAlloc` and `memset`. The detection is triggered if six unique strings related to these functions and operations are present, indicating the potentially malicious Metasploit activity involving memory allocation and function imports.
  Updated-Date: '2024_08_07'
Msfpayloads_msf_9:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7f8232028ff201c861ed8a9fb435ccb8
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of Metasploit payloads within a specific file named "msf.war". It identifies these payloads by looking for particular strings within the file, such as code checking the operating system, executable file suffixes, permission modification commands, and runtime execution calls. It also includes a hexadecimal pattern at the beginning of the file. The detection is triggered if any four of the specified strings are found or if the file starts with a particular hexadecimal value and contains a specific string pattern.
  Updated-Date: '2024_08_07'
Msfpayloads_msf_cmd:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: bdb0fd9d862cd6ffb299b869502ae3c2
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a Metasploit payload, specifically targeting the msf-cmd.ps1 file. It identifies the use of a command that invokes the `powershell.exe` process in a hidden and non-interactive mode with encoded commands, which is characteristic of malicious script execution often used in exploitation frameworks like Metasploit.
  Updated-Date: '2024_08_07'
Msfpayloads_msf_exe:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: cee9961c8aa418d74a6cf4b55457de9c
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of Metasploit payloads in a file named msf-exe.vba by identifying specific patterns. These patterns include strings related to payload data, usage of Shell and Environ functions, distinctive macro code identifiers, and directory change commands in the file. The condition specifies that at least four of these patterns must be found to confirm the presence of the payload.
  Updated-Date: '2024_08_07'
Msfpayloads_msf_exe_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 66da8e637d6bbf00ee6b054b3dd8af0e
  Ruleset: securityonion-yara
  Summary: This rule detects a specific Metasploit payload, specifically a file named "msf-exe.aspx." The detection is based on unique string patterns, such as the creation of a new process using `System.Diagnostics.Process`, setting the `StartInfo.UseShellExecute` property to true, launching a process named `svchost.exe`, and retrieving the temporary path using `Path.GetTempPath()`.
  Updated-Date: '2024_08_07'
Msfpayloads_msf_psh:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 42ae831adc7be154e5c71db3f7144d4a
  Ruleset: securityonion-yara
  Summary: This rule detects a Metasploit payload contained in a file named "msf-psh.vba". It identifies the execution of PowerShell commands with specific flags ("-nop -w hidden -e"), the use of `Call Shell`, and the initialization of a macro via the `Workbook_Open` event in VBA (Visual Basic for Applications).
  Updated-Date: '2024_08_07'
Msfpayloads_msf_ref:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9fe10a0d4c1cfa13d76567fee8a41c8e
  Ruleset: securityonion-yara
  Summary: This rule detects a malicious PowerShell script identified as "msf-ref.ps1" related to Metasploit payloads. It looks for specific strings within the script, including references to core Windows DLLs like "kernel32.dll" and methods for process handling such as "WaitForSingleObject". It also searches for indicators of reflective loading techniques and base64 data decoding, which are techniques often used in malware to load and execute malicious code from memory, avoid detection, and manipulate or invoke system functions dynamically. The presence of assembly and reflection methods, such as those involved in defining constructors and methods within the script, further indicates that the payload attempts to obfuscate its activities through dynamic code generation and execution.
  Updated-Date: '2024_08_07'
Msfpayloads_msf_svc:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3a7e6d6bfd4836dbefa31dd62ff77d40
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the file "msf-svc.exe," which is associated with Metasploit payloads. It looks for specific strings within the file, such as "PAYLOAD:" and ".exehll," and verifies that the file starts with the "MZ" header (indicating a Windows executable) and is smaller than 50KB in size.
  Updated-Date: '2024_08_07'
MuddyWater_Mal_Doc_Feb18_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3c14aa98114f911b48ff5d250e3ffa31
  Ruleset: securityonion-yara
  Summary: This rule detects a malicious document associated with the MuddyWater threat group, flagged through specific encoded strings. It identifies Base64 encoded PowerShell commands indicative of malware activity, such as system text encoding and conversion operations from Base64. The rule triggers if it finds these suspicious patterns in files smaller than 3000KB with a matching file signature.
  Updated-Date: '2024_08_07'
MuddyWater_Mal_Doc_Feb18_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3fe94363fd8b5273e350d080479c1b64
  Ruleset: securityonion-yara
  Summary: This rule detects a malicious document associated with the MuddyWater cyber-espionage group. The document is identified through specific strings related to OLE Automation, Office 16 DLLs, the Microsoft Word OLB file, the scripting filesystem object, and a specific identifier. The detection criteria include a particular file signature and a file size less than 6000KB.
  Updated-Date: '2024_08_07'
MySQL_Web_Interface_Version_0_8_php:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: edd4a5810ba239cebf1e6ef8e97de6cd
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the MySQL Web Interface Version 0.8 script, a PHP-based web interface for managing MySQL databases. It identifies specific strings associated with this software, such as references to the developer SooMin Kim, a URL pointing to the homepage of the software, and a specific HTML pattern used within the application for displaying database schemas and managing database table fields. The detection is triggered if any two of these distinctive strings are found.
  Updated-Date: '2024_08_07'
MyWScript_CompiledScript:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 52a373a76e972eb9a4ae293105023739
  Ruleset: securityonion-yara
  Summary: This rule detects a script named Mywscript compiled with the Script2Exe tool, which may also be associated with a McAfee tool. It identifies the compiled script by looking for specific strings within the file, such as the path "C:\\Projets\\vbsedit_source\\script2exe\\Release\\mywscript.pdb" and the wide strings "mywscript2" and "MYWSCRIPT2". Additionally, the file must start with the hexadecimal value 0x5a4d and be smaller than 800KB in size to be flagged by this rule.
  Updated-Date: '2024_08_07'
NK_Miner_Malware_Jan18_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: dd8d8d6d8624472aca7f74690b0be18f
  Ruleset: securityonion-yara
  Summary: This rule detects a specific North Korean Monero cryptocurrency miner that was discussed in an AlienVault report. The rule seeks multiple indicators within the file, including specific directory paths like "c:\users\jawhar\documents\" and "C:\NewDirectory2\info2," as well as certain phrases such as "The number of processors on this computer is {0}." It also looks for specific hexadecimal patterns and unique strings such as "82e999fb-a6e0-4094-aa1f-1a306069d1a5" and the domain "barjuok.ryongnamsan.edu.kp". Additionally, the rule searches for files associated with paths like "C:\SoftwaresInstall\soft" and "C:\Windows\Sys64\intelservice.exe". The rule identifies files matching these characteristics with a size under 30KB, starting with the magic number 0x5a4d.
  Updated-Date: '2024_08_07'
NTLM_Dump_Output:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7ac2c86ea1cf3ae8c307c9df1f845aff
  Ruleset: securityonion-yara
  Summary: This rule detects files containing output from NTML hash dumps in John the Ripper or LC format by matching specific ASCII string patterns associated with NTLM hash outputs.
  Updated-Date: '2024_08_07'
NT_Addy_asp:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: aa8288240e1c6a3c48369fc2b1260abd
  Ruleset: securityonion-yara
  Summary: 'This rule detects the presence of specific strings in a file, notably references to "NTDaddy v1.9 by obzerve of fux0r inc," a message indicating an incorrect file format warning with "<ERROR: THIS IS NOT A TEXT FILE>", and the phrase "RAW D.O.S. COMMAND INTERFACE". Such strings may be indicative of malicious or unauthorized software interactions.'
  Updated-Date: '2024_08_07'
Nanocore_RAT_Feb18_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6fbd55887b30a2e9e20ca7325874ddb1
  Ruleset: securityonion-yara
  Summary: This rule detects the Nanocore Remote Access Trojan (RAT) by looking for specific strings and patterns in executable files smaller than 600KB. It identifies the presence of the malware through key text such as "NanoCore Client.exe" and "NanoCore.ClientPluginHost," as well as terms related to its operations like "PluginCommand," "FileCommand," "PipeExists," "PipeCreated," and "IClientLoggingHost." The rule leverages these indicators to recognize the malicious software and flag it accordingly.
  Updated-Date: '2024_08_07'
Nanocore_RAT_Feb18_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2e72294e469cca8b2bed1d9581a4e770
  Ruleset: securityonion-yara
  Summary: This rule detects Nanocore RAT by identifying specific string patterns within a file, such as "ResManagerRunnable," "TransformRunnable," "MethodInfoRunnable," and several other similar terms. The rule triggers if the file begins with the hexadecimal number 0x5a4d, is less than 1000KB in size, and contains all the specified strings. Nanocore RAT is a type of remote access Trojan known for its modular architecture and the capability to be customized with various plugins, making it particularly harmful and versatile for malicious operations.
  Updated-Date: '2024_08_07'
Nanocore_RAT_Gen_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 66b9941e4ad9f75cc52959b832a443cc
  Ruleset: securityonion-yara
  Summary: This rule detects the Nanocore Remote Access Trojan (RAT) and related malware by identifying specific strings and patterns within the executable files. The patterns include file paths related to a specific project, distinctive markers like "RunPE1" and "Monitorinjection," and unique hash identifiers. The condition checks the first two bytes of the file and its size, confirming the presence of these strings to flag potential malware.
  Updated-Date: '2024_08_07'
Nanocore_RAT_Gen_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c237e01cd557374f751d55cc55ca4f17
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the Nanocore Remote Access Trojan (RAT) by identifying specific strings and characteristics within a file. Nanocore RAT is a type of malware used for remote control and espionage. Key indicators include the presence of terms such as "NanoCore.ClientPluginHost" and "IClientNetworkHost" within the code, as well as a specific encoded string. The rule targets executable files with a size less than 1000KB that contain these specific markers.
  Updated-Date: '2024_08_07'
Nanocore_RAT_Sample_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 87bf262bd9de74877e6754e34c92bf6a
  Ruleset: securityonion-yara
  Summary: This rule detects a specific sample of the Nanocore Remote Access Trojan (RAT), a type of malware used for unauthorized remote control and monitoring of infected computers. It identifies the malware by checking for certain unique strings within the file, such as "TbSiaEdJTf9m1uTnpjS.n9n9M7dZ7FH9JsBARgK", a hash value "1EF0D55861681D4D208EC3070B720C21D885CB35", and the phrase "popthatkitty.Resources.resources". Additionally, the file must start with the 'MZ' header (indicating a Windows executable) and be smaller than 900KB to be considered a match.
  Updated-Date: '2024_08_07'
Nanocore_RAT_Sample_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5f31d28330589bd924d81a716c975799
  Ruleset: securityonion-yara
  Summary: This rule detects a specific Nanocore RAT sample by identifying unique string patterns within the malware's code. It checks for a magic number indicating a Windows executable and ensures the file size is less than 40KB before confirming the presence of particular ASCII and wide-character strings that are characteristic of this RAT variant.
  Updated-Date: '2024_08_07'
Nautilus_common_strings:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8a073c9cc202fc1bad7c66627315d304
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the Nautilus malware based on specific common plaintext strings found within potentially malicious files. It identifies particular file names ("nautilus-service.dll" and "oxygen.dll") and system configurations ("config_listen.system" and "ctx.system") associated with Nautilus. Additionally, it looks for a unique identifier ("3FDA3998-BEF5-426D-82D8-1A71F29ADDC3") and a specific file path pattern indicative of Nautilus activity on a system. The rule examines files with a DOS header ('0x5A4D') and a PE header ('0x4550') to determine a valid detection.
  Updated-Date: '2024_08_07'
Nautilus_forensic_artificats:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 60ef79f5b88825fee95c9104a3a321a3
  Ruleset: securityonion-yara
  Summary: This rule detects specific strings related to Nautilus, a malware associated with the Turla group. The targeted strings include names of dynamically linked libraries (DLLs), temporary text files, encoded data conversions, and unique identifiers like "D68gq#5p0(3Ndsk!" and "J8fs4F4rnP7nFl#f". Additionally, it looks for references to certain executable files and batch scripts, such as "Msnb.exe" and "owa_ar2.bat", as well as service names and payload components, indicative of malicious activities.
  Updated-Date: '2024_08_07'
Nautilus_modified_rc4_loop:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 20b9ac5745ee7e1b19670be9ee2b8e71
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of Nautilus malware by identifying specific assembly code instructions used for a modified RC4 encryption loop within executable files. It searches for a particular sequence of hexadecimal byte patterns commonly associated with the malware and verifies that the file structure conforms to the Portable Executable (PE) format.
  Updated-Date: '2024_08_07'
Nautilus_rc4_key:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0078582c4d0127ef7fd5930ad4def310
  Ruleset: securityonion-yara
  Summary: This rule detects the Nautilus malware by identifying the presence of a specific hardcoded RC4 key within executable files. The detection mechanism checks for a combination of the characteristic Windows Portable Executable (PE) file headers and the unique RC4 key pattern. The RC4 key is represented by a specific byte sequence, which serves as an identifier for the Nautilus malware.
  Updated-Date: '2024_08_07'
Ncat_Hacktools_CN:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 824c32b4dd8b5a0d4c0b2e69d1fc3433
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a hacktool called "nc.exe," which is associated with the Ncat utility. Ncat is a network utility used for various activities such as port scanning, data transfer, and network debugging. The rule identifies specific strings within a file, including command usage patterns ("nc -l -p port [options] [hostname] [port]" and "nc [-options] hostname port[s] [ports] ..."), error messages ("gethostpoop fuxored" and "VERNOTSUPPORTED"), and format strings ("%s [%s] %d (%s)" and "`--%s' doesn't allow an argument"). Detecting these strings helps identify the nc.exe hacktool.
  Updated-Date: '2024_08_07'
Ncrack:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b08e3f25ab9df73a9df3e0b26f0d764e
  Ruleset: securityonion-yara
  Summary: This rule detects the Ncrack tool, which is used for brute force attacks. It identifies a specific string within the tool's output table functionality that indicates the presence of Ncrack.
  Updated-Date: '2024_08_07'
NetBIOS_Name_Scanner:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 89485791a9843a54b3e72b751ee06020
  Ruleset: securityonion-yara
  Summary: This rule detects a NetBIOS Name Scanner executable by identifying specific string patterns within the file, such as "IconEx," "soft Visual Stu," and "NBTScanner!y&."
  Updated-Date: '2024_08_07'
Netview_Hacktool:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7ec38dc28f24bf6a02d783bc0435b57d
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a network domain enumeration tool identified by the file Nv.exe, often employed by attackers. It looks for specific strings within files, such as messages related to target user identification, usage of domain groups, session activity, and OS version enumeration. The tool's function is to gather information about network users, sessions, and domain controllers, which could indicate unauthorized network reconnaissance. The rule operates based on certain conditions, including the file type and size, to determine a match.
  Updated-Date: '2024_08_07'
Netview_Hacktool_Output:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: eb79ce14332d975a7bdfeeadeb45031c
  Ruleset: securityonion-yara
  Summary: This rule detects the output of a network domain enumeration tool named Netview, which is often utilized by attackers. The detection focuses on specific phrases within the text file, such as "[*] Using interval:", "[*] Using jitter:", and "[+] Number of hosts:". Identifying at least two of these strings within a file triggers the detection, indicating potential use of the tool.
  Updated-Date: '2024_08_07'
Neuron_common_strings:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8dbac5b01c5036a6dcdffd897ecdd3d5
  Ruleset: securityonion-yara
  Summary: This rule detects Turla Group's Neuron malware by identifying common strings associated with its operation. It looks for the service name "MSExchangeService" and request parameters such as "cadataKey," "cadata," and "cadataSig." The rule also checks for an embedded key value and a default key, which are used by the malware, as well as the identifier "MSXEWS" and a listen endpoint "443/ews/exchange/." Additionally, it searches for a base64-encoded registry key substring, the name "neuron_service," and a specific .NET magic string "BSJB." The condition for detection includes typical PE file structure indicators and the presence of at least six of the specified strings.
  Updated-Date: '2024_08_07'
Neuron_standalone_signature:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: dfc1a00aaebcfc9f4ca9c69004a04282
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of Neuron malware by identifying a specific standalone signature found in .NET metadata. It checks for a particular sequence of bytes and the magic number "BSJB" within files that have PE header characteristics, commonly associated with Windows executables.
  Updated-Date: '2024_08_07'
Nirsoft_NetResView:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f519c7a49c728b9b4728c39368beba4b
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of NirSoft NetResView, a utility that displays a comprehensive list of all network resources, by identifying specific strings within the executable and ensuring the file size is below 100KB.
  Updated-Date: '2024_08_07'
Nishang_Webshell:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4131acd3921c49f15411f58b4d417fca
  Ruleset: securityonion-yara
  Summary: This rule detects a specific ASPX web shell known as Nishang's Antak Webshell. The rule identifies unique string patterns associated with this web shell's operations, including PowerShell argument manipulation, output formatting related to console text in a web-based interface, an HTML title referencing "Antak Webshell," and a button element for executing SQL queries within the server environment's code. These characteristics allow for the identification of potentially malicious web shell activities on a server.
  Updated-Date: '2024_08_07'
No_PowerShell:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: cdeb1318d22ab325bbc2fcedab44ad7c
  Ruleset: securityonion-yara
  Summary: This rule detects a C# executable named "nps.exe" that is used to bypass PowerShell detection mechanisms. It identifies the executable by looking for specific strings within the file, such as a command line format including "nps.exe -encodedcommand" followed by a base64 encoded string, and a file path "c:\\Development\\ghps\\nps\\nps\\obj\\x86\\Release\\nps.pdb". The executable is flagged if the file starts with the signature "MZ" and is smaller than 40KB, ensuring effective identification of attempts to circumvent PowerShell security.
  Updated-Date: '2024_08_07'
NotPetya_Ransomware_Jun17:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 06ba0e03a284df8a7bcca4c8d2a70fe8
  Ruleset: securityonion-yara
  Summary: This rule detects the new variant of the NotPetya Ransomware from June 2017. The ransomware is identifiable by specific strings within the infected files, including messages like "Ooops, your important files are encrypted," and commands to manipulate the Windows operating system, such as creating processes with "rundll32.exe," deleting journals with "fsutil usn deletejournal," and clearing event logs with "wevtutil cl." Other identifiable features include references to sending Bitcoin wallet IDs via email and the presence of specific file names and phrases like "dllhost.dat." Furthermore, the rule checks for certain indicators in the file metadata and its size to confirm the detection.
  Updated-Date: '2024_08_07'
Nshell__1__php_php:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1ffad0e6076f79ce9ebf8bf943b9d1ae
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a potentially malicious PHP file related to the Nshell web shell. It looks for specific code patterns that indicate the file might be used to execute commands on a compromised server. The code snippets include an input field for command execution and a script for retrieving the username associated with the process running the PHP code, suggesting unauthorized remote access capabilities.
  Updated-Date: '2024_08_07'
NtGodMode:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2035ad1d74c9b7503131ddfdf1eadb0b
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the Chinese hacktool NtGodMode, specifically targeting files named NtGodMode.exe. It matches specific ASCII strings within the executable, such as "to HOST!" and "SS.EXE," as well as partial strings like "lstrlen0," which help identify the tool. Additionally, it includes conditions to ensure the detection file has a valid 'MZ' header and is smaller than 45KB in size.
  Updated-Date: '2024_08_07'
ONHAT_Proxy_Hacktool:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 018b8ecc782911f897cc9e8a29ada2f2
  Ruleset: securityonion-yara
  Summary: This rule detects the ONHAT Proxy, a SOCKS proxy hack tool utilized by Chinese APT groups. Key indicators include specific error message strings such as "INVALID PARAMETERS. TYPE ONHAT.EXE -h FOR HELP INFORMATION." and connection error messages embedded within the executable. The rule matches on certain file properties and content pattern conditions, ensuring accurate identification of this malware.
  Updated-Date: '2024_08_07'
OPCLEAVER_BackDoorLogger:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 942132964747b63a27637311f485619c
  Ruleset: securityonion-yara
  Summary: This rule detects a keylogger utilized by attackers in Operation Cleaver, evidenced by the presence of specific strings such as "BackDoorLogger" and "zhuAddress."
  Updated-Date: '2024_08_07'
OPCLEAVER_CCProxy_Config:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: af412da7500aa8efca6d438a37915107
  Ruleset: securityonion-yara
  Summary: This rule detects specific configuration settings for CCProxy, a proxy server software, which are associated with the cyber espionage campaign known as Operation Cleaver. The criteria for detection include the presence of strings indicating a configuration for a user named "User-001" with web and mail services enabled, but FTP services disabled. Additionally, it checks for a specific IP address, "78.109.194.114," in the configuration.
  Updated-Date: '2024_08_07'
OPCLEAVER_Jasus:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ece60f4502ca5330dd6658e195eacccb
  Ruleset: securityonion-yara
  Summary: 'This rule detects an ARP cache poisoning tool used by attackers in Operation Cleaver. It identifies specific strings within the software, such as "pcap_dump_open," "Resolving IPs to poison...," and the misspelled warning message "WARNNING: Gateway IP can not be found."'
  Updated-Date: '2024_08_07'
OPCLEAVER_LoggerModule:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 956c835c9281e8e563ac449b122e8adc
  Ruleset: securityonion-yara
  Summary: This rule detects a keylogger related to Operation Cleaver, indicated by specific string patterns associated with file naming conventions and directories. The keylogger targets user data by following a particular format for recording timestamps and utilizing paths within the user's AppData directory for storing cookies. This behavior is characteristic of malicious software designed to covertly monitor and log user activity.
  Updated-Date: '2024_08_07'
OPCLEAVER_NetC:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: da1b85e66a11242cb8447926d5ed69d3
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific executable and service associated with Net Crawler, a tool used by attackers in Operation Cleaver. It identifies instances of the "NetC.exe" file and "Net Service" text strings, indicating the potential use of this malicious tool.
  Updated-Date: '2024_08_07'
OPCLEAVER_Parviz_Developer:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 84fe1651e51754905de5031645da43d4
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of files associated with a developer named Parviz, who is linked to Operation Cleaver, by identifying paths containing "Users\\parviz\\documents\\" in a case-insensitive manner.
  Updated-Date: '2024_08_07'
OPCLEAVER_ShellCreator2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 95ced741d6ec9854861ba58d4e172dda
  Ruleset: securityonion-yara
  Summary: This rule detects the Shell Creator tool used by attackers in Operation Cleaver to create ASPX web shells by identifying specific strings related to its properties and methods, such as "ShellCreator2.Properties" and "set_IV".
  Updated-Date: '2024_08_07'
OPCLEAVER_SmartCopy2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: fb2435d580ab76b57df8f788687f2465
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of malware or a hacking tool known as SmartCopy2, which is associated with attackers involved in Operation Cleaver. It specifically looks for the strings "SmartCopy2.Properties" and "ZhuFrameWork" within a file to identify this malicious software.
  Updated-Date: '2024_08_07'
OPCLEAVER_SynFlooder:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d13a793a1f6de9d90c0c23bfcaafaad8
  Ruleset: securityonion-yara
  Summary: This rule detects a malware or hack tool associated with Operation Cleaver. It identifies specific text strings indicative of the tool's behavior, such as messages related to resolving issues, displaying IP addresses, and confirming the successful creation of raw TCP sockets. These patterns suggest the tool's involvement in network activities, potentially including SYN flood attacks.
  Updated-Date: '2024_08_07'
OPCLEAVER_TinyZBot:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b31f1f970f3980fb266e8e808a9919dd
  Ruleset: securityonion-yara
  Summary: This rule detects TinyZBot, a malware used by attackers in Operation Cleaver. The detection is based on several strings found within the bot, including references to "NetScp" in wide characters, specific resource properties, and related executable names like "netscp.exe". It also looks for functions associated with web references and file integrity checks, plus mentions of "Aoao WaterMark" and a watermarking operation labeled "Zhoupin_Cleaver". The rule is designed to identify the presence of this customized malicious software based on these unique characteristics.
  Updated-Date: '2024_08_07'
OPCLEAVER_ZhoupinExploitCrew:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b2d6a07db214513e15277c0103182205
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of keywords associated with attackers in Operation Cleaver, specifically targeting text strings "zhoupin exploit crew" and "zhopin exploit crew," regardless of case sensitivity.
  Updated-Date: '2024_08_07'
OPCLEAVER_antivirusdetector:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 731721e05ddb2b11d23dbbbe67646673
  Ruleset: securityonion-yara
  Summary: This rule detects a hack tool associated with Operation Cleaver. It identifies instances where specific strings related to antivirus detection functionality such as "getShadyProcess," "getSystemAntiviruses," and "AntiVirusDetector" are present, which indicate the tool's role in checking for antivirus software on the infected system.
  Updated-Date: '2024_08_07'
OPCLEAVER_csext:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: af4d3ad0499f519c4044b817031780e9
  Ruleset: securityonion-yara
  Summary: This rule detects a backdoor associated with Operation Cleaver, distinguished by specific strings such as "COM+ System Extentions," "csext.exe," and "COM_Extentions_bin."
  Updated-Date: '2024_08_07'
OPCLEAVER_kagent:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: bb6e4b0f26edf8729b97a54c30b76867
  Ruleset: securityonion-yara
  Summary: This rule detects a backdoor named KAgent, utilized by attackers in a cyber-espionage campaign known as Operation Cleaver. The detection is based on identifying specific strings within the code, such as an indication of a "kill command" and a formatted message showing data length in Base64 encoding, which are characteristic behaviors of this malicious software.
  Updated-Date: '2024_08_07'
OPCLEAVER_mimikatzWrapper:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 342c43c83fcf1c495b7ea5e25dda20ae
  Ruleset: securityonion-yara
  Summary: This rule detects the "mimikatzWrapper," associated with attackers involved in Operation Cleaver. It specifically searches for the strings "mimikatzWrapper" and "get_mimikatz" to identify this variant, which interfaces with the Mimikatz tool typically used for extracting credentials from Windows systems.
  Updated-Date: '2024_08_07'
OPCLEAVER_pvz_in:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7799c63aedd587d0831b1c262ce14722
  Ruleset: securityonion-yara
  Summary: This rule detects the Parviz tool, a utility employed by attackers as part of Operation Cleaver. The rule identifies strings indicative of Parviz tool usage, such as specific time formatting and error handling commands.
  Updated-Date: '2024_08_07'
OPCLEAVER_pvz_out:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b45db5f55dd35296dc31514ff6a41a40
  Ruleset: securityonion-yara
  Summary: This rule detects the Parviz tool utilized by attackers in Operation Cleaver. It looks for the presence of specific wide strings, "Network Connectivity Module" and "OSPPSVC," to identify the malicious activity associated with this tool.
  Updated-Date: '2024_08_07'
OPCLEAVER_wndTest:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4296796cba9d14a832b3e272b5fb362e
  Ruleset: securityonion-yara
  Summary: This rule detects a backdoor used by attackers in Operation Cleaver by identifying specific strings within files. The strings include the wide character sequence "[Alt]", a formatted wide string "<< %s >>:", and a specific content disposition header format containing placeholder values for components, accounts, and products.
  Updated-Date: '2024_08_07'
OPCLEAVER_zhCat:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2fec5e77c1303719bb8ebb887d27ad40
  Ruleset: securityonion-yara
  Summary: This rule detects a network tool associated with Iranian hackers involved in Operation Cleaver. It searches for specific strings including a User-Agent string mimicking "Mozilla/4.0 (compatible; MSIE 7.0; AOL 8.0)" and the phrase "ABC (A Big Company)" in wide character format.
  Updated-Date: '2024_08_07'
OPCLEAVER_zhLookUp:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 467c05e5a146a4fca75b4849b47c5afb
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a hack tool called zhLookUp, which was used by attackers in Operation Cleaver. The detection is based on identifying the string "zhLookUp.Properties".
  Updated-Date: '2024_08_07'
OPCLEAVER_zhmimikatz:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 85432d172989b5d3c7b18c62d7f2b7d5
  Ruleset: securityonion-yara
  Summary: This rule detects a Mimikatz wrapper identified as "zhmimikatz" and "MimikatzRunner," which are used by attackers in the context of Operation Cleaver.
  Updated-Date: '2024_08_07'
OSEditor:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 863c74ac7bb79ead1c7f1563b8eff5c3
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a Chinese hacktool known as OSEditor. It identifies the executable file named "OSEditor.exe" by checking for specific strings within the file, such as "OSEditor.exe," "netsafe," "OSC Editor," "GIF89," and "Unlock." The file must have a specific header value and a size of less than 100KB for detection.
  Updated-Date: '2024_08_07'
OSX_backdoor_Bella:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6719030ae3b2376a7536d033e4c10675
  Ruleset: securityonion-yara
  Summary: This rule detects the Bella backdoor malware on MacOS/OSX systems. Bella is known for using a bash script with a specific environment setup (#/usr/bin/env). The rule looks for strings tied to common prerequisites and functionalities such as importing system modules and utilities (subprocess, sys, shutil), and specific operations like creating helpers, SUID shell checks, and running status messages ("BELLA IS NOW RUNNING"). It also identifies database interactions, payload injections, and updates, as well as phishing activities related to Apple IDs and iTunes presence. The rule triggers based on a particular file signature, limited file size, and specific string locations within the file.
  Updated-Date: '2024_08_07'
OSX_backdoor_EvilOSX:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 49e76c44011e8afbdf6aabf5189e1def
  Ruleset: securityonion-yara
  Summary: This rule detects the EvilOSX backdoor targeting MacOS/OSX systems. It identifies scripts that start with a specific Unix shell interpreter and contain certain Python code, particularly those dealing with base64 encoding and decoding. The criteria also include the presence of telltale strings related to EvilOSX functions in either plain text or their base64 encoded forms. The backdoor typically involves functionalities like accessing the launch agent directory. These characteristics combined help in recognizing the malicious behavior typical of EvilOSX within a file size limit of 30KB.
  Updated-Date: '2024_08_07'
Office_AutoOpen_Macro:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6ea90ce0dfe8b9cc4d911de756207e34
  Ruleset: securityonion-yara
  Summary: This rule detects Microsoft Office files, such as DOC, PPT, XLS or their compressed variants (DOCX, PPTX, XLSX), that contain the AutoOpen macro function. The presence of the "AutoOpen" and "Macros" keywords within the file is checked, and the file size must be less than 300,000 bytes. Multiple specific file hashes are also referenced for detection. The detection aims to identify potentially malicious macros that automatically execute when the Office document is opened.
  Updated-Date: '2024_08_07'
Office_DDEAUTO_field:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 583b58a3f9217a02d3ac786f0c2415a7
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of DDEAUTO fields within Microsoft Office documents, specifically looking for Document Data Exchange (DDE) elements. This technique can be used to execute code via external applications and is often exploited in phishing attacks and malware campaigns. The detection involves identifying specific patterns in the document's structure that indicate the use of DDE-built functions.
  Updated-Date: '2024_08_07'
Office_DDE_field:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d0e4694c1cbfa0b0b4076a78acd370eb
  Ruleset: securityonion-yara
  Summary: This rule detects Dynamic Data Exchange (DDE) fields within Microsoft Office documents by identifying patterns that match the specific format of DDE within the XML structure of the documents. DDE is often exploited for malicious purposes to execute code or transfer data between applications. The rule searches for sequences indicating the beginning and end of a field character definition that includes the term "DDE".
  Updated-Date: '2024_08_07'
Office_OLE_DDE:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 510ebaa5f96f285d4bdcfc4a33a52310
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of Dynamic Data Exchange (DDE) in Microsoft Office documents. It identifies DDE by searching for specific byte patterns and strings within the file. The rule looks for sequences that match DDE command structures, ensuring the file is an MS Office document and avoiding false positives by excluding matches related to root entries or the Adobe ARM Installer.
  Updated-Date: '2024_08_07'
Office_OLE_DDEAUTO:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 86de2afaa26126187b2f002046273414
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of Dynamic Data Exchange (DDE) in Microsoft Office documents, specifically by identifying patterns associated with the "DDEAUTO" keyword. DDE is a protocol used for interprocess communication in Windows and can be exploited for malicious purposes. The rule triggers when it finds the "DDEAUTO" pattern in files that match the signature of Microsoft Office documents.
  Updated-Date: '2024_08_07'
Office_as_MHTML:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1c93a8b8ddf1b00ddb0ed8fb3c5bb486
  Ruleset: securityonion-yara
  Summary: This rule detects Microsoft Office files saved in the MHTML format, identified by the presence of specific MIME headers and base64 encoded strings commonly associated with Office documents. This includes content transfer encodings, specific content types, and key base64 encoded strings like 'ActiveMime' and a generic Office header. Such patterns are often observed in files exploiting CVE-2012-0158, a known vulnerability, although false positives are rare.
  Updated-Date: '2024_08_07'
OilRig_Campaign_Reconnaissance:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4555af1af874a987f085ffdc1c5f4483
  Ruleset: securityonion-yara
  Summary: This rule detects reconnaissance activity associated with the OilRig campaign by identifying specific Windows discovery commands. These commands include querying user and group information on the domain, such as "whoami & hostname & ipconfig /all", "net user /domain 2>&1 & net group /domain 2>&1", and checking for domain administrator group membership with "net group 'domain admins' /domain 2>&1". These commands are often used by attackers for gathering system and network information.
  Updated-Date: '2024_08_07'
OilRig_ISMAgent_Campaign_Samples1:
  Created-Date: '2024_08_06'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 780087732e5c61880d76e32b66acd8b9
  Ruleset: securityonion-yara
  Summary: This rule detects malicious software associated with the OilRig group, specifically targeting samples reported by Unit 42 in October 2017. It identifies files through specific strings, including a unique file marker, a path to an image on a desktop, and PowerShell command fragments. The rule also looks for references to a file named "servicereset.exe" and certain directory paths. This malware is characterized by its small size, being less than 3000KB, and contains unique patterns in its content.
  Updated-Date: '2024_08_06'
OilRig_ISMAgent_Campaign_Samples2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e64bd903820d8411016d4aa8f334b466
  Ruleset: securityonion-yara
  Summary: This rule detects the OilRig malware, also known as ISMAgent, based on details from a Unit 42 report from October 2017. It identifies specific components associated with the malware by searching for the filenames "PolicyConverter.exe," "SrvHealth.exe," and "srvBS.txt." Additionally, the rule looks for the inclusion of a GUID "{a3538ba3-5cf7-43f0-bc0e-9b53a98e1643}" linked with a PublicKeyToken of "3e56350693f7355e" and the path "C:\\Windows\\Microsoft.NET\\Framework\\v2.0.50727\\RegAsm.exe." These elements combined help pinpoint the presence of the OilRig malware within executable files smaller than 700KB with a specific header value.
  Updated-Date: '2024_08_07'
OilRig_ISMAgent_Campaign_Samples3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 88df7ea02c8eb2b3cdbd48fb30c259e5
  Ruleset: securityonion-yara
  Summary: 'This rule detects malware associated with the OilRig group, specifically samples mentioned in a Unit 42 report from October 2017. It identifies signatures based on commands and strings related to task scheduling, domain names like "SampleDomain.com," ".ntpupdateserver.com," and ".msoffice365update.com," as well as specific filenames and error messages. Key indicators include strings like "out.exe," "Content-Disposition: form-data; name=\"file\"; filename=\"a.a\"," and the output of scheduled tasks. It also includes checks on executable characteristics such as the import hash and file size.'
  Updated-Date: '2024_08_07'
OilRig_Malware_Campaign_Gen1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b65f3ae99f65577f2932e656ef225e2f
  Ruleset: securityonion-yara
  Summary: "This rule detects malware associated with the OilRig Campaign by identifying specific strings and patterns within the code. It looks for various PowerShell commands and scripts, such as commands that manipulate files in the \"%Public%\\Libraries\\\" directory, and the use of \"WScript.Shell\" to run commands. The presence of base64-encoded configurations, like setting up specific paths and creating objects, is also used as indicators. The condition for detection includes checking the file\u2019s initial bytes, ensuring the file size is under 700KB, and matching one of the predefined strings."
  Updated-Date: '2024_08_07'
OilRig_Malware_Campaign_Gen2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6d295ab04a08d05f6a946a18f176e80c
  Ruleset: securityonion-yara
  Summary: This rule detects the OilRig malware samples, which involve sophisticated techniques and malicious scripts designed to compromise targeted systems. The identified malware demonstrates various behaviors, such as decoding base64 strings related to system text encoding, randomizing strings with specific patterns, creating scheduled tasks via script files, and manipulating PowerShell commands to achieve persistence and evasion. The presence of specific encoded strings, particularly those involving system paths and URLs pointing to seemingly legitimate websites, indicates the malware's attempts to hide its activities and maintain control over infected systems. This detection is facilitated through recognizing specific ASCII patterns and command sequences used by the malware.
  Updated-Date: '2024_08_07'
OilRig_Malware_Campaign_Gen3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 366a6022bac66dcbaa8e10d4dd2e6464
  Ruleset: securityonion-yara
  Summary: This rule detects specific samples of OilRig malware by identifying particular strings associated with the threat. It searches for the presence of certain indicators such as a reference to FireEye source code, the path to a potentially malicious VBS script within the libraries directory, and variations of the filename "fireeye.vbs" in both ASCII and wide character formats. The rule is designed to pinpoint executable files with a specific header signature and a file size less than 100 kilobytes.
  Updated-Date: '2024_08_07'
OilRig_Malware_Campaign_Mal1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c8a6b1c381317b73f9c67de347ee0285
  Ruleset: securityonion-yara
  Summary: This rule detects malware associated with the OilRig Campaign. It identifies malicious activity involving PowerShell scripts that download and execute files from specified URLs, bypassing execution policies. The rule also targets specific strings related to the execution of downloaded files and command scripts. Additionally, it monitors for a particular URL tied to malicious activities, ensuring detection through multiple conditions based on file characteristics and contents.
  Updated-Date: '2024_08_07'
OilRig_Malware_Campaign_Mal2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f43ffdef7b579df966af216aca5355d3
  Ruleset: securityonion-yara
  Summary: This rule detects malware associated with the OilRig campaign. It identifies malicious scripts that execute PowerShell commands to manipulate and replace content in files located in the public libraries directory. The rule searches for specific strings including email addresses like "Mohammed.sarah@gratner.com" and "Tarik.Imam@gartner.com", commands to extract and execute VBS and PS1 scripts, and certain base64 encoded content. The detection is triggered if the file starts with a specific header, is under 200KB in size, and contains at least one of the defined strings.
  Updated-Date: '2024_08_07'
OilRig_Malware_Campaign_Mal3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 221dd16922f34536950449d767e2b8de
  Ruleset: securityonion-yara
  Summary: This rule detects a specific piece of malware from the OilRig cyber espionage campaign. It identifies malicious activity by searching for particular PowerShell commands and expressions within files smaller than 10KB. These commands include manipulating the "dns.ps1" script in the Public Libraries folder, executing bat files and redirecting output to text files, and generating random identifiers using a base36 conversion in PowerShell.
  Updated-Date: '2024_08_07'
OilRig_Malware_Nov17_13:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 74674b198fbae1eb6fe56b4d50ec74ae
  Ruleset: securityonion-yara
  Summary: This rule detects a specific variant of OilRig malware by looking for several unique indicators within executable files. It checks for particular strings related to the dnscat2 tool and cscript.exe commands, alongside taskkill and cmd.exe usage patterns. The rule applies to files under a certain size with specific import hash values, effectively identifying the malware based on these distinct characteristics.
  Updated-Date: '2024_08_07'
OilRig_RGDoor_Gen1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f403e91852cdb00d25638a8bc4cfd4e0
  Ruleset: securityonion-yara
  Summary: This rule detects the RGDoor backdoor utilized by the OilRig group, particularly targeting systems by looking for specific characteristics in files. The rule identifies the presence of this malware by checking for hexadecimal patterns and specific strings such as "MyNativeModule.dll," "RGSESSIONID=" and "download$." It also examines the PE file header and imposes a file size limit of under 600KB. The rule is effective if particular conditions are met, such as matching a known PE import hash or finding certain string patterns within the file.
  Updated-Date: '2024_08_07'
OilRig_Strings_Oct17:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f25bf3ceba54ba917706b1ccd7fe6930
  Ruleset: securityonion-yara
  Summary: This rule detects specific strings associated with the OilRig malware and malicious scripts. It identifies file paths and debug file paths that may indicate the presence of OilRig malware, with examples such as "%localappdata%\\srvHealth.exe", "%localappdata%\\srvBS.txt", and references to "Agent Injector" project outputs. These strings are used to recognize infected systems or malicious activities related to the OilRig threat actor known for cyber espionage operations.
  Updated-Date: '2024_08_07'
Oilrig_IntelSecurityManager:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: da6954e78e4dc0c9e86b31dcba47f156
  Ruleset: securityonion-yara
  Summary: This rule detects the OilRig malware, which utilizes specific indicators such as certain strings related to file paths, domain names, and responses within its code. The malware employs various strings including "IntelSecurityManager," "msoffice365cdn.com," and script names like "\\tmpCa.vbs," among others, to manage security settings and communicate over a network. The rule identifies these characteristics by searching for these distinct string patterns within files smaller than 300KB.
  Updated-Date: '2024_08_07'
Oilrig_IntelSecurityManager_macro:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2b735e921bb1489f9dee2d3fc4c846b1
  Ruleset: securityonion-yara
  Summary: This rule detects OilRig malware by identifying specific strings present in the macro code associated with the malware. Indicators include characteristic obfuscated strings, command-line instructions related to the Windows Task Scheduler, and specific error messages. It targets macros that employ variable replacements and commands to execute shell operations and manage scheduled tasks, such as deleting tasks or using Visual Basic scripts to run commands. The condition ensures that the file size is less than 300KB and matches certain combinations of these indicative strings.
  Updated-Date: '2024_08_07'
Oilrig_Myrtille:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0c0781026d58bd8a57a10c379a0faf10
  Ruleset: securityonion-yara
  Summary: This rule detects the Oilrig Myrtille RDP Browser by identifying specific strings associated with Myrtille services and error messages related to RDP client processes. It targets files that include references to "Myrtille.Services.pdb" and specific error messages or notifications about remote session processes. The rule applies to files starting with the "MZ" header and smaller than 50KB.
  Updated-Date: '2024_08_07'
Oilrig_PS_CnC:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d572e31eacfd79a574840acaac2474be
  Ruleset: securityonion-yara
  Summary: This rule detects a type of PowerShell-based command and control (CnC) malware attributed to the Oilrig group, which uses DNS queries for communication. Identifying strings include specific script patterns that concatenate parts of a base32-encoded data file and generate a hostname incorporating a unique file identifier and character ranges. The rule is effective for PowerShell scripts under 40KB that contain at least one of the specified patterns.
  Updated-Date: '2024_08_07'
OlympicDestroyer_Gen2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a69ff16fbb5495ee74967f960971f824
  Ruleset: securityonion-yara
  Summary: This rule detects the Olympic Destroyer malware by identifying specific command-line strings and behaviors associated with the malware's activities. It looks for the presence of Windows command-line operations that interact with the file system, such as commands involving "cmd.exe" with parameters to create or delete specific files, and ping operations used to introduce delays. Additionally, the rule checks for file paths related to the 2018 Pyeongchang Olympics. It also includes markers indicating credential handling and network communication commands. The rule relies on the identification of specific patterns within executable files, focusing on import hash values, file size constraints, and the presence of certain strings typically found in the malware.
  Updated-Date: '2024_08_07'
OpCloudHopper_Dropper_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c287d73d7b15a5c8be836cb5c83cfa07
  Ruleset: securityonion-yara
  Summary: This rule detects malware associated with Operation Cloud Hopper by identifying a specific RTF document structure. The defining characteristics include a unique set of metadata and content patterns such as specific version, editor, and company references embedded within the document. The rule triggers when these attributes are found in files less than 700KB in size, with a file header beginning with the byte sequence corresponding to RTF format.
  Updated-Date: '2024_08_07'
OpCloudHopper_Malware_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9f98aa4fa721602dc9a6e9974cb00c4f
  Ruleset: securityonion-yara
  Summary: This rule detects malware associated with Operation Cloud Hopper, which employs specific string patterns as indicators. The rule identifies executable files by their size (under 200KB) and signature (0x5a4d), matching particular ASCII strings such as "zok]\\\ZZYYY666564444," "z{[ZZYUKKKIIGGGGGGGGGGGGG," "EEECEEC," and "IIEFEE." These distinct patterns help in recognizing and flagging files compromised by this particular malware.
  Updated-Date: '2024_08_07'
OpCloudHopper_Malware_10:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 09faf9d2be8ee8a724c8f37f472a3456
  Ruleset: securityonion-yara
  Summary: This rule detects malware associated with Operation Cloud Hopper. It identifies the presence of specific strings and opcode patterns within executable files, such as "bakshell.EXE" and "bakshell Applicazione MFC," and a particular sequence of bytecode. The rule targets files with the MZ header value and a size less than 200KB to identify suspicious files linked to this malware.
  Updated-Date: '2024_08_07'
OpCloudHopper_Malware_11:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1206c6949d68b01bb3fd7e2848c45960
  Ruleset: securityonion-yara
  Summary: This rule detects malware associated with Operation Cloud Hopper by matching specific ASCII strings and opcodes within executable files. The strings and byte sequences (opcodes) identified in the rule are indicative of the malicious software used in this cyber espionage campaign. The rule triggers if the file contains the specified sequences and the file size is less than 200KB, with a starting identifier of "0x5a4d."
  Updated-Date: '2024_08_07'
OpCloudHopper_Malware_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2c3661192a5c56a9de48dd2086fef28c
  Ruleset: securityonion-yara
  Summary: This rule detects Operation CloudHopper malware samples, known for targeting IT service providers to access their clients' networks. It identifies specific strings and patterns within files, such as "sERvEr.Dll" and "ToolbarF.dll," as well as malicious behaviors like modifying registry keys and using the "rundll32.exe" command to uninstall/update malicious software. Additionally, it looks for particular assembly code sequences and specific file structures. This malware is associated with behaviors such as keylogging, and it uses a range of techniques to hide within the system and avoid detection.
  Updated-Date: '2024_08_07'
OpCloudHopper_Malware_3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1418257e1a13eee68aea6dce0e641225
  Ruleset: securityonion-yara
  Summary: This rule detects malware associated with Operation Cloud Hopper, which is known for targeting global organizations in cyber-espionage campaigns. The malware is identified through specific textual and binary patterns, including unique ASCII strings and byte sequences related to its operational processes. The rule ensures detection by checking for specific characteristics like file headers and size constraints, which are typical of the malware used in these attacks.
  Updated-Date: '2024_08_07'
OpCloudHopper_Malware_4:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: fdf0f8dc8c3012681ec86879d2ab0e44
  Ruleset: securityonion-yara
  Summary: This rule detects malware associated with Operation Cloud Hopper. It identifies specific strings within files that match known indicators of this cyber espionage campaign. The strings include "operator \"\" ", "InvokeMainViaCRT", and ".?AVAES@@". Additionally, the rule applies to files that start with the "MZ" header and are smaller than 800KB.
  Updated-Date: '2024_08_07'
OpCloudHopper_Malware_5:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 552904596422d5767431792670a7c386
  Ruleset: securityonion-yara
  Summary: This rule detects malware associated with Operation Cloud Hopper, a sophisticated cyber-espionage campaign targeting managed IT service providers. It identifies specific characteristics and signatures related to the malware, such as distinct strings ("CWINDOWSSYSTEMROOT", "YJ_D_KROPOX_M_NUJI_OLY_S_JU_MOOK", "NJK_JK_SED_PNJHGFUUGIOO_PIY", "c_VDGQBUl}YSB_C_VDlqSDYFU", "FALLINLOVE") and a particular opcode pattern. The condition checks for a valid PE file header and ensures the file size is under 100KB, triggering if either at least one specified string or opcode pattern matches, or if four strings are present.
  Updated-Date: '2024_08_07'
OpCloudHopper_Malware_6:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 17e9cbca40617e04eaab3f36af17d18b
  Ruleset: securityonion-yara
  Summary: This rule detects malware associated with Operation Cloud Hopper, a sophisticated cyber-espionage campaign. The malware it targets can be identified by specific characteristics, including distinctive strings such as "YDNCCOVZKXGRVQPOBRNXXQVNQYXBBCONCOQEGYELIRBEYOVODGXCOXTHXPCXNGUCHRVWKKZSYQMAOWWGHRSPRGSEUWYMEFZHRTHO," file names like "psychiatry.dat" and "meekness.lnk," and the registry key "SOFTWARE\\EGGORG." The rule will trigger when the file starts with the "MZ" header, indicating a Windows executable, and is smaller than 300KB, if at least one of the specified strings is present.
  Updated-Date: '2024_08_07'
OpCloudHopper_Malware_7:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 55b61d25146cda162345311f54b947d8
  Ruleset: securityonion-yara
  Summary: This rule detects malware associated with Operation Cloud Hopper, which is part of a series of cyber espionage campaigns targeting global managed service providers (MSPs). The detection mechanism looks for specific ASCII strings within executable files smaller than 200KB, characterized by patterns such as "jepsjepsjepsjepsjepsjepsjepsjepsjepsjeps" and "extOextOextOextO". The presence of these strings, combined with a standard Windows executable file header, triggers the identification of this particular malware.
  Updated-Date: '2024_08_07'
OpCloudHopper_Malware_8:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e8e2a5d12af014fd7ad94b2b74830884
  Ruleset: securityonion-yara
  Summary: This rule detects malware associated with Operation Cloud Hopper, specifically searching for the presence of certain strings within a file. It identifies the "WSHELL32.dll" library, expressions like "operator \"\" ", and specific registry operation commands, indicating suspicious activity. Additionally, it looks for specific string patterns within the file, such as "zok]\\\\\\ZZYYY666564444" and "AFX_DIALOG_LAYOUT." The file is also checked to ensure it has an MZ header and a size under 900KB.
  Updated-Date: '2024_08_07'
OpCloudHopper_Malware_9:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7f793a3d8e0d0f3b8f29b48e04620eac
  Ruleset: securityonion-yara
  Summary: This rule detects malware associated with Operation Cloud Hopper, which poses as "MsMpEng.exe" and uses a specific opcode sequence within executable files. The condition for detection includes files starting with the "0x5a4d" signature and a file size smaller than 2000KB.
  Updated-Date: '2024_08_07'
OpCloudHopper_WindowXarBot:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3fda09187a99b179bddebfeca2780d0c
  Ruleset: securityonion-yara
  Summary: This rule detects the WindowXarbot malware associated with Operation Cloud Hopper. It identifies the presence of the malware by looking for a specific debug path string, "\\Release\\WindowXarbot.pdb", within files that are Windows executable format (indicated by the "MZ" header) and are less than 2000KB in size.
  Updated-Date: '2024_08_07'
OpCloudHopper_WmiDLL_inMemory:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b610fec04dba2c283608e0c71dfd156e
  Ruleset: securityonion-yara
  Summary: This rule detects malware associated with Operation Cloud Hopper by identifying the presence of the string "wmi.dll 2>&1" in memory, which is indicative of the malware's execution.
  Updated-Date: '2024_08_07'
OpCloudHopper_lockdown:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9a149063dbc8cc86e51677241b40f912
  Ruleset: securityonion-yara
  Summary: This rule detects tools related to Operation Cloud Hopper by identifying files containing specific strings like "lockdown.dll" and "mfeann.exe" within executable files smaller than 300KB and starting with the "MZ" header, indicating a Windows executable.
  Updated-Date: '2024_08_07'
OpHoneybee_Malware_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2ed0224c2ffe6fb26f4f263345eb257c
  Ruleset: securityonion-yara
  Summary: This rule detects malware associated with Operation Honeybee. It identifies malicious files based on specific characteristics such as the command to terminate and delete processes, file paths related to software development, unique encrypted strings, and particular directories. Additionally, the rule searches for references in the code indicative of DLL process attachment, system information commands, certain file names, configuration files, functions for retrieving FTP account information, mutex names, and formatted text strings. The malware is further categorized by its PE file structure, file size, and import hash values corresponding to known malicious signatures.
  Updated-Date: '2024_08_07'
OpHoneybee_MaoCheng_Dropper:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6ad1904648957b23d0da001fb5ba7ad5
  Ruleset: securityonion-yara
  Summary: This rule detects the MaoCheng dropper associated with Operation Honeybee. The rule looks for specific file properties including a particular string "\\MaoCheng\\Release\\" and a file signature indicating a Windows executable (0x5a4d). Additionally, it checks that the file size is less than 600KB.
  Updated-Date: '2024_08_07'
OracleScan:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5ebd10191b8376d85261ec4c51ed5cef
  Ruleset: securityonion-yara
  Summary: This rule detects a Chinese hack tool named OracleScan.exe, targeting Oracle databases. The tool is identified by unique strings such as a URL referencing a Baidu blog, paths associated with Borland Delphi, and specific keywords like "USER_NAME" and "FROMWWHERE." The rule checks for the presence of these strings in files smaller than 300KB with an initial byte sequence matching a Windows executable file header (0x5a4d).
  Updated-Date: '2024_08_07'
OtherTools_servu:
  Created-Date: '2024_08_06'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1e074b5b25f9a2f278642fc610ddedcb
  Ruleset: securityonion-yara
  Summary: This rule detects the file 'svu.exe' associated with a Chinese hacktool set. It identifies specific string patterns within the file, such as "MZKERNEL32.DLL", "UpackByDwing@", "GetProcAddress", and "WriteFile", in addition to validating the file size to be less than 50KB. The detection is confirmed if all the specified strings are present within the file.
  Updated-Date: '2024_08_06'
OtherTools_xiaoa:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a830fda9940debea676f7b93f9f3fea7
  Ruleset: securityonion-yara
  Summary: This rule detects a Chinese hacking tool named "xiaoa.exe." It identifies specific ASCII strings within the executable, including usage instructions, success messages, error notifications, and references to Windows operating system versions and kernel operations. The rule focuses on keywords related to command execution, local privilege exploits in the Windows kernel, and error handling in the software. Additionally, it checks for certain binary characteristics, such as the presence of the "MZ" header and file size constraints.
  Updated-Date: '2024_08_07'
PAExec:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: efc2a641cfd41a018a1dc52202902ca2
  Ruleset: securityonion-yara
  Summary: This rule detects the remote access tool PAExec, similar to PsExec, based on the presence of the file PAExec.exe. It identifies specific patterns in text strings, including references to PAExec log files, error messages about token acquisition for Local System, descriptions of PAExec's remote execution capabilities, and designated pipe paths for inter-process communication.
  Updated-Date: '2024_08_07'
PAS_TOOL_PHP_WEB_KIT_mod:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 12fea47be72c1f81a09bb3ed636a4f86
  Ruleset: securityonion-yara
  Summary: This rule detects the PAS Tool PHP Web Kit, a malicious PHP web-based tool. It specifically identifies the presence of PHP code that includes various suspicious elements such as base64 decoding, string replacement operations, MD5 hash calculations, gzip decompression, and the usage of cookies and the isset function. The rule targets files with specific characteristics, including a size between 10KB and 30KB, and triggers if these criteria are met, indicating the potential presence of this malicious toolkit.
  Updated-Date: '2024_08_07'
PAS_Webshell_Encoded:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 81124791e4cf43ff15d506a0528cdc0d
  Ruleset: securityonion-yara
  Summary: This rule detects a PAS webshell by identifying specific patterns in the PHP code, including encoded or obfuscated segments commonly associated with malicious activity. It looks for particular strings such as encoded PHP headers, cookie checks, string manipulations, and cookie setting functions. Additionally, the rule searches for specific footer patterns often found towards the end of the webshell files. The base-encoded strings and embedded conditions specifically target characteristics known to be used by the PAS webshell for evading detection and executing malicious operations on compromised web servers.
  Updated-Date: '2024_08_07'
PHANTASMA_php:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 198409cc2c5e1920aec8e698566689ea
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the PHANTASMA PHP web shell by identifying specific strings within a file. These strings include patterns related to safe mode operation, hyperlinks combining script names and query strings, indications of spawning a shell, and the term "Cha0s". The detection is triggered if at least two of these specified strings are found.
  Updated-Date: '2024_08_07'
PHISH_02Dez2015_attach_P_ORD_C_10156_124658:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6106be9efa0db52f8637a3c5d574155d
  Ruleset: securityonion-yara
  Summary: This rule detects an Excel spreadsheet involved in a phishing campaign, specifically identified as "P-ORD-C-10156-124658.xls." The rule flags files with a specific file size limit and a particular file header indicative of Excel files. It searches for specific strings within the file, such as "Execute," "Process WriteParameterFiles," "WScript.Shell," "STOCKMASTER," and "InsertEmailFax," which suggest that the document contains malicious scripts or commands. Various file hashes are also provided to uniquely identify the malicious file variants linked to this phishing wave.
  Updated-Date: '2024_08_07'
PHISH_02Dez2015_dropped_p0o6543f_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c985911f38ad41fa6bfc435a384a307a
  Ruleset: securityonion-yara
  Summary: This rule detects a phishing-related executable file named "p0o6543f.exe," which is associated with a specific phishing campaign. It identifies the file based on its hash and checks for the presence of various strings, such as "netsh.exe," "routemon.exe," and other specific terms indicative of both benign and potentially harmful software behaviors. The rule targets files under 250KB in size that start with the "MZ" header, indicative of Windows executable files.
  Updated-Date: '2024_08_07'
PHISH_02Dez2015_dropped_p0o6543f_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e3d6b5e8a87f752790e00bf8a133fc12
  Ruleset: securityonion-yara
  Summary: 'This rule detects a phishing campaign that utilizes the MineExplorer Game, specifically targeting a file named "p0o6543f.exe.4". The rule identifies this file through certain unique strings embedded within it, such as "Email: W0067@990.net," "MineExplorer Version 1.0," and "Copy Rights by WangLei 1999.4." Additionally, the file must start with the "MZ" header and have a size of less than 400KB. The detection is based on specific file hashes to ensure accurate identification.'
  Updated-Date: '2024_08_07'
PHP_Backdoor_Connect_pl_php:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e997746afde31043cb7810293794d1e0
  Ruleset: securityonion-yara
  Summary: This rule detects a PHP backdoor associated with an identified web shell script. It looks for specific strings in a file, including phrases such as "LorD of IRAN HACKERS SABOTAGE", "LorD-C0d3r-NT", and "echo --==Userinfo==-- ;", which indicate the presence of malicious code that could be used for unauthorized access or control over a compromised system.
  Updated-Date: '2024_08_07'
PHP_Backdoor_v1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 42a948e96728d570c5fe866b552256f7
  Ruleset: securityonion-yara
  Summary: This rule detects a PHP backdoor webshell named "PHP Backdoor v1". The detection is based on specific code patterns within the PHP file, such as the presence of a form submission echo command and a hyperlink generation echo command that reference the PHP_SELF server variable. This type of backdoor allows an attacker to interact with the compromised server through a web interface.
  Updated-Date: '2024_08_07'
PHP_Cloaked_Webshell_SuperFetchExec:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c955c7a5b25babbb91608d6aa8410f66
  Ruleset: securityonion-yara
  Summary: This rule detects a specific webshell that is hidden within a GIF file. The webshell uses PHP code to perform malicious activities. The particular pattern identified involves the use of a script that decodes data and executes it with the `eval()` function, which is a common technique used to obfuscate and run malicious code.
  Updated-Date: '2024_08_07'
PHP_Shell_php_php:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e5341c97cd7474525ca412309774171d
  Ruleset: securityonion-yara
  Summary: This rule detects a PHP script commonly known as "PHP Shell", which is used for executing commands on a server through a web interface. The rule specifically identifies the presence of HTML form elements within PHP code that allow users to submit commands using either GET or POST methods.
  Updated-Date: '2024_08_07'
PHP_Shell_v1_7:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: eeb1c1934232c438fd63c8f079054b88
  Ruleset: securityonion-yara
  Summary: 'This rule detects the presence of a PHP-based webshell script specifically identified as "PHP_Shell_v1.7.php." It looks for a specific indicator within the code: a title tag in HTML that contains "[ADDITINAL TITTLE]-phpShell by:[YOURNAME]", which indicates a personalized version of the webshell. Webshells like this one are typically used by attackers to gain unauthorized access and control over web servers.'
  Updated-Date: '2024_08_07'
PHP_Webshell_1_Feb17:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8f51d548b331988b945c7f8697085b13
  Ruleset: securityonion-yara
  Summary: This rule detects a simple cloaked PHP web shell by looking for specific patterns within PHP code that indicate obfuscated and deobfuscated malicious behavior. It identifies characteristic strings within the script, such as patterns related to global authentication variables and functions that decrypt and execute concealed code. The rule also notes the presence of encoded and decoded information manipulation techniques, such as using base64 decoding and the `unserialize` function to process obfuscated data.
  Updated-Date: '2024_08_07'
PHP_sh:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4bf7bbfd7e6ad6eba0c0b066f10c4c82
  Ruleset: securityonion-yara
  Summary: This rule detects a specific PHP webshell, characterized by the presence of a script that retrieves and executes the current working directory command using the server name variable. The script's hash value is 1e9e879d49eb0634871e9b36f99fe528.
  Updated-Date: '2024_08_07'
PHP_shell:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3df2cda50b87d3ee66f60365e022587e
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a PHP webshell file named "shell.php". The webshell is identified using two specific strings found within its code. The first string is "AR8iROET6mMnrqTpC6W1Kp/DsTgxNby9H1xhiswfwgoAtED0y6wEXTihoAtICkIX6L1+vTUYWuWz" and the second string is "1HLp1qnlCyl5gko8rDlWHqf8/JoPKvGwEm9Q4nVKvEh0b0PKle3zeFiJNyjxOiVepMSpflJkPv5s". Both of these strings must be present for the rule to trigger, indicating that the PHP webshell has been detected.
  Updated-Date: '2024_08_07'
PLEAD_Downloader_Jun18_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: bfd42990d1220a599cadbb3075ab9d9e
  Ruleset: securityonion-yara
  Summary: This rule detects the PLEAD Downloader, a type of malware associated with the BlackTech cyber-espionage group. It identifies the presence of this downloader by checking for specific patterns in a file, such as certain time and date formatting strings ("%02d:%02d:%02d", "%02d-%02d-%02d"), and a specific sequence of numbers ("1111%02d%02d%02d_%02d%02d2222"). Additionally, it looks for certain wide-character strings commonly associated with diagnostic messages like "Scanning..." and "Checking...". The rule is applied to files less than 200KB in size and begins with the 'MZ' header, indicating a Windows executable format.
  Updated-Date: '2024_08_07'
PLUGIN_AJunk:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 436f58e9b9e0e13e549ff1bce02dacd7
  Ruleset: securityonion-yara
  Summary: This rule detects a file named AJunk.dll, which is associated with a Chinese hacktool set. The detection is based on specific ASCII and wide strings identifying "AJunk.dll" and references to it being a dynamic link library (DLL). The file must have an initial file header value of 0x5a4d and be smaller than 560KB in size to match the rule's criteria.
  Updated-Date: '2024_08_07'
PLUGIN_TracKid:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1a9908eaa703ad997882702b81e3f6a9
  Ruleset: securityonion-yara
  Summary: This rule detects a Chinese hacktool identified as the file TracKid.dll, which is associated with capturing and logging activities. Specific strings related to the hacktool are targeted, including an e-mail address, file paths related to logging, a phrase indicating the author, and the filename TracKid.dll itself. The rule activates when the file starts with the 'MZ' header signature, is smaller than 200KB, and at least three of the specified strings are present in the file.
  Updated-Date: '2024_08_07'
PLUGX_RedLeaves:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9c9760f6bb0ef1f9a869df0ea827c3ba
  Ruleset: securityonion-yara
  Summary: This rule detects specific binaries associated with the RedLeaves and PlugX malware families. It identifies unique hexadecimal string patterns, file paths, shellcode references, and specific mutex names linked to these malware samples. RedLeaves and PlugX are known for their capabilities in remote access and control, often used in cyber espionage. Detection patterns include particular sequences of bytes that appear in the binary code of these malware variants, as well as specific identifiers related to their development and execution environments.
  Updated-Date: '2024_08_07'
POSHSPY_Malware:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 536672862ccd1d07a1daa27e5fadb4e5
  Ruleset: securityonion-yara
  Summary: This rule detects the POSHSPY malware, which utilizes specific PowerShell functions and encoded data patterns. The detection is based on multiple distinct strings, including unique function definitions, specific byte sequences, keyword arrays, encoded keys, and routine execution identifiers that are characteristic of this malware.
  Updated-Date: '2024_08_07'
PP_CN_APT_ZeroT_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b403cddb70b975ccc085b1dc2adc0678
  Ruleset: securityonion-yara
  Summary: This rule detects malware associated with the Proofpoint CN APT ZeroT incident. It identifies the specific malicious file "suprise.exe" within executable files smaller than 2000KB that start with the hexadecimal value 0x5a4d.
  Updated-Date: '2024_08_07'
PP_CN_APT_ZeroT_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 336c67e5e900283a624ba2abf3c4e11d
  Ruleset: securityonion-yara
  Summary: This rule detects malware linked to the Proofpoint CN APT ZeroT incident. It identifies an executable file named "NO2-2016101902.exe" that matches specific file properties, including a particular hash value and a file size under 2000KB.
  Updated-Date: '2024_08_07'
PP_CN_APT_ZeroT_3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 74f464c7ea6676e38ab033bce3674380
  Ruleset: securityonion-yara
  Summary: This rule detects malware associated with the Proofpoint CN APT ZeroT incident. It identifies specific textual patterns within files, such as "/svchost.exe", "RasTls.dll", and "20160620.htm", among others. The rule uses these patterns to find files under a size threshold of 1000KB, either when three or more of the patterns match or when all identified patterns are present.
  Updated-Date: '2024_08_07'
PP_CN_APT_ZeroT_4:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4e92c51170b9f85d994b268380556492
  Ruleset: securityonion-yara
  Summary: This rule detects malware associated with the Proofpoint CN APT ZeroT incident, which targets entities in Russia and Belarus. The malware is identified by the presence of specific string indicators such as "Mcutil.dll" and "mcut.exe" within executable files. The rule applies to files with a specified header value and a file size smaller than 1000KB.
  Updated-Date: '2024_08_07'
PP_CN_APT_ZeroT_5:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d94d19e470feba4800d1b6dc5326081c
  Ruleset: securityonion-yara
  Summary: This rule detects malware associated with the Proofpoint CN APT ZeroT incident, targeting specific files and strings within potentially compromised executable files. It identifies the presence of the malicious string "dbozcb" and looks for certain indicators such as "nflogger.dll", "/svchost.exe", and "1207.htm". The condition for detection is based on specific header values and file size constraints, ensuring accurate identification of the threat.
  Updated-Date: '2024_08_07'
PP_CN_APT_ZeroT_6:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e767c3824b9d953a4c2d27aae2c7bda4
  Ruleset: securityonion-yara
  Summary: This rule detects malware associated with the Proofpoint CN APT ZeroT incident. It identifies a specific file based on the presence of certain strings, including "jGetgQ|0h9=" and a path to a PDB file "\\sfxrar32\\Release\\sfxrar.pdb". The file must start with the "MZ" header and be smaller than 1000KB in size.
  Updated-Date: '2024_08_07'
PP_CN_APT_ZeroT_7:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a8da74579f9c2be90b93c0f414b063c4
  Ruleset: securityonion-yara
  Summary: This rule detects malware associated with the Proofpoint CN APT ZeroT incident, specifically identifying files named "RasTls.dll" and "RasTls.exe" as well as the error message "LOADER ERROR" and a specific procedure entry point error. The condition checks for these strings within files under 1000KB in size that begin with the hexadecimal value 0x5a4d.
  Updated-Date: '2024_08_07'
PP_CN_APT_ZeroT_8:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b860abe2e4cab5074cdc9780582a0c54
  Ruleset: securityonion-yara
  Summary: This rule detects malware associated with the Proofpoint CN APT ZeroT incident. It identifies files related to this specific malware by searching for certain strings within the file, such as "/svchost.exe," "RasTls.dll," "20160620.htm," and "/20160620.htm." Additionally, it checks that the file starts with the hexadecimal value 0x5449 and is less than 1000KB in size.
  Updated-Date: '2024_08_07'
PP_CN_APT_ZeroT_9:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 694c10f96bdee852e347fb5abbc2bc45
  Ruleset: securityonion-yara
  Summary: This rule detects malware associated with the Proofpoint CN APT ZeroT incident, specifically targeting files named "nflogger.dll" and "Zlh.exe." The condition requires that the file's first two bytes match the "0x5a4d" signature, which is indicative of a valid Windows executable and that the file size is less than 1000KB.
  Updated-Date: '2024_08_07'
PROMETHIUM_NEODYMIUM_Malware_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 52fd0bef853e2abcec6d8beef41d8ba1
  Ruleset: securityonion-yara
  Summary: "This rule detects PROMETHIUM and NEODYMIUM malware by identifying specific file paths and DLL names associated with the malware. It checks for the presence of \u201Cc:\\Windows\\system32\\syswindxr32.dll\u201D, \u201Cc:\\windows\\temp\\TrueCrypt-Setup-7.1a-tamindir.exe\u201D, \u201C%s\\ssleay32.dll\u201D, \u201C%s\\libeay32.dll\u201D, and \u201C%s\\fprot32.exe\u201D. Additionally, it ensures the file starts with the 'MZ' header signature and is smaller than 10,000KB. The rule triggers if at least three of the specified strings are found within the given conditions or if all strings match."
  Updated-Date: '2024_08_07'
PROMETHIUM_NEODYMIUM_Malware_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 29995a576f39cc3fc4a5a957ce8bb0f8
  Ruleset: securityonion-yara
  Summary: This rule detects the PROMETHIUM and NEODYMIUM malware by identifying specific executable names such as "winasys32.exe," "alg32.exe," "wmsrv32.exe," and "vmnat32.exe." These executables are associated with the malware, and the rule triggers if the file being scanned starts with the MZ header (indicating a Windows executable file) and is smaller than 2000KB, and if any one or three of the specified strings are present.
  Updated-Date: '2024_08_07'
PROMETHIUM_NEODYMIUM_Malware_3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: cba28f45cd9c6058c65823a3c90428a7
  Ruleset: securityonion-yara
  Summary: This rule detects the PROMETHIUM and NEODYMIUM malware by identifying specific patterns and strings within files. It looks for distinct indicators like the text string related to SSL handshake and handshake results, along with specific DLL filenames such as "mvhost32.dll," "sdwin32.dll," and "ofx64.dll". The rule is triggered if the file begins with a particular header value, is smaller than 2000KB, and contains at least two of the specified strings, or contains all of the specified strings.
  Updated-Date: '2024_08_07'
PROMETHIUM_NEODYMIUM_Malware_4:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 776c265e758be62f1f21705df26c9d3a
  Ruleset: securityonion-yara
  Summary: This rule detects PROMETHIUM and NEODYMIUM malware by identifying specific elements typically associated with these threats. It looks for the presence of strings referencing file paths such as "c:\\windows\\temp\\winrar.exe" and multiple DLLs like "ssleay32.dll" and "libeay32.dll." Additionally, it checks for references to email address "info@aadobetech.com," and strings related to Adobe and Windows services. The rule triggers under conditions where certain file characteristics and a combination of the specified strings are present.
  Updated-Date: '2024_08_07'
PROMETHIUM_NEODYMIUM_Malware_5:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8b9cb377d2526e57b5b0801748eb9f37
  Ruleset: securityonion-yara
  Summary: This rule detects PROMETHIUM and NEODYMIUM malware by identifying specific strings within executable files. These strings include filenames such as "Winxsys.exe" and indicators such as "ssleay32.dll" and "libeay32.dll" paths. Additional identifiers include phrases like "Windows Index Services," "<F RAT," and a unique identifier "WININDX-088FA840-B10D-11D3-BC36-006067709674." The rule activates for files with an initial header of 0x5a4d and a size less than 5000KB, provided at least three of the specified strings are present.
  Updated-Date: '2024_08_07'
PROMETHIUM_NEODYMIUM_Malware_6:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d59cf75c82872a8c780be464c345e0c7
  Ruleset: securityonion-yara
  Summary: This rule detects malware associated with PROMETHIUM and NEODYMIUM by identifying specific file paths and strings. These include references to DLL and executable files such as "syswindxr32.dll" in the Windows System32 directory, "TrueCrypt-7.2.exe" in the Windows temporary folder, and specific libraries like "ssleay32.dll" and "libeay32.dll." Additional identified strings include "fprot32.exe" and "Windows Index Services." The rule evaluates these criteria in files with a specific header signature and a size of less than 7000KB.
  Updated-Date: '2024_08_07'
PSAttack_EXE:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a4fb75fc03cb7223a550cf0e0002849f
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the PowerShell attack tool known as PSAttack, specifically targeting its executable file, PSAttack.exe. It identifies the tool by looking for specific string patterns associated with its functionality, including the path "\\Release\\PSAttack.pdb", and other indicators such as PowerShell commands to bypass execution policies, and various module references within its processing components. Additionally, the rule checks for a specific hash value to ensure accurate detection.
  Updated-Date: '2024_08_07'
PSAttack_ZIP:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ac9973a940de97bd7c3865084841cecb
  Ruleset: securityonion-yara
  Summary: This rule detects a specific version of the PSAttack tool, which is a PowerShell attack framework, by identifying the presence of the file "PSAttack.zip". The rule checks for a particular SHA-256 hash value associated with the file to confirm its identity and utilizes a string match for "PSAttack.exe" in the contents. When these criteria are met, it signals the detection of the PSAttack tool's archive, known for facilitating PowerShell-based attacks.
  Updated-Date: '2024_08_07'
PScan_Portscan_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: cd756732eca175a8012bc9ac1746386f
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the port scanner "PScan" by identifying specific string patterns commonly associated with its execution.
  Updated-Date: '2024_08_07'
PUA_CryptoMiner_Jan19_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7d46b61ace2b5ff0d208180918ec54fa
  Ruleset: securityonion-yara
  Summary: 'This rule detects the presence of Crypto Miner software by searching for specific strings associated with mining activities. These strings include messages like "Stratum notify: invalid Merkle branch," usage instructions for setting the number of miner threads, a user agent string identifying "cpuminer," and log entries related to hashing performance. The detection is triggered if the file size is less than 1000KB and it contains at least one of these specified strings.'
  Updated-Date: '2024_08_07'
PUA_LNX_XMRIG_CryptoMiner:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f9f976f0af94bcc7eddc440a3840acd2
  Ruleset: securityonion-yara
  Summary: This rule detects the XMRIG CryptoMiner software by identifying specific text strings within the program's code. The rule looks for phrases related to cryptocurrency mining operations, including processing hash blocks, hashrate controls, threads configuration, and references to the NiceHash mining service. The detection is triggered if the file's format and size match typical characteristics of XMRIG CryptoMiner executables, checking for specific ASCII strings and file conditions.
  Updated-Date: '2024_08_07'
PUA_WIN_XMRIG_CryptoCoin_Miner_Dec20:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d9dcbebe8328406555b5d569c42551c0
  Ruleset: securityonion-yara
  Summary: This rule detects XMRIG crypto coin miners. It identifies instances of the mining software by checking for specific strings, notably "xmrig.exe" and "xmrig.com" in wide format, and the text "* for x86, CRYPTOGAMS" in ASCII format. The rule is triggered when these indicators are found in a file with an initial 0x5a4d marker and a size of less than 6000KB.
  Updated-Date: '2024_08_07'
PUP_ComputraceAgent:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c8d92b5a3b1bc6f93a9137fe7e513f89
  Ruleset: securityonion-yara
  Summary: This rule detects the Absolute Computrace Agent executable, identified by specific hexadecimal patterns and file properties. The rule uses unique strings and conditions to identify this potentially unwanted program (PUP), known for its persistence and ability to monitor and control systems, often installed for device tracking and recovery purposes. It triggers when the file size is less than 40KB, starts with the 'MZ' header, and contains defined byte sequences or specific ASCII strings related to the program.
  Updated-Date: '2024_08_07'
PUP_InstallRex_AntiFWb:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 572968fca7ca17820ff08d6039ca95eb
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of malware known as InstallRex, which includes an anti-firewall module. It identifies specific error messages, filenames, and strings related to the malware, such as "Error %u while loading TSU.DLL %ls," "GetModuleFileName() failed => %u," "TSULoader.exe," "\\StringFileInfo\\%04x%04x\\Arguments," and "Tsu%08lX.dll." These indicators help in recognizing the malware by matching these particular patterns within executable files starting with the characters 'MZ'.
  Updated-Date: '2024_08_07'
Pack_InjectT:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 661ca688ce3e227cf91d90057bd20c78
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the file InjectT.exe, which is associated with webshells that are auto-generated. It searches for specific strings within a file, such as "ail To Open Registry," "32fDssignim," "vide Internet S," "d]Software\\M," and "TInject.Dll." The detection condition requires all these strings to be present within the scanned file, indicating the presence of the target webshell.
  Updated-Date: '2024_08_07'
Partial_Implant_ID:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 65f914fd62ca0c0f506886ab8d4f74ec
  Ruleset: securityonion-yara
  Summary: This rule detects a specific implant mentioned in a report by the UK's National Cyber Security Centre (NCSC). It identifies a file starting with the hexadecimal signature 0x5a4d, a common indicator of a Windows executable (MZ header), and ensures the file size is under 1000KB. The rule cross-verifies matching patterns, including a precise byte sequence (38 38 31 34 35 36 46 43), which signifies a unique indicator tied to this particular implant.
  Updated-Date: '2024_08_07'
PassCV_Sabre_Malware_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5b9f9315b8f34ba543c0f4632c6c3832
  Ruleset: securityonion-yara
  Summary: This rule detects the PassCV malware, as reported by Cylance. The rule uses specific identifiers such as file paths, commands, URLs, executable names, error messages, and unique strings found within the malware. It targets characteristics such as a hardcoded file path related to the "Excalibur" project, the presence of command execution strings, URLs pointing to the Baidu search engine, and various executable names like "CloudRun.exe" and "SaberSvc.exe". It also looks for typical strings associated with malware operations, including an email address string and an error message indicating a failed internet connection attempt. The condition for detection focuses on verifying the presence of specific combinations or all of the defined strings and ensuring the file size is under 1000KB.
  Updated-Date: '2024_08_07'
PassCV_Sabre_Malware_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 30d1c179628317cbdea5bc7190e450f0
  Ruleset: securityonion-yara
  Summary: This rule detects the PassCV malware which is known to target gaming companies. It identifies the malware based on specific strings related to certain DLL files such as "Uniscribe.dll," "WS2_32.dll," "JDNSAPI.dll," an identifier "ncProxyXll," and other notable terms such as "ProxyDll," "x64.dat," and "LSpyb2." It has particular conditions for file size and specific string matches in order to flag the malware.
  Updated-Date: '2024_08_07'
PassCV_Sabre_Malware_3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 341b3d924303e9a55a0451fd7d830733
  Ruleset: securityonion-yara
  Summary: This rule detects the PassCV malware, which has been detailed in a Cylance report focusing on threats targeting gaming companies. The detection is based on specific characteristics of the malware, including the presence of the string "NXKILL," references to certain DLL files like "2OLE32.DLL" and "localspn.dll," and a marker indicating a Win32 program. The rule applies to files smaller than 8000KB, ensuring they start with the standard DOS header.
  Updated-Date: '2024_08_07'
PassCV_Sabre_Malware_4:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3db784985abb024f0c27522993edb7ec
  Ruleset: securityonion-yara
  Summary: "This rule detects PassCV malware, which is highlighted in a Cylance report and is known for targeting gaming companies. The malware is identified by the presence of specific base64 encoded strings such as \"Accept:\", \"User-Agent:\", and \"task.dns\x04[\" within files smaller than 200KB that also start with the magic number 0x5a4d."
  Updated-Date: '2024_08_07'
PassCV_Sabre_Malware_5:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: cbb6ede5672b161e2cbb36bde7460628
  Ruleset: securityonion-yara
  Summary: This rule detects the PassCV malware identified in a Cylance report. It identifies suspicious files based on specific strings found within executables, such as "ncircTMPg", "~SHELL#", and "N.adobe.xm", as well as several other notable identifiers like "NEL32.DLL", "BitLocker.exe", "SERVICECORE", and "SHARECONTROL". The malware is associated with files that have a certain header signature and a file size of less than 4MB.
  Updated-Date: '2024_08_07'
PassCV_Sabre_Malware_Excalibur_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 792d85a692a248b5b5c54ae7fd7229ee
  Ruleset: securityonion-yara
  Summary: This rule detects PassCV malware identified in a Cylance report, targeting gaming companies. It searches for specific string patterns associated with the malware, such as paths and filenames, including "F:\\Excalibur\\Excalibur\\", "Excalibur\\bin\\Shell.pdb", "SaberSvc.exe", "BBB.exe", and "AAA.exe". The rule is triggered when certain conditions are met, such as the presence of these strings, file characteristics, and size constraints.
  Updated-Date: '2024_08_07'
PassCV_Sabre_Malware_Signing_Cert:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e2f6a0f5832b31418c2b34c0cdb83ca5
  Ruleset: securityonion-yara
  Summary: This rule detects PassCV malware targeting gaming companies, as described in a Cylance report. It identifies the malware based on the existence of specific strings related to companies such as WOODTALE TECHNOLOGY INC, Flyingbird Technology Limited, Neoact Co., Ltd., AmazGame Age Internet Technology Co., Ltd, EMG Technology Limited, Zemi Interactive Co., Ltd., 337 Technology Limited, and Runewaker Entertainment. The detection is further refined by conditions on the file's signature and size.
  Updated-Date: '2024_08_07'
PassCV_Sabre_Tool_NTScan:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 72612268c286eb50b9640ff532c3f710
  Ruleset: securityonion-yara
  Summary: This rule detects the PassCV malware by identifying specific strings related to the NTScan tool, such as "NTscan.EXE" and "NTscan Microsoft" in wide encoding. Additionally, it looks for the "admin$" string in ASCII. The condition to trigger the detection is based on the presence of the "MZ" magic header and the file size being less than 300KB.
  Updated-Date: '2024_08_07'
PassSniffer:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 00b25d19b4e7523d75d98089d8becda5
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a hacktool named "PassSniffer.exe." The tool is identified through multiple specific strings, including "Sniff," "GetLas," "VersionExA," " Only RuntUZ," "emcpysetprintf\," and "WSFtartup." These strings appear uniquely in the hacktool and are used collectively to confirm its identification.
  Updated-Date: '2024_08_07'
PassSniffer_zip_Folder_readme:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9f4065515e23c36f515250e4df04f0c8
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a known hacktool by identifying specific text strings within a file named readme.txt. It focuses on identifying the mentions of "PassSniffer.exe," "POP3/FTP Sniffer," and "Password Sniffer V1.0," which are indicative of a tool designed to intercept and possibly harvest credentials such as passwords from POP3 or FTP traffic.
  Updated-Date: '2024_08_07'
PasswordPro_NTLM_DLL:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a35accdaeb33c3738c1771a573aeb853
  Ruleset: securityonion-yara
  Summary: 'This rule detects a specific DLL file associated with the PasswordPro software, which potentially deals with NTLM hashing algorithms. It identifies the file by checking for the presence of particular strings, such as "NTLM.dll" and "Algorithm: NTLM", within the file. Additionally, it verifies that the file matches certain structural characteristics (e.g., starting with the magic number 0x5a4d and being smaller than 20KB) and exports specific functions ("GetHash" and "GetInfo").'
  Updated-Date: '2024_08_07'
PasswordReminder:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8a658a44cefe7ccc81049c45e558298e
  Ruleset: securityonion-yara
  Summary: This rule detects an executable file named PasswordReminder.exe, which is associated with webshells. It specifically identifies a unique string within the file stating, "The encoded password is found at 0x%8.8lx and has a length of %d," indicating the presence of encoded passwords at a specific memory location and length. The detection is based on recognizing this distinctive pattern within the file.
  Updated-Date: '2024_08_07'
PasswordsPro:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a427156b2f65c257c462a8d530281206
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the software PasswordsPro.exe, which is used for password recovery. The rule identifies specific strings within the executable that are indicative of PasswordsPro, including messages related to user attack and dictionary initialization. It checks the PE header for a specific signature and ensures the file size is less than 2000KB.
  Updated-Date: '2024_08_07'
Pastebin_Webshell:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1494fed6f7a9742bc2e7724ee783a544
  Ruleset: securityonion-yara
  Summary: This rule detects a web shell that downloads and executes content from pastebin.com. It looks for specific strings in the code, such as "file_get_contents(\"http://pastebin.com" and variations of "xcurl('http://pastebin.com/", which indicate the web shell's attempt to fetch content from Pastebin. Additionally, it searches for specific code handling, like unlinking and creating files named 'evex.php', and using file manipulation functions such as file_put_contents and specific echo commands. These patterns help identify the web shell behavior related to unauthorized web access and potential exploitation.
  Updated-Date: '2024_08_07'
Payload_Exe2Hex:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c5a6b8cf26aec89f504de7434ddbb09e
  Ruleset: securityonion-yara
  Summary: This rule detects payloads generated by the utility exe2hex, which converts executable files into hexadecimal format. It identifies characteristic strings associated with the command line and PowerShell syntax used during this conversion process, such as specific hexadecimal markers and commands echoing these markers into scripts. This detection helps in identifying malicious activity where binary payloads are embedded and executed through scripts.
  Updated-Date: '2024_08_07'
Pc_pc2015:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9f6a3610b5ca2c4084a20178d8c13b9e
  Ruleset: securityonion-yara
  Summary: This rule detects the file "pc2015.exe," which is associated with a Chinese hacktool set. It identifies specific characteristics of the file, including a reference to "svchost.exe," certain ASCII string patterns, and a formatting pattern "%s%08x.001." It applies to a file beginning with the hexadecimal value 0x5a4d and a size less than 309KB.
  Updated-Date: '2024_08_07'
Pc_rejoice:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4b4a8662f8d130a5e5462bedd81d4d4b
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a Chinese hacktool named "rejoice.exe" by identifying specific strings within the file, such as URLs related to dynamic DNS updates and executable downloads, error messages regarding no data to read, port binding issues, a specific process list column click indicator, and a particular iframe URL. The file is further validated by its size being less than 3000KB and meeting certain hexadecimal conditions.
  Updated-Date: '2024_08_07'
Pc_xai:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d18d4bbca71ed41e0bcabae0654f0721
  Ruleset: securityonion-yara
  Summary: This rule detects a specific Chinese hacktool named xai.exe, which is associated with the C.Rufus Security Team and dated May 19, 2008. The rule identifies the executable by matching several unique strings within the file, including references to system directories such as `%SystemRoot%\\System32\\` and `%APPDATA%\\`, the URL `http://www.xcodez.com/`, and other distinct markers such as `GetRand.dll` and `www.snzzkz.com`. It ensures the file is a valid executable by checking for the "MZ" header and restricts detection to files smaller than 3000KB.
  Updated-Date: '2024_08_07'
Persistence_Agent_MacOS:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c461d9b61914389d3086babc856c5837
  Ruleset: securityonion-yara
  Summary: This rule detects a Python agent designed to establish persistence on macOS systems. It identifies the presence of specific indicators such as the shebang line for the Python interpreter, and elements typically found in plist files, like "ProgramArguments," "Library," "StartInterval," and "RunAtLoad." Additionally, it searches for encoded strings and patterns related to these elements. The rule is tailored to recognize Python agents that integrate persistence mechanisms by examining both readable and obfuscated patterns within files, ensuring it captures various forms of the targeted persistence agent. The overall file size for detection is restricted to less than 120KB.
  Updated-Date: '2024_08_07'
PhpShell:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3cf8e3b02256589e4fba8717ea509ba7
  Ruleset: securityonion-yara
  Summary: This rule detects a specific PHP-based webshell script characterized by a reference to the URL "http://www.gimpster.com/wiki/PhpShell", which is associated with the PhpShell tool. The detection is based on the presence of this distinctive URL within the file.
  Updated-Date: '2024_08_07'
Phyton_Shell_py:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7f483cb77a06f43f0154bac6de25a4c8
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a Python script associated with shell operations, potentially used for malicious activities. It looks for specific strings within the script, such as the usage of `os.popen` for executing shell commands, references to a script named 'd00r.py' known for providing reverse or bind shell functionality, and print statements that output error messages and connection details such as password, port, and host information.
  Updated-Date: '2024_08_07'
Ping_Command_in_EXE:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b60995c5e061eb6e84a925589bed6863
  Ruleset: securityonion-yara
  Summary: This rule detects a suspicious execution of a ping command within an executable file. It specifically looks for the command pattern "cmd /c ping 127.0.0.1 -n " and confirms that the file starts with the standard executable header (0x5a4d). This pattern is commonly associated with network diagnostics or potential malicious probing activities.
  Updated-Date: '2024_08_07'
Pirpi_1609_A:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3e7ecf051c3eade90a6658fd922f32fb
  Ruleset: securityonion-yara
  Summary: This rule detects the Pirpi Backdoor and other related malware by identifying specific characteristics within executable files. It looks for particular ASCII and wide strings such as "expand.exe", "flvUpdate.exe", "www.ThinkWorking.com", and several BIOS-related strings. Additionally, it searches for byte patterns commonly associated with the malware's operations. This rule triggers when these elements are found in executable files under 200KB in size, which start with the 'MZ' header indicating a DOS MZ executable format. The detection is inclusive of various combinations of these attributes to ensure comprehensive coverage of similar threats.
  Updated-Date: '2024_08_07'
Pirpi_1609_B:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e34e9deae99e967e4e7964fdc0696f9c
  Ruleset: securityonion-yara
  Summary: This rule detects the Pirpi backdoor by identifying specific strings related to its network connection and SSL handling routines. It looks for strings indicating temporary connection values, SSL listening activities, and various SSL connection statuses, such as "ListenCheckSsl" and "Ssl Connect Ok." The detection condition is based on the presence of a specific file header and a combination of these identified strings within files of a certain size threshold.
  Updated-Date: '2024_08_07'
PlugX_J16_Gen:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6898ca67951f28c1a3cf1b4f5b3e063a
  Ruleset: securityonion-yara
  Summary: This rule detects the PlugX malware, which targets Windows systems. PlugX is known for creating a backdoor on infected machines, allowing unauthorized remote access. The rule identifies suspicious activity such as manipulations involving the Windows Services executable, specific named pipes for user impersonation, and functions for loading shellcode. It also looks for alterations to user agent strings, software paths used by the malware, and common file paths within the system that PlugX may utilize. The rule triggers on the presence of these strings within executable files smaller than 600KB, with certain combinations of identified strings indicating an infection.
  Updated-Date: '2024_08_07'
PlugX_J16_Gen2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c0e33a37c7ad5ca71a5a9a8ca5ad7afc
  Ruleset: securityonion-yara
  Summary: This rule detects the PlugX malware, specifically samples from June 2016. PlugX is a Remote Access Trojan (RAT) commonly used for unauthorized access and control over infected systems. It identifies the malware based on the presence of certain strings within executable files, which include references to various .cpp source files such as "XPlugKeyLogger.cpp," "XPlugProcess.cpp," and "XInstallUAC.cpp." The rule targets files with specific characteristics, such as those starting with the "MZ" header and having a size less than 600KB, ensuring that key components or multiple defined strings are present within the analyzed file.
  Updated-Date: '2024_08_07'
PlugX_NvSmartMax_Gen:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ceb781053e5656f9c1f0577a38de5cec
  Ruleset: securityonion-yara
  Summary: This rule detects the PlugX malware variant known as NvSmartMax linked to Threat Group 3390, a recognized APT group. PlugX malware is characterized by its usage of specific filenames and strings such as "NvSmartMax.dll" and "Nv.exe," alongside failure messages related to cryptographic functions like "CryptProtectMemory failed." It also identifies particular opcode sequences that are indicative of this malware variant. The rule applies to executable files smaller than 800KB with a specific file header and ensures detection through a combination of unique filenames, error messages, and opcodes associated with PlugX infection.
  Updated-Date: '2024_08_07'
PoS_Malware_MalumPOS:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 32baa74e3017bb4769439cfac0efea1d
  Ruleset: securityonion-yara
  Summary: This rule detects the MalumPOS memory dumper malware. The strings it searches for include references to Borland Delphi software, patterns indicative of credit card numbers, specific text formats, an error message from a regular expression execution, and file paths associated with Delphi Pascal files. These indicators are used to identify the presence of files or processes related to MalumPOS, which is a type of malware targeting Point of Sale systems to capture and steal payment card information.
  Updated-Date: '2024_08_07'
PoisonIvy_Generic_3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f197d0d942d52216bad8ce1ff5e8c599
  Ruleset: securityonion-yara
  Summary: This rule detects the PoisonIvy Remote Access Trojan (RAT), a type of malware used for unauthorized remote access and control of infected systems. It identifies the RAT by looking for specific indicators such as the presence of certain strings like "Tiger324{", and references to crucial DLL files like "WININET.dll", "mscoree.dll", "WS2_32.dll", and "USER32.DLL". It also checks for process names like "Explorer.exe" and console references such as "CONOUT$". Additionally, the rule searches for HTTP-related strings like "HTTP/1.0", "POST", and multiple ".asp" page references (e.g., "login.asp", "check.asp", "result.asp", and "upload.asp"). These behavioral and file characteristics help in identifying the PoisonIvy RAT within a specified file size constraint of less than 500KB.
  Updated-Date: '2024_08_07'
PoisonIvy_RAT_ssMUIDLL:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d1e12afe5f96b8d73305a56e45214ff4
  Ruleset: securityonion-yara
  Summary: This rule detects the PoisonIvy Remote Access Trojan (RAT) DLL file named "ssMUIDLL.dll," which was discussed in a Palo Alto Blog in April 2016. It identifies the malware through specific byte sequences characteristic of its behavior, such as certain push, move, call instructions in its code, and the presence of unique hash values associated with known PoisonIvy samples. The condition checks whether the file is a valid PE file, is smaller than 20KB, and contains specific opcode patterns, either by combining these checks or matching all defined patterns and strings.
  Updated-Date: '2024_08_07'
PoisonIvy_Sample_5:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7103df51e2a4abd140ac32c0769240ed
  Ruleset: securityonion-yara
  Summary: This rule detects the PoisonIvy Remote Administration Tool (RAT) by identifying specific strings commonly associated with this malware. PoisonIvy is a type of RAT used by attackers to gain unauthorized control over a victim's machine. The rule checks for the presence of terms such as "Microsoft Software installation Service," "pidll.dll," "\\mspmsnsv.dll," and "\\sfc.exe" within the file, as well as API names like "ServiceMain," "ZwSetInformationProcess," and "LookupPrivilegeValueA." Additionally, the file must have an MZ header and a size of less than 300KB to match the detection criteria.
  Updated-Date: '2024_08_07'
PoisonIvy_Sample_6:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 75c7929e0deb2cea936deecd8327dbc7
  Ruleset: securityonion-yara
  Summary: This rule detects the PoisonIvy Remote Access Trojan (RAT), a malicious software used for unauthorized access and control over infected systems. It identifies PoisonIvy by looking for specific strings and patterns in the file, such as certain IP addresses (e.g., "124.133.252.150"), suspicious URLs (e.g., "http://124.133.254.171/up/up.asp?id=%08x&pcname=%s"), and paths to specific files like "\\temp\\si.txt" and "%USERPROFILE%\\AppData\\Local\\Temp\\Low\\ctfmon.log". It also looks for references to common Windows components and libraries that the malware might impersonate, such as "Microsoft Windows CTF Loader" and "Daemon.dll". Additionally, it checks for certain strings commonly used by malware to manage HTTP connections, credentials, and other configurations. The rule is designed to detect files that exhibit these characteristics in various combinations, thus identifying potential samples of the PoisonIvy RAT.
  Updated-Date: '2024_08_07'
PoisonIvy_Sample_7:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f3267a08c32d14d5aa3c7429b368e8fe
  Ruleset: securityonion-yara
  Summary: This rule detects a sample of PoisonIvy RAT, a remote access trojan used for unauthorized access and control over infected machines. It identifies the malware based on the presence of specific strings within the file, such as "Microsoft Software installation Service," "pidll.dll," "ServiceMain," "ZwSetInformationProcess," and "Software installation Service." Additionally, it checks for the string "Microsoft(R) Windows(R) Operating System." The detection criteria require that the file starts with the hexadecimal characters '5a4d' and is smaller than 100KB in size.
  Updated-Date: '2024_08_07'
PoisonIvy_Sample_APT:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: cac06cba4dad69dc022ea3d5f540acc2
  Ruleset: securityonion-yara
  Summary: This rule detects a sample from the PoisonIvy advanced persistent threat (APT) malware group, identified through the presence of specific string patterns within a file. These strings include "pidll.dll" and "sens32.dll" in different text encodings, as well as terms like "FileDescription," "OriginalFilename," and "ZwSetInformationProcess," which are characteristic of this malware. Additionally, it looks for a reference to "Microsoft Media Device Service Provider." The file in question should begin with the "MZ" header and be smaller than 47KB in size.
  Updated-Date: '2024_08_07'
PoisonIvy_Sample_APT_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5834e2b16f968a1a02bc1466f89720b0
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of PoisonIvy malware by identifying specific strings within a file. These strings include names like "pidll.dll" and "sens32.dll," as well as version number "9.0.1.56." It also looks for metadata fields such as "FileDescription," "OriginalFilename," and system calls like "ZwSetInformationProcess." Other distinctive patterns in the malware code are also included, such as unique alphanumeric sequences and certain identifier strings. The rule ensures that the file size is less than 47KB and that all specified strings are present, which collectively indicate the presence of the PoisonIvy malware.
  Updated-Date: '2024_08_07'
PoisonIvy_Sample_APT_3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 90ccdfbcc5b6788ddbbc0d4d14e8ca5d
  Ruleset: securityonion-yara
  Summary: This rule detects PoisonIvy malware by identifying the presence of specific strings commonly associated with it, such as "\notepad.exe", "\RasAuto.dll", and "winlogon.exe". These strings are checked against the file to confirm the malware's signature through its unique hash and the presence of these characteristic elements.
  Updated-Date: '2024_08_07'
PoisonIvy_Sample_APT_4:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: cf12f67f14ea65c99b4da8bd9e8f6a19
  Ruleset: securityonion-yara
  Summary: This rule detects a sample of the PoisonIvy malware, which is associated with advanced persistent threats (APTs). It identifies the malware by looking for specific suspicious strings within a file, such as "Microsoft Software installation Service," "idll.dll," and "mgmts.dll," among others. The rule applies to files that start with the hexadecimal value 0x5a4d and are less than 100KB in size. It requires that at least seven of the listed strings be present to trigger detection. PoisonIvy is used by attackers for remote access and control of compromised systems.
  Updated-Date: '2024_08_07'
PortRacer:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 85b5cd96ada0d4522b76b521c7f689d5
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the file "PortRacer.exe" by identifying specific strings within the file, including "Auto Scroll BOTH Text Boxes," "Start/Stop Portscanning," and "Auto Save LogFile by pressing STOP." This file is likely associated with port scanning activities, as indicated by these strings.
  Updated-Date: '2024_08_07'
PortScanner:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f0a2ac559536da7c94bf0b488ad396b5
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific port scanning tool named PortScanner.exe by searching for unique strings such as "Scan Ports Every" and "Scan All Possible Ports!" within the examined file.
  Updated-Date: '2024_08_07'
PoseidonGroup_MalDoc_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9e863bd837df7fd8692e4f88d954ba50
  Ruleset: securityonion-yara
  Summary: This rule detects a malicious Word document associated with the Poseidon Group, a cyber-espionage entity. The document is identified by a specific string pattern and certain characteristics, such as a particular hash value, a specific file size, and the mention of "c:\\cmd32dll.exe".
  Updated-Date: '2024_08_07'
PoseidonGroup_MalDoc_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ca24b98e45df81fd8b8a6e0d94fd0b3b
  Ruleset: securityonion-yara
  Summary: This rule detects malicious Word documents attributed to the Poseidon Group, a threat actor known for global cyber-espionage activities. The detection is based on specific strings found within the document, such as text generator references, attachment descriptions, professional background details, certain email address patterns, and education-related content. The rule applies to documents smaller than 500KB with particular formatting and content characteristics.
  Updated-Date: '2024_08_07'
PoseidonGroup_Malware:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e31b976ee1bca9dfaad6c2adfbd6dbb7
  Ruleset: securityonion-yara
  Summary: This rule detects malware associated with the Poseidon Group, a global cyber-espionage entity. The rule identifies specific string patterns and command-line activities that are typically used by the Poseidon Group's malware. These include references to various Windows command executables such as "cmd.exe" and "command.com", specific HTTP patterns, unique HEX values, and other distinctive string signatures. Additionally, it monitors for network management commands involving domain administration and local group management, which are indicative of the group's efforts to control and manipulate infected systems.
  Updated-Date: '2024_08_07'
PowerShdll:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: dca3baf747f50823e600fc9c725c5a73
  Ruleset: securityonion-yara
  Summary: This rule detects the hack tool PowerShdll, which is often used to execute malicious scripts or programs. It looks for specific patterns in file names and command lines, including references to "rundll32 PowerShdll,main" with either a file path or a script argument, as well as filenames containing "PowerShdll.dll". These indicators help identify instances where PowerShdll may be used to run unauthorized code on a system.
  Updated-Date: '2024_08_07'
PowerShell_Case_Anomaly:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c45ccfe9c8f2be16f3c9e438a778e002
  Ruleset: securityonion-yara
  Summary: This rule detects obfuscated PowerShell hacktools by identifying unusual variations in the spelling and casing of specific keywords typically associated with PowerShell scripts. It looks for the term 'powershell' in various case-insensitive permutations, ignoring common and expected variations. Additionally, it checks for the keyword '-noprofile' in different formats. The rule uses specific criteria to differentiate between normal and potentially suspicious PowerShell command usages, ensuring false positives are minimized by excluding standardized cases and legitimate Microsoft-related strings.
  Updated-Date: '2024_08_07'
PowerShell_Emp_Eval_Jul17_A1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 22e5b0974c5180ad963aa5d8f2144441
  Ruleset: securityonion-yara
  Summary: This rule detects a suspicious sample containing PowerShell content, specifically identifying instances where the file begins with the hexadecimal value 0x5a4d, is less than 30KB in size, and includes the terms "powershell" and "pshcmd" in wide and fullword ASCII encoding, respectively.
  Updated-Date: '2024_08_07'
PowerShell_Emp_Eval_Jul17_A2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0b4b1cdd3efa9cd9eaad16c5286e886e
  Ruleset: securityonion-yara
  Summary: This rule detects a suspicious sample containing PowerShell content, specifically looking for strings associated with PowerShell execution and a certain file path. It focuses on files with a ".exe" extension that are less than 200KB in size and contains the specific indicators of compromise, such as the presence of "powershell.exe" and a path "\\support\\Release\\ab.pdb".
  Updated-Date: '2024_08_07'
PowerShell_ISESteroids_Obfuscation:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: fd63ddcae005e5ebfa2e1492ebe32b64
  Ruleset: securityonion-yara
  Summary: This rule detects obfuscation techniques used by PowerShell ISESteroids. It identifies specific patterns and strings within PowerShell scripts, such as "/\\/===\\__", "${__/\\/==", "Catch { }", and "\\_/=} ${_", which are indicative of obfuscated code associated with ISESteroids, a tool used to enhance the PowerShell Integrated Scripting Environment (ISE). The rule flags the presence of at least two of these patterns to confirm the detection of obfuscation.
  Updated-Date: '2024_08_07'
PowerShell_JAB_B64:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9acefc502781b238653c7fe06ad9df62
  Ruleset: securityonion-yara
  Summary: This rule detects instances of a base64 encoded "$" sign appearing at the beginning of a string, specifically within PowerShell scripts. It triggers when the specified patterns, including the sequence "('JAB" and the term "powershell," are found in files smaller than 30KB.
  Updated-Date: '2024_08_07'
PowerShell_Mal_HackTool_Gen:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6d79abb5b1d7e9ee96752033dd6210f0
  Ruleset: securityonion-yara
  Summary: This rule detects PowerShell-based hack tool samples that function as a generic PE (Portable Executable) loader. It identifies specific string patterns indicative of malicious PowerShell scripts, such as encoded PE bytes, commands to write shellcode to memory, and references to typical executable arguments. The rule targets scripts under 8000KB that exhibit at least one malicious characteristic.
  Updated-Date: '2024_08_07'
PowerShell_Suite_Eidolon:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d1f481ad5f25a19261b62a6c84174f94
  Ruleset: securityonion-yara
  Summary: This rule detects a PowerShell script called "Start-Eidolon.ps1" associated with the PowerShell Suite Eidolon. It identifies specific ASCII strings within the script, such as marker logs indicating the Eidolon entry point, command invocation examples, and script logic related to handling payload bytes and architecture specification. The rule triggers if the executable file size is less than 13,000 KB and contains at least one of the specified strings, ensuring a reliable detection of the script's presence.
  Updated-Date: '2024_08_07'
PowerShell_Suite_Hacktools_Gen_Strings:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: dfa372fe0bcaee1aeb33a0ec1efb406e
  Ruleset: securityonion-yara
  Summary: This rule detects strings used in scripts from the PowerShell-Suite repository, which is known for providing tools and scripts utilized for various administrative and security tasks. It monitors for specific string patterns, such as error messages related to process creation ("NtCreateThreadEx failed", "Unable to open process as Administrator"), specific method calls ($LNK, $CallResult), and various status and process messages ("Process dump success", "Eidolon entry point"). The rule also checks for invocation of specific functions and commands that interact with Windows system utilities and processes, such as "Invoke-CreateProcess" and "Calling Advapi32::LookupPrivilegeValue". These detected strings can indicate usage of administrative and potentially malicious actions performed through PowerShell scripts.
  Updated-Date: '2024_08_07'
PowerShell_in_Word_Doc:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 50e078b52c9dc345a7f63b99473e572f
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of PowerShell execution and the keyword "bypass" within a Word document. It specifically looks for the strings "POwErSHELl.ExE" and "BYPASS" in a case-insensitive manner within files smaller than 1000KB that have the file type identifier of a Word document.
  Updated-Date: '2024_08_07'
Powerkatz_DLL_Generic:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3149c3ccb90993c73a08a3f41e5fbb05
  Ruleset: securityonion-yara
  Summary: This rule detects Powerkatz, a version of the Mimikatz tool that is specifically prepared to run in memory through PowerShell. Mimikatz is typically used to extract plaintext passwords, hash passwords, PIN codes, and Kerberos tickets from memory. The detection mechanism involves identifying specific strings and code patterns associated with this tool, such as references to .kirbi files and known function names like "kuhl_m_lsadump_getUsersAndSamKey". The file characteristics include a specific magic header value and a file size limitation of under 1000KB.
  Updated-Date: '2024_08_07'
Powershell_Attack_Scripts:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: abc8169265f8638605112cede83cf711
  Ruleset: securityonion-yara
  Summary: This rule detects malicious PowerShell attack scripts by looking for specific indicators associated with well-known tools used by cyber attackers. It identifies the presence of PowerShell scripts such as "Invoke-Shellcode.ps1" from PowershellMafia, "Do-Exfiltration.ps1" from Nishang, "Invoke-Mimikatz.ps1" from PowershellMafia, and "Inveigh.ps1" from Inveigh. These scripts are commonly used for tasks like injecting malicious code, data exfiltration, credential dumping, and network spoofing, respectively.
  Updated-Date: '2024_08_07'
Powershell_Netcat:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d1e54c6613e88048e965813961310c66
  Ruleset: securityonion-yara
  Summary: This rule detects a PowerShell implementation of the Netcat network hacking tool by identifying specific strings within scripts. It looks for the validation range syntax for port numbers, the creation of a TCP client object, and a byte array buffer associated with the client's receive buffer size.
  Updated-Date: '2024_08_07'
ProPort_zip_Folder_ProPort:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a3ed894c69ba52cc05624768e1ddbe3f
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific executable file, ProPort.exe, by identifying unique strings embedded within it. The strings include "Corrupt Data!", "K4p~omkIz", "DllTrojanScan", "GetDllInfo", "Compressed by Petite (c)1999 Ian Luck.", "GetFileCRC32", "GetTrojanNumber", and "TFAKAbout". These indicators suggest that ProPort.exe performs tasks related to file integrity checks, DLL information retrieval, and potential Trojan detection, and it is noted to be compressed using the Petite executable packer.
  Updated-Date: '2024_08_07'
ProjectM_CrimsonDownloader:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4158fc8e8711f48e55481dfd113b133c
  Ruleset: securityonion-yara
  Summary: This rule detects the ProjectM malware, specifically targeting a variant known as CrimsonDownloader. It identifies characteristic paths and file names associated with the malware, such as "secure_scan.exe" and certain strings in the Windows registry used for persistence. It also considers specific development paths and project references present within the compiled binary, enabling accurate detection of this malware variant.
  Updated-Date: '2024_08_07'
ProjectM_DarkComet_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: cd898b1a791f8abef9621ce32c2a7c98
  Ruleset: securityonion-yara
  Summary: This rule detects the ProjectM malware, specifically focusing on attributes associated with DarkComet, a remote access trojan (RAT). It identifies the presence of particular strings indicative of DarkComet's code, such as "DarkO\\_2," and references to "AVICAP32.DLL" and "IDispatch4." The rule also scans for specific ASCII strings like "FLOOD/" and URLs formatted as "T<-/HTTP://." The condition for detection is based on the presence of these strings, a specific file header, and a file size criterion of less than 600KB.
  Updated-Date: '2024_08_07'
Pupy_Backdoor:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2fee1700f98ae95f7bd61858a687e0a9
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the Pupy backdoor, a remote administration tool and post-exploitation agent, by identifying specific text strings related to its behavior. These strings include commands and procedures for reflective DLL injection, Linux-specific DLL injection, and configuration retrieval operations. It utilizes hash values and conditions related to file size and headers to ensure the integrity and accuracy of the detection.
  Updated-Date: '2024_08_07'
PwDump:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1837cd09a4d50eeacfe5c82c30ee8013
  Ruleset: securityonion-yara
  Summary: This rule detects a variant of PwDump 6, which is a forensic tool used to extract password hashes from Windows systems. It looks for specific strings related to PwDump 6, including usage instructions, an error message indicating a failure to query service status, and a version information string that references its developers. The rule triggers if any one of these strings is found.
  Updated-Date: '2024_08_07'
PwDump_B:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 317a2b64b64ece46940911cb6f71eab9
  Ruleset: securityonion-yara
  Summary: This rule detects the file PwDump.exe, which is a tool commonly utilized by Advanced Persistent Threat (APT) groups. PwDump.exe is used to extract password hashes from a system for malicious purposes. The rule identifies specific strings associated with the usage instructions and version information of PwDump6, a variant developed by fizzgig and the foofus.net team. Additionally, it searches for filenames like "lsremora64.dll," "lsremora.dll," and "servpw.exe" that are linked to this tool. The detection criteria include checking if the executable is under 400KB in size and verifying the presence of these unique strings or filenames.
  Updated-Date: '2024_08_07'
QQBrowser:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ecdc777590486da18a3aa1484d11d6da
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the QQBrowser application executable file named QQBrowser.exe, which is considered suspicious. It identifies specific strings related to process termination, a downloader DLL, and browser crash dump attempts associated with Chromium. These and other specific characteristics of the executable file are used to conclude its identification.
  Updated-Date: '2024_08_07'
QQ_zip_Folder_QQ:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1331b657b3f6631bc6d69581d710bee9
  Ruleset: securityonion-yara
  Summary: This rule detects a disclosed hacktool associated with the executable file named QQ.exe. Identifiable features include email addresses such as "haoq@neusoft.com" in both wide and ASCII formats, mentions of the "QQ2000b.exe" file, and references to "WINDSHELL STUDIO" and "SOFTWARE\\HAOQIANG\\". At least five of these indicative strings must be present for a match.
  Updated-Date: '2024_08_07'
QuarksPwDump_Gen:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8c2fdffed4310294066a552c2b336fde
  Ruleset: securityonion-yara
  Summary: 'This rule detects all versions of QuarksPWDump, a tool that is typically used for extracting password hashes from the Security Account Manager (SAM) database on Windows systems. It identifies specific string patterns related to error messages and file names, such as "OpenProcessToken() error: 0x%08X", "%d dumped", "AdjustTokenPrivileges() error: 0x%08X", and "\\SAM-%u.dmp," along with matching known file hashes associated with different versions of the tool.'
  Updated-Date: '2024_08_07'
Quasar_RAT_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8b05035c60604a4b23bb501854419506
  Ruleset: securityonion-yara
  Summary: This rule detects the Quasar Remote Access Trojan (RAT), a type of malware used for unauthorized remote control and access to compromised systems. The detection is based on specific strings and byte patterns known to be associated with Quasar RAT, such as commands for uploading, downloading, and executing files, as well as executing shell commands and setting process names. The rule applies to files smaller than 5000KB that start with the "MZ" header, indicating a Windows executable file.
  Updated-Date: '2024_08_07'
Quasar_RAT_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 35d2687ca73a5cdf06d024d4cdb0b6d9
  Ruleset: securityonion-yara
  Summary: This rule detects the Quasar RAT (Remote Access Trojan), which is a type of malware used for illegal surveillance and unauthorized access to victim computers. This specific malware includes functionalities for logging keystrokes, executing shell commands, retrieving saved passwords, and gathering startup items. It looks for unique strings within a file, such as specific function names and responses related to its activities. The rule also considers file properties like the magic number and file size as part of its detection criteria.
  Updated-Date: '2024_08_07'
Quasar_RAT_Jan18_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7473eb718e33e9bb376ab5e3be35fc43
  Ruleset: securityonion-yara
  Summary: This rule detects the Quasar Remote Access Trojan (RAT) by identifying specific strings and patterns associated with its functionality. Quasar RAT is a type of malware commonly used for its remote administration features, allowing attackers to control infected systems. The detection hinges on spotting unique code snippets such as "ping -n 20 localhost > nul," commands related to downloading and executing files, and error messages like "Process could not be started!" Additionally, it looks for the presence of queries designed to retrieve computer system information and certain class descriptors linked to the remote shell functionality of the RAT. The rule also ensures the target file meets specific size and signature criteria indicative of Quasar RAT.
  Updated-Date: '2024_08_07'
RAT_AAR:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 564bd7e2a232499f7cc238e17e15c593
  Ruleset: securityonion-yara
  Summary: This rule detects the AAR Remote Access Trojan (RAT), a type of malware that allows an attacker to control a system remotely. The rule identifies the Trojan by searching for specific strings within executable files, such as "Hashtable," "get_IsDisposed," and "TripleDES," indicating encryption use. Additional identifiable strings include "testmemory.FRMMain.resources" and "{11111-22222-20001-00001}," and the presence of the wide character string "$this.Icon". Detection is confirmed when all these strings are found in a file.
  Updated-Date: '2024_08_07'
RAT_Adzok:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f7374992c194baee21627803c3afd250
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the Adzok Remote Access Trojan (RAT), specifically within Java Archive files (.jar). It identifies the malware by searching for specific strings related to its configuration, key classes, message handling, shutdown hooks, and resource files. These strings include indicators like "config.xmlPK," "key.classPK," "svd$1.classPK," "mensaje.classPK," "Uninstall.jarPK," and "resources/icono.pngPK." The detection is triggered if at least seven of these specific strings are found within the file.
  Updated-Date: '2024_08_07'
RAT_Ap0calypse:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 328f02de813e5c73734a46213a0e36b8
  Ruleset: securityonion-yara
  Summary: This rule detects the Ap0calypse Remote Access Trojan (RAT), which is characterized by specific strings such as "Ap0calypse", "Sifre", "MsgGoster", "Baslik", "Dosyalars", and "Injecsiyon" within executable files. These strings are indicative of the RAT's functionalities, including password encryption, message display, and file management, alongside injection mechanisms used to compromise affected systems.
  Updated-Date: '2024_08_07'
RAT_Arcom:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 820f53fa461ab6d3290d49cc19ddc39b
  Ruleset: securityonion-yara
  Summary: This rule detects the Arcom Remote Access Trojan (RAT) by identifying specific strings and a hexadecimal pattern within executable files. The indicators include unique strings such as "CVu3388fnek3W(3ij3fkp0930di", "ZINGAWI2", "clWebLightGoldenrodYellow", and error messages like "Ancestor for '%s' not found" and "Control-C hit" in wide format, as well as a specific hexadecimal sequence. These signatures help in identifying the presence of the Arcom RAT in a given file.
  Updated-Date: '2024_08_07'
RAT_Bandook:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d3acb2b8eedec4fb0c7d83d3617c59cb
  Ruleset: securityonion-yara
  Summary: This rule detects the Bandook Remote Access Trojan (RAT), a type of malicious executable file. The detection is based on recognizing a specific set of text strings, including patterns like "aaaaaa1|" through "aaaaaa5|", the format string "%s%d.exe", the term "astalavista", "givemecache", a file path pattern, and the string "bndk13me".
  Updated-Date: '2024_08_07'
RAT_BlackNix:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 922c9cb1d7c8b9defb2d553bec682037
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the BlackNix Remote Access Trojan (RAT), which is an executable file type. It identifies the malware by searching for specific strings within the file, including "SETTINGS" in wide format, "Mark Adler," "Random-Number-Here," "RemoteShell," and "SystemInfo."
  Updated-Date: '2024_08_07'
RAT_BlackShades:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: fd78644497d24dcb1cf2c5ae1e4b8392
  Ruleset: securityonion-yara
  Summary: This rule detects the BlackShades Remote Access Trojan (RAT), a malicious software used for remotely controlling infected computers. It identifies this malware by searching for specific strings, including "bss_server," "txtChat," and "UDPFlood," that are characteristic of BlackShades RAT.
  Updated-Date: '2024_08_07'
RAT_BlueBanana:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: cb21d6e81b76cad6703952e803611036
  Ruleset: securityonion-yara
  Summary: This rule detects the BlueBanana Remote Access Trojan (RAT) targeting Java applications. It identifies the malware by searching for specific strings associated with the RAT, including "META-INF," "config.txt," and several class files such as "a/a/a/a/f.class," "a/a/a/a/l.class," "a/a/a/b/q.class," and "a/a/a/b/v.class." These identifiers collectively ensure the presence of BlueBanana RAT in the scanned file.
  Updated-Date: '2024_08_07'
RAT_Bozok:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 01757ca60f99991d1ac0ee952f6d9fc2
  Ruleset: securityonion-yara
  Summary: This rule detects the Bozok Remote Access Trojan (RAT) by identifying specific strings within executable files. The strings include "getVer," "StartVNC," "SendCamList," "untPlugin," and "gethostbyname." These terms relate to functions such as version retrieval, starting VNC sessions, sending camera lists, and resolving hostnames, all of which are typical behaviors of the Bozok RAT.
  Updated-Date: '2024_08_07'
RAT_ClientMesh:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 48fab5e8e86e2947961e69ce61272cd6
  Ruleset: securityonion-yara
  Summary: This rule detects ClientMesh, a Remote Access Trojan (RAT). It identifies the malware through specific strings related to its functionality, such as "machinedetails," "MySettings," "sendftppasswords," "sendbrowserpasswords," "arma2keyMass," and "keylogger." These strings signify typical actions and configuration details used by the RAT to gather and exfiltrate sensitive information from infected machines.
  Updated-Date: '2024_08_07'
RAT_CyberGate:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: adab24f8a74c3f5b948fe5f77f661615
  Ruleset: securityonion-yara
  Summary: This rule detects the CyberGate Remote Access Trojan (RAT) by identifying specific binary patterns and strings associated with it. Notable strings include "EditSvr," "TLoader," "Stroks," and "####@####." It also looks for particular encoded values such as "XX-XX-XX-XX" and "CG-CG-CG-CG." The condition requires all the specified string patterns and at least one of the encoded values to be present for detection.
  Updated-Date: '2024_08_07'
RAT_DarkComet:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d28842e1c119025d8cfda2f46c7a1111
  Ruleset: securityonion-yara
  Summary: 'This rule detects the presence of the DarkComet Remote Access Trojan (RAT). DarkComet RAT is a malicious software that allows an attacker to remotely control an infected system. It identifies specific strings within executable files, including phrases like "#BOT#URLUpdate," "Command successfully executed!," "MUTEXNAME," and "NETDATA" for certain versions. It also looks for indicators such as "FastMM Borland Edition," "%s, ClassID: %s," "I wasn''t able to open the hosts file," "#BOT#VisitUrl," and "#KCMDDC" for other versions. The detection is based on the presence of either all of the strings related to the earlier versions or all the strings associated with the later versions.'
  Updated-Date: '2024_08_07'
RAT_DarkRAT:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 45b2a8fe14812a8e941aeea0a65b9cd5
  Ruleset: securityonion-yara
  Summary: This rule detects DarkRAT, a Remote Access Trojan (RAT) that targets executable files. Specific strings within the code are identified, such as "@1906dark1996coder@", "SHEmptyRecycleBinA", "mciSendStringA", "add_Shutdown", "get_SaveMySettingsOnExit", "get_SpecialDirectories", and "Client.My". Detection occurs when all these strings are present, indicating the signature of DarkRAT.
  Updated-Date: '2024_08_07'
RAT_Greame:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7f8c8b60477521731d0d612a4eac4458
  Ruleset: securityonion-yara
  Summary: This rule detects the Greame Remote Access Trojan (RAT), a type of malware that allows unauthorized remote control of an infected system. It identifies specific hexadecimal patterns and strings associated with Greame RAT, including unique text sequences like "EditSvr," "TLoader," "Stroks," "Avenger by NhT," "####@####," and "GREAME." These identifiers are used to confirm the presence of the malicious executable file associated with this RAT.
  Updated-Date: '2024_08_07'
RAT_HawkEye:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c5eb8b1feeea2fa767ca790106c913a8
  Ruleset: securityonion-yara
  Summary: This rule detects the HawkEye Remote Access Trojan (RAT), a type of keylogger malware. It searches for specific indicators within executable files, including the presence of the string "HawkEyeKeylogger," a particular salt value, and several other unique strings such as "HawkEye_Keylogger," "holdermail.txt," "wallet.dat," "Keylog Records," "<!-- do not script -->," "\\pidloc.txt," and "BSPLIT." These strings are characteristic of the HawkEye RAT, which is designed to log keystrokes and potentially capture sensitive information from infected systems.
  Updated-Date: '2024_08_07'
RAT_Imminent:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0a61a6657d19a1a9b691d4c0ee3b19fd
  Ruleset: securityonion-yara
  Summary: This rule detects the Imminent Remote Access Trojan (RAT), a type of malware that allows attackers to remotely control an infected system. It identifies specific strings related to the RAT's functionalities, such as "DecodeProductKey," "StartHTTPFlood," and "GetFilezillaPasswords," which indicate the capability to decode product keys, initiate HTTP flooding attacks, and steal passwords from FileZilla. The rule further searches for markers like "DownloadAndExecute" and "-CHECK & PING -n 2 127.0.0.1 & EXIT" to detect download and execution behaviors along with system checks. The presence of these combined indicators helps in identifying and mitigating the threat posed by this malicious software.
  Updated-Date: '2024_08_07'
RAT_Infinity:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3c4278d50208f33f036fae9836c86b20
  Ruleset: securityonion-yara
  Summary: This rule detects the Infinity Remote Access Trojan (RAT) through a series of specific indicators within executable files. It looks for the presence of strings associated with cryptographic functions, such as "CRYPTPROTECT_PROMPTSTRUCT" and "AES_Encrypt". Additionally, it identifies other distinctive strings like "discomouse", "GetDeepInfo", "BATScripting", "FBqINhRdpgnqATxJ.html", and "magic_key". It also includes behavior-related strings like "StartUDPFlood", which points to network flood attack capabilities. All these indicators together help in identifying the Infinity RAT.
  Updated-Date: '2024_08_07'
RAT_JavaDropper:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c720ee09f8ede190707f73b7b4e512b9
  Ruleset: securityonion-yara
  Summary: This rule detects the JavaDropper Remote Access Trojan, which is an executable file used to deploy malware by dropping Java-based components. It searches for the presence of a "META-INF/MANIFEST.MF" file, indicating a Java application. Additionally, it looks for configuration files named "config.ini" and "password.ini" or a DLL file located at "stub/stub.dll". The detection is confirmed if the manifest file and either all specified configuration files or the DLL file are found.
  Updated-Date: '2024_08_07'
RAT_LostDoor:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 17940da5f1a83cd169fcc2e12f57ec4d
  Ruleset: securityonion-yara
  Summary: This rule detects the LostDoor Remote Access Trojan (RAT), a type of malware designed to provide unauthorized access to an infected system. The rule identifies specific patterns and strings related to LostDoor, including indicators like "*mlt* = %", "*ip* = %", and "We Control Your Digital World". Additionally, it searches for references to RC4 cryptographic functions such as "RC4Initialize" and "RC4Decrypt". By matching these distinct signatures, the rule can effectively identify the presence of the LostDoor RAT in executable files.
  Updated-Date: '2024_08_07'
RAT_LuminosityLink:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8e55e4c394126225e2230766a7c0879a
  Ruleset: securityonion-yara
  Summary: This rule detects the LuminosityLink Remote Access Trojan (RAT), a tool used for unauthorized remote access to systems. Distinctive text strings such as "SMARTLOGS," "RUNPE," "CLIENTINFO*," and "Luminosity" are identified within executable files. It also checks for specific error messages related to webcam drivers, proactive anti-malware activations, and references to a component called "LuminosityCryptoMiner."
  Updated-Date: '2024_08_07'
RAT_LuxNet:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 30d8f09ae9d9acb7d9c6a53cbe71c78a
  Ruleset: securityonion-yara
  Summary: This rule detects the LuxNet Remote Access Trojan (RAT), a type of malware used to gain unauthorized control over a system. It identifies the presence of LuxNet RAT by looking for specific strings within executable files, such as terms related to programming and web utilities, and a particular cursor file.
  Updated-Date: '2024_08_07'
RAT_NanoCore:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c471480678ea2f3bbbbb98b488404aee
  Ruleset: securityonion-yara
  Summary: This rule detects the NanoCore Remote Access Trojan (RAT) by identifying specific strings and a keyword associated with its execution. NanoCore is characterized by features including remote control, data exfiltration, and persistence mechanisms. Indicators such as "NanoCore," "ClientPlugin," "ProjectData," and "DESCrypto," as well as the keyword pattern {43 6f 24 cb 95 30 38 39}, are used to flag executable files. The rule requires at least six of these identifiers to be present to confirm the detection of NanoCore.
  Updated-Date: '2024_08_07'
RAT_NetWire:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0228ab3a96606e33b5d3bd55838ecdb9
  Ruleset: securityonion-yara
  Summary: This rule detects the NetWire Remote Access Trojan (RAT), which is identified through specific string patterns found within executable files. These patterns include formatted date strings, system class identifiers, and system registry keys. Additionally, it looks for references to system control options and user account configuration files associated with instant messaging clients.
  Updated-Date: '2024_08_07'
RAT_Pandora:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 795b49210d0dedb71c2006b4535b4fe9
  Ruleset: securityonion-yara
  Summary: 'This rule detects the Pandora Remote Access Trojan (RAT), identifiable by a collection of specific strings found within executable files. These strings include error messages like "Can''t get the Windows version", unique character sequences such as "=M=Q=U=Y=]=a=e=i=m=q=u=y=}=", and various other textual markers including "JPEG error #%d" and "Cannot assign a %s to a %s". It also checks for references to certain filenames and paths such as "melt.bat", "\StubPath", and "\logs.dat", as well as keylogging activity indicated by strings like "33|[Keylogger Not Activated!]". The presence of these indicators collectively signifies the Pandora RAT.'
  Updated-Date: '2024_08_07'
RAT_Paradox:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6c3d339964b5c8fc7db559f3a4cb81cd
  Ruleset: securityonion-yara
  Summary: This rule detects Paradox RAT, a type of Remote Access Trojan (RAT) contained in executable files. It identifies the malware by searching for specific strings such as "ParadoxRAT," "Form1," "StartRMCam," "Flooders," "SlowLaris," "SHITEMID," and "set_Remote_Chat" within the file. These strings are indicative of Paradox RAT's components and functionalities, including remote chat, camera control, and network flooding capabilities.
  Updated-Date: '2024_08_07'
RAT_Plasma:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c33d1ec5d10306584aba6bdff2faacad
  Ruleset: securityonion-yara
  Summary: 'This rule detects the presence of Plasma RAT, a Remote Access Trojan known for its diverse set of functionalities. It identifies the malware by looking for specific wide and ASCII strings within executable files, such as messages related to GPU mining, keylogging, and bot activities. Key phrases include "Miner: Failed to Inject," "Started GPU Mining on," "Uploaded Keylogs Successfully," and distinctive identifiers like "PlasmaRAT" and "AntiEverything." These strings suggest a range of malicious activities from mining to botnet control, proving the multifaceted threat posed by Plasma RAT.'
  Updated-Date: '2024_08_07'
RAT_PoisonIvy:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d01d14db498b7881b7e2e6cec96f0ffb
  Ruleset: securityonion-yara
  Summary: This rule detects PoisonIvy, a Remote Access Trojan (RAT) associated with the executable file type. It identifies the malware by looking for specific byte sequences and strings commonly used by PoisonIvy, including a hexadecimal pattern, a connect string, references to network libraries and other strings that signify its presence.
  Updated-Date: '2024_08_07'
RAT_PredatorPain:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 91d575f262eeb0eceee8bf0b297267a3
  Ruleset: securityonion-yara
  Summary: This rule detects the PredatorPain Remote Access Trojan (RAT). It identifies the malware through several key strings, such as "holderwb.txt", "There is a file attached to this email", "screens\\screenshot", "Disablelogger", "\\pidloc.txt", "clearie", "clearff", "emails should be sent to you shortly", "jagex_cache\\regPin", and "open=Sys.exe". Additionally, it recognizes versions or components of the malware with strings like "PredatorLogger", "EncryptedCredentials", and "Predator Pain". This combination of string patterns enables the identification of PredatorPain RAT executables effectively.
  Updated-Date: '2024_08_07'
RAT_Punisher:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ce82203fac6662bae1f61976bd1dcf01
  Ruleset: securityonion-yara
  Summary: This rule detects the Punisher Remote Access Trojan (RAT) by identifying various specific strings and byte sequences within executable files. These include strings such as "abccba," "SpyTheSpy," "wireshark," "apateDNS," and a combination string "abccbaDanabccb," as well as particular hexadecimal patterns. The presence of these indicators in a file signals the existence of the Punisher RAT, a type of malware designed for unauthorized remote access and control.
  Updated-Date: '2024_08_07'
RAT_PythoRAT:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 77d9302a897e0e1ff584fa3b095dca0a
  Ruleset: securityonion-yara
  Summary: This rule detects a Python-based Remote Access Trojan (RAT) that exhibits characteristics such as keylogging, file transfer capabilities, and download functionalities. It searches for specific strings such as "TKeylogger," "uFileTransfer," "TTDownload," "SETTINGS," and unique markers like "#@#@#," which are indicative of this RAT's plugin and message handling system. These identifiers collectively signal the presence of this malicious software designed to infiltrate and control an affected system remotely.
  Updated-Date: '2024_08_07'
RAT_QRat:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: dcec4fac9a19ac2cdbd9ef6a7dd64fbf
  Ruleset: securityonion-yara
  Summary: This rule detects QRAT, a Remote Access Trojan, within Java Archive (JAR) files. It identifies the presence of specific strings such as "e-data", "quaverse/crypter", "Qrypt.class", "Jarizer.class", and "URLConnection.class". The condition is met if any four of these strings are found, indicating the potential presence of QRAT malware.
  Updated-Date: '2024_08_07'
RAT_Sakula:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1f9b4971e972a7bd640160bae8796801
  Ruleset: securityonion-yara
  Summary: This rule detects the Sakula version 1.0 Remote Access Trojan (RAT). It identifies specific strings and patterns within the code, such as formatted strings for file paths and system commands. Some notable signatures include command execution patterns involving `ping` and `cmd.exe` with `rundll32`, as well as filenames like `MicroPlayerUpdate.exe` and `CCPUpdate`. The rule also detects specific byte sequences tied to Sakula's operations and particular opcode patterns. Additionally, it looks for unique serial numbers and ensures that detection avoids false positives associated with software from Symantec Corporation.
  Updated-Date: '2024_08_07'
RAT_SmallNet:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2967b61f1f0299e634e0144ec1e0ce88
  Ruleset: securityonion-yara
  Summary: This rule detects the SmallNet Remote Access Trojan (RAT) by searching for specific string patterns within executable files. It identifies markers such as "!!<3SAFIA<3!!" and "!!ElMattadorDz!!", along with properties and executable names like "stub_2.Properties," "stub.exe" in wide format, and "get_CurrentDomain." These combined conditions help in recognizing the presence of the SmallNet RAT, an illicit software used for unauthorized remote access and control over an infected system.
  Updated-Date: '2024_08_07'
RAT_SpyGate:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 539b8a4f153d546055e775eb620eeeff
  Ruleset: securityonion-yara
  Summary: This rule detects the SpyGate Remote Access Trojan (RAT), which is identified by specific strings and patterns in executable files (.exe). The Trojan can be recognized through indicators such as the presence of strings like "abccba", "StubX.pdb", "monikerString", and commands for shutting down the computer or controlling the CD audio door. Additionally, the rule looks for strings indicating file management operations and hacker chat references, highlighting its capabilities for remote control and system manipulation.
  Updated-Date: '2024_08_07'
RAT_Sub7Nation:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ec2978b96c4df58a06ad089aa91028cc
  Ruleset: securityonion-yara
  Summary: This rule detects the Sub7Nation Remote Access Trojan (RAT), an executable file known for compromising systems to provide unauthorized access and control. It identifies the presence of specific strings related to disabling User Account Control (UAC), configuration elements such as "HostSettings," and various version-specific artifacts including "sevane.tmp," "cmd_.bat," "a2b7c3d7e4," and "cmd.dll."
  Updated-Date: '2024_08_07'
RAT_Vertex:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8de4d8d11ac4b324b964fb0e304ad6d4
  Ruleset: securityonion-yara
  Summary: This rule detects the Vertex Remote Access Trojan (RAT), a type of malicious software. The rule identifies this malware by searching for specific strings within executable files, including "DEFPATH," "HKNAME," "HPORT," "INSTALL," "IPATH," "MUTEX," "PANELPATH," and "ROOTURL." These strings are indicative of the Vertex RAT's configuration and operations.
  Updated-Date: '2024_08_07'
RAT_VirusRat:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 93b53108a0aad66f9480038ef0ba6e5f
  Ruleset: securityonion-yara
  Summary: This rule detects VirusRAT, a type of Remote Access Trojan (RAT). It triggers on several unique strings associated with VirusRAT's behavior and capabilities, including references to antivirus-related keywords like "virustotal" and "virusscan," as well as specific terms such as "abccba," "pronoip," and "streamWebcam." It also looks for patterns indicative of credential theft or network configuration, such as "DOMAIN_PASSWORD" and FTP patterns like "ftp://{0}@{1}." Database query strings targeting browser login data and disabled hosts are included, along with a specific configuration file path "DynDNS\\Updater\\config.dyndns" and the string "|BawaneH|." The rule invokes a detection when all specified strings are found within an executable file.
  Updated-Date: '2024_08_07'
RAT_Xtreme:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c66863cd47542634d577e05e64d0ee40
  Ruleset: securityonion-yara
  Summary: This rule detects the Xtreme Remote Access Trojan (RAT) by identifying specific strings within executable files. It looks for distinctive text such as "XTREME," "ServerStarted," "XtremeKeylogger," "x.html," and "Xtreme RAT." These indicators are associated with various versions of Xtreme RAT, specifically versions 2.9, 3.1, 3.2, and 3.5.
  Updated-Date: '2024_08_07'
RAT_adWind:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 05365de9aa19548a3e07e27f026643a9
  Ruleset: securityonion-yara
  Summary: This rule detects the Adwind Remote Access Trojan (RAT) by identifying specific strings within executable files. It looks for the presence of "META-INF," "config.xml," "Adwind.class," and "Principal.adwind," which are characteristic of the Adwind malware.
  Updated-Date: '2024_08_07'
RAT_njRat:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 698a22f54482b75a9a0f06fff240063f
  Ruleset: securityonion-yara
  Summary: This rule detects the njRat Remote Access Trojan by looking for specific patterns and command strings within executable files. It searches for distinctive byte sequences, certain wide strings related to firewall configuration and Windows startup registry paths, as well as date format strings. Additionally, it identifies specific command lines used to execute and then delete subsequent tasks via `cmd.exe` processes.
  Updated-Date: '2024_08_07'
RAT_unrecom:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 604f8a4d7bc8896c36a21f73bf90eb7a
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the unrecom Remote Access Trojan (RAT) by identifying specific string signatures and file structures typically contained within its executable files, including references to "META-INF," "load/ID," "load/JarMain.class," "load/MANIFEST.MF," and "plugins/UnrecomServer.class."
  Updated-Date: '2024_08_07'
RDP_Brute_Strings:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a5eab443139a172e364936dba43f7120
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of an RDP brute forcer application by identifying specific strings associated with its operation. These strings include references to "RDP Brute," "RdpChecker," "RdpBrute," and other terms like "Brute_Count_Password," "BruteIPList," and "Chilkat_Socket_Key." Additionally, it checks for unique wide strings such as "(Error! Hyperlink reference not valid.)," "BadRDP," "GoodRDP," and coding comments like "Coded by z668." This pattern helps identify malicious activity typical of brute-force attacks targeting Remote Desktop Protocol vulnerabilities.
  Updated-Date: '2024_08_07'
REDLEAVES_CoreImplant_UniqueStrings:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 91c510de839aebb21582664366c2186a
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the REDLEAVES Remote Access Trojan (RAT) by identifying unique strings associated with its deobfuscated state. It looks for specific identifiers such as "RedLeavesSCMDSimulatorMutex," "red_autumnal_leaves_dllmain.dll," and "\\NamePipe_MoreWindows" in both wide and ASCII formats.
  Updated-Date: '2024_08_07'
REDLEAVES_DroppedFile_ImplantLoader_Starburn:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9e2a14ad7e484e732ef91f1f180c3ccd
  Ruleset: securityonion-yara
  Summary: This rule detects the StarBurn DLL, which is responsible for loading and deobfuscating a DAT file that contains shellcode and the core components of the REDLEAVES Remote Access Trojan (RAT). The detection focuses on identifying a specific deobfuscation loop present in the DLL file.
  Updated-Date: '2024_08_07'
REDLEAVES_DroppedFile_ObfuscatedShellcodeAndRAT_handkerchief:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: bfc52159a00ad1bf1517efcc1c77f00a
  Ruleset: securityonion-yara
  Summary: This rule detects an obfuscated .dat file that contains shellcode and the core components of the REDLEAVES Remote Access Trojan (RAT), specifically identifying a string that corresponds to an obfuscated version of 'red_autumnal_leaves_dllmain.dll'.
  Updated-Date: '2024_08_07'
REGEORG_Tuneller_generic:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 82ef747c8b7db763265fb17a055a82ed
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of REGEORG tunneler malware by identifying specific network and HTTP-related functions within a file smaller than 1MB. It searches for indicators such as "System.Net.IPEndPoint," "Response.AddHeader," "Request.InputStream.Read," "Request.Headers.Get," "Response.Write," "System.Buffer.BlockCopy," "Response.BinaryWrite," and "SocketException soex." At least seven of these strings must be found for the rule to trigger, indicating potential malicious activity related to the REGEORG tunneler, which is used to facilitate covert communication and data exfiltration.
  Updated-Date: '2024_08_07'
ROKRAT_Dropper_Nov17:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a029e80bfa752cdfcd5a43e4279ced27
  Ruleset: securityonion-yara
  Summary: This rule detects a dropper associated with the ROKRAT malware by checking for a specific file signature at the beginning of the file and ensuring the file size is under 2500KB. It also analyzes the Import Hash (imphash) value of the Portable Executable (PE) file, looking for a match with a known suspicious value.
  Updated-Date: '2024_08_07'
ROKRAT_Malware:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ac71fed68bd814d1d1824e63d4b71116
  Ruleset: securityonion-yara
  Summary: This rule detects ROKRAT malware, which is identified by specific file paths and strings commonly associated with its behavior. The rule checks for instances of "svchost.exe" in the local appdata directory, "episode3.mp4" in the temp directory, and a particular pattern "MAC-SIL-TED-FOO-YIM-LAN-WAN-SEC-BIL-TAB". It also looks for temporary files with a specific naming convention and certain strings in the format of "%s%s%04d%02d%02d%02d%02d%02d.jar". Furthermore, it searches for particular executable naming patterns and specific substrings related to common tools used by the malware, such as "ython", "iddler", "egmon", and "iresha". The rule applies these checks to files with a specific header and size constraint to confirm the presence of ROKRAT malware.
  Updated-Date: '2024_08_07'
ROKRAT_Nov17_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f84f93ad943027f32a2c3ef5d700e069
  Ruleset: securityonion-yara
  Summary: This rule detects ROKRAT malware by identifying specific strings and file patterns within executable files smaller than 15,000 KB. It looks for unique paths such as "\\T+M\\Result\\DocPrint.pdb", "d:\\HighSchool\\version 13\\2ndBD", and "e:\\Happy\\Work\\Source\\version," as well as certain file locations including "\\appdata\\local\\svchost.exe" and "c:\\temp\\esoftscrap.jpg". These patterns are indicative of the tactics used by ROKRAT malware to remain hidden and persist on infected systems.
  Updated-Date: '2024_08_07'
RUAG_APT_Malware_Gen2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0d8905e591839696615627c77ec11741
  Ruleset: securityonion-yara
  Summary: This rule detects malware associated with the RUAG APT espionage case by identifying specific patterns and characteristics within executable files. It looks for certain error messages, debug strings, and file names indicative of the malware's behavior, such as references to internal commands, process token manipulation, and the use of named pipes. The rule also checks for specific DLL file names, like "MSIMGHLP.DLL," "ximarsh.dll," and "INTERNAL.dll," as well as potential execution of "ieuser.exe." It employs a combination of these string matches and file properties, such as the PE header signature and file size, to identify the presence of this particular malicious software.
  Updated-Date: '2024_08_07'
RUAG_Bot_Config_File:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c23952fc6f7d13831970d3c5e8de14ed
  Ruleset: securityonion-yara
  Summary: This rule detects a specific configuration file utilized by malware involved in the RUAG Advanced Persistent Threat (APT) incident. The detection focuses on files containing the string "[CONFIG]" at the beginning, indicating the start of a configuration section, followed by "name = " and "exe = cmd.exe" in ASCII. The targeted file is also required to have a specific header value and a size less than 160 bytes.
  Updated-Date: '2024_08_07'
RUAG_Cobra_Config_File:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: def9dc6223ae65ce6ba776a6c7e2cc75
  Ruleset: securityonion-yara
  Summary: This rule detects a configuration text file associated with the malware known as Cobra, which was involved in the RUAG cyber espionage case. The detection relies on specific ASCII strings indicative of Cobra's configuration elements, such as identifiers for object, time, local configurations, system and user pipes, transport methods, task running systems, and work data. The file must begin with a specific magic number and contain at least eight of the specified strings, with a size under 5KB to match the characteristics described.
  Updated-Date: '2024_08_07'
RUAG_Cobra_Malware:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 827d2533e7cc736d10b6e95099666f6f
  Ruleset: securityonion-yara
  Summary: This rule detects malware referred to as Carbon/Cobra, associated with the RUAG Case. It specifically looks for a string pattern indicating the presence of a file path related to the Cobra malware database, combined with a standard DOS header check to ensure accuracy.
  Updated-Date: '2024_08_07'
RUAG_Exfil_Config_File:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3217eae27440d670ce457c9eb8919fd1
  Ruleset: securityonion-yara
  Summary: This rule detects a configuration text file associated with data exfiltration in the RUAG case. It identifies the presence of specific strings such as "[TRANSPORT]", "system_pipe", "spstatus", "adaptable", "post_frag", and "pfsgrowperiod" within the file. The file must start with a specific sequence of bytes and contain all the mentioned strings, with the overall file size being less than 1KB.
  Updated-Date: '2024_08_07'
RUAG_Tavdig_Malformed_Executable:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c83663d2f8c49afbc777950d780e0ae2
  Ruleset: securityonion-yara
  Summary: This rule detects an embedded executable with a malformed header that is characteristic of the Tavdig malware. It specifically looks for files that have an MZ header followed by a PE header with a value indicative of corruption, suggesting tampering or malicious intent.
  Updated-Date: '2024_08_07'
Radmin_Hash:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e2c0f486487e98644bc28f153086652d
  Ruleset: securityonion-yara
  Summary: This rule detects a specific executable file named "Radmin_Hash.exe," associated with a Chinese hacktool set. It identifies the file by checking for specific strings within the file, such as "<description>IEBars</description>", "PECompact2", "Radmin, Remote Administrator", "Radmin 3.0 Hash", and "HASH1.0". Additionally, it verifies the file's characteristics, such as having a "MZ" header and a filesize of less than 600KB.
  Updated-Date: '2024_08_07'
RangeScan:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 08a2bdcd40265d75e002fe629bdb2e85
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the hacktool named RangeScan, specifically targeting the file RangeScan.exe. The rule identifies several distinctive strings within the file, including "RangeScan.EXE" in a wide character set, HTML-like tags with "RangeScan" in an ASCII format, the phrase "Produced by isn0" in ASCII, and a standard datetime format "%d-%d-%d %d:%d:%d" in ASCII. The presence of three of these strings within a file triggers the detection.
  Updated-Date: '2024_08_07'
Ransom_LockerGoga_Mar19_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e896089ef11c725b3afb760ee84bff96
  Ruleset: securityonion-yara
  Summary: This rule detects LockerGoga ransomware binaries, which target various document and media file types indicated by the extensions such as .doc, .pdf, .pptx, and others. It looks for specific directory paths and filenames relevant to the ransomware's operation, such as "cl.log" and the presence of "crypto-locker" directories. Additionally, the rule identifies certain Unicode patterns and strings within the executable, including terms like "CompanyName," "Microsoft," ".locked," "FAILED," and specific warning messages about file recovery impossibility. The rule sets conditions based on file size and header patterns to effectively identify LockerGoga ransomware files.
  Updated-Date: '2024_08_07'
ReactOS_cmd_valid:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 706dd858378687721cd3e5cd8154659e
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the ReactOS Command Processor (cmd.exe), identifying instances that might be correctly named but potentially packed with software or included as part of a hacker toolset. It searches for specific strings that indicate the ReactOS Command Processor, including references to copyright information and acknowledgments to contributors such as Tim Norman, Eric Kohl, and others associated with the ReactOS Operating System.
  Updated-Date: '2024_08_07'
Reader_asp:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a0ff8d15aead54174750f38f07c09d26
  Ruleset: securityonion-yara
  Summary: This rule detects a specific malicious file named "Reader.asp.txt" by searching for unique strings associated with it within a file. These strings include the phrases "Mehdi & HolyDemon," "www.infilak.," and a particular pattern resembling HTML form code indicative of compromised web content. Detection occurs if at least two of these strings are present in the file.
  Updated-Date: '2024_08_07'
Reaver3_Malware_Nov17_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c4ae3fd7cd9cf8038ec5bdc7384043f0
  Ruleset: securityonion-yara
  Summary: "This rule detects Reaver malware that\u2019s described in a report by Palo Alto Networks. The detection mechanism looks for a file with the string \"CPL.dll\" and matches specific criteria, including the file being a Windows executable (indicated by the \"0x5a4d\" signature), having a file size under 100KB, and a specific import hash value of \"e722dd50a0e2bc0cab8ca35fc4bf6d99\"."
  Updated-Date: '2024_08_07'
Reaver3_Malware_Nov17_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c9aa2cf0e97f003970a45f0e62dca2e5
  Ruleset: securityonion-yara
  Summary: This rule detects the Reaver malware as identified in a report by Palo Alto Networks. The rule looks for specific strings and conditions within a file to identify the presence of this malware. It checks for the string "WindowsUpdateReaver" in fullword and wide format, various file paths like "\\WUpdate.~tmp" and "\\~WUpdate.lnk", and text patterns such as "moomjufps" and "gekmomkege" in fullword and ASCII. Additionally, the rule validates if the file has a specific PE import hash "837cc5062a0758335b257ea3b27972b2" and ensures the file size is under 100KB. The initial bytes of the file must correspond to the value 0x5a4d.
  Updated-Date: '2024_08_07'
Reaver3_Malware_Nov17_3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 61c56325190a79219c3e46922d2f2b05
  Ruleset: securityonion-yara
  Summary: This rule detects the Reaver malware, as documented in a Palo Alto Networks report, by identifying specific file characteristics and string artifacts commonly associated with the malware. The condition specified includes checking for the presence of a particular PE file header and restricting the file size to under 200KB. Detection criteria include matching an exact PE import hash or identifying certain strings such as "winhelp.dat," paths like "\microsoft\Credentials\" and "\services\", and filenames like "~Update.lnk" and "winhelp.cpl." These indicators help to pinpoint the Reaver malware through its identifiable features and behaviors.
  Updated-Date: '2024_08_07'
Recon_Commands_Windows_Gen1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ff2dad707ad9b156cd1d9ecbb934ec25
  Ruleset: securityonion-yara
  Summary: This rule detects reconnaissance commands executed on Windows systems. These commands include various network and user information queries, such as "netstat -an" for network connections, "net view" for listing network shares, "net user" to display user accounts, and "whoami" to show the current user. It also checks for commands like "tasklist /v" and "tasklist /svc" for detailed views of running tasks and services, "systeminfo" for system information, and specific commands related to user groups and administrators, such as "net localgroup administrators". The rule identifies potential registry interactions via "regedit -e" and "CreateObject(\"WScript.Shell\").RegWrite" and activity with "regsvr32 /s /u". It also monitors for usage of "bitsadmin /rawreturn /transfer getfile" for file transfers, "wmic qfe list full" for querying installed updates, and various "wmic" and "wevtutil" commands for gathering event log data or cleaning logs. Additionally, it looks at "schtasks.exe /create" for scheduled tasks, "sc query type= service" for service queries, and "arp -a" for viewing the ARP cache.
  Updated-Date: '2024_08_07'
ReflectiveLoader:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 01df3d8ff25445c2ee88ef776efa1a03
  Ruleset: securityonion-yara
  Summary: This rule detects potential hack tools, cracks, or malware utilizing a reflective loader, a technique where a DLL is loaded from memory rather than disk. The detection focuses on specific strings related to reflective loaders, such as "ReflectiveLoader" and its variations. Additionally, it checks for specific export names in PE files that indicate reflective loading functionality while excluding known legitimate software from Sentinel Labs and Panda Security. This approach requires further investigation as no hard match is identified.
  Updated-Date: '2024_08_07'
Reflective_DLL_Loader_Aug17_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0fc0f5e65172abe59f2f5b9a0c708557
  Ruleset: securityonion-yara
  Summary: This rule detects a Reflective DLL Loader, a technique typically utilized in malware to inject a Dynamic Link Library (DLL) into the address space of another process. The rule identifies the loader by looking for specific strings related to reflective DLLs, such as paths to debug files, DLL names, and references to the ReflectiveLoader function. It also checks for certain characteristics in the file's structure, such as its size, and the presence of specific export functions or import hashes.
  Updated-Date: '2024_08_07'
Reflective_DLL_Loader_Aug17_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7845f9136d2a9b368bab563be741ccc4
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of Reflective DLL Loader, which is often associated with suspicious behavior such as malicious DLL injection techniques. Specifically, it looks for certain strings and characteristics in files smaller than 200KB, including references to Reflective DLL Injection and a specific PE import hash. The rule also checks for the presence of an export function related to reflective loading, which might indicate the usage of reflective DLL injection methods. The detection could possibly flag false positives in cases where legitimate software, like program cracks, uses similar techniques.
  Updated-Date: '2024_08_07'
Reflective_DLL_Loader_Aug17_3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a3b9939dad0b3eed5a593289e790b7c2
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a Reflective DLL Loader by searching for specific patterns and signatures within a file. It checks for certain ASCII strings such as "\Release\inject.pdb", "!!! Failed to gather information on system processes!", "reflective_dll.dll", "[-] %s. Error=%d", and "\Start Menu\Programs\reflective_dll.dll". Additionally, it examines the PE header and file size to ensure it meets certain criteria, such as having a specific import hash ("26ba48d3e3b964f75ff148b6679b42ec") and being less than 300KB in size. This combined set of conditions helps in identifying files associated with the Reflective DLL Loader.
  Updated-Date: '2024_08_07'
Reflective_DLL_Loader_Aug17_4:
  Created-Date: '2024_08_06'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c4d4cb96f8296594017df955c66b62b7
  Ruleset: securityonion-yara
  Summary: This rule detects a Reflective DLL Loader, which is a technique used to inject a DLL into the memory of a process without using the Windows loader. The rule looks for HTML-like strings within a file, such as keylogger installation messages, information about running processes, and details about the operating system and System32 directory. It applies specifically to files starting with the "MZ" header and ensures the file size is less than 2000KB, matching at least two of these defined string patterns.
  Updated-Date: '2024_08_06'
Regin_APT_KernelDriver_Generic_A:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 744cfafda3ebeb03c2f55bfd424d0a83
  Ruleset: securityonion-yara
  Summary: This rule detects the Regin APT kernel driver malware. Regin is an advanced persistent threat (APT) known for its stealth and sophisticated functionalities. This malware targets system files and directories, including strings such as "atapi.sys," "disk.sys," "system32," "SystemRoot," "system," "temp," and "windows." It also looks for specific patterns in the executable headers and the presence of "LRich6" and "KeServiceDescriptorTable." The aim is to identify anomalies related to Regin's kernel driver, which is designed to infiltrate and control an infected system covertly.
  Updated-Date: '2024_08_07'
Regin_APT_KernelDriver_Generic_B:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 98b71e735bf4fa3e5e9afbe8e0ebd5d6
  Ruleset: securityonion-yara
  Summary: This rule detects the Regin APT kernel driver malware by identifying specific hexadecimal sequences and ASCII strings within executable files. It checks for the presence of the "MZ" header at the file's start and scrutinizes various strings tied to the malware's behavior, such as "INIT," "ntoskrnl.exe," "KeServiceDescriptorTable," and "ZwCreateFile." The rule also verifies certain kernel function names and system paths like "\\system32" and "\\SystemRoot," ensuring the malicious file is smaller than 20KB.
  Updated-Date: '2024_08_07'
Regin_APT_KernelDriver_Generic_C:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 364e5c3507fab08be6f6074147dfab0b
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the Regin APT kernel driver malware. It uses specific patterns in the file header, certain ASCII and wide strings such as "KeGetCurrentIrql," "usbclass," and "Universal Serial Bus Class Driver," as well as specific version numbers and padding patterns commonly associated with this malware. The detection conditions require that the file matches known characteristics of the malware and its size is less than 20KB.
  Updated-Date: '2024_08_07'
Regin_Related_Malware:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5f20ef2a64beafa076c4c7fba82baf10
  Ruleset: securityonion-yara
  Summary: This rule detects a malware sample that may be related to Regin, a sophisticated cyber-espionage toolkit, by identifying specific patterns within files. It looks for strings that include command formats, registry paths for Windows HotFix, sequences of hexadecimal values, and specific DLL filenames such as "disp.dll" and "msvcrtd.dll". Additionally, it searches for formats associated with IP addresses, memory locations, and other specific data structures, signaling potential malware behavior.
  Updated-Date: '2024_08_07'
Regin_Sample_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 381d602122021151a808eee6086751aa
  Ruleset: securityonion-yara
  Summary: This rule detects a sample of the Regin malware by identifying specific strings related to serial port operations and registry information. These strings include error messages and diagnostic information such as "Getting PortName/Identifier failed," "SerialAddDevice - error creating new devobj," "External Naming Failed," and phrases indicating interactions with user registry info and device registry keys. The rule applies specifically to files within a size range of 80KB to 110KB. The combined presence of these strings in a file suggests a potential match with this Regin sample.
  Updated-Date: '2024_08_07'
Regin_Sample_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0cf5d40f0197491a213c5bedb44da84e
  Ruleset: securityonion-yara
  Summary: This rule detects the Regin malware sample by identifying specific strings within the file. These strings include references to critical system files and processes such as "lsass.exe," which is crucial for local security authority, and system driver files "atapi.sys" and "disk.sys". Additional strings pertain to key system functions and registry paths like "IoGetRelatedDeviceObject," "HAL.dll," and various registry paths and kernel functions such as "KeInitializeEvent" and "PsLookupProcessByProcessId." The rule applies to files within a specific size range, specifically between 30KB and 40KB.
  Updated-Date: '2024_08_07'
Regin_Sample_3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 51d3c065911daeb7269f6519872b6ca6
  Ruleset: securityonion-yara
  Summary: This rule detects the Regin backdoor, specifically identifying a sample with the hash "fe1419e9dde6d479bd7cda27edd39fafdab2668d498931931a2769b370727129." It triggers on a combination of specific strings related to Windows registry paths, system files, and functions. These include references to system services, kernel executables like "mntoskrnl.exe" and "ntkrnlpa.exe," registry paths associated with Windows updates and session management, as well as strings found in system-related files like ".sys" and ".dll" files. Additionally, the rule looks at memory management strings and specific functions such as "IoGetRelatedDeviceObject" and "RtlGetVersion." The rule also considers the file size, targeting files between 160KB and 200KB with a specific header.
  Updated-Date: '2024_08_07'
Regin_Sample_Set_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9fc8a82b0461300d2c0d6a385833200d
  Ruleset: securityonion-yara
  Summary: This rule detects the Regin backdoor sample, a sophisticated piece of malware used for espionage. This rule identifies the presence of specific byte patterns and file strings associated with Regin, including registry and file paths common to Windows systems, unique format strings, library names such as "disp.dll" and "imagehlp.dll," and specific textual patterns indicative of malicious activity. The rule applies conditions on file size to refine the detection, targeting files between 360KB and 450KB.
  Updated-Date: '2024_08_07'
Regin_Sample_Set_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f10cd3fe67bdcf833f2be4c51f947b34
  Ruleset: securityonion-yara
  Summary: This rule detects a specific set of malicious files associated with the Regin malware, identified by hashes 8487a961c8244004c9276979bb4b0c14392fc3b8 and bcf3461d67b39a427c83f9e39b9833cfec977c61. The detection focuses on files like 'HAL.dll' and 'ntkrnlpa.exe' and includes references to various Windows system functions and registry paths, such as "IoGetDeviceObjectPointer," "KeQueryPerformanceCounter," and "\\REGISTRY\\Machine\\System\\CurrentControlSet\\Control\\Session Manager." The rule specifically looks for files with sizes between 30KB and 40KB containing these characteristics.
  Updated-Date: '2024_08_07'
Regin_sig_svcsstat:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 331c4fce836343d260cfff844c533dc7
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of svcstat.exe_sample, a file associated with the Regin malware, a known advanced persistent threat. It specifically looks for strings related to service management, wide-character file paths, and certain C runtime functions within files sized between 10KB and 15KB. Key indicators include references to "Service Control Manager," "Root Agency," and control service functions.
  Updated-Date: '2024_08_07'
Rehashed_RAT_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1c174d95883a22d0f16933d213615a7a
  Ruleset: securityonion-yara
  Summary: This rule detects malware associated with the Rehashed RAT incident targeting Vietnamese organizations. It identifies files based on specific strings and characteristics such as file paths related to user directories and project builds, as well as user-agent headers typical of Internet Explorer 8.0 on Windows systems. Additionally, the rule looks for certain HTTP request patterns, filenames, and a unique PE import hash. The conditions also check for specific file size limits and the presence of particular exports within PE files, ensuring comprehensive detection of the identified threat.
  Updated-Date: '2024_08_07'
Rehashed_RAT_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5c760f6d6660858f7b0ce2d9a43d6c78
  Ruleset: securityonion-yara
  Summary: This rule detects a strain of malware associated with the Rehashed RAT incident, specifically targeting Vietnamese organizations. The rule identifies the malware through specific strings related to domain names and HTTP request patterns, and various User-Agent headers imitating legitimate browsers. It also checks for specific patterns in the Portable Executable (PE) file format, including a PE import hash and file size constraints. The identified malware communicates with known malicious domains and uses recognizable HTTP request formats, indicative of command and control traffic.
  Updated-Date: '2024_08_07'
Rehashed_RAT_3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f2ebb5ff1bb1b0ffd2024ee80f63796a
  Ruleset: securityonion-yara
  Summary: This rule detects malware associated with the Rehashed RAT incident, which was used in an APT campaign targeting Vietnamese organizations. The detection criteria include specific strings such as "\\BisonNewHNStubDll\\Release\\Goopdate.pdb", "psisrndrx.ebd", and "pbad exception", along with a file size under 100KB and a specific file header value.
  Updated-Date: '2024_08_07'
Release_dllTest:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 85af3f101f5ea7a8132e3615d8a30a30
  Ruleset: securityonion-yara
  Summary: This rule detects a specific webshell by identifying characteristics unique to the file named "dllTest.dll." It uses a series of distinct string patterns, such as sequences of alphanumeric characters and symbols, to determine the presence of this webshell. The rule ensures that all specified patterns are found within the file to confirm a match, aiming to recognize webshells that exhibit these unique signatures.
  Updated-Date: '2024_08_07'
RemCom_RemoteCommandExecution:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d34fd12fc50dbc20b477bacb97b914b2
  Ruleset: securityonion-yara
  Summary: This rule detects specific string patterns associated with the RemCom tool, which is known for performing remote command execution. It identifies unique sequences such as "\\\\.\\pipe\\%s%s%d", "%s\\pipe\\%s%s%d%s", and "\\ADMIN$\\System32\\%s%s" that indicate the tool's presence or activity.
  Updated-Date: '2024_08_07'
RemExp_asp:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0641d19fa979803e69f58ef81aa5c5d0
  Ruleset: securityonion-yara
  Summary: This rule detects a specific web-based tool named "Remote Explorer," which is used for remote file management. The detection is based on the presence of certain strings within an ASP file, such as the HTML title "<title>Remote Explorer</title>" and specific scripts handling file operations like copying files and displaying filenames with specific background colors.
  Updated-Date: '2024_08_07'
Rem_View_php_php:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6d530004ff74e6e548c4da5e7b41b337
  Ruleset: securityonion-yara
  Summary: This rule detects specific patterns and phrases in a PHP file associated with phpRemoteView (RemView), a software tool. The detected strings include certain obfuscations and instructions typical to the software, such as a PHP comment on line 1, an HTML input element for deletion of directories and files recursively, and a welcome message for phpRemoteView. These elements suggest the rule targets this particular remote viewing and file management tool written in PHP.
  Updated-Date: '2024_08_07'
RemoteCmd:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 813da2da1ca6a609ae3f8de9c559cc46
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a remote access tool, specifically identifying the executable "RemoteCmd.exe," which is known to be utilized by Advanced Persistent Threat (APT) groups. The rule looks for various indicators, including specific strings related to the file path, execution parameters, communication URLs, and unique identifiers. These indicators help in identifying the "RemoteCmd.exe" file and its associated components, which might signify unauthorized remote access operations on a compromised system.
  Updated-Date: '2024_08_07'
RemoteExec_Tool:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4a9360591c28bf7202db8d39039b6d35
  Ruleset: securityonion-yara
  Summary: This rule detects a specific Remote Access Tool (RAT) associated with the APT group Terracotta. It identifies the tool by recognizing certain strings commonly present in the executable, such as "cmd.exe /q /c \"%s\"", "\\\\.\\pipe\\%s%s%d", and various "TermHlp" communication pipe strings. The tool is characterized by its small size (less than 75KB) and the presence of the "MZ" header, indicating a Windows executable. These indicators collectively help in identifying the malicious software used for remote execution by the Terracotta group.
  Updated-Date: '2024_08_07'
Reveal_MemoryCredentials:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d83713e3b3ff2eda3a74cddd075a1af6
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a PowerShell script named Reveal-MemoryCredentials.ps1, which is designed for extracting memory credentials from a system. The rule looks for specific strings within files that suggest the script is accessing Active Directory users, copying a memory dump file from a remote system, or performing actions related to backup operators. These actions are typically indicative of attempts to acquire sensitive data such as credentials stored in system memory.
  Updated-Date: '2024_08_07'
RevengeRAT_Sep17:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6926bbdc5e475757029d8c745d217ba5
  Ruleset: securityonion-yara
  Summary: This rule detects the RevengeRAT malware by identifying specific characteristics associated with its execution and installation. It searches for the presence of particular strings related to RevengeRAT, such as "Nuclear Explosion.g.resources", "5B1EE7CAD3DFF220A95D1D6B91435D9E1520AC41", "\RevengeRAT\", "Revenge-RAT client has been successfully installed.", "Nuclear Explosion.exe", and "Revenge-RAT 201". Additionally, it checks for the unique identifier "{11111-22222-20001-00001}" in the file. By examining these attributes, the rule aims to detect files with characteristics matching known RevengeRAT samples, often indicated by specific text and file size constraints.
  Updated-Date: '2024_08_07'
RkNTLoad:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: fa0802c7db6e7b9b8a2abf6c264dc696
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a webshell auto-generated file named 'RkNTLoad.exe'. It identifies specific strings within the file, including markers indicating that the file is packed with the UPX executable packer, unique text patterns like "5pur+virtu!" and "xcEx3WriL4", common error messages like "runtime error", and references to a message box function. The rule requires all specified strings to be present for detection.
  Updated-Date: '2024_08_07'
RocketKitten_Keylogger:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ced025654da137341c26e8660cce15a3
  Ruleset: securityonion-yara
  Summary: This rule detects a keylogger associated with the Rocket Kitten APT group. Specifically, it looks for certain file paths and strings related to "CWoolger.pdb," "WoolenLoger\\obj\\x86\\Release," and directory "D:\\Yaser Logers\\" within the file. Additionally, it searches for the term "woolger" and checks for multiple script strings indicating configurations or commands common in keylogging software, such as references to `oShellLink.TargetPath`, `wscript.exe`, Windows Shell startup folder, and specific key events like `[CapsLock]`. The rule applies both to file signatures and memory patterns to ensure comprehensive detection.
  Updated-Date: '2024_08_07'
Rombertik_CarbonGrabber:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0de5195276a4b42c15752dc70c5d2488
  Ruleset: securityonion-yara
  Summary: This rule detects the CarbonGrabber malware, also known as Rombertik, specifically targeting a file named Copy#064046.scr. The detection criteria are based on several indicators including specific strings ("ZwGetWriteWatch," "OutputDebugStringA," "malwar," "sampl," "viru," and "sandb") present within the file, combined with a particular file signature and size constraint. These strings are typically associated with malware operations, debugging, and sandbox evasion techniques. The specified file must meet both the signature and content criteria to be detected, ensuring accurate identification of the malicious Rombertik variant.
  Updated-Date: '2024_08_07'
Rombertik_CarbonGrabber_Builder:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 09b6c4746d2a2a138032b4dfe36a1a60
  Ruleset: securityonion-yara
  Summary: This rule detects the CarbonGrabber Builder, also known as Rombertik Builder, specifically identifying a file named Builder.exe. It features signatures indicating the presence of specific paths, host references, file identifiers, and unique strings within its structure. The rule is designed to trigger only if the file matches the specified format and size constraints, such as being less than 35KB and containing all listed string patterns.
  Updated-Date: '2024_08_07'
Rombertik_CarbonGrabber_Builder_Server:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2af1bd687bb919995a9479a9bf94a0e9
  Ruleset: securityonion-yara
  Summary: This rule detects the CarbonGrabber alias Rombertik Builder Server, specifically targeting a file named Server.exe. It identifies this malware by checking for the presence of specific strings within the file, including system paths, registry keys, and browser-related identifiers. Significant strings include references to "svchost.exe," "chrome.exe," "firefox.exe," "chrome.dll," and user-agent strings often associated with web browsers. Additionally, it looks for certain DLL files and specific POST parameters indicative of the malware's behavior. The rule applies constraints like the file's size being under 250KB and utilizing a particular file header signature.
  Updated-Date: '2024_08_07'
Rombertik_CarbonGrabber_Panel:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ce861bd8c2e91ca44124e8621d3739d7
  Ruleset: securityonion-yara
  Summary: This rule detects a PHP-based administrative panel for the Rombertik variant known as CarbonGrabber. The panel, attributed to a file named index.php, contains code responsible for user authentication, logs management, and redirection functionality used by the malware. Key indicators include meta tag refresh commands directing to login pages, conditional statements validating user credentials, and specific SQL operations tied to the logging system. The goal of the detection is to identify this specific script to highlight potential instances of CarbonGrabber activity.
  Updated-Date: '2024_08_07'
Rombertik_CarbonGrabber_Panel_InstallScript:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3a1d7eee6c786d644a8cc721c7e40cdf
  Ruleset: securityonion-yara
  Summary: This rule detects a specific CarbonGrabber alias Rombertik panel install script, named file install.php. It identifies key patterns within the script related to database operations, such as inserting data into a logs table with fields like `id`, `ip`, `name`, `host`, `post`, and `time`. The rule also checks for certain structured text and database execution commands indicative of the malicious script. The script is required to be less than 3KB in size and must contain all specified strings.
  Updated-Date: '2024_08_07'
RottenPotato_Potato:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 56c9450f2fe7cf1b2d51e65e3f0b22d7
  Ruleset: securityonion-yara
  Summary: "This rule detects the presence of a file named Potato.exe associated with the Rotten Potato tool, which is used for privilege escalation. The rule identifies specific strings related to the tool\u2019s functionalities, such as enabling an HTTP server and spoofing, creating scheduled tasks via schtasks.exe, enabling token and DCE functionalities, and diagnostic messages related to DNS lookup and UDP exhaustion. The rule also checks for paths and functions indicative of the Rotten Potato tool's usage."
  Updated-Date: '2024_08_07'
RoyalRoad_RTF:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1fcb19f866c4e741ab008cae1ba3ef5e
  Ruleset: securityonion-yara
  Summary: This rule detects RoyalRoad weaponized RTF documents. It looks for specific patterns in the RTF file format, including the presence of the string "{\\rt" at the start of the document and the specific object dimensions "objw2180\\objh300". RoyalRoad is known for exploiting vulnerabilities in RTF files to deliver malware.
  Updated-Date: '2024_08_07'
RoyalRoad_RTF_v7:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 56c872ada9fb965b66b2ab3ff1413f42
  Ruleset: securityonion-yara
  Summary: This rule detects RoyalRoad weaponized RTF documents by identifying specific strings within the file. It looks for the presence of the "{\\object\\objocx{\\objdata" and "ods0000" strings, as well as the "{\\rt" sequence at the beginning of the file. RoyalRoad is known to exploit vulnerabilities within RTF documents as part of malware attacks.
  Updated-Date: '2024_08_07'
RoyalRoad_code_pattern1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0775186c7638cff1aedf22f08f1a73a5
  Ruleset: securityonion-yara
  Summary: This rule detects weaponized Rich Text Format (RTF) documents associated with the RoyalRoad malware. RoyalRoad is typically used in cyber espionage campaigns and is known for exploiting vulnerabilities to deliver malicious payloads. The rule identifies specific hexadecimal patterns and RTF headers indicative of these weaponized documents.
  Updated-Date: '2024_08_07'
RoyalRoad_code_pattern2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 235e975ebe454b50a7e8a1bfc35851f6
  Ruleset: securityonion-yara
  Summary: This rule detects RoyalRoad weaponized RTF documents by identifying a specific hexadecimal string pattern and ensuring that the document starts with the RTF header. The presence of both characteristics signifies a RoyalRoad exploit, which is known for deploying malicious code through RTF files.
  Updated-Date: '2024_08_07'
RoyalRoad_code_pattern3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b5f2550c56577a3443d221481c49fc3e
  Ruleset: securityonion-yara
  Summary: This rule detects RoyalRoad weaponized RTF documents by identifying a specific hexadecimal pattern characteristic of malicious activity within the document, combined with an initial RTF header.
  Updated-Date: '2024_08_07'
RoyalRoad_code_pattern4ab:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5d1047bc99b2af99d87b671ecf63fb6f
  Ruleset: securityonion-yara
  Summary: This rule detects RoyalRoad weaponized RTF documents by identifying specific hexadecimal sequences and RTF format indicators in the document content. RoyalRoad is known for creating malicious RTF files used in cyber attacks to exploit vulnerabilities in word processing software.
  Updated-Date: '2024_08_07'
RoyalRoad_code_pattern4ce:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1bdfe5aaba6422e62327ef14cd7983d4
  Ruleset: securityonion-yara
  Summary: This rule detects RoyalRoad weaponized RTF (Rich Text Format) documents by identifying specific hexadecimal string patterns and checking for the presence of RTF header markers at the beginning of the document.
  Updated-Date: '2024_08_07'
RoyalRoad_code_pattern4d:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4e8daf0d8324328d0f3580b4ccd99a42
  Ruleset: securityonion-yara
  Summary: This rule detects weaponized RTF documents associated with RoyalRoad, a tool known for delivering malware through rich text files. The detection is based on a specific hex pattern and the presence of an RTF header at the beginning of the file.
  Updated-Date: '2024_08_07'
RoyalRoad_encode_in_RTF:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6adff517a607d7988be65893252b6338
  Ruleset: securityonion-yara
  Summary: This rule detects RoyalRoad weaponized RTF documents by searching for specific hexadecimal patterns within the file. These patterns, which include both uppercase and lowercase variations, are indicators of the encoded payload used in RoyalRoad exploits. The presence of these markers, combined with the identification of RTF formatting, helps to identify potentially malicious document files associated with RoyalRoad, a tool commonly used to deliver malware through malicious documents.
  Updated-Date: '2024_08_07'
SFXRAR_Acrotray:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f7d9a9d0f8daed93ded7f5aeb4fae060
  Ruleset: securityonion-yara
  Summary: This rule detects a potentially malicious file named "acrotray" associated with a self-extracting RAR archive, related to CloudDuke APT. The rule checks for specific strings such as "winrarsfxmappingfile.tmp," "GETPASSWORD1," "acrotray.exe," and "CryptUnprotectMemory failed." These strings are indicators of the suspicious activity. The detection criteria include the file starting with the magic number 0x5a4d, a typical identifier for executable files, and the file size being less than 2449KB. The hashes listed provide additional references to known malicious files linked to this threat.
  Updated-Date: '2024_08_07'
SHIFU_Banking_Trojan:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ed36c4d50a5261c705355fc43f63bdb9
  Ruleset: securityonion-yara
  Summary: This rule detects the SHIFU Banking Trojan, a malware known for targeting financial institutions. It identifies the presence of specific file paths like "\Gather\Dividerail.pdb" and "\payload\payload.x86.pdb". Additionally, it looks for certain wide and ascii strings related to user privilege levels ("USER_PRIV_GUEST", "USER_PRIV_ADMIN", "USER_PRIV_USER") and other critical identifiers ("PPSWVPP" and "WinSCard.dll"). The detection is triggered if the file starts with the "MZ" header and any of the defined patterns are found.
  Updated-Date: '2024_08_07'
SLServer_campaign_code:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 40865baec0127a54a2d1f63d153d4b01
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific campaign code "wthkdoc0106" within executable files, characterized by identifying the 'MZ' and 'PE' headers. This combination of factors is indicative of certain software or malware, potentially related to the campaign specified by the code.
  Updated-Date: '2024_08_07'
SLServer_command_and_control:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4906f4a0a03a5ba7e78cc979132c2ea3
  Ruleset: securityonion-yara
  Summary: This rule detects malware that communicates with a command-and-control (C2) server by searching for the specific string "safetyssl.security-centers.com" within executable files. It uses criteria such as the presence of an MZ header and a PE signature to identify relevant files.
  Updated-Date: '2024_08_07'
SLServer_dialog_remains:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 44eed649497337268691c426a4ef71ea
  Ruleset: securityonion-yara
  Summary: This rule detects remnants of dialogs related to the SLServer software. It looks for the presence of the string "SLServer" and additional identifiers such as "SLSERVER" or the file path containing "SLServer.pdb". It ensures matches are true positives by checking that the file does not contain certain false-positive indicators like "Dell Inc." or "ScriptLogic Corporation". The rule initiates its detection by validating that the file begins with a standard MZ header and PE signature, ensuring it is a legitimate executable.
  Updated-Date: '2024_08_07'
SLServer_mutex:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 649400e35396069e4bb2c9ef7c51f8c8
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific mutex with the string "M&GX^DSF&DA@F" in a file. It ensures that the file has an MZ header and a PE signature, which are typical characteristics of executable files on Windows systems. This rule is used to identify a particular mutex that may indicate specific software or malware activity.
  Updated-Date: '2024_08_07'
SLServer_unknown_string:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 79fbf21653f64225f8b60b2eeb929f37
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a unique string, "test-b7fa835a39," within executable files that have an MZ header and a valid PE signature.
  Updated-Date: '2024_08_07'
SNOWGLOBE_Babar_Malware:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5115a569528f6b9cea44c0a7405de315
  Ruleset: securityonion-yara
  Summary: This rule detects the Babar Malware associated with the SNOWGLOBE attacks, specifically the file named babar.exe. It identifies characteristic strings such as file paths, user-agent strings, error messages, and command-line usage patterns found in the malware. Additionally, it searches for specific registry keys, environment variables, and typical executable names used by the malware to infiltrate systems. The rule triggers if certain combinations of these unique indicators are found within a file smaller than 1MB.
  Updated-Date: '2024_08_07'
SQLCracker:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ffe0fbb9b8a4179c56b81e74f35cd086
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a Chinese hack tool named SQLCracker, specifically targeting the executable file SQLCracker.exe. It identifies the file by checking for specific strings such as "msvbvm60.dll," "_CIcos," "kernel32.dll," "cKmhV," and "080404B0" within the file. Additionally, it verifies that the file has a PE (Portable Executable) header and a file size of less than 125KB.
  Updated-Date: '2024_08_07'
SQLMap:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b7f2c08e9d7315e3d08a4647a02eb4a3
  Ruleset: securityonion-yara
  Summary: This rule detects the SQLMap SQL injection tool by identifying a specific string pattern present in the tool's source code.
  Updated-Date: '2024_08_07'
SQLTools:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 10aabc76e899c6016c29903dcba18031
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a Chinese hack toolset known as SQLTools.exe. It identifies the tool by searching for specific strings within the file, such as "DBN_POST," "LOADER ERROR," "www.1285.net," "TUPFILEFORM," "DBN_DELETE," and "DBINSERT," as well as a copyright notice from Kibosoft Corp. dated 2001-2006. The rule activates if the file starts with the 'MZ' header, indicating it is a standard Windows executable, and if the file size is less than 2350KB.
  Updated-Date: '2024_08_07'
STNC_php_php:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: cd9cb4411c1b96a9b7bad63188b9554c
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of STNC WebShell, a malicious tool often used for unauthorized access and control of compromised web servers. It identifies specific indicators such as references to "drmist.ru," certain suspicious hidden field patterns in HTML code, the term "STNC WebShell," and a URL leading to a topic on "security-teams.net." The detection focuses on recognizing any one of these strings, which suggests unwanted web shell activity.
  Updated-Date: '2024_08_07'
STUXSHOP_OSCheck:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5fd38417136db87075397aec4682efff
  Ruleset: securityonion-yara
  Summary: This rule detects the OS Check function in the malware families STUXSHOP and CheshireCat by identifying specific byte sequences indicative of this function. The sequences used in the identification process are related to the execution flow and data manipulation within the malware's OS check procedure.
  Updated-Date: '2024_08_07'
STUXSHOP_config:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: cecb8ba39e5dec34c7ce899b4839e50b
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a Stuxshop standalone sample configuration, specifically monitoring for indicators such as particular command and control (C&C) URLs, specific registry keys related to Microsoft Windows' DOS emulation, and specific hexadecimal byte sequences typical of Stuxshop's behavior. The unique C&C URLs include references to IP addresses and domain names that are commonly associated with malicious activities. The registry keys observed, "Software\\Microsoft\\Windows\\CurrentVersion\\MS-DOS Emulation" and "NTVDMParams", are likely used by the malware for persistence or configuration purposes. Additionally, the specific byte sequences detected are known overlaps representing distinctive patterns in the malware's code and behavior.
  Updated-Date: '2024_08_07'
SUSP_APT_MAL_VEILEDSIGNAL_Backdoor_Apr23:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: bfba0035a4252cc743081151d57a5b59
  Ruleset: securityonion-yara
  Summary: This rule detects a specific marker associated with the VEILEDSIGNAL backdoor malware. It identifies patterns of bytes that include an initial marker and two sets of XOR keys used for malicious operations.
  Updated-Date: '2024_08_07'
SUSP_ASPX_PossibleDropperArtifact_Aug21:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 752a19b2dd0d6a8f4e96b91ddab8e94f
  Ruleset: securityonion-yara
  Summary: This rule detects an ASPX file with a non-ASCII header, which is often a result of Microsoft Exchange drop techniques. It looks for specific ASCII string patterns indicating a page language and ensures the file is not larger than 500KB. It also excludes certain file types like ZIP, RAR, GZIP, PE, OLE, PCAP, and CAB by checking specific byte sequences at the beginning of the file. The rule focuses on determining if the first few bytes of the file contain non-ASCII characters, excluding common whitespace and formatting characters.
  Updated-Date: '2024_08_07'
SUSP_Archive_Phishing_Attachment_Characteristics_Jun22_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: be1086750d19762e2af5c5d1a694e34a
  Ruleset: securityonion-yara
  Summary: This rule detects characteristics of suspicious file names or double extensions often found in phishing email attachments. It identifies common deceptive naming patterns such as typical invoice-related terms (e.g., "INVOICE.exePK," "PAYMENT.exePK," "ORDER.exePK") and document file extensions masquerading as executables (e.g., ".doc.exePK," ".pdf.exePK," ".xlsx.exePK"). The rule matches these patterns both in plain and encoded representations, targeting filenames that are typically used in phishing schemes aiming to trick users into believing they are handling safe document files while actually executing malicious code.
  Updated-Date: '2024_08_07'
SUSP_BAT2EXE_BDargo_Converted_BAT:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 18d3171041264e1f7930d52e891a6c42
  Ruleset: securityonion-yara
  Summary: This rule detects binaries created using the BDARGO Advanced BAT to EXE Converter, which is a software tool that converts batch scripts (.BAT) into executable files (.EXE). It identifies specific strings that are indicative of such conversions, including error messages, command-line references, and unique patterns. The rule checks for these strings within binary files under 300KB in size, ensuring reliable detection.
  Updated-Date: '2024_08_07'
SUSP_BAT_Aux_Jan20_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2737840f38bc54669c88b9bfc5a3b16e
  Ruleset: securityonion-yara
  Summary: This rule detects a batch file (BAT) commonly deployed to clean up temporary directories during a system infection. It identifies specific strings related to the deletion of files in user directories, especially within local temporary folders, and checks the presence of particular conditions in the file, like a specified file size and a specific starting byte.
  Updated-Date: '2024_08_07'
SUSP_Bad_PDF:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ddfb7c7d247d3b8b32272002853fdc19
  Ruleset: securityonion-yara
  Summary: This rule detects PDF files that embed code designed to steal NTLM hashes. It identifies suspicious patterns within the PDF, such as certain ASCII strings that indicate the presence of embedded URLs or network paths that could facilitate the hash theft. The rule checks for specific patterns in the file header to verify it is a PDF and then searches for these suspicious strings to flag potential threats.
  Updated-Date: '2024_08_07'
SUSP_Base64_Encoded_Exploit_Indicators_Dec21:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2961d257796ecd650cf9fc0a74a95e59
  Ruleset: securityonion-yara
  Summary: This rule detects base64 encoded strings commonly found in payloads of exploits targeting the log4j vulnerability identified as CVE-2021-44228. It specifically looks for encoded patterns related to the use of 'curl' and 'wget' commands in an exploit attempt, while ensuring the presence of such encoded strings does not falsely match HTML content.
  Updated-Date: '2024_08_07'
SUSP_Base64_Encoded_Hacktool_Dev:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9c5f9a70272f737cc763a8f0560e21a9
  Ruleset: securityonion-yara
  Summary: This rule detects a suspicious base64 encoded keyword commonly associated with hack tools. It identifies specific base64 encoded strings that could indicate the presence of malicious activities or software, especially aimed at evading detection. The rule applies to files smaller than 6000KB.
  Updated-Date: '2024_08_07'
SUSP_Base64_Encoded_Hex_Encoded_Code:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: bde63f17d4bcb67b8037c35a73797db6
  Ruleset: securityonion-yara
  Summary: This rule detects hex encoded code that has been base64 encoded, which may be indicative of attempts to obfuscate malicious code. It searches for specific byte sequences characteristic of such encoded data and excludes known benign patterns associated with Microsoft Azure Code Signing.
  Updated-Date: '2024_08_07'
SUSP_CMD_Var_Expansion:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9492d2cb588e1758dbf206eb5e1e0761
  Ruleset: securityonion-yara
  Summary: This rule detects Office droppers that include a specific variable expansion string in the command line, identified by the presence of " /V:ON". The file is recognized as an Office document by its header (0xcfd0) and its size being less than 500KB. This behavior is indicative of potentially malicious activity utilized in dropping malware through Office documents.
  Updated-Date: '2024_08_07'
SUSP_DOC_LNK_in_ZIP:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b008eb86229806e892bb503976291d23
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a suspicious ".doc.lnk" file within a ZIP archive. The signature specifically looks for the ".doc.lnk" string within the archived files, which is indicative of a potentially malicious shortcut file disguised as a Microsoft Word document. This type of file can be used as a vector for malware distribution, exploiting users' expectation of opening a benign document. The condition in the rule confirms that the file is indeed part of a ZIP archive by checking for the standard ZIP file header.
  Updated-Date: '2024_08_07'
SUSP_DOC_RTF_ExternalResource_EMAIL_Jun22:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7e7db2f4c138e86d3715af79ab2963d9
  Ruleset: securityonion-yara
  Summary: This rule detects suspicious patterns in RTF files that download external resources, as exploited in the CVE-2022-30190 vulnerability, also known as Follina. The rule identifies specific base64-encoded strings within RTF documents that indicate attempts to include external relationships or targets, thereby suggesting potential malicious activity within email attachments. It also checks for files smaller than 400KB, further refining the detection scope.
  Updated-Date: '2024_08_07'
SUSP_DeviceGuard_WDS_Evasion:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4ccf5519e9a7eabc51761d7e72720ab1
  Ruleset: securityonion-yara
  Summary: This rule detects a Windows Debugger (WDS) file that is used to evade Device Guard, a security feature in Windows designed to protect against malware and unauthorized code execution. The rule identifies specific strings that indicate the presence of such a file, ensuring the file size is less than 50KB. These strings include patterns typical of WDS file operations such as setting instruction pointers, breakpoint handling, and command execution within the debugger environment.
  Updated-Date: '2024_08_07'
SUSP_Disable_ETW_Jun20_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: fe224c84e97e0e8ad42214b62ec83d6f
  Ruleset: securityonion-yara
  Summary: This rule detects methods to disable Event Tracing for Windows (ETW) through environment variables and registry manipulations before executing a program. Specific detection signatures include setting `COMPlus_ETWEnabled` to 0 and modifications to the .NET Framework registry entries related to ETW. These techniques can be indicative of attempts to evade system monitoring and logging mechanisms.
  Updated-Date: '2024_08_07'
SUSP_Doc_RTF_ExternalResource_May22:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4f19e8ebf840d7b9af28e7f1c727f184
  Ruleset: securityonion-yara
  Summary: This rule detects suspicious patterns in RTF files that download external resources, specifically targeting behavior associated with the exploitation of CVE-2022-30190, also known as the Follina vulnerability. The rule focuses on identifying RTF files that reference HTML files through the "LINK htmlfile" string pattern, which is indicative of attempts to execute external code via Microsoft Office documents. The conditions for detection include the file's size being under 300KB and the presence of specific ASCII strings within the RTF content.
  Updated-Date: '2024_08_07'
SUSP_Doc_RTF_OLE2Link_EMAIL_Jun22:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a98abdcbfce6591c00da2a8a5a96b1e4
  Ruleset: securityonion-yara
  Summary: This rule detects suspicious patterns in RTF files that could download external resources when included in email attachments. It looks for specific encoded strings that indicate the presence of embedded OLE2 (Object Linking and Embedding) objects, which may be used to link to external content, such as "objdata" and "OLE2Link." The rule also identifies base64-encoded sequences associated with common web protocols like HTTP, HTTPS, and FTP, designed to fetch external resources. The rule is specifically intended to identify these activities within files smaller than 10MB.
  Updated-Date: '2024_08_07'
SUSP_Doc_RTF_OLE2Link_Jun22:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: fa96fc3d8114fada7416f4ed552861c8
  Ruleset: securityonion-yara
  Summary: This rule detects suspicious patterns in RTF files that indicate an attempt to download external resources. It looks for the presence of specific strings within the file that are associated with embedded OLE2 links, which can be used to link to external content. Additionally, it searches for markers indicating a Microsoft Office document format and protocols like HTTP, HTTPS, and FTP, suggesting communication with external servers. The rule aims to identify potential security threats hidden within RTF files by analyzing specific hexadecimal sequences that represent these characteristics.
  Updated-Date: '2024_08_07'
SUSP_Doc_WindowsInstaller_Call_Feb22_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4c3af64010e010f11764d8c884bf5cde
  Ruleset: securityonion-yara
  Summary: This rule detects docfiles that execute Windows Installer, specifically used for deploying ThinBasic scripts. It looks for the presence of certain strings such as "WindowsInstaller.Installer$", "CreateObject," and "InstallProduct," and confirms the detection if all conditions are met.
  Updated-Date: '2024_08_07'
SUSP_Doc_WordXMLRels_May22:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0e438c014848c42baae4fcb3016bce1f
  Ruleset: securityonion-yara
  Summary: This rule detects a suspicious pattern in the `document.xml.rels` file within DOCX files, associated with the CVE-2022-30190 / Follina exploitation. Specifically, it identifies the presence of `<Relationships` and `TargetMode="External"` strings, along with various representations (both plain and encoded) of ".html!" and ".htm!" within files smaller than 50KB in size.
  Updated-Date: '2024_08_07'
SUSP_Double_Base64_Encoded_Executable:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c26fc8cf9538e223f4b3a21eba383ab3
  Ruleset: securityonion-yara
  Summary: This rule detects an executable file that has been encoded using base64 encoding twice. It identifies specific base64 encoded patterns often associated with this double encoding process by searching for specific substrings within the file.
  Updated-Date: '2024_08_07'
SUSP_DropperBackdoor_Keywords:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 33b5058aac1336adc0b51f45e3cc8af8
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of suspicious keywords that indicate a backdoor operation within a file. Specifically, it looks for the term "DropperBackdoor" in both wide and ASCII formats. The condition for detecting this backdoor is that the file must start with the hexadecimal value 0x5a4d, a common signature for executable files, and the file size must be less than 1000KB.
  Updated-Date: '2024_08_07'
SUSP_ELF_Invalid_Version:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1f2e4c2ee5a543379b39a724bffde295
  Ruleset: securityonion-yara
  Summary: This rule detects an ELF file that contains a mangled header, specifically identifying files where the ELF version field has a value greater than what is specified in the standard.
  Updated-Date: '2024_08_07'
SUSP_ELF_LNX_UPX_Compressed_File:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: afa25ca45644d4ea141febc909fdca31
  Ruleset: securityonion-yara
  Summary: This rule detects a suspicious ELF binary that is compressed using the UPX executable packer. It specifically looks for certain ASCII text strings within the binary, such as failure messages related to memory protection and identifiers indicating UPX packing. The rule also imposes file size constraints, targeting files between 30KB and 2000KB, and excludes binaries that contain a specific string related to UCL installation.
  Updated-Date: '2024_08_07'
SUSP_ELF_SPARC_Hunting_SBZ_ModuleStruct:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ee00ce84775a551d32c4924565e21359
  Ruleset: securityonion-yara
  Summary: This rule detects ELF (Executable and Linkable Format) files that are specific to the SPARC architecture by identifying patterns within the ELF headers, specifically targeting the byte sequences 02 02 00 00 01 C1 00 07 and 02 02 00 00 07 00 C1 01. It looks for the presence of these sequences after confirming the file is an ELF file via the magic number 0x7f454c46. This detection may be useful for hunting SPARC binaries and related modules that exhibit these specific characteristics.
  Updated-Date: '2024_08_07'
SUSP_ELF_SPARC_Hunting_SBZ_Obfuscation:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 864eb21249c1332354cd05cd9fa344f7
  Ruleset: securityonion-yara
  Summary: This rule detects ELF files on SPARC architecture that exhibit obfuscation patterns indicative of malicious activity. It specifically looks for the presence of a "SUNW_" string and a sequence of XOR operations used to obscure code, including `xor g3, 0x47, o5`, `xor o5, g1, o5`, and `xor g2, o5, o5`. The rule is intended for hunting purposes and has not been thoroughly tested against a large dataset.
  Updated-Date: '2024_08_07'
SUSP_ELF_SPARC_Hunting_SBZ_UniqueStrings:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6bc89c33a4183350e1d6d43826a29230
  Ruleset: securityonion-yara
  Summary: 'This rule detects suspicious ELF binaries specific to SPARC architecture by identifying unique strings. It flags instances where at least two of the following strings are present: "<%u>[%s] Event #%u: ", "lprc:%08X", "diuXxobB", and "CHM_FW". These strings indicate potential unusual behavior or attributes within the binary, making it valuable for malware hunting and further investigation.'
  Updated-Date: '2024_08_07'
SUSP_ELF_Tor_Client:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: db73c5fc321565c30556fff30334013d
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of VPNFilter malware, which is known to affect network devices. The detection is based on specific error messages and version prompts related to the Tor software, indicating potential compromise. It looks for specific strings within the binary, such as prompts for secret key handling, version cell warnings, and upgrade recommendations, to identify potential malicious activity associated with the malware.
  Updated-Date: '2024_08_07'
SUSP_Email_Suspicious_OneNote_Attachment_Jan23_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 64282c9832888ed222296fe5d0e35a2c
  Ruleset: securityonion-yara
  Summary: This rule detects suspicious OneNote attachments that may embed potentially malicious payloads, such as executables. It identifies these by searching for specific GUIDs associated with OneNote FileDataStoreObject and identifying signatures indicative of embedded executable files. The rule includes checks for the presence of the PE file DOS header, batch script commands like "@echo off," HTML Application (HTA) definitions, and LNK file magic headers. The condition triggers if the file size is under 5MB and any of the specified patterns are present.
  Updated-Date: '2024_08_07'
SUSP_Email_Suspicious_OneNote_Attachment_Jan23_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f78f8202f0bb62402ac64c3bc478b4e5
  Ruleset: securityonion-yara
  Summary: This rule detects suspicious OneNote attachments in emails that have filenames commonly used in phishing attacks, such as "Invoice", "ORDER", "PURCHASE", or "SHIP". It searches for specific hexadecimal patterns and filename indicators within attachments that are smaller than 5MB in size.
  Updated-Date: '2024_08_07'
SUSP_EnableContent_String_Gen:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 01b5362e275db5c7329148889660efdf
  Ruleset: securityonion-yara
  Summary: This rule detects suspicious strings in Office documents that prompt the user to enable active content, which is often indicative of malicious intent. It identifies phrases like "Enable Editing," "Enable Content," and their lowercase variants within the initial 3000 bytes of the document, combined with a specific file header value. These characteristics commonly appear in documents utilized for executing malicious macros.
  Updated-Date: '2024_08_07'
SUSP_Encoded_Discord_Attachment_Oct21_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0f31d283a9b0e4591701a29d4a46e8d5
  Ruleset: securityonion-yara
  Summary: This rule detects suspicious encoded URLs pointing to Discord attachments, which are often employed for hosting malware on a legitimate domain. It identifies various encoded forms such as base64, hexadecimal, and reversed strings associated with the URL pattern used in the Discord app. The rule applies to files smaller than 5000KB and triggers if any specified encoded string is found within the file.
  Updated-Date: '2024_08_07'
SUSP_Excel4Macro_AutoOpen:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: aeac6ce350e1f51c7fbd54bb53ab9580
  Ruleset: securityonion-yara
  Summary: This rule detects the use of Excel4 macros with the "auto open" and "auto close" functionalities, which may indicate malicious automated actions within Microsoft Excel files. It primarily focuses on identifying specific hexadecimal patterns in the file header and content that reflect these macros' execution triggers. The rule is designed to examine Excel files under 3000KB in size and confirms the presence of identifiers characteristic of Excel documents as well as the specific macro commands.
  Updated-Date: '2024_08_07'
SUSP_Excel_IQY_RemoteURI_Syntax:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8031e74839569ea0ebacdb3dc5f3d32f
  Ruleset: securityonion-yara
  Summary: This rule detects files that contain the Excel IQY RemoteURI syntax, which is used to identify potential threats involving Excel web query files. It searches for a specific file header and ensures the file size is less than 1MB while looking for the presence of the string "http" to indicate web-based data sources.
  Updated-Date: '2024_08_07'
SUSP_Four_Byte_XOR_PE_And_MZ:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0757acb47d2e01b46f6c1dde50481259
  Ruleset: securityonion-yara
  Summary: This rule detects executables that have undergone a 4-byte XOR obfuscation, seeking to identify Portable Executable (PE) files that do not start with the usual 'MZ' header. By examining specific file offsets and applying XOR operations, the rule checks for the presence of the PE file header, indicating the detection of potentially obfuscated or malicious software.
  Updated-Date: '2024_08_07'
SUSP_GIF_Anomalies:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8421365b611e21393b98585ba1d8b5cd
  Ruleset: securityonion-yara
  Summary: 'This rule detects files with GIF headers that exhibit format anomalies, suggesting that the image might actually be an obfuscated file of a different type. It identifies such files by checking for specific GIF characteristics: a valid GIF signature in the first three bytes, non-zero values for both the Background Color Index and Pixel Aspect Ratio, and a trailer byte at the end of the file that is not the typical 0x3b, which is commonly found in legitimate GIF files.'
  Updated-Date: '2024_08_07'
SUSP_GObfuscate_May21:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: fa4a7486cdbe3234f43641ebd3ff1199
  Ruleset: securityonion-yara
  Summary: This rule detects binaries that are obfuscated using the gobfuscate tool, which is used to complicate the binary code and make reverse engineering more challenging. The detection is based on specific byte sequences indicative of the obfuscation technique typically employed by this tool, targeting binaries smaller than 50MB in size.
  Updated-Date: '2024_08_07'
SUSP_Hunt_EvtMuteHook_Memory:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 989e14f7e5e6b49d9cdf9df77b104bf1
  Ruleset: securityonion-yara
  Summary: This rule detects a specific memory pattern associated with a hook in the EtwEventCallback function within the Event Viewer service (wevtsv) running in the svchost process. It searches memory for a unique sequence of bytes that indicates the presence of the hook, in order to identify potential tampering or malicious activity in the logging mechanism by comparing two different byte patterns.
  Updated-Date: '2024_08_07'
SUSP_IIS_Config_ProxyShell_Artifacts:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 983803aef619c04b2c1191b052c73d5e
  Ruleset: securityonion-yara
  Summary: This rule detects suspicious virtual directories configured in Internet Information Services (IIS) that point to a ProgramData folder, which is indicative of attacks against Microsoft Exchange servers exploiting ProxyShell vulnerabilities as observed in August 2021. The rule identifies certain markers in IIS configuration files (less than 500KB in size) to flag potentially compromised setups.
  Updated-Date: '2024_08_07'
SUSP_IIS_Config_VirtualDir:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 94fd0501a73c7c14154075572ae54e8b
  Ruleset: securityonion-yara
  Summary: This rule detects suspicious virtual directory configurations in IIS that point to a User folder. It looks for specific markers within IIS configuration files, including site names and section groups, and checks if the physical path is set to a location within the C:\Users directory. The rule aims to identify potential misuse of IIS settings, particularly configurations that could be indicative of malicious activity or exploitation, such as the ProxyShell vulnerability in Microsoft Exchange servers.
  Updated-Date: '2024_08_07'
SUSP_INDICATOR_RTF_MalVer_Objects:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 37cf44ad62de8005c1de39688f6f777f
  Ruleset: securityonion-yara
  Summary: This rule detects RTF documents that have a non-standard version and contain embedded objects frequently associated with exploit documents, such as those exploiting CVE-2017-11882. The rule specifically looks for anomalous RTF header characteristics, including missing characters or identifiers, and the presence of certain embedded objects like `\objhtml` and `\objdata`.
  Updated-Date: '2024_08_07'
SUSP_Imphash_Mar23_3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 42ae17e0a76034fe81467aa92400275d
  Ruleset: securityonion-yara
  Summary: This rule detects malware samples by identifying specific import hash values often associated with malicious software. It scans executable files ensuring their headers match a particular format and checks for the absence of digital signatures. If an executable file's import hash matches one of the predefined import hash values in the rule and it contains no digital signatures, it is flagged as suspicious. This methodology leverages known import hash patterns to identify potentially harmful executables, providing a high reliability rate in detecting malware samples.
  Updated-Date: '2024_08_07'
SUSP_Imphash_PassRevealer_PY_EXE:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 39caf246dfec663b893a6c761a262b28
  Ruleset: securityonion-yara
  Summary: This rule detects an imphash associated with password revealer tools and hack tools, which may also cause some false positives with hardware driver installers. The imphash targeted by this rule is "ed61beebc8d019dd9bec823e2d694afd". It checks for specific strings related to entities such as Assmann Electronic GmbH, Oculus VR, and Corsair's software "efm8load", while ensuring that the file is a PE file with a size less than 10,000 KB.
  Updated-Date: '2024_08_07'
SUSP_JAVA_Class_with_VBS_Content:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 73416eedaf569b8f485e498d7caafda7
  Ruleset: securityonion-yara
  Summary: This rule detects JAVA class files containing strings characteristic of VBS files, such as ".vbs", "createNewFile", and "wscript". It targets the presence of JAVA's "java/lang/String" along with specific VBS-related terms within files smaller than 100KB and verified by initial file signature checks. This is indicative of potentially malicious behavior involving mixed use of JAVA and VBS scripts.
  Updated-Date: '2024_08_07'
SUSP_JDNIExploit_Error_Indicators_Dec21_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1ba7838b24e084ea4eadd763f8b3b2c6
  Ruleset: securityonion-yara
  Summary: 'This rule detects error messages in log files that indicate potential exploitation of the Log4j vulnerability, commonly referred to as Log4Shell. Specific error messages such as "FATAL log4j - Message: BadAttributeValueException:" and "Error looking up JNDI resource" are identified to flag suspicious activity related to the usage of JDNI.'
  Updated-Date: '2024_08_07'
SUSP_JDNIExploit_Indicators_Dec21:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7ae74bc3a4f824ad9e755646b9711a15
  Ruleset: securityonion-yara
  Summary: This rule detects indicators of JDNI exploitation within log files and other payloads by identifying patterns associated with Java Naming and Directory Interface (JDNI) usage. It scans for URLs that conform to various protocols like LDAP, LDAPS, RMI, DNS, and others, followed by specific attack patterns such as Basic/Command/Base64, Basic/ReverseShell, and several memory shell types and deserialization attacks. The condition triggers when these patterns are found in files smaller than 100MB, signaling potential exploitation activities.
  Updated-Date: '2024_08_07'
SUSP_Just_EICAR:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 50027d0e6595cc0980e2ebb596cf0ffd
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the EICAR test file, which is a standard file used for testing antivirus software functionality. The detection is based on specific string patterns and file characteristics, including a particular ASCII string and file size constraints.
  Updated-Date: '2024_08_07'
SUSP_Katz_PDB:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 88e132de384cb012955bcfe19484fd70
  Ruleset: securityonion-yara
  Summary: This rule detects files containing suspicious Program Database (PDB) paths associated with "katz" in either the Release or Debug directories, indicated by specific patterns. It checks for the presence of these patterns and ensures the file is a valid Windows executable with a size less than 6000KB.
  Updated-Date: '2024_08_07'
SUSP_Keepass_CVE_2023_24055_Jan23:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: bc0ee6de21ffd346712d345f01afbf6a
  Ruleset: securityonion-yara
  Summary: This rule detects suspicious triggers defined in the KeePass configuration file, which could indicate the exploitation of CVE-2023-24055. It checks for the presence of specific XML tags such as `<TriggerCollection xmlns:xsi=`, `<Action>`, and `<Parameter>`, provided the file size is less than 200KB.
  Updated-Date: '2024_08_07'
SUSP_LNK_Big_Link_File:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 374dd4a398707a81b7f26bf144542f12
  Ruleset: securityonion-yara
  Summary: This rule detects a suspiciously large LNK file, potentially containing embedded content. It specifically looks for files where the initial 16-bit and 32-bit sequences match certain values indicative of LNK files, and where the total file size exceeds 200KB.
  Updated-Date: '2024_08_07'
SUSP_LNK_Embedded_WordDoc:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 638c135db3d9d7f6150b3471ce84062e
  Ruleset: securityonion-yara
  Summary: This rule detects LNK files indicating the presence of Microsoft Word or an embedded Word document. It identifies a specific file signature (D0 CF 11 E0 A1 B1 1A E1) indicative of a Word document header and searches for a filepath pointing to WINWORD.exe in its default installation directory. The rule applies to files larger than 10KB and checks if these conditions are met.
  Updated-Date: '2024_08_07'
SUSP_LNK_File_AppData_Roaming:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c5098cc89ec865af7dfb11205cdf173c
  Ruleset: securityonion-yara
  Summary: This rule detects a suspicious link file that references the AppData Roaming directory, which is commonly associated with malware persistence methods. It identifies such link files by checking for specific string patterns including "AppData" and "Roaming", verifying that executable file paths are present, and ensuring the file's size is less than 1KB. These characteristics help in identifying potential malicious link files that could be used to execute malware from the user's AppData Roaming directory.
  Updated-Date: '2024_08_07'
SUSP_LNK_File_PathTraversal:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 09176f65261061a0e2ce430910be5912
  Ruleset: securityonion-yara
  Summary: This rule detects a suspicious link file that references a file multiple folders lower than the link itself by identifying a sequence of repeated directory traversal patterns represented as "..\\..\\..\\..\\..\\". This pattern raises suspicion as it suggests the link might be attempting to access a deeply nested file path, which can be indicative of malicious activity. The condition checks specific byte sequences at designated offsets to confirm the file type and size constraints appropriate for potential exploitation links. The context provided refers to known behavior in exploit kits, notably from research into the RIG exploit kit delivering the Grobios trojan.
  Updated-Date: '2024_08_07'
SUSP_LNK_Follina_Jun22:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 56dd4425e54dbd6caae98470ec6bf8f3
  Ruleset: securityonion-yara
  Summary: This rule detects LNK files that contain specific suspicious strings associated with the Follina vulnerability (CVE-2022-30190). It targets files smaller than 5KB, specifically identifying instances where the file begins with particular hexadecimal values and includes references to "msdt.exe", "msdt ", or "ms-msdt:", as well as the string "IT_BrowseForFile=".
  Updated-Date: '2024_08_07'
SUSP_LNK_SmallScreenSize:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1a3fae17514085a25113959cb93491f8
  Ruleset: securityonion-yara
  Summary: This rule detects LNK files configured with a console screen buffer size and window dimensions set to 1x1 pixels.
  Updated-Date: '2024_08_07'
SUSP_LNK_SuspiciousCommands:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f184556b30b72ed39ef3e926240a43dc
  Ruleset: securityonion-yara
  Summary: This rule detects LNK files that contain suspicious content which may indicate potential malicious activity. The rule looks for specific strings and patterns within the LNK files, such as commands and scripts often used in malware execution. These strings include command options like "-decode", "-enc", "-w hidden", and "-ep bypass", which are typically used to obfuscate or hide the execution of malicious code. Other indicators include references to downloading and executing files from the internet, such as ".DownloadString(" and ".DownloadFile(", as well as command sequences commonly found in malicious PowerShell scripts like "IEX(" and "iex(". The presence of scripting elements like "WScript.shell" and command manipulations such as "setlocal EnableExtensions DisableDelayedExpansion" further suggests that the LNK file might be leveraging scripting capabilities to perform unauthorized actions. The combination of these suspicious elements triggers the detection of potentially harmful LNK files.
  Updated-Date: '2024_08_07'
SUSP_LNK_lnkfileoverRFC:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0a3625ce2186630fe6117e61d75e18c3
  Ruleset: securityonion-yara
  Summary: This rule detects Advanced Persistent Threat (APT) shortcut files (.lnk) that perform double extraction and launch routines involving auto-run configurations. These suspicious files utilize the command line executable "cmd.exe" and employ search commands encoded in hexadecimal. Additionally, they contain placeholder base64 encoded strings and use base64 decoding operations within the extraction process.
  Updated-Date: '2024_08_07'
SUSP_LNX_Linux_Malware_Indicators_Aug20_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 33d1e91cdebbf877e97be5ed4555e7d8
  Ruleset: securityonion-yara
  Summary: This rule detects indicators that are commonly observed in Linux malware samples. Specifically, it looks for suspicious commands such as making a file executable with `&& chmod +x`, encoding/decoding with `|base64 -`, usage of the `/tmp` directory, downloading files with `|curl`, and checking the current user with `whoami`. Additionally, the rule includes exceptions for signature strings typically found in legitimate software distribution, such as warranty disclaimers and references to the Free Software Foundation.
  Updated-Date: '2024_08_07'
SUSP_LNX_SH_CryptoMiner_Indicators_Dec20_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ff080719541030c86d05d85b8eecf259
  Ruleset: securityonion-yara
  Summary: This rule detects a helper script associated with a crypto miner campaign. It identifies specific text strings such as "miner running," "miner runing," a command line argument "--donate-level 1," and the URL "pool.minexmr.com:5555." The detection condition is met if the file size is less than 20KB and at least one of these strings is found in the file.
  Updated-Date: '2024_08_07'
SUSP_MAL_EXFIL_Stealer_Output_Characteristics_Sep22_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a007c0a6ad3844305fac8e36b56e8982
  Ruleset: securityonion-yara
  Summary: This rule detects output files typically generated by the RedLine or Racoon stealer malware. It identifies files containing data like passwords, autofills, browser cookies, and wallets characterized by specific naming conventions such as "passwords.txt" and directory structures including "autofills/", "browsers/cookies/", and "wallets/". The rule is particularly focused on files with a specific signature and a size less than 5000KB.
  Updated-Date: '2024_08_07'
SUSP_Macro_Sheet_Obfuscated_Char:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 64339d015d388e38eb6a1b0134728aa7
  Ruleset: securityonion-yara
  Summary: This rule detects hidden or very-hidden Excel macros that employ a substantial number of CHAR functions, which may indicate obfuscation techniques used to conceal malicious content. Specifically, it looks for the presence of OLE markers at the beginning of the file, checks for patterns indicative of macro sheets, and identifies when the CHAR function appears with high frequency within the file.
  Updated-Date: '2024_08_07'
SUSP_Macro_StarOffice:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ab5ecee13b3160aacbedac70454372f7
  Ruleset: securityonion-yara
  Summary: This rule detects suspicious macros within StarOffice files by looking for specific strings and patterns that are typically associated with potentially malicious activity. It searches for keywords such as "StarBasic" and "</script:module>", which are indicative of scripting within StarOffice documents. Additionally, the rule checks for the presence of terms like "Shell", ".Run", ".PutInClipboard", and "powershell" in a case-insensitive manner, which can be signs of commands used to execute or manipulate data. The rule is designed to apply to files smaller than 1MB that begin with the XML declaration and do not contain certain benign strings like "LibreOffice project".
  Updated-Date: '2024_08_07'
SUSP_MalDoc_ExcelMacro:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3230752dd0c1eecb4fd5b9e937153abd
  Ruleset: securityonion-yara
  Summary: This rule detects malicious Excel macros by identifying specific artifacts consistent with macro-based malware in Excel documents. It checks for the presence of certain byte patterns, indicators of URL downloads, and macro paths indicative of potentially harmful behavior. The rule specifies conditions based on file characteristics, such as file size and starting bytes, to identify possibly compromised Excel files that use macros for malicious purposes.
  Updated-Date: '2024_08_07'
SUSP_Microsoft_7z_SFX_Combo:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e42eec560e0cafed50261c78728051f9
  Ruleset: securityonion-yara
  Summary: This rule detects a suspicious file that displays a Microsoft copyright notice and is a 7z self-extracting archive (SFX). The file is identified by the presence of specific strings indicating it is a 7z SFX and an error message associated with 7z, along with a legal copyright statement attributed to Microsoft Corporation within its PE header. This combination of characteristics, including the specific file size constraint, helps flag potentially suspicious files that might masquerade as legitimate Microsoft self-extracting archives.
  Updated-Date: '2024_08_07'
SUSP_Microsoft_Copyright_String_Anomaly_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: fc32ece239cdd321dc9be7bdf88d9a3f
  Ruleset: securityonion-yara
  Summary: This rule detects the Floxif Malware by identifying the presence of a specific string "Microsoft(C) Windows(C) Operating System" within a file. It applies to files that start with the hexadecimal value 0x5a4d and are smaller than 200KB in size.
  Updated-Date: '2024_08_07'
SUSP_Microsoft_RAR_SFX_Combo:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a5a2b78b8f42450ec60555b0b495fe27
  Ruleset: securityonion-yara
  Summary: This rule detects a suspicious file that combines characteristics of a Microsoft legal copyright with a RAR self-extracting archive (SFX). Specifically, it identifies files that contain references to "winrarsfxmappingfile.tmp," "WinRAR self-extracting archive," and "WINRAR.SFX," alongside a PE header marked with the legal copyright string of Microsoft Corporation. These combined indicators suggest the presence of a potentially malicious or otherwise suspicious file masquerading under legitimate-seeming attributes.
  Updated-Date: '2024_08_07'
SUSP_Modified_SystemExeFileName_in_File:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7d3cee114e4a65401044aec4c1449773
  Ruleset: securityonion-yara
  Summary: 'This rule detects the presence of a modified system executable file name, specifically "svchosts.exe", which attackers often use to conceal their activities. The file in question must also meet specific criteria: it starts with the hexadecimal value "0x5a4d" and has a file size of less than 200KB.'
  Updated-Date: '2024_08_07'
SUSP_Msdt_Artefact_Jun22_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d2816ad97bf0e7027c96d8ece686fd94
  Ruleset: securityonion-yara
  Summary: This rule detects a suspicious pattern in MSDT diagnostics logs, which is notably connected to the CVE-2022-30190 vulnerability, also known as Follina exploitation. It identifies specific diagnostic log entries related to the PowerShell script "TS_ProgramCompatibilityWizard.ps1" and other indicative ASCII string patterns such as path traversal and PowerShell expressions. The rule focuses on the presence of an XML file header and critical substrings in the log that suggest potential exploitation attempts through the MSDT service.
  Updated-Date: '2024_08_07'
SUSP_NET_Msil_Suspicious_Use_StrReverse:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 393847c33d04eb29c69c334113737a88
  Ruleset: securityonion-yara
  Summary: This rule detects the suspicious usage of the StrReverse function in .NET applications, which is often associated with the efforts of crypters and malware to evade static string analysis. It identifies the mixed usage of Microsoft.CSharp and Microsoft.VisualBasic libraries and the presence of specific strings, designed to recognize patterns indicating potential obfuscation techniques in files less than 50MB in size.
  Updated-Date: '2024_08_07'
SUSP_NET_NAME_ConfuserEx:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 38bc01965a5e846fa8e5469d8688bd80
  Ruleset: securityonion-yara
  Summary: This rule detects files packed with the ConfuserEx packer by identifying the presence of specific strings such as "ConfuserEx" and "AssemblyTitle" within an executable file. It verifies the file format by checking for the 'MZ' header and 'PE' header, ensuring that both indicators are present before flagging the file.
  Updated-Date: '2024_08_07'
SUSP_NK_MAL_M_Hunting_POOLRAT:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f90cfd55ccc843ca11554cb9f4433a2e
  Ruleset: securityonion-yara
  Summary: This rule detects the VEILEDSIGNAL malware by identifying specific string patterns present in the POOLRAT variant. It looks for keywords such as "name=\"uid\"", "name=\"session\"", "name=\"action\"", and "name=\"token\"" with varying data types among the characters. Additionally, it searches for the string "--N9dLfqxHNUUw8qaUPqggVTpX-", which is indicative of the POOLRAT malware. These strings are examined in both ASCII and wide formats.
  Updated-Date: '2024_08_07'
SUSP_Netsh_PortProxy_Command:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 85f6872b449dc6a3234c0379a2bc9e5e
  Ruleset: securityonion-yara
  Summary: This rule detects a suspicious usage of the `netsh` command, specifically targeting the `portproxy` functionality. This command is associated with setting up port forwarding rules on Windows machines, potentially indicating malicious lateral movement or network manipulation by threat actors.
  Updated-Date: '2024_08_07'
SUSP_NullSoftInst_Combo_Oct20_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8d7c5b22f265b4f5c689a1ad1473553e
  Ruleset: securityonion-yara
  Summary: This rule detects a suspicious combination of the NullSoft Installer containing common copyright strings. It primarily looks for the presence of the "NullsoftInst" string along with one of several well-known copyright holders such as "Microsoft Corporation," "Apache Software Foundation," or "Simon Tatham." The rule also includes specific patterns to avoid matching certain legitimate software like "nsisinstall," registry paths, "Apache Tomcat," "Bot Framework Emulator," "Firefox Helper," "Paint.NET Setup," "Microsoft .NET Services Installation Utility," or a license reference to MPL 2. The rule mandates that the file starts with the hexadecimal value 0x5a4d and has a size of less than 2000KB to meet the detection criteria.
  Updated-Date: '2024_08_07'
SUSP_OBFUSC_JS_Sept21_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6cd3b7dfc946738402ef7d8caa042916
  Ruleset: securityonion-yara
  Summary: This rule detects obfuscated JavaScript code commonly employed in malicious documents attributed to the FIN7 cybercrime group. It identifies specific patterns and functions within the JavaScript, such as the use of `RegExp` with character codes, `charCodeAt`, `substr`, creation of `ActiveXObject`, and manipulation of file deletion and date functions. These characteristics point to sophisticated obfuscation techniques and potentially harmful actions consistent with malware distribution.
  Updated-Date: '2024_08_07'
SUSP_OBFUSC_PowerShell_True_Jun20_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c074b037b3243261c0b0f6603f20ab41
  Ruleset: securityonion-yara
  Summary: This rule detects indicators commonly found in obfuscated PowerShell scripts by searching for variations in how the string "true" is written, using different combinations of special characters within the word. It applies to files smaller than 6000KB.
  Updated-Date: '2024_08_07'
SUSP_Obfuscted_PowerShell_Code:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2a5c463454af71e3f7661833731f1473
  Ruleset: securityonion-yara
  Summary: This rule detects obfuscated PowerShell code by identifying specific string patterns commonly used in obfuscation techniques. It looks for sequences such as `').Invoke(`, `("{1}{0}"`, and `{0}" -f`, indicating the use of `Invoke` method calls and format string manipulation that are characteristic of attempts to disguise malicious scripts. These patterns must appear with a certain frequency for the rule to trigger, highlighting the likelihood of obfuscation.
  Updated-Date: '2024_08_07'
SUSP_OfficeDoc_VBA_Base64Decode:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1807bdd127dc468669ff36aecba1710b
  Ruleset: securityonion-yara
  Summary: This rule detects suspicious VBA code within Microsoft Office documents that utilize Base64 encoding and decoding functions. It specifically looks for the presence of strings such as "B64_CHAR_DICT," "Base64Decode," and "Base64Encode." The rule applies to files smaller than 60KB and uses a condition that checks the file's initial bytes to match a specific pattern. This indicates potential malicious activity involving data obfuscation or encoding, common in malicious macros embedded in Office documents.
  Updated-Date: '2024_08_07'
SUSP_Office_Dropper_Strings:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6c7f3b52c7df955d5172fb98f3197360
  Ruleset: securityonion-yara
  Summary: This rule detects Office droppers that prompt users to enable active content, specifically looking for the keyword "_VBA_PROJECT" and phrases such as "click enable editing" or "click enable content." It targets files under 500KB in size that match these criteria.
  Updated-Date: '2024_08_07'
SUSP_OneNote_Embedded_FileDataStoreObject_Type_Jan23_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d1bc377f1659c1c6442957f2c3f5ce2e
  Ruleset: securityonion-yara
  Summary: This rule detects suspicious embedded file types within OneNote files, specifically targeting various potential threats by identifying unique patterns. It searches for specific GUIDs related to FileDataStoreObjects followed by different types of file signatures such as Portable Executable (PE) files, batch files containing "@echo off" or "@ECHO OFF" commands, VBScript files starting with "On Error Resume" or "on error resume", LNK files, CHM files, and HTML Application (HTA) files indicated by patterns like "<hta:" or "<HTA:". Additionally, it looks for Windows Script File (WSF) signatures starting with "<job ". This detection is applied to OneNote files smaller than 10MB.
  Updated-Date: '2024_08_07'
SUSP_OneNote_Embedded_FileDataStoreObject_Type_Jan23_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0e1671f765e25d825f9f9fb8749998bd
  Ruleset: securityonion-yara
  Summary: This rule detects suspicious embedded file types in OneNote files by identifying specific GUIDs and patterns within the file, such as the presence of the FileDataStoreObject GUID and the "<HTA:APPLICATION " string, particularly in files that are smaller than 5MB.
  Updated-Date: '2024_08_07'
SUSP_PDB_CN_Threat_Actor_May19_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4a2c21548f67e712b9bff0b7c14d631b
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific PDB path associated with Chinese threat actors, particularly the term "C:\\Users\\zcg\\Desktop\\", within executable files smaller than 400KB that start with the "MZ" header, indicative of a Windows PE file.
  Updated-Date: '2024_08_07'
SUSP_PDB_Path_Keywords:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 85aa28074ed5eb3c58844f30a8011e90
  Ruleset: securityonion-yara
  Summary: This rule detects files with suspicious PDB paths, typically associated with shellcode, malware testing, or exploitation artifacts. It searches for specific substrings within PDB paths, such as "Debug\Shellcode," "Release\Shellcode," "shellcode.pdb," "\ShellcodeLauncher," "Fucker.pdb," "\AVFucker\," and "ratTest.pdb." The presence of these substrings may indicate malicious intent, especially in the context of debugging or releasing software intended to exploit vulnerabilities (e.g., "Debug\CVE_" and "Release\CVE_"). This analysis helps identify potential malware or unauthorized code.
  Updated-Date: '2024_08_07'
SUSP_PE_Discord_Attachment_Oct21_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: fb3fb25d974f9783a2f60c5058c48160
  Ruleset: securityonion-yara
  Summary: This rule detects suspicious executable files that include a reference to a Discord attachment URL, specifically "https://cdn.discordapp.com/attachments/". Such references are often used for malware hosting on a legitimate fully qualified domain name (FQDN). The rule triggers if the file is an executable (identified by the magic number 0x5a4d) and is smaller than 5000KB.
  Updated-Date: '2024_08_07'
SUSP_PS1_JAB_Pattern_Jun22_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ee4fb8eef0b5c02621d698b5144ee0ca
  Ruleset: securityonion-yara
  Summary: This rule detects suspicious PowerShell code that is Unicode (UTF-16) encoded and Base64 encoded. Specifically, it targets scripts where the code starts with a dollar sign followed by a single-character variable assignment. The rule looks for specific byte patterns in both ASCII and UTF-16 formats that match common encoding techniques used to obfuscate malicious PowerShell commands. The condition for triggering this detection is when the file size is less than 30MB and at least one of the defined patterns is found.
  Updated-Date: '2024_08_07'
SUSP_PS1_Msdt_Execution_May22:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3dc807902151a119791b66339c0f8349
  Ruleset: securityonion-yara
  Summary: This rule detects suspicious executions of msdt.exe, which is associated with the exploitation of CVE-2022-30190 (commonly known as the Follina vulnerability). It identifies commands including specific keywords and patterns such as "PCWDiagnostic," "msdt.exe," and "ms-msdt," as well as certain argument flags like "/af" and "IT_BrowseForFile." Additionally, it filters out benign instances by excluding files containing specific strings related to "OriginalFilename pcwrun.exe" and "FilesFullTrust." The rule is targeted to files less than 10MB in size.
  Updated-Date: '2024_08_07'
SUSP_Patcher_Keygen_Indicators_Jun15:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6da5770573a6007ddd1ba959063592fc
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of software associated with the CN Honker Pentest Toolset, which includes indicators related to patchers and keygens. It looks for specific ASCII strings such as "<description>Patch</description>", "\\dup2patcher.dll", and "load_patcher" within files smaller than 4000KB that start with the "MZ" header, typically marking the beginning of executable files. The rule is designed to identify potentially suspicious activities or files that may be used in software patching or key generation.
  Updated-Date: '2024_08_07'
SUSP_PowerShell_Caret_Obfuscation_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ac91bf0a1daf68ce9a26225b15474c8f
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of PowerShell commands that are obfuscated using the caret symbol. It identifies patterns where the keyword "powershell" is broken up with optional carets (e.g., "p^o^w^e^r^s^h^e^l^l"), indicating an attempt to evade detection mechanisms.
  Updated-Date: '2024_08_07'
SUSP_PowerShell_IEX_Download_Combo:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4bfccc97602be6d86e83ce38848a024b
  Ruleset: securityonion-yara
  Summary: This rule detects occurrences where PowerShell commands are used to initiate a download via `new-object net.webclient` and subsequently execute the downloaded code with `IEX`. The rule specifically excludes matches that contain references to known benign sources such as "chocolatey.org," "Remote Desktop in the Appveyor," and instances involving the path "/appveyor/".
  Updated-Date: '2024_08_07'
SUSP_PowerShell_String_K32_RemProcess:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c82557930c7efde48f02d239cf09483a
  Ruleset: securityonion-yara
  Summary: This rule detects suspicious PowerShell code associated with using Kernel32, handling remote processes, or injecting shellcode. It specifically looks for telltale strings within PowerShell scripts, such as attempts to allocate memory in a remote process for shellcode, obtaining the handle for Kernel32.dll, and invoking functions like VirtualAllocEx and WriteProcessMemory. Additionally, the rule monitors for patterns indicating failed or successful remote process operations and defines characteristics for these suspicious activities. This combination of criteria helps identify potentially malicious or abnormal PowerShell activities that indicate an ongoing attempt to manipulate processes or inject code remotely.
  Updated-Date: '2024_08_07'
SUSP_Powershell_ShellCommand_May18_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a18316e3450abcc9db6fb9dcc817dd64
  Ruleset: securityonion-yara
  Summary: This rule detects a suspicious PowerShell command line string containing "powershell -nop -ep bypass -Command" in files smaller than 3KB.
  Updated-Date: '2024_08_07'
SUSP_RANSOMWARE_Indicator_Jul20:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3cec0b6e75809d9d6c65835cdbb7ce7d
  Ruleset: securityonion-yara
  Summary: This rule detects ransomware by identifying specific text indicators related to decryption instructions, such as "Decrypt.txt," "DecryptFiles.txt," "DecryptFilesHere.txt," "DECRYPT_INSTRUCTION.TXT," and similar variations. The condition checks for files smaller than 1400KB with a certain byte pattern at the beginning, matching one or more of the specified decryption-related strings.
  Updated-Date: '2024_08_07'
SUSP_RAR_NtdsDIT:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0144060a625ca1dc0eba2c7c9e6010db
  Ruleset: securityonion-yara
  Summary: This rule detects suspicious RAR files that contain either the ntds.dit database file or SAM (Security Account Manager) exports. These indicators are associated with the extraction of sensitive security data. The rule identifies such files by searching for specific signatures and patterns within RAR archives, including the presence of "ntds.dit", as well as hexadecimal sequences corresponding to "SAM0" and "sam0".
  Updated-Date: '2024_08_07'
SUSP_RAR_Single_Doc_File:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b0909392181bff488efb51d18425faff
  Ruleset: securityonion-yara
  Summary: This rule detects suspicious RAR files that contain only a single .doc file. It identifies such files by checking for the specific file signature of RAR archives, confirming that the file size is less than 4000KB, and verifying the presence of a .doc file entry at a calculated position within the RAR archive. The rule also ensures that the RAR archive consists of a single block, which aligns with the characteristics of containing just one .doc file.
  Updated-Date: '2024_08_07'
SUSP_RAR_with_PDF_Script_Obfuscation:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f78893f30730d636accdf4f780e7cd20
  Ruleset: securityonion-yara
  Summary: This rule detects RAR archive files that attempt to disguise themselves using a .pdf extension prefix, followed by potentially malicious script or executable file types such as .vbe, .vbs, .ps1, .bat, or .exe. This behavior is indicative of an attempt to trick users into believing the file is a harmless PDF document, when it may actually contain harmful scripts or executable code.
  Updated-Date: '2024_08_07'
SUSP_Recon_Outputs_Jun20_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: bcc643d500117f0efe6558aa2f77e94a
  Ruleset: securityonion-yara
  Summary: This rule detects the outputs of several commands commonly associated with reconnaissance activities. It identifies specific patterns in the output of commands such as `ipconfig /all`, `ping`, `arp -a`, `netstat`, and `tasklist`. By looking for specific textual strings related to these commands within files smaller than 150KB, the rule aims to identify potential reconnaissance behavior often used by attackers to gather network and system information.
  Updated-Date: '2024_08_07'
SUSP_SFX_RunProgram_WScript:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7760853826fc2e763aaa4190d82075bc
  Ruleset: securityonion-yara
  Summary: This rule detects a suspicious self-extracting file (SFX) associated with the Gamaredon group. It looks for instances where the SFX includes a command to run "wscript.exe" using the "RunProgram" parameter. The rule applies to files that are less than 10,000 KB in size and start with the "MZ" header.
  Updated-Date: '2024_08_07'
SUSP_SFX_cmd:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b5c10763b3a6a066672b3c73afae8b91
  Ruleset: securityonion-yara
  Summary: This rule detects suspicious self-extracting (SFX) archives that are potentially used by the Gamaredon group. It looks for SFX files with a specific 'RunProgram' command syntax hiding a command script within a file size of less than 2000KB and confirms the presence of a 'MZ' header, indicating an executable file.
  Updated-Date: '2024_08_07'
SUSP_Script_Base64_Blocks_Jun20_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: dc313b227acaff0b8e9fa91cd7d0ec89
  Ruleset: securityonion-yara
  Summary: This rule detects suspicious files containing base64 encoded payloads presented in blocks, specifically by identifying the presence of script tags with language attributes and a distinct pattern of encoded data.
  Updated-Date: '2024_08_07'
SUSP_Script_Obfuscation_Char_Concat:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: bb6581e39c7feaebc08ef09fbd4b37b9
  Ruleset: securityonion-yara
  Summary: This rule detects obfuscated scripts by identifying specific character concatenation patterns, such as the concatenation of individual letters to form the word "script". This technique is commonly used to evade detection by security software.
  Updated-Date: '2024_08_07'
SUSP_Solarwinds_SUNBURST_Revoked_Cert:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a6aa7b7a4a9723051b7605fc9187ec32
  Ruleset: securityonion-yara
  Summary: This rule detects executable files that are signed with a compromised Symantec Class 3 SHA256 Code Signing CA certificate issued after January 1, 2019. The rule looks for executables containing specific issuer details and a particular serial number in their digital signatures. Such executables may be associated with the SUNBURST malware, which was part of the SolarWinds supply chain attack.
  Updated-Date: '2024_08_07'
SUSP_TH_APT_UNC4736_TradingTech_Cert_Apr23_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 02c2949512c2521f80f69201cb1a55f9
  Ruleset: securityonion-yara
  Summary: This rule detects software samples signed with the compromised Trading Technologies certificate issued by "Trading Technologies International, Inc" and validated by "Go Daddy Secure Certificate Authority - G2" if the signing occurred after May 1, 2022.
  Updated-Date: '2024_08_07'
SUSP_TINY_PE:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4c31fd9290be6fb35e8003f479492d0b
  Ruleset: securityonion-yara
  Summary: This rule detects a Tiny PE (Portable Executable) file by identifying specific byte patterns in the file header. It looks for the 'MZ' and 'PE' signature bytes at the start of the file and ensures the file size is 20KB or less, which is characteristic of Tiny PE files.
  Updated-Date: '2024_08_07'
SUSP_Two_Byte_XOR_PE_And_MZ:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8a4ca8a9d809e03660798b45188ce9ed
  Ruleset: securityonion-yara
  Summary: This rule detects files that are potentially obfuscated by a two-byte XOR operation, specifically targeting Portable Executable (PE) files. It checks if the XOR operation with a specific pattern at offset 0 does not match the typical 'MZ' signature, and then further validates if the XOR operation on other critical PE header parts result in a valid PE file signature ('PE'). If these conditions are met, it indicates that the file may have been altered using a two-byte XOR technique.
  Updated-Date: '2024_08_07'
SUSP_VBA_FileSystem_Access:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d68c5e8e262cdb98a69d70041a0ac913
  Ruleset: securityonion-yara
  Summary: This rule detects suspicious Visual Basic for Applications (VBA) code that interacts with the filesystem by writing to disk and becomes active when a document is opened. It looks for specific indicators such as the presence of "Scripting.FileSystemObject" and references to common Microsoft Shared files. Additionally, it checks for VBA document open-related triggers like "Document_Open," "AutoOpen," or usage of "WScript.Shell." The conditions for this rule include a specific file type identifier and size constraints.
  Updated-Date: '2024_08_07'
SUSP_VEST_Encryption_Core_Accumulator_Jan21:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8a12c7ba0e429c1eb2c47a36c5adb3b1
  Ruleset: securityonion-yara
  Summary: This rule detects the VEST encryption core accumulator in a Portable Executable (PE) file, which is commonly associated with the Lazarus malware. It identifies specific hexadecimal patterns within the file and checks for the presence of the 'MZ' header, which signifies the start of a PE file. By matching at least one of the defined patterns, the rule aims to flag files that potentially contain this encryption core used by Lazarus, a well-known cyber threat group.
  Updated-Date: '2024_08_07'
SUSP_VHD_Suspicious_Small_Size:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 154bcd814337918a39686ace7b7257e4
  Ruleset: securityonion-yara
  Summary: This rule detects suspicious VHD files by identifying specific hexadecimal and string patterns associated with these files. It checks for the presence of particular hexadecimal sequences related to "connectix" and phrases indicative of VHD file structures and errors. Additionally, the rule filters files based on their size, targeting those between 1KB and 4000KB. It excludes files that start with the common "MZ" header found in executable files. The intent is to flag VHD files that fall within these criteria as potentially suspicious.
  Updated-Date: '2024_08_07'
SUSP_VulnDriver_HP_Hardware_Diagnostics_Etdsupp_May23:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1f6eb766aca183a11954c873959dbd04
  Ruleset: securityonion-yara
  Summary: This rule detects vulnerable versions of the HP Hardware Diagnostics driver (etdsupp.sys) by examining specific strings and metadata within the Portable Executable (PE) file format. It checks for the presence of the "etdsupp.sys" string in the original filename metadata, the "etdsupp.pdb" string associated with debug symbols, and version information patterns indicating vulnerability. The rule ensures that the file is a PE format file by verifying the "MZ" header, checks certain header values, and restricts detection to files smaller than 100KB in size, confirming all specified patterns are present.
  Updated-Date: '2024_08_07'
SUSP_WER_Critical_HeapCorruption:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4ba04ed91f9c65fd03e88679835f50ae
  Ruleset: securityonion-yara
  Summary: This rule detects a crashed application that failed due to a heap corruption error, which may indicate exploitation. It searches for specific wide strings within the application, including "ReportIdentifier=" and ".Name=Fault Module Name," alongside the error code "c0000374" associated with heap corruption. The rule triggers if these conditions are met within the application's crash report.
  Updated-Date: '2024_08_07'
SUSP_WER_Suspicious_Crash_Directory:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c0eb1da34c8240c5e88ba6b4cfe84697
  Ruleset: securityonion-yara
  Summary: This rule detects instances where a crashed application is executed from potentially suspicious directories, highlighting abnormal activity that deviates from typical application paths. It identifies crash reports containing specific strings related to application paths and fault module names. The rule differentiates normal execution paths, like those starting with "C:\Windows," "C:\Program," "C:\Python," and "C:\Users," from suspicious ones. Specifically, it targets suspicious paths including "C:\Users\Public," "C:\Users\Default," and certain "AppData" directories under user profiles, while also considering unusual paths like executables directly in root directories. This detection aims to identify malicious software behavior that might abuse these less common directories.
  Updated-Date: '2024_08_07'
SUSP_Win32dll_String:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 27f50a58ee35c335884b2d5b0cc6451f
  Ruleset: securityonion-yara
  Summary: This rule detects executables containing the suspicious string "win32dll.dll" with a specified file size of less than 60KB.
  Updated-Date: '2024_08_07'
SUSP_WordDoc_VBA_Macro_Strings:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 05e9fa0bbde58ee1eaec395f50b55f28
  Ruleset: securityonion-yara
  Summary: 'This rule detects suspicious strings within Word documents that indicate the malicious use of VBA macros. The presence of patterns such as "\Microsoft Shared\", "\VBA\", "Microsoft Office Word", and "PROJECTwm" are searched for, along with terms like "AppData", "Document_Open", "Project1", and "CreateObject". These strings suggest potential manipulation or exploitation via VBA macros in documents that meet specific criteria: beginning with certain header bytes and having a file size below 800KB.'
  Updated-Date: '2024_08_07'
SUSP_XMRIG_Reference:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 87e4699b597bb78fcfa0388b9a47df86
  Ruleset: securityonion-yara
  Summary: This rule detects an executable file containing a reference to the XMRIG crypto miner, characterized by the presence of the string "\xmrig\". The file must start with the hexadecimal value 0x5a4d, indicating it is a Windows executable, and its size must be less than 2000KB.
  Updated-Date: '2024_08_07'
SUSP_XMRIG_String:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b81077994b2f61d300a050d58f437e32
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a suspicious XMRIG cryptocurrency miner executable string within a file. It identifies files by searching for the specific string "xmrig.exe" and applies this detection only if the file starts with the hexadecimal value 0x5a4d, which indicates a PE file, and the file size is less than 2000KB.
  Updated-Date: '2024_08_07'
SUSP_XORed_MSDOS_Stub_Message:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9b0e7c57d8e08454592518a28897d03c
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of suspicious XORed MSDOS stub messages in executable files, specifically looking for the phrases "This program cannot be run in DOS mode" and "This program must be run under Win32." The rule identifies files containing these phrases in an XORed format while excluding those containing the same phrases in non-XORed format, to flag potentially obfuscated executable files.
  Updated-Date: '2024_08_07'
SUSP_XORed_Mozilla:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 05758465e30aa918a0d7c7097d50fc34
  Ruleset: securityonion-yara
  Summary: This rule detects a suspicious single-byte XORed keyword "Mozilla/5.0" in both ASCII and wide character encoding. It identifies this pattern even if the exact keyword is not found in unencoded form. The rule includes context strings related to "Sentinel Labs" and "<filter object at" commonly associated with Norton Security, ensuring that these are not present to avoid false positives.
  Updated-Date: '2024_08_07'
SUSP_ZIP_ISO_PhishAttachment_Pattern_Jun22_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 32d17839ddfa7c7825280c27a47fcef4
  Ruleset: securityonion-yara
  Summary: This rule detects suspicious small base64 encoded ZIP files that are typically found as MIME email attachments containing .iso files. These ZIP files, often no larger than 2000KB, are commonly used in phishing attacks. The rule identifies specific patterns in the base64 encoding indicative of ZIP file structure and the presence of .iso files within these archives.
  Updated-Date: '2024_08_07'
SUSP_ZIP_LNK_PhishAttachment_Pattern_Jun22_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6165ab28d71633dc7440a3ac47ad418e
  Ruleset: securityonion-yara
  Summary: This rule detects suspicious small ZIP files, specifically those under 2KB in size, that contain a .lnk file near the end of the file, suggesting phishing attachment characteristics.
  Updated-Date: '2024_08_07'
SUSP_autocad_lsp_malware:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e2c1b1d72237fe09ea19d40e13fbdb75
  Ruleset: securityonion-yara
  Summary: This rule detects malicious AutoCAD files written in LISP, specifically targeting obfuscated and potentially harmful scripts. It identifies patterns of obfuscation using repetitive character encoding and list-to-string transformations. The rule also scans for common LISP functions and commands such as "strcat," "write-line," "open," and filenames resembling "acad*.lsp." Additionally, it looks for registry manipulation and object creation functions. The condition imposes a file size limit and checks if the file starts with a specific byte pattern, ensuring the rule applies to relevant files under 1MB.
  Updated-Date: '2024_08_07'
SUSP_certificate_payload:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: aadf9f3acb6809bb82c214a2b292b37f
  Ruleset: securityonion-yara
  Summary: This rule detects payloads that disguise themselves as certificates by identifying files containing the string "-----BEGIN CERTIFICATE-----" at the beginning, followed by specific conditions for the subsequent bytes to ensure it is not a legitimate certificate. The rule checks certain byte positions to exclude files with a typical certificate structure, thereby focusing on deceptive payloads instead of actual certificates.
  Updated-Date: '2024_08_07'
SUSP_shellpop_Bash:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: aaf0d5e25d86d659cba13d4b36760c2f
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a suspicious Bash command that attempts to establish a reverse shell connection by redirecting the input and output to a TCP connection. The specific command pattern it identifies is "/bin/bash -i >& /dev/tcp/".
  Updated-Date: '2024_08_07'
SVG_LoadURL:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d20e1e5b98db8b4c81bc1efe3fff2619
  Ruleset: securityonion-yara
  Summary: This rule detects a small SVG file that contains an embedded URL loader, typically associated with CryptoWall malware infections. It looks for specific elements within the file, such as the closing `</svg>` tag, a `<script>` tag, and a script that initiates a URL redirect using `location.href`. The rule triggers when these elements are all present and the file size is under 600 bytes.
  Updated-Date: '2024_08_07'
S_MultiFunction_Scanners_s:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 167519a320fe4a739b0c52c95af3f433
  Ruleset: securityonion-yara
  Summary: This rule detects a Chinese hacktool set associated with the executable file "s.exe." It looks for specific strings in the code, such as references to "C:\WINDOWS\temp\pojie.exe" and "C:\WINDOWS\temp\s.exe," as well as URLs like "http://www.hackdos.com." The tool also checks for error messages like "Failed to read file or invalid data in file!" and "The interface of kernel library is invalid!" Additionally, it searches for strings that indicate decompression failures and specific references to programs like "eventvwr" and "NOTEPAD.EXE result.txt." The executable's specific traits, such as matching certain hash values and file signature details, are also considered.
  Updated-Date: '2024_08_07'
Safe0ver_Shell__Safe_Mod_Bypass_By_Evilc0der_php:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b61cf7e9e9e87fbb4ca0096acfe1bc32
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a PHP file known as "Safe0ver Shell - Safe Mod Bypass By Evilc0der." The script contains specific strings such as "Safe0ver", the Turkish phrase "Script Gecisi Tamamlayamadi!", and a sequence of encoded HTML/JavaScript. These characteristics indicate that the PHP file is designed to bypass Safe Mode restrictions in web servers for unauthorized access or control.
  Updated-Date: '2024_08_07'
Safe_Mode_Bypass_PHP_4_4_2_and_PHP_5_1_2_php:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7e83bad26f3bc80ec3e619585d4f953c
  Ruleset: securityonion-yara
  Summary: This rule detects a malicious PHP script designed to bypass safe mode restrictions in PHP versions 4.4.2 and 5.1.2. The script includes a welcome message indicating that it allows users to operate in a safe mode-enabled environment and references a "Mode Shell v1.0" component. Additionally, it contains a loaded PHP component associated with an individual using the email address <xb5@hotmail.
  Updated-Date: '2024_08_07'
Sality_Malware_Oct16:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7855b1b1d0405395eb31ef9128602a97
  Ruleset: securityonion-yara
  Summary: This rule detects an unspecified malware variant present since October 2016 by looking for specific indicators. It searches for the presence of the strings "Hello world!" in wide format and "[LordPE]" in ASCII format within files smaller than 300KB that start with the hexadecimal value 0x5a4d, which indicates a Windows executable.
  Updated-Date: '2024_08_07'
Saudi_Phish_Trojan:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: cfe393b44676d146bea2059882a3bcba
  Ruleset: securityonion-yara
  Summary: This rule detects a trojan used in Saudi Aramco phishing attacks. The detection focuses on specific hexadecimal patterns within the file, validating the presence of the characteristic pattern in the file content and checking for certain properties like file size and file type.
  Updated-Date: '2024_08_07'
ScanBox_Malware_Generic:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 924320e218dc8fb5d20af762d50bbc45
  Ruleset: securityonion-yara
  Summary: This rule detects the ScanBox malware, which is associated with the Chinese Deep Panda Advanced Persistent Threat (APT) group. It identifies specific malicious activities including network communications to certain URLs and the presence of indicators like "HttpDump 1.1," "SecureInput .exe," and paths related to "svchost.exe" with unusual parameters. Additionally, it looks for specific keywords related to certificates and entities such as "Management Support Team1" and "DTOPTOOLZ Co.,Ltd.0," as well as location identifiers like "SEOUL1." The rule triggers detection based on a combination of these malicious strings and keywords.
  Updated-Date: '2024_08_07'
Scarcruft_malware_Feb18_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9b8fc67403033fa124dc0347c26708d8
  Ruleset: securityonion-yara
  Summary: This rule detects Scarcruft malware, specifically a variant from February 2018. It identifies the malware based on the presence of specific strings within the file, such as a file path reminiscent of user directories ("d:\\HighSchool\\version 13\\2ndBD\\T+M\\") and a command execution string that pings a local IP address ("cmd.exe /C ping 0.1.1.2"). The rule further ensures that the file is a Windows executable (indicated by the "MZ" magic number at the beginning of the file) and is less than 2MB in size.
  Updated-Date: '2024_08_07'
SeDLL_Javascript_Decryptor:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 568c1a319c7dc186c20080f05785902c
  Ruleset: securityonion-yara
  Summary: This rule detects a malicious DLL known as SeDLL, which is used to decrypt and execute another JavaScript-based backdoor, such as Orz. The rule identifies specific strings associated with SeDLL, including "SEDll_Win32.dll," commands related to "regsvr32," references to "WScript," and patterns indicative of functions like "PutBlockToFileWW" and "CheckUpAndDownWW." The detection condition considers file headers and size constraints to ensure accurate identification.
  Updated-Date: '2024_08_07'
SeaDuke_Sample:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: dc46965ac3cdaefd454cd8b13bbff740
  Ruleset: securityonion-yara
  Summary: This rule detects the SeaDuke malware by identifying specific strings within a file. The presence of "bpython27.dll," "email.header(" (flagged by PEStudio Blacklist), "LogonUI.exe" (also flagged by PEStudio Blacklist), "Crypto.Cipher.AES(", and "mod is NULL - %s" helps in identifying the malware. Additionally, the file must have a size less than 4000KB and start with the bytes 0x5a4d, indicating it is a PE file.
  Updated-Date: '2024_08_07'
SecurityXploded_Producer_String:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4efff06628594d8cea03e7eca3b8b9df
  Ruleset: securityonion-yara
  Summary: This rule detects hacktools developed by SecurityXploded by identifying references to the URL "http://securityxploded.com" within executable files. The condition for detection is that the file's initial bytes match a specific signature, confirming its type, before checking for the URL string.
  Updated-Date: '2024_08_07'
Servantshell:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a3a42ce4861835f5e6c07ca9b5ab0d7e
  Ruleset: securityonion-yara
  Summary: This rule detects Servantshell malware by identifying specific code patterns and file names associated with it. The rule looks for occurrences of "SelfDestruction.cpp," "SvtShell.cpp," "InitServant," "DeinitServant," and "CheckDT" within a file that starts with the standard DOS header for executable files.
  Updated-Date: '2024_08_07'
SetupBDoor:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: aefa6e8079211dc673a5b0cf4d1b074c
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the malicious file "SetupBDoor.exe," which is associated with webshells. The rule identifies this file by looking for the specific string "\\BDoor\\SetupBDoor" within the file.
  Updated-Date: '2024_08_07'
ShadowPad_nssock2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ba56dd2031b5dfce8b59d91e9d07ec27
  Ruleset: securityonion-yara
  Summary: This rule detects malicious instances of the nssock2.dll file associated with the ShadowPad incident. It identifies potential threats by checking if the file size is less than 500KB, the file format starts with the hexadecimal signature 0x5a4d, and if the import hash matches specific known values linked to malicious versions of this DLL. This detection is crucial for identifying and mitigating risks posed by the ShadowPad malware in corporate networks.
  Updated-Date: '2024_08_07'
Shamoon2_ComComp:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 78f6d7afbae0d26b4431435b8030504e
  Ruleset: securityonion-yara
  Summary: This rule detects Shamoon 2.0 Communication Components by identifying specific strings and operation code patterns within executable files. The strings include command-line syntax for making directories and specific parameterized strings, while the operation code patterns involve sequences related to file and process manipulation. It ensures the identified file is an executable (indicated by the "MZ" header) and that its size is less than 500KB.
  Updated-Date: '2024_08_07'
Shamoon2_Wiper:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 523121fc550898cd534cba8ca92cca2e
  Ruleset: securityonion-yara
  Summary: This rule detects the Shamoon 2.0 Wiper component, a destructive malware known for its data-wiping capabilities. It looks for specific patterns within executable files, such as particular wide strings and identifiers related to the system directories and raw disk accesses. The rule also includes conditions based on the file header and size to ensure accurate detection.
  Updated-Date: '2024_08_07'
SharpCat:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 407d51d8765016b331ad886a7eff000e
  Ruleset: securityonion-yara
  Summary: This rule detects the file "SharpCat.exe," a command shell utility used for remote administration. It searches for specific strings within the file, such as "ShellZz," the path "C:\\Windows\\System32\\cmd.exe," and the term "currentDirectory." The rule applies to files that start with the magic number '0x5a4d' and have a file size of less than 20 KB.
  Updated-Date: '2024_08_07'
Sharpire:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 04a3f08b0abd9fea9bf89e7181c44c4d
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the Sharpire malware, which is a specific executable named "Sharpire.exe". It identifies this malware by looking for various strings within the file, including a debug path reference to "Sharpire.pdb", success messages related to file uploads, specific shell command prompts, and error messages associated with stopping a job. Additionally, the rule checks for file size constraints and the presence of a DOS header to ensure accurate detection.
  Updated-Date: '2024_08_07'
ShellCrew_StreamEx_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7ba0d2d8f96a414a3bea612256f63ce9
  Ruleset: securityonion-yara
  Summary: This rule detects the ShellCrew malware, which utilizes various specific strings and file paths in its operations. It identifies executions involving "cmd.exe /c" commands, paths involving "uac\\bin\\install_test.pdb", and references to "AdobeBak\\Proc.dat" and "$\\data.ini". The rule also looks for error messages related to uncompression failures and development paths like "e:\\workspace\\boar". Detection is contingent on these attributes within executable files smaller than 1000KB and bearing a specific header.
  Updated-Date: '2024_08_07'
ShellCrew_StreamEx_1_msi:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: dba77e7b87b6007a61bce2b573264e95
  Ruleset: securityonion-yara
  Summary: This rule detects the ShellCrew malware variant known as StreamEx by identifying specific strings associated with it, such as "msi.dll.eng", "ahinovx", and other unique sequences. The detection focuses on files with a PE header, a size of less than 20KB, and containing at least three of these distinctive strings.
  Updated-Date: '2024_08_07'
ShellCrew_StreamEx_1_msi_dll:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9e2bc149d6248e1f820130cf6d0fa26b
  Ruleset: securityonion-yara
  Summary: This rule detects a specific variant of the ShellCrew malware by identifying Microsoft Installer (MSI) or dynamic link library (DLL) files based on predefined characteristics. It scans for the presence of certain ASCII strings, "NDOGDUA" and "NsrdsrN," within files smaller than 300KB that start with a particular hexadecimal value (0x4d9d).
  Updated-Date: '2024_08_07'
Shell_Asp:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: bfb018b12d9c2de81b04e59fc67f9c55
  Ruleset: securityonion-yara
  Summary: This rule detects a specific Chinese hacktool webshell identified as Asp.html. It searches for the presence of certain strings within a file smaller than 100KB. These strings include "Session.Contents.Remove(m & \"userPassword\")", "passWord = Encode(GetPost(\"password\"))", and "function Command(cmd, str){". These indicators suggest the file may be used for unauthorized remote command execution and password manipulation.
  Updated-Date: '2024_08_07'
Shellcode_APIHashing_FIN8:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 35a4cc950543699083e3dcb19621ef87
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of FIN8 malware by identifying specific API hashing patterns within 32-bit and 64-bit shellcode. The rule checks for multiple distinct byte sequences used by FIN8 to obscure API calls, enabling the detection of malicious code that employs these hashing techniques.
  Updated-Date: '2024_08_07'
Shifu_Banking_Trojan:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 41543b67eb1ef66a3e68e2e49837e18c
  Ruleset: securityonion-yara
  Summary: This rule detects the Shifu Banking Trojan, which is a sophisticated malware targeting 14 Japanese banks. The detection is based on specific file paths and strings within a file, including ASCII and wide strings such as recognizable phrases and API function names. The rule is designed to identify files with a particular signature and size, leveraging both unique and common strings found within potential Shifu Trojan files.
  Updated-Date: '2024_08_07'
Sig_RemoteAdmin_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f1af715cfaba4fc65946e587eff3ecfe
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of remote administration software specifically "Radmin" or "Radmin 3.0" by looking for matching wide strings within an executable file. The rule applies to files that start with the "MZ" header, typical of Windows executables, and are smaller than 3000KB in size.
  Updated-Date: '2024_08_07'
Silence_malware_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a7aefac496e2a567e5d6e80c0c0f67dc
  Ruleset: securityonion-yara
  Summary: This rule detects a specific malware sample referenced in the Silence report on Securelist. The malware is identified by various indicators, including the presence of the file name "adobeudp.exe" in both wide and ASCII representations, references to executable files with identifiers, and strings associated with Windows' autorun registry keys. It also looks for specific copyright text, a URL format used by the malware, and a unique identifier. The malware's PE import hash and file characteristics, such as being an executable with a common file format header and a size under 200KB, are also examined to confirm its presence.
  Updated-Date: '2024_08_07'
Silence_malware_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ada037c106b0efe7d05cfdcdfff6c6f0
  Ruleset: securityonion-yara
  Summary: This rule detects a specific malware sample referenced in the Silence report, which is detailed on Securelist. The malware is identified through a combination of specific strings and file path patterns associated with the Silence malware, such as "\\ScreenMonitorService\\Release\\smmsrv.pdb" and "\\\\.\\pipe\\{73F7975A-A4A2-4AB6-9121-AECAE68AABBB}" as well as error messages and filenames that the malware creates or uses. This detection also considers the unique import hash of the executable.
  Updated-Date: '2024_08_07'
SimAttacker___Vrsion_1_0_0___priv8_4_My_friend_php:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 979ab062c434b519b4c66615d3256531
  Ruleset: securityonion-yara
  Summary: This rule detects a PHP file associated with "SimAttacker" version 1.0.0, customized for a specific user labeled "priv8 4 My friend." The detection is based on specific text strings within the file, such as a welcome message for "SimAttacker," and an HTML anchor tag reference commonly found in file management interfaces. This suggests the rule is targeting a particular variant of a web-based attack tool.
  Updated-Date: '2024_08_07'
SimShell_1_0___Simorgh_Security_MGZ_php:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 330663fd076017a51667a37da142f067
  Ruleset: securityonion-yara
  Summary: This rule detects the SimShell 1.0 web shell, associated with Simorgh Security Magazine, by identifying specific strings within a file. The strings include mentions of "Simorgh Security Magazine", "Simshell.css", a particular `ereg` function usage with a command parameter, and a URL to "www.simorgh-ev.com". The detection is confirmed if at least two of these indicators are found in the file.
  Updated-Date: '2024_08_07'
Simple_PHP_BackDooR:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a12d4d229744d35ab6d4f8ffeb625a2d
  Ruleset: securityonion-yara
  Summary: This rule detects a simple PHP backdoor webshell. The identifying characteristics include an HTTP request string that dynamically generates a URL based on the server name and request URI, a function that handles the uploading and moving of files to a specified directory, and a comment within the code that identifies it as a simple PHP backdoor.
  Updated-Date: '2024_08_07'
Sincap_php_php:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: db631b4f224dd2111e3b9d99bbd13eca
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a potentially malicious PHP script file, identified by the filename pattern "Sincap.php.php.txt." The rule searches for specific suspicious behaviors and strings within the file, such as the command to open a file in the "/tmp" directory, a specific variable assignment operation, and the presence of an email address from the "aventgrup.net" domain. These indicators suggest the involvement of data manipulation and possible data exfiltration activities commonly associated with web shell or backdoor malware.
  Updated-Date: '2024_08_07'
Sleep_Timer_Choice:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7fcfb7bf590ee391566579bb4d357846
  Ruleset: securityonion-yara
  Summary: This rule detects a specific malware identified in an NCSC report, utilizing a particular hash signature and a byte sequence pattern to identify malicious files. The rule targets files with a specific PE header, indicating they are executable files, and applies to those smaller than 1000KB in size.
  Updated-Date: '2024_08_07'
Slingshot_APT_Malware_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 424f6e5d45c85478f8cd84fc70b8df53
  Ruleset: securityonion-yara
  Summary: This rule detects malware associated with the Slingshot APT, which is identified by specific characteristics in executable files. These include the presence of particular strings such as "SlingDll.dll" and "BogusDll.", and the text "smsvcrt -h 0x%p" in wide encoding. The targeted files start with the hexadecimal value 0x5a4d, are smaller than 700KB, and may have an import hash matching "7ead4bb0d752003ce7c062adb7ffc51a" or an export name consisting of a long sequence of 'W' characters followed by '0000'.
  Updated-Date: '2024_08_07'
Slingshot_APT_Malware_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b58f5754a329e4bf33e5152550edc9dd
  Ruleset: securityonion-yara
  Summary: This rule detects malware associated with the Slingshot APT by searching for specific indicators within executable files. It identifies a unique file path, a distinct byte sequence, and several specific strings within files smaller than 900KB. Detection criteria include a matching header signature and any of the targeted sequences or patterns in the file content. These indicators are characteristic of the Slingshot APT's malicious activity, aiding in its identification during security scans.
  Updated-Date: '2024_08_07'
Slingshot_APT_Malware_3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4a11def2cc68ef4186f97b22050c2f98
  Ruleset: securityonion-yara
  Summary: This rule detects a specific malware associated with the Slingshot Advanced Persistent Threat (APT) group. It identifies files smaller than 100 KB that start with the 'MZ' header, commonly used in executable files. The rule looks for files with an import hash of "2f3b3df466e24e0792e0e90d668856bc", the exported function named "dll_u", or the presence of the string "chmhlpr.dll" along with certain patterns of encoded characters.
  Updated-Date: '2024_08_07'
Slingshot_APT_Malware_4:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9bf5d8d0f949c54cd968445f10185f2f
  Ruleset: securityonion-yara
  Summary: This rule detects malware associated with the Slingshot APT group. It identifies specific patterns within a file, including particular strings and file paths related to the malware's operations. Notable indicators include command strings, references to the term "Slingshot," and file structures reminiscent of the malware's components. The rule is triggered if a file starts with the hexadecimal value 0x5a4d, has a size less than 1000KB, and contains these specified identifiers.
  Updated-Date: '2024_08_07'
Slingshot_APT_Minisling:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3bf620ecb25e284f677313dfd551f0f1
  Ruleset: securityonion-yara
  Summary: This rule detects malware associated with the Slingshot Advanced Persistent Threat (APT) group. The detection criterion includes the presence of a specific unique identifier string "{6D29520B-F138-442e-B29F-A4E7140F33DE}" and conditions requiring the file to have a specific header (`0x5a4d`), indicating it is a Portable Executable (PE) file, and to be smaller than 3000KB in size.
  Updated-Date: '2024_08_07'
Slingshot_APT_Ring0_Loader:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 878c4db4cdcda5680741a0e9cec8cd96
  Ruleset: securityonion-yara
  Summary: This rule detects malware associated with the Slingshot APT by identifying specific strings within files. Notable indicators include error messages about missing elements or primary loaders in DataDir, references to device drivers like `\\.\amxpci` and `\\.\Sandra`, and specific error and data retrieval messages. The condition triggers if the file starts with the MZ header signature for executable files, is smaller than 3000KB in size, and contains at least one of the specified strings.
  Updated-Date: '2024_08_07'
Slingshot_APT_Spork_Downloader:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b6040f0d61ae50f610f5ff5d4783bde4
  Ruleset: securityonion-yara
  Summary: 'This rule detects malware associated with the Slingshot Advanced Persistent Threat (APT) specifically identifying the Spork downloader. It identifies the presence of specific strings related to the malicious software''s usage and connection parameters such as "Usage: spork -c IP:PORT" and "connect-back IP address and port number." The condition checks if the file starts with an "MZ" header and is less than 3000KB in size, ensuring that at least one of the specified strings is present.'
  Updated-Date: '2024_08_07'
Sliver_Implant_32bit:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 405eec138eefef3e384c4edfcfb88c09
  Ruleset: securityonion-yara
  Summary: This rule detects a 32-bit implant version of Sliver, a post-exploitation framework. It identifies specific switch/case statement values within the code that indicate the presence of various functionalities. These functionalities include "tcppivot," "wg," "dns," "http," "https," and optionally "mtls." The rule looks for specific byte sequences in the executable to identify these cases. Additionally, it ensures that the detected cases are not falsely attributed to "cloudfoundry" to reduce false positives.
  Updated-Date: '2024_08_07'
Sliver_Implant_64bit:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 947b086b0c8b13a04cf8a4e7aaa6636b
  Ruleset: securityonion-yara
  Summary: This rule detects a 64-bit Sliver implant, both with and without the --debug flag at compile time. It identifies specific switch/case statement values associated with different modes of operation within the implant's code. These values include keywords like "tcppivot," "namedpipe," "https," "wg," "dns," and potentially "mtls." The rule also ensures that false positives related to the "cloudfoundry" keyword are excluded.
  Updated-Date: '2024_08_07'
Smartniff:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9633b17d102edf1b089624fa952c22d6
  Ruleset: securityonion-yara
  Summary: This rule detects the Smartniff executable, a Chinese hacktool used for network sniffing. It identifies specific strings within the file, such as "smsniff.exe," an email address related to support, and a segment of an XML structure associated with security and trust information. The rule applies when the file has a particular starting sequence and is less than 200KB in size.
  Updated-Date: '2024_08_07'
SnakeTurla_Install_SH:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8f3e19de9b5a0049157b24f52cda6f8d
  Ruleset: securityonion-yara
  Summary: This rule detects a sample of Snake, also known as Turla, by identifying specific strings related to its installation script. It looks for the presence of `${TARGET_PATH}/installd.sh` and `$TARGET_PATH2/com.adobe.update.plist` within a file smaller than 20KB, starting with the bytes `0x2123`. Snake/Turla is a piece of espionage malware often used for cyber-espionage activities.
  Updated-Date: '2024_08_07'
SnakeTurla_Installd_SH:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 07573a6d9518d4e962e0fb53ccf01fc5
  Ruleset: securityonion-yara
  Summary: This rule detects a file associated with the Snake/Turla malware, which is a sophisticated cyber-espionage tool. The detection criteria include specific strings related to process identification and script execution commands within the file, such as "PIDS=`ps cax | grep installdp" and `${SCRIPT_DIR}/installdp ${FILE}`. The rule also checks that the file starts with the hexadecimal value 0x2123 and its size is less than 20KB.
  Updated-Date: '2024_08_07'
SnakeTurla_Malware_May17_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: fb80710115e34e94e3fcdb15ef609235
  Ruleset: securityonion-yara
  Summary: This rule detects the Snake (also known as Turla) malware sample by identifying a specific file path "/Users/vlad/Desktop/install/install/" within files that meet the condition of having the first two bytes equal to 0xfacf and a file size of less than 200KB.
  Updated-Date: '2024_08_07'
SnakeTurla_Malware_May17_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5078fcd4b92c2665db528b403f32bf0e
  Ruleset: securityonion-yara
  Summary: This rule detects a sample of Snake or Turla malware by identifying specific unique strings within a file. These strings include an OpenSSL mutex error message, a command related to network proxy settings for Ethernet, and a specific named pipe identifier. The rule triggers when the file matches these criteria, has a specific 16-bit value at the beginning, and is less than 6000KB in size.
  Updated-Date: '2024_08_07'
SnakeTurla_Malware_May17_4:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1bb5a66dc6c2f1ff64aa014c44c21f3a
  Ruleset: securityonion-yara
  Summary: This rule detects a sample of the Snake (also known as Turla) malware by looking for a specific string associated with the malware's installation process involving Adobe Flash Player. It checks for the presence of the string "Install Adobe Flash Player.app/com.adobe.updatePK" within files, ensuring that the file size is less than 5000KB and that the file header begins with the hexadecimal value 0x4b50.
  Updated-Date: '2024_08_07'
Sniffer_analyzer_SSClone_1210_full_version:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 246b164e7e1ab140676c22e52b79e6e6
  Ruleset: securityonion-yara
  Summary: This rule detects the malicious file "Sniffer analyzer SSClone 1210 full version.exe," which is associated with a Chinese hacktool set. The rule identifies characteristics such as specific URLs, function names, and DLL file names within the executable. It also looks for particular patterns regarding image file extensions and imposes constraints on the file size and header to enhance detection accuracy.
  Updated-Date: '2024_08_07'
SoakSoak_Infected_Wordpress:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0fd539c8e1680568198eb3c2611ec58e
  Ruleset: securityonion-yara
  Summary: This rule detects a SoakSoak-infected WordPress site by looking for specific script enqueuing functions and actions. It identifies signs of the SoakSoak malware, which compromises WordPress websites, by searching for the inclusion of "swfobject" in the script enqueue process and the registration of a function named "FuncQueueObject" with the WordPress action hook "wp_enqueue_scripts."
  Updated-Date: '2024_08_07'
SocGholish_JS_22_02_2022:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0f65a029c11dc29cc2d0d1abc3bdd46d
  Ruleset: securityonion-yara
  Summary: 'This rule detects JavaScript files associated with SocGholish malware, which masquerades as fake software updates. It targets specific strings within the script: the use of "encodeURIComponent(''''+" to encode data, the usage of "open" with the HTTP "POST" method, and the creation of a new ActiveXObject instance for ''MSXML2.XMLHTTP''. The rule applies to files smaller than 5KB that contain all these string patterns.'
  Updated-Date: '2024_08_07'
Sofacy_AZZY_Backdoor_HelperDLL:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ca775de577d08393547be40599c07201
  Ruleset: securityonion-yara
  Summary: This rule detects a command-and-control (C&C) helper DLL associated with the AZZY 4.3 backdoor, used by the Sofacy group. It identifies files based on specific characteristics such as the presence of the string "snd.dll," references to "InternetExchange," and the function "SendData." These files must also meet certain criteria, including a specific file header signature and a size of less than 100KB.
  Updated-Date: '2024_08_07'
Sofacy_AZZY_Backdoor_Implant_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8ea52d8ec0bb6e920e04547f0186acfc
  Ruleset: securityonion-yara
  Summary: This rule detects the AZZY Backdoor Implant version 4.3, a malware used by the Sofacy group to infiltrate high-profile targets. It looks for specific indicators in the files, such as the presence of particular DLL names and specific strings related to the malicious functions within the implant. The rule is triggered if the file matches a PE format identifier and is under 300KB in size, with at least two of the defined strings present.
  Updated-Date: '2024_08_07'
Sofacy_Bundestag_Batch:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1a1c3119f28ff907907b3cbc35910824
  Ruleset: securityonion-yara
  Summary: This rule detects a script associated with the Sofacy Group, also known as APT28, that targets the Bundestag (German Federal Parliament). The script is specifically a batch file that searches for and copies files with PDF, XLS, XLSX, DOC, and DOCX extensions. The condition for detection includes the usage of specific commands ("cmd /c copy" and "forfiles") within a file smaller than 10KB in size.
  Updated-Date: '2024_08_07'
Sofacy_Campaign_Mal_Feb18_cdnver:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 63930e52005b0a227c6bb5fd9c7519e3
  Ruleset: securityonion-yara
  Summary: This rule detects Sofacy malware by identifying specific characteristics within a file. It looks for the presence of the string "cdnver.dll," a unique byte pattern, and specific ASCII strings "S7%s - %lu" and "SNFIRNW." Additionally, it checks if the file header starts with the ASCII characters "MZ," an indicator of a Windows executable, and if the file size is less than 90KB. The rule further validates detection by matching the import hash to a specified value or by confirming the presence of either defined strings or the unique byte pattern within the file.
  Updated-Date: '2024_08_07'
Sofacy_CollectorStealer_Gen1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1663b97768a549cf21b89fb9fc2d29ee
  Ruleset: securityonion-yara
  Summary: This rule detects the Sofacy Malware Collector Stealer, targeting executable files with a "MZ" header, a filesize of less than 300KB, and containing specific strings such as "NvCpld.dll", "NvStop", and "NvStart".
  Updated-Date: '2024_08_07'
Sofacy_CollectorStealer_Gen2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 375dd651d66abdfa255de729e1c88f4c
  Ruleset: securityonion-yara
  Summary: This rule detects particular file collectors and USB stealers, associated with the Sofacy group, by looking for specific characteristics within files. These characteristics include the presence of strings such as "msdetltemp.dll," "msdeltemp.dll," and "Delete Temp Folder Service." It targets files that are typically under 100KB in size and checks for a specific file header value (0x5a4d) to ensure it is scanning the appropriate files.
  Updated-Date: '2024_08_07'
Sofacy_CollectorStealer_Gen3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2aaab242b6c5fe891474e112ab0324b0
  Ruleset: securityonion-yara
  Summary: This rule detects specific characteristics associated with Sofacy's Collector Stealer malware, which targets USB devices to exfiltrate files. The rule identifies malicious components by searching for strings such as "NvCpld.dll," "NvStart," and "NvStop" in files, and checks for certain patterns and modules, including "IGFSRVC.dll," "Common User Interface," and "igfsrvc Module." It also examines for indications of an operating system manufactured by Microsoft. The rule ensures the detected file is a Windows executable with a size of less than 150KB.
  Updated-Date: '2024_08_07'
Sofacy_Fybis_ELF_Backdoor_Gen1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7f5f6a9be91e621b136211e0c457fef0
  Ruleset: securityonion-yara
  Summary: This rule detects the Sofacy Fysbis Linux Backdoor, a malware used to gain unauthorized access to Linux systems. The detection is based on specific strings within the executable, such as error messages related to pipe writing, command execution issues, and specific system commands and configurations. The rule looks for identifying features like particular error messages, systemd service manipulations, and commands to list Linux distribution files. Additionally, the rule checks for certain conditions, including file size constraints and specific header bytes, to determine the presence of the backdoor. This tool employs a combination of textual patterns and file characteristics to identify the malware effectively.
  Updated-Date: '2024_08_07'
Sofacy_Fysbis_ELF_Backdoor_Gen2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 355e47b24c1cb510c18525aab9d9eb15
  Ruleset: securityonion-yara
  Summary: This rule detects the Sofacy Fysbis Linux Backdoor, which is malware designed to operate on Linux systems. It identifies the backdoor by examining specific characteristics such as the presence of the strings "RemoteShell," "basic_string::_M_replace_dispatch," and "HttpChannel" within ELF files. Additionally, the rule checks if the file size is less than 500KB and starts with the hexadecimal value 0x457f. This backdoor is associated with the Sofacy hacking group and has been documented in detail by various cybersecurity research entities.
  Updated-Date: '2024_08_07'
Sofacy_Jun16_Sample1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b0473df1490c8ac7789a80dad2b96ccf
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the Sofacy malware, as discussed in a Palo Alto Networks APT report. It identifies the malware by searching for specific indicators within files, including the ASCII string "clconfg.dll" and the wide string "ASijnoKGszdpodPPiaoaghj8127391". The rule triggers if either the file meets specific conditions regarding its structure and size (less than 200KB with a DOS header) or if all specified strings are present.
  Updated-Date: '2024_08_07'
Sofacy_Jun16_Sample2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b202b185e06aaded142d5f9bd97c62df
  Ruleset: securityonion-yara
  Summary: This rule detects the Sofacy malware, which is referenced in a report by Palo Alto Networks. It identifies specific patterns and strings in the files, such as "DGMNOEP" and URL structures like "/%s%s%s/?%s=". Additionally, it searches for certain registry paths related to network proxies and key DLL files like "svchost.dll" and "clconfig.dll". The rule is specialized to catch files less than 100KB which match these characteristics.
  Updated-Date: '2024_08_07'
Sofacy_Jun16_Sample3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5a345d4b80fb80148b78bc729ad45123
  Ruleset: securityonion-yara
  Summary: This rule detects the Sofacy malware by identifying a specific sequence of wide characters within executable files that start with the "MZ" header and are smaller than 200KB in size.
  Updated-Date: '2024_08_07'
Sofacy_Mal2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 019f878168a1e7830ff35325d7d4dcb9
  Ruleset: securityonion-yara
  Summary: This rule detects a specific sample of malware associated with the Sofacy Group, identified by certain unique strings within the file. These strings include "PROJECT\\XAPS_OBJECTIVE_DLL\\", "XAPS_OBJECTIVE.dll", and "i`m wait". Additionally, the file must have a PE header indicated by the value 0x5a4d at the beginning of the file.
  Updated-Date: '2024_08_07'
Sofacy_Mal3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: fa3ef988023459a90b7d10649fc99060
  Ruleset: securityonion-yara
  Summary: This rule detects a specific malware sample attributed to the Sofacy Group, a known cyber espionage group. The malware is identified through various strings within its code, including references to "System Volume Information\\USBGuard.exe," remote keylogger modules, unique HTML font tags indicating process status, and suspicious domain names related to legitimate companies like Adobe and Microsoft. It also looks for user-agent strings that mimic older versions of the Mozilla Firefox browser and specific command executions in the Windows directory. These distinctive markers help in identifying the presence of this malware in files smaller than 300KB.
  Updated-Date: '2024_08_07'
Sofacy_Malware_AZZY_Backdoor_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0197229df534787bcfa2f1f6590e4e38
  Ruleset: securityonion-yara
  Summary: This rule detects the AZZY backdoor malware, a malicious software associated with the Sofacy group. It specifically looks for indicators within a file, such as the presence of certain strings related to disguised DLL files named "advstorshell.dll" and "advshellstore.dll," as well as the phrase "Windows Advanced Storage Shell Extension DLL." Additionally, the rule checks that the file starts with the "MZ" header indicative of a Windows executable and is less than 150 KB in size.
  Updated-Date: '2024_08_07'
Sofacy_Malware_StrangeSpaces:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2e32fec7f15a63d90097e59e892b8209
  Ruleset: securityonion-yara
  Summary: This rule detects specific strings associated with Sofacy malware, characterized by unusual spacing patterns. These strings include "Delete Temp Folder Service," "Operating System," and "Microsoft Corporation" with many trailing spaces. The condition for detection requires the file to begin with the hexadecimal value 0x5a4d, have a file size of less than 50KB, and match at least three of the specified strings.
  Updated-Date: '2024_08_07'
Sofacy_Oct17_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6bce972a59511766957c5ff1b1f7e5bc
  Ruleset: securityonion-yara
  Summary: This rule detects the Sofacy malware reported in October 2017, specifically by using a combination of file paths and patterns related to the malware's operation. It scans for the presence of certain file names such as "netwf.dll", "netwf.bat", and "KlpSvc.dll" within the local application data directory. Additionally, it looks for specific executable commands, the export function "KlpSvc", and particular strings within the file content. The rule applies conditions on the file characteristics, including size and file header signature, to identify potential Sofacy malware instances.
  Updated-Date: '2024_08_07'
Sofacy_Oct17_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 22b2264bc515614022000ff83243c709
  Ruleset: securityonion-yara
  Summary: This rule detects the Sofacy malware, identified in October 2017. The rule examines the presence of specific strings and conditions related to the malware's characteristics, including files with the string "netwf.dll" and patterns such as "%s - %s - %2.2x" and "%j%Xjsf." The detection criteria involve file header checks and file size limitations, combined with string matches and import hash values. This process aids in identifying the signature behaviors and attributes of the Sofacy malware.
  Updated-Date: '2024_08_07'
Sofacy_Trojan_Loader_Feb18_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 17ce5684f95428a1a6614e8a98fc0600
  Ruleset: securityonion-yara
  Summary: This rule detects a Sofacy Trojan loader from February 2018. The rule identifies specific file paths and names such as "%appdata%\nad.dll" and "%appdata%\nad.bat" in wide format, along with other strings like "apds.dll" and "nad.dll" in ASCII format. The detection criteria also include evaluating the PE header for a specific checksum, file size constraints under 300KB, and checking for a particular import hash or exports with the name "VidBitRpl".
  Updated-Date: '2024_08_07'
Sphinx_Moth_cudacrt:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7693b95a1e2b644c23b0453668db58ba
  Ruleset: securityonion-yara
  Summary: This rule detects a file named cudacrt.dll associated with the Sphinx Moth threat group by identifying specific characteristics within the file. It looks for occurrences of the string "HPSSOEx.dll," the IP address "255.255.255.254," and a specific software registry path "SOFTWARE\\SsoAuth\\Service," all in wide format. Additionally, the rule checks for distinctive byte sequences (opcodes) that further characterize this file. The targeted file must also have certain properties, such as a file size less than 243KB and a specific file header value.
  Updated-Date: '2024_08_07'
Sphinx_Moth_h2t:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6529af86866ccb9ce2fb8756ec6d12c3
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a file associated with the Sphinx Moth threat group, specifically targeting a file named h2t.dat. It looks for specific strings within the file, such as a formatted string for proxy and command parameters, error messages related to connection failures and child process exits, a specific HTTP POST request structure, and phrases related to piping data. Additionally, the file must have a specific header value and be smaller than 156KB in size to match the detection criteria.
  Updated-Date: '2024_08_07'
Sphinx_Moth_iastor32:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7a390a376e1223cd4c5c2ab63d4934a6
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a file named "iastor32.exe," which is associated with the Sphinx Moth threat group. It identifies the file by searching for specific ASCII strings that resemble parts of a private key, and ensures the detection is a Windows executable file with a size less than 2000KB.
  Updated-Date: '2024_08_07'
Sphinx_Moth_kerberos32:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 84ecdca578df1fe6206860df0a94ffe1
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a file associated with the Sphinx Moth threat group, specifically targeting the "kerberos32.dll" file. It identifies indicators such as specific file paths and names within the Windows directory, as well as strings related to malicious operations involving secure pipes and session logging. The conditions include a file size less than 300KB and certain string patterns that are consistent with known malware behavior.
  Updated-Date: '2024_08_07'
Sphinx_Moth_kerberos64:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c46b17f047866ea0b8ac7ae910349f03
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a malicious DLL file named "KERBEROS64.dll" associated with the Sphinx Moth threat group. The rule checks for several specific strings within the file, including "KERBEROS64.dll," "zeSecurityDescriptor," "SpGetInfo," and "SpShutdown." It also identifies specific opcodes within the file. The condition for detection includes ensuring that the file starts with the hexadecimal value 0x5a4d, which indicates a valid Windows executable, and that the file size is less than 406KB.
  Updated-Date: '2024_08_07'
Sphinx_Moth_nvcplex:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6b5b8517993e8a2013bcbb3b724471a1
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific file associated with the Sphinx Moth threat group, named "nvcplex.dat." It identifies this threat by matching the file properties and specific strings and opcodes. The file "mshtaex.exe" is flagged if it appears in its full word, wide character format. Additionally, three specific opcode sequences are checked within the file. The condition for the rule is met if the file starts with the "MZ" header (indicating a Windows executable) and is smaller than 214KB, and all specified strings and opcodes are present in the file.
  Updated-Date: '2024_08_07'
SplitJoin_V1_3_3_rar_Folder_3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 959d3696c10b420d4664eb6549233f1f
  Ruleset: securityonion-yara
  Summary: This rule detects a disclosed hacktool set involving the file "splitjoin.exe". It identifies specific strings such as "ie686@sohu.com", "splitjoin.exe", and "SplitJoin" to recognize the tool, which is used for file splitting and joining purposes.
  Updated-Date: '2024_08_07'
SqlDbx_zhs:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 11ff57cd98615fb1dad4f7b2281157bd
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a file named "SqlDbx_zhs.exe," associated with a Chinese hack toolset. It identifies specific patterns within the executable to determine its authenticity, including strings related to database operations, login attempts, system procedures, and an email address for support at a domain related to SqlDbx. The rule looks for multiple specific strings, such as those linked to login policies, failed login attempts, database roles, and other database-related activities, to confirm the detection.
  Updated-Date: '2024_08_07'
StealthWasp_s_Basic_PortScanner_v1_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2b1c8c11eca2e6df48da7717786e7ed5
  Ruleset: securityonion-yara
  Summary: This rule detects an executable file associated with the StealthWasp Basic PortScanner version 1.2, identified by the presence of the strings "Basic PortScanner" and "Now scanning port:".
  Updated-Date: '2024_08_07'
StoneDrill:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f6e640d5b17b5b2285402a2e438dcff1
  Ruleset: securityonion-yara
  Summary: This rule detects the StoneDrill malware by identifying specific file names and patterns present in the malicious code. It specifically looks for files named "C-Dlt-C-Trsh-T.tmp" and "C-Dlt-C-Org-T.vbs" and the presence of certain ASCII strings such as "Hello dear" and "WRZRZRAR." Additionally, it checks for specific hex patterns within the code. The rule triggers if these conditions are met, taking into account the file size and initial hexadecimal sequence of the executable, ensuring a comprehensive detection mechanism for this malware type.
  Updated-Date: '2024_08_07'
StoneDrill_BAT_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a97ee43acb5c11c0c17426bd1761c028
  Ruleset: securityonion-yara
  Summary: This rule detects a malicious batch file associated with the StoneDrill malware. The rule identifies specific string patterns typical of the batch file such as setting variables (e.g., "set u100=", "set u200=service", "set u800=%~dp0") and executing system commands ("%systemroot%\\system32\\%u100%", "%\" start /b %systemroot%\\%"). Additionally, the batch file must have a specific initial byte sequence (0x68636540) and its size must be less than 500 bytes.
  Updated-Date: '2024_08_07'
StoneDrill_Malware_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d7c6273c00707541bb2b25fd42cc8f1e
  Ruleset: securityonion-yara
  Summary: This rule detects the StoneDrill malware by identifying specific behaviors and file characteristics associated with this threat. StoneDrill is known for using a particular set of commands and file paths, such as running a Windows script via WMIC, referencing "InternetExplorer" in the ProgramData directory, and executing various Visual Basic Script files (e.g., "C-PDI-C-Cpy-T.vbs"). Key indicators include the presence of strings related to script execution and file copying processes, specific temporary file names, and unique character patterns. The conditions for detection combine these criteria with typical malware file properties, leveraging a combination of specific string matches and certain file properties to accurately identify the malware.
  Updated-Date: '2024_08_07'
StoneDrill_Service_Install:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a554c95868f39f613cfb70151925c526
  Ruleset: securityonion-yara
  Summary: This rule detects a batch file associated with StoneDrill malware, identified through specific strings such as "127.0.0.1 >nul && sc config," references to "LocalService" with "ping -n," and commands related to configuring and starting services like "NtsSrv" using a specified executable path. It triggers if at least two of these conditions are met and the file size is less than 500 bytes.
  Updated-Date: '2024_08_07'
StoneDrill_VBS_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 45edce96be9adc3b5afd0c7d45471170
  Ruleset: securityonion-yara
  Summary: This rule detects malware associated with the StoneDrill threat, specifically targeting behaviors such as registry modification using WMIC commands, execution delays using ping commands, and various file operations through VBScript. It looks for strings related to copying and deleting files within common application data directories, as well as script-induced sleep commands. The detection is conditioned on the file size being less than 1KB and the presence of specific strings that match the predefined patterns.
  Updated-Date: '2024_08_07'
StoneDrill_main_sub:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 86201c4262b06deed2ba610f34ca0852
  Ruleset: securityonion-yara
  Summary: This rule detects StoneDrill malware samples in their decrypted form. StoneDrill is a malicious software known for its destructive capabilities, often targeting data integrity. The rule identifies this malware by examining specific hexadecimal code patterns within files smaller than 5MB starting with the 'MZ' header, indicating an executable file format.
  Updated-Date: '2024_08_07'
StoneDrill_ntssrvr32:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1e08716236c1791f057d8c256be8b81f
  Ruleset: securityonion-yara
  Summary: This rule detects malware associated with the StoneDrill threat report. It identifies specific strings and known byte patterns indicative of the StoneDrill malware's presence in files smaller than 4MB in size, with the executable's header starting with the "MZ" magic number. The strings and byte patterns used are markers commonly found in the malware, ensuring its accurate detection based on its unique characteristics.
  Updated-Date: '2024_08_07'
StreamEx_ShellCrew:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 055ba1a1ed27c0f7208b2eaccf97d9f2
  Ruleset: securityonion-yara
  Summary: This rule detects indicators associated with the ShellCrew malware, which is recognized for evading detection by major antivirus software. It searches for specific strings and byte patterns in files, including a Base64 encoded string, various byte sequences, a reference to "greendll," a user-agent string for a specific browser version, another specific byte sequence, and a path to a PDB file. These elements are characteristic of ShellCrew's behavior and techniques.
  Updated-Date: '2024_08_07'
StuxNet_Malware_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6149a1198163fcbd2aa0ffc2e720f724
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the Stuxnet malware by identifying specific sequences of assembly instructions (opcodes) present in the executable file "malware.exe". It looks for three distinct patterns of operations involving data movement, comparisons, and conditional jumps within the binary code. These patterns include operations such as moving data to and from the stack, XOR operations, comparisons against specific values, and conditional jumps, which are characteristic behaviors of the Stuxnet malware's code execution.
  Updated-Date: '2024_08_07'
StuxNet_dll:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3be8c55e4351a8cbb4b1f03fb1dddc8c
  Ruleset: securityonion-yara
  Summary: This rule detects a Stuxnet malware sample specifically targeting the file named dll.dll, characterized by the presence of a particular offensive string embedded within it, and it applies to files smaller than 100KB with the specified PE header signature.
  Updated-Date: '2024_08_07'
Stuxnet_Malware_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0df5c440847ed02eb5ec0c55b1112ab9
  Ruleset: securityonion-yara
  Summary: This rule detects a specific sample of Stuxnet malware by identifying a combination of unique characteristics. It looks for references to the file path "\SystemRoot\System32\hal.dll" encoded in wide format and the URL "http://www.jmicron.co.tw0" in fullword ASCII. These signatures, combined with the conditions that the file starts with the hexadecimal value 0x5a4d and has a filesize of less than 70KB, are used to confirm the presence of this Stuxnet variant.
  Updated-Date: '2024_08_07'
Stuxnet_Malware_3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 66509c88292eeab8a639eab77c297a75
  Ruleset: securityonion-yara
  Summary: This rule detects a specific variant of the Stuxnet malware, which is known to use file names such as "~WTR4141.tmp" and "~WTR4132.tmp", and can be associated with executables like "totalcmd.exe" and "wincmd.exe". It also checks for the presence of the string "SHELL32.DLL.ASLR." within the file and references a URL string "http://www.realtek.com0". The rule is designed to identify files with a "MZ" header and a size smaller than 150KB, ensuring that at least five of these characteristics are present to confirm detection.
  Updated-Date: '2024_08_07'
Stuxnet_Malware_4:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 242a783e17ced7856d4eaf60a1734f43
  Ruleset: securityonion-yara
  Summary: This rule detects specific variants of the Stuxnet malware by identifying files that contain unique strings such as "\\objfre_w2k_x86\\i386\\guava.pdb", "MRxCls.sys", and "MRXNET.Sys". It triggers if the file size is less than 80KB and matches any of these characteristics or all of them together, starting with the "MZ" header typical of executable files.
  Updated-Date: '2024_08_07'
Stuxnet_Shortcut_to:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 661a435669b8d3912489c2d62b4a097e
  Ruleset: securityonion-yara
  Summary: This rule detects a specific Stuxnet sample associated with a malicious shortcut file named "Copy of Shortcut to.lnk". It identifies the malware by looking for a combination of the file size being less than 10KB and the presence of a specific string pattern related to USB storage devices, particularly those associated with Kingston DataTraveler USB disks. This detection helps in identifying instances where the Stuxnet worm is attempting to spread via USB drives by exploiting shortcut file vulnerabilities.
  Updated-Date: '2024_08_07'
Stuxnet_maindll_decrypted_unpacked:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5d595085e5ce2afe3100b1562bd403a3
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a decrypted and unpacked Stuxnet sample, specifically targeting the "maindll.decrypted.unpacked.dll" file. It identifies certain patterns and strings associated with the malware, such as file paths within the system's drivers and system root directories, specific command-line actions, and database query structures. The rule looks for these indicative features by matching certain well-known strings related to the Stuxnet malware to determine its presence on a system.
  Updated-Date: '2024_08_07'
Stuxnet_s7hkimdb:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 69f3bcec78c99faabfc0f1aa7c7f839c
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific Stuxnet sample (s7hkimdb.dll), a notable cyber-espionage malware. The rule targets the particular file name "S7HKIMDX.DLL" within a binary and matches certain opcode sequences unique to the Stuxnet payload. The opcode patterns include specific sets of instructions related to memory and register manipulations commonly associated with this malware. Additionally, the rule constrains the detection to files under 40KB in size, beginning with a "MZ" header, which is indicative of Windows executable files.
  Updated-Date: '2024_08_07'
Suckfly_Nidiran_Gen_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1f1cf85604fee55a1011891bfba86d2f
  Ruleset: securityonion-yara
  Summary: This rule detects the Suckfly Nidiran Trojan by identifying specific error and success messages related to process memory writing and remote thread creation. The rule looks for certain ASCII strings within executable files smaller than 200KB, specifically checking for messages indicating failures or successes in "WriteProcessMemory" and "CreateRemoteThread" processes.
  Updated-Date: '2024_08_07'
Suckfly_Nidiran_Gen_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d984033df6e2833127cb5cdbe30316dc
  Ruleset: securityonion-yara
  Summary: This rule detects the Suckfly Nidiran Trojan by identifying specific file names, strings, and behaviors characteristic of this malware. The rule checks for the existence of the file "WorkDll.dll" and a particular file path within the user profile's Security Center directory. Additionally, it looks for several unique strings related to Windows Security Accounts Manager services, remote thread creation, and various function calls typically used by the trojan, such as "DoRunRemote," "AutoRunFun," "ServiceMain is called," and "DllRegisterServer is called." The detection is triggered if these conditions are met within executable files smaller than 200KB.
  Updated-Date: '2024_08_07'
Suckfly_Nidiran_Gen_3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: de0f13676c4806b668d73df20ee134e7
  Ruleset: securityonion-yara
  Summary: This rule detects the Suckfly Nidiran Trojan, which is identified through specific string patterns and behaviors indicating failed operations such as running shellcode, processing commands, downloading files, and modifying configurations. It also checks for certain executable file attributes and uses a hash-based method to identify known variants of the Trojan. The file size must be under 300KB, and the presence of specific strings or a matching import hash will trigger the detection.
  Updated-Date: '2024_08_07'
SunOrcal_Malware_Nov17_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d4553a5177f0717e5299af1d7704d8f2
  Ruleset: securityonion-yara
  Summary: This rule detects the Reaver malware, which is associated with the SunOrcal campaign and was detailed in a PaloAltoNetworks report. The detection focuses on specific strings found within the executable file, including notable patterns and identifiers such as encoded data sequences, unique markers, and specific keywords like "!!!system" and "GloablCryptNv1." It also checks that the file has a standard Windows executable header with a size of less than 200KB.
  Updated-Date: '2024_08_07'
SuperScan4:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5ddd16165fd1bc2e4715a07c5824b05c
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the SuperScan4.exe file by identifying specific strings within it, including an HTML table data class reference, a unique REM command string, and a CorExitProcess characteristic associated with Microsoft's .NET framework.
  Updated-Date: '2024_08_07'
Susp_Indicators_EXE:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7a7a261c743925410d0496065dac9982
  Ruleset: securityonion-yara
  Summary: This rule detects a packed NullSoft Installer executable (EXE) that exhibits characteristics of the NetWire Remote Access Trojan (RAT). The detection is based on specific string patterns present within the executable, such as file paths in the Windows registry, error messages, and names of certain libraries (CRYPTBASE, UXTHEME, PROPSYS, APPHELP). Additionally, the condition checks for a valid PE header, an indicator of a Windows executable, and ensures the file size is less than 700KB.
  Updated-Date: '2024_08_07'
Susp_PowerShell_Sep17_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c7711d2ae75164ec5a63c357d006e017
  Ruleset: securityonion-yara
  Summary: This rule detects suspicious behavior involving PowerShell scripts used in combination with VBS (Visual Basic Script) or JS (JavaScript). It identifies specific strings that indicate the creation or execution of PowerShell commands with the parameters "-nop -w hidden" aimed at evading detection by running in a non-interactive, hidden window. Additionally, it looks for script commands that resize a window to 0,0 pixels, a technique often employed to make the script execution invisible to users. The rule applies to files smaller than 2KB, ensuring it catches small, potentially harmful scripts.
  Updated-Date: '2024_08_07'
Susp_PowerShell_Sep17_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 06673b0504888329ef8659c064ed00d9
  Ruleset: securityonion-yara
  Summary: This rule detects suspicious PowerShell scripts used in conjunction with VBS or JS files. It specifically looks for patterns indicating that PowerShell might be executed covertly or with minimal visibility, such as commands to run `powershell.exe` with hidden or encoded options. The rule also checks for indirect execution methods, like verifying the presence of PowerShell in a specific directory or moving windows off-screen to avoid detection. Additionally, it monitors for the use of `CreateObject("Wscript.Shell")`, which can be exploited for creating and running shell commands in a script. The rule targets files smaller than 20KB that contain specific byte sequences, ensuring it focuses on scripts likely to be malicious.
  Updated-Date: '2024_08_07'
Suspicious_BAT_Strings:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1942bce2d9b69b734bdb98caaffb8a5d
  Ruleset: securityonion-yara
  Summary: This rule detects a specific string, "ping 192.0.2.2 -n 1", which is also utilized in Netwire RAT auxiliary scripts. Netwire RAT is a remote access trojan that can execute various malicious activities on an infected system. The rule specifically looks for this string in files smaller than 600KB to identify potential malicious behavior.
  Updated-Date: '2024_08_07'
Suspicious_Script_Running_from_HTTP:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 601dacd4a0190b8d90d9e22e84ffbe10
  Ruleset: securityonion-yara
  Summary: This rule detects a suspicious script being executed from an HTTP or HTTPS source using command-line instructions. It specifically looks for patterns within the command-line that include "cmd /C script:" or "cmd.exe /C script:", followed by either "http://" or "https://". The presence of these patterns is indicative of potentially malicious activity, where scripts are being run directly from a remote location.
  Updated-Date: '2024_08_07'
SwitchSniffer:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: cc42162a6ba5885fe094cd0fb713e669
  Ruleset: securityonion-yara
  Summary: This rule detects a file named "SwitchSniffer.exe," which is identified as part of a Chinese hacktool set. It looks for specific indicators within the file, such as the presence of the string "NextSecurity.NET" and the term "SwitchSniffer Setup" in wide format, ensuring that both conditions are met along with the executable's valid PE header indicated by the byte sequence 0x5a4d at the file's start.
  Updated-Date: '2024_08_07'
Sword1_5:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 80cd88b6c93d92859c04a4504d446bb8
  Ruleset: securityonion-yara
  Summary: This rule detects the Chinese hacktool known as Sword1.5.exe. It identifies the presence of this file by looking for specific strings within the binary. These strings include URLs related to IP address and MD5 hash services, a command list box label, a specific MD5 cracking request string, a .ini settings file reference, an open file dialog component, and a file extension filter for text files. The detection condition combines these string checks with file size and header criteria to confirm the hacktool's presence.
  Updated-Date: '2024_08_07'
SysInternals_Tool_Anomaly:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 81d0ed758feea5fe387711839cfc5e0f
  Ruleset: securityonion-yara
  Summary: "This rule detects an anomaly in SysInternals tools by identifying the absence of Mark Russinovich as the author. It looks for specific indicators such as certain registry paths related to SysInternals software, while also inspecting the tool\u2019s metadata to ensure it does not contain typical phrases authored by Mark Russinovich or tagged as obsolete. Additionally, it excludes legitimate strings like configurations for BGInfo, usage instructions for movefile, notifications about LoadOrder, and commands for clearing the Cache working set."
  Updated-Date: '2024_08_07'
TA17_293A_Hacktool_Exploit_MS16_032:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8e1fce760524bed8680c250e18b55361
  Ruleset: securityonion-yara
  Summary: This rule detects a hacktool exploit related to the MS16-032 vulnerability. It identifies specific patterns in strings associated with the exploit, such as references to process threads, the use of "cmd.exe," and descriptions of PowerShell implementations of the exploit. The rule targets files under 40KB in size that contain one or more of these patterns.
  Updated-Date: '2024_08_07'
TA17_293A_Hacktool_PS_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 65a48b41b0300634a71b379822d7af9b
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific hack tool by identifying strings associated with PowerShell commands used for Kerberos ticket extraction and manipulation. It targets specific string patterns related to Kerberos service ticket hash formatting and SPN (Service Principal Name) ticket operations, functioning as an indicator of suspicious activities involving potential unauthorized access or privilege escalation in Windows environments.
  Updated-Date: '2024_08_07'
TA17_293A_Hacktool_Touch_MAC_modification:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 37c7709a312a110ec55b99f5e38ffe07
  Ruleset: securityonion-yara
  Summary: This rule detects a tool that manipulates file access and modification times on macOS systems. It searches for specific strings related to time updates, error messages when setting file times, usage syntax for file time adjustments, and options to change modification times only. The rule is triggered if the specified conditions are met, indicating the presence of such a tool in files under 100KB.
  Updated-Date: '2024_08_07'
TA17_293A_Query_Javascript_Decode_Function:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f0bb468f69b871dfd7e8fec184cdb1cf
  Ruleset: securityonion-yara
  Summary: This rule detects potentially malicious JavaScript code specifically using decoding functions. The signatures used to identify such code include certain hexadecimal strings associated with JavaScript decode operations. These encode detection patterns are characteristic of functions that replace characters within strings, manipulate bitwise operators, or convert characters from encoded forms, typically indicating attempts to obfuscate the true functionality of the script. This identification seeks to match multiple distinct patterns found in the script to confirm the presence of such obfuscation techniques, which are common in malware or suspicious activities within JavaScript files smaller than 20KB.
  Updated-Date: '2024_08_07'
TA17_293A_Query_XML_Code_MAL_DOC:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 255e1129c59a74e3a9e6796b24b388f1
  Ruleset: securityonion-yara
  Summary: This rule detects a malicious document by identifying specific XML file paths within a Microsoft Word document structure. It looks for the presence of "word/_rels/", "word/theme/theme1.xml", and "word/styles.xml" at precise locations within the file, suggesting manipulations that are indicative of malware.
  Updated-Date: '2024_08_07'
TA17_293A_Query_XML_Code_MAL_DOC_PT_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a80396a6c3c490c25c0c818d115becf8
  Ruleset: securityonion-yara
  Summary: This rule detects a malicious Microsoft Word document based on the presence of the file "word/_rels/settings.xml.rels" and a specific sequence of bytes (8c 90 cd 4e eb 30 10 85 d7) within the file. The condition also checks for a valid PKZIP file header indicated by the signature 0x04034b50.
  Updated-Date: '2024_08_07'
TA17_293A_energetic_bear_api_hashing_tool:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1801322f362c2b96649d1ef8c4e7bd88
  Ruleset: securityonion-yara
  Summary: 'This rule detects the Energetic Bear API Hashing Tool by identifying specific byte patterns corresponding to different versions of an API hashing function in the binary files. Additionally, it checks for HTTP headers containing the text "X-mode: push" or "X-mode: pop" to confirm the presence of Energetic Bear''s malicious activity. The detection is triggered by finding either of the API hashing byte sequences combined with either the characteristic HTTP headers or the typical initial bytes of executable files.'
  Updated-Date: '2024_08_07'
TA17_293A_malware_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 23d32a0ee10a414c38cd7a088e0b07e2
  Ruleset: securityonion-yara
  Summary: This rule detects artifacts related to Inveigh penetration testing tools. It identifies specific strings and patterns that are characteristic of the Inveigh toolset, such as particular IP addresses, URLs, and hexadecimal sequences. These elements may be indicative of network exploitation activities or command-and-control operations. The rule includes various encoded and encrypted strings that match known components of malicious documents and scripts often used by Inveigh to conduct its operations. By correlating these unique identifiers, the rule aims to catch and flag files or activities associated with this penetration testing tool and its related artifacts.
  Updated-Date: '2024_08_07'
TA17_318A_rc4_stack_key_fallchill:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7d90a4df172a27c7fc4e7172b4c6beef
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the HiddenCobra FallChill malware, specifically by identifying a unique RC4 stack key pattern within an executable file. The pattern includes a specific sequence of hexadecimal bytes used to recognize the malware's signature. The detection is triggered when an executable file, starting with the typical 'MZ' header and the PE header, contains this distinctive sequence.
  Updated-Date: '2024_08_07'
TA17_318A_success_fail_codes_fallchill:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9e80bc790deeadc0bf4405c0ecbccb55
  Ruleset: securityonion-yara
  Summary: This rule detects HiddenCobra FallChill malware, focusing on specific success and failure codes embedded within the malware's code. It identifies the presence of particular hexadecimal patterns within the executable files that match known signatures of the FallChill backdoor, which is associated with malicious activities reported by US CERT.
  Updated-Date: '2024_08_07'
TA17_318B_volgmer:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: bc9e7c142607bf7b923815d9881b96a7
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of Volgmer malware by identifying a malformed user agent string "Mozillar/" within files that have specific characteristics of executable files, marked by particular header values.
  Updated-Date: '2024_08_07'
TA18_074A_screen:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3a155c8aef6f3ac65219cafb927091fe
  Ruleset: securityonion-yara
  Summary: This rule detects malware associated with TA18-074A by identifying specific patterns and characteristics within a file. It targets the presence of "screen.exe," references to "PlatformInvokeUSER32" and "PlatformInvokeGDI32," the function "GetDesktopImageF," and a distinctive error message indicating "Too many arguments, going to store in current dir." The detection is contingent upon the file beginning with the 'MZ' magic header, being less than 60KB in size, and matching at least three of the specified patterns.
  Updated-Date: '2024_08_07'
TA18_074A_scripts:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1d16aaf8c52a20f1c7f0b24d4d37843e
  Ruleset: securityonion-yara
  Summary: This rule detects malware described in TA18-074A by identifying scripts that execute a specific command ("Running -s cmd /c query user on") within files smaller than 600KB.
  Updated-Date: '2024_08_07'
TA459_Malware_May17_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7b7d5deae5c22522f80339480fc1d536
  Ruleset: securityonion-yara
  Summary: This rule detects TA459-related malware by identifying files with a specific signature. The malware is confirmed if the file begins with a magic number (`0x6152`), has a size less than 800KB, and contains specific strings such as "xtsewy" and "CW&mhAklnfVULL" in the file content.
  Updated-Date: '2024_08_07'
TA459_Malware_May17_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0ba72a7c7c7701fdcdea29d5e627cdc5
  Ruleset: securityonion-yara
  Summary: This rule detects TA459-related malware by identifying specific filenames like "Mcutil.dll" and "mcut.exe," and certain strings associated with WinRAR self-extracting archives. The rule triggers when the file has a DOS header signature, is less than 900KB in size, and matches the specified filenames and one of the given strings.
  Updated-Date: '2024_08_07'
TEST_false_positive_plain_fnv1a_in_x64:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: aec5dab64631d840f07f38dcac57aed0
  Ruleset: securityonion-yara
  Summary: This rule detects x64 implementations of the standard fnv1a algorithm by identifying specific values associated with the fnv64a offset and fnv64a prime. These values are used in hash computations unless multiplication is replaced by bit-shifting. While this rule could have detected the SUNBURST backdoor related to SolarWinds, it may also flag any program that implements fnv1a, making it primarily useful for developers to confirm if the fnv1a implementation was intentional.
  Updated-Date: '2024_08_07'
TRITON_ICS_FRAMEWORK:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 070dbcfa40f43e7cbc5b5a5530a9d9d8
  Ruleset: securityonion-yara
  Summary: "This rule detects the TRITON industrial control system (ICS) attack framework, identified during an incident response by Mandiant. It looks for various indicators within files up to 3MB in size, including compiled Python files (\".pyc\") and specific Python scripts and modules associated with TRITON, such as \"TS_cnames.py,\" \"Tricon,\" \"TsBase.py,\u201D \"TsHi.py,\" \"TsLow.py,\" and \"crc.pyc\". The rule checks for the presence of keywords and function names like \"GetCpStatus,\" \"SafeAppendProgramMod,\" \"CRC16_MODBUS,\" and \"symbol table.\" Additionally, it searches for filenames linked to TRITON's malicious activities, such as \"inject.bin\" and \"imain.bin.\" The purpose is to identify files that exhibit characteristics of the TRITON ICS framework."
  Updated-Date: '2024_08_07'
TSCookie_RAT:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 11d144ed2840ce2c9467179572f98260
  Ruleset: securityonion-yara
  Summary: This rule detects TSCookie RAT, a type of Remote Access Trojan (RAT) that targets Windows systems. The rule identifies specific plaintext strings within executable files that suggest TSCookie RAT's activity, such as error messages related to decrypting Outlook passwords and references to stored passwords for Firefox, Outlook, and Internet Explorer browsers. It verifies the file's size and format and checks for the presence of particular export functions.
  Updated-Date: '2024_08_07'
TeleBots_CredRaptor_Password_Stealer:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4458b6d9a628d59f5d452383aa54be56
  Ruleset: securityonion-yara
  Summary: This rule detects the TeleBots CredRaptor Password Stealer malware by looking for specific strings related to the file paths, database queries, and credential storage paths commonly used by the malware. These include paths to a file named "IE.pdb" associated with Internet Explorer passwords, SQL queries extracting stored login credentials from Firefox and Chrome databases, filenames indicative of stored passwords from Internet Explorer on Windows XP, Google Chrome credential storage paths, and references to Opera browser credential storage. The rule triggers if certain conditions regarding these strings and file properties are met, indicating the presence of the malware.
  Updated-Date: '2024_08_07'
TeleBots_IntercepterNG:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4ded604be208064602c047f18191952b
  Ruleset: securityonion-yara
  Summary: This rule detects the TeleBots malware known as IntercepterNG by identifying specific strings associated with its operation. It looks for keywords and phrases related to network interface usage, target identification, captured passwords and files without ARP poisoning, intercepted IRC channels, target IP settings, session saving in pcap format, and DES authorization captures for ORACLE8. Additionally, the rule checks for files with a specific initial header and a size less than 500KB, ensuring detection even if only a subset of the specified strings is present.
  Updated-Date: '2024_08_07'
TeleBots_KillDisk_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2190833db7f882f4d8586b4e18005b6d
  Ruleset: securityonion-yara
  Summary: This rule detects the TeleBots malware variant called KillDisk. The malware is identified by examining specific strings within a file, such as "Plug-And-Play Support Service," " /c \"echo Y|," and "-set=06.12.2016#09:30 -est=1410." It also looks for patterns like "%d.%d.%d#%d:%d," " /T /C /G ," "[-] > %ls," and "[+] > %ls." The condition for detection includes checking if the file begins with the "MZ" header (indicating a Windows executable) and if the file size is less than 500KB, combined with the presence of at least four of the specified strings.
  Updated-Date: '2024_08_07'
TeleBots_KillDisk_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 85e828d5e0a343f5c1f6722a486bfda0
  Ruleset: securityonion-yara
  Summary: This rule detects the TeleBots malware variant known as KillDisk. The detection is based on specific patterns found in the malware, including the strings "Plug-And-Play Support Service", " /c \"echo Y|", and a formatted string pattern "%d.%d.%d#%d:%d". Additionally, the file must satisfy the conditions of having a specific 16-bit signature at its offset and being less than 500KB in size.
  Updated-Date: '2024_08_07'
TeleBots_VBS_Backdoor_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0aad923e6b263f414a8e1ff2b35ee872
  Ruleset: securityonion-yara
  Summary: This rule detects the TeleBots malware, specifically the VBS Backdoor variant. The detection focuses on identifying characteristic strings used by this malware. Key indicators include commands related to command execution via 'cmd.exe', file paths like "c:\WINDOWS\addins" for generating temporary files, conditional checks for dumping processes, and command strings for certutil-based decoding operations. The rule targets files that match these criteria and are less than 8KB in size.
  Updated-Date: '2024_08_07'
TeleBots_VBS_Backdoor_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: de1dfd8eaf4511b77857727d4f51065b
  Ruleset: securityonion-yara
  Summary: This rule detects the TeleBots malware, specifically a variant known as the VBS Backdoor. It identifies specific command patterns and scripting code used by the malware, such as executing commands via `cmd.exe`, utilizing Windows Management Instrumentation (WMI) to interact with the system, and using `certutil` to encode files. The rule triggers if one or more of these patterns is found within files smaller than 30KB, or if multiple patterns are detected. This is designed to pinpoint the malicious activities characteristic of the TeleBots group.
  Updated-Date: '2024_08_07'
TeleBots_Win64_Spy_KeyLogger_G:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f9f84ad7424659a2d74e1b5287148782
  Ruleset: securityonion-yara
  Summary: This rule detects TeleBots malware, specifically the Win64 Spy KeyLogger G variant. It identifies this threat through specific strings related to file paths, hook installation messages, temporary file patterns, and logging of window process IDs and clipboard activity. The detection criteria are based on the presence of distinct debug paths, error messages, success messages, and certain patterns of clipboard and image activity within the executable file data.
  Updated-Date: '2024_08_07'
TeleDoor_Backdoor:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1ae683ab3dfb494ac5c46e09c5568126
  Ruleset: securityonion-yara
  Summary: This rule detects the TeleDoor Backdoor utilized in the Petya Attack in June 2017. It identifies specific string patterns related to the backdoor's operational commands and payload delivery mechanisms. The strings include encoded sequences for "PayloadAutoPayload," "RunCmdDumpData," and "ZvitWebClientExtMinInfo." The condition for detection checks for a specific file signature and ensures the file size is under 15000KB, requiring at least two of the defined strings to be present.
  Updated-Date: '2024_08_07'
TempRacer:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a2ea59d21bba4ba9f907731616977a48
  Ruleset: securityonion-yara
  Summary: This rule detects a Windows privilege escalation tool named TempRacer, specifically the TempRacer.exe file. It checks for the presence of specific strings related to the tool, such as paths to debug symbols, messages indicating injection into processes, commands for adding users to the administrators group, file renaming logs, and blocking notifications. The rule uses a combination of conditions to verify the presence of these strings along with ensuring the file's signature and size constraints are met.
  Updated-Date: '2024_08_07'
Test_php_php:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 686fe7af6f6af03efa5a7b3d09cec37f
  Ruleset: securityonion-yara
  Summary: This rule detects a specific PHP script that contains code snippets indicative of potential tampering or unauthorized modification. The identifiable characteristics include a line that defines a variable by concatenating the string "test" with a newline character, code for writing this string to a file using the `fwrite` function, and a line that denotes a specific entry, "HACKed by EntriKa," suggesting an unauthorized alteration of the file. These patterns are flagged individually to determine if any of them exist within the file, which might indicate malicious activity or simple testing/debugging purposes.
  Updated-Date: '2024_08_07'
ThreatGroup3390_C2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a19cf74f7905be9afa74917734e7e2d2
  Ruleset: securityonion-yara
  Summary: This rule detects command and control (C2) servers used by Threat Group 3390, an advanced persistent threat (APT). It identifies specific domain names, IP addresses, and email addresses associated with the group's infrastructure, including malicious sites posing as legitimate services such as "apigmail.com," "darkhero.org," "updatawindows.com," and IP addresses like "208.115.242.36" and "192.161.61.19." The rule activates if a file begins with the "MZ" header, indicating a potential executable file, and contains any one of the specified patterns indicating a connection to Threat Group 3390's C2 infrastructure.
  Updated-Date: '2024_08_07'
ThreatGroup3390_Strings:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7640fa368a2dfe4faa5302d8e74731ed
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of Threat Group 3390, an advanced persistent threat (APT) group, by searching for specific strings associated with their malicious activities. It looks for command execution involving directory changes and file copying in the Windows Temp directory, suspicious usage of the "svchost.exe" process with specific parameters, and the renaming of RAR files to ZIP format. It also detects references to "c:\\temp\\ipcan.exe" and a specific string pattern used for evaluating HTTP requests. This rule is applied to files smaller than 30KB in size.
  Updated-Date: '2024_08_07'
TidePool_Malware:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d7636ab4f0e35891cea3947a46a12c0b
  Ruleset: securityonion-yara
  Summary: This rule detects the TidePool malware, which is associated with the Ke3chang threat group as reported by Palo Alto Networks. The rule identifies the malware based on specific hash values and distinctive string patterns such as file paths, file names, and multipart form-data headers, some of which are related to Internet Explorer helper files and SOCKS proxy configurations. Additionally, the rule checks for executable files with a 'MZ' header and a file size smaller than 200KB.
  Updated-Date: '2024_08_07'
Tofu_Backdoor:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9de61ef621f00d5a55cb2c728c595dc6
  Ruleset: securityonion-yara
  Summary: 'This rule detects the Tofu Trojan, a type of malware identified by specific characteristics including the string "Cookies: Sym1.0," the presence of a named pipe matching the pattern "\\\\.\\pipe\\1[12345678]," and a particular byte sequence commonly associated with the Trojan''s behavior.'
  Updated-Date: '2024_08_07'
Tool_MSIL_CSharpUtils_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d8ecc9ac09c8c6cd612b8b38e415cbbf
  Ruleset: securityonion-yara
  Summary: This rule detects .NET Portable Executable (PE) files that contain specific Type Library GUIDs associated with the "CSharpUtils" project. These GUIDs, found within the binary, directly map to the ProjectGuid present in the ".csproj" file of a .NET project. The rule identifies the presence of these GUIDs to track and flag potential matches that are relevant to the "CSharpUtils" project, aiming to monitor and assess files for characteristics linked to this particular software development project.
  Updated-Date: '2024_08_07'
Tool_MSIL_SharpGrep_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 773d947babd59a55fc5a69d46aa34ae3
  Ruleset: securityonion-yara
  Summary: This rule detects .NET PE files containing the specific ProjectGuid associated with the 'SharpGrep' project by identifying a unique TypeLibGUID within the binary.
  Updated-Date: '2024_08_07'
Tool_asp:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a8531b3cff42407211c6ee4a0aa4d434
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific ASP tool by looking for distinctive text strings within files. It identifies indicators such as an email address "mailto:rhfactor@antisocial.com," the query parameter "?raiz=root," the string "DIGO CORROMPIDO<BR>CORRUPT CODE," and a particular key value. Detection occurs if at least two of these strings are found in the file.
  Updated-Date: '2024_08_07'
Tools_2014:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 66ea45dfeb3043806ca9eed6582e22a3
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a file named '2014.jsp', which is associated with a Chinese hacktool set. It identifies specific strings in the file, such as references to invoking a login process, executing 'cmd.exe' to list running services, and location paths to 'cmd.exe' within the Windows system directory. The rule applies to files smaller than 715KB.
  Updated-Date: '2024_08_07'
Tools_2015:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6cc0dadea8d33738018a6b7f6ffabe68
  Ruleset: securityonion-yara
  Summary: This rule detects a specific JSP web shell file named "2015.jsp," associated with a Chinese hack toolset. The identified strings within the file involve HTTP connection methods, input and output stream handling, and parameters referencing configuration files. The file size is limited to less than 7KB to match the known characteristics of this malicious script.
  Updated-Date: '2024_08_07'
Tools_cmd:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ed349e29e9bc3c333f47f6637f47268e
  Ruleset: securityonion-yara
  Summary: This rule detects a Chinese hack tool identified by specific strings within a Java Server Page (JSP) file named "cmd.jSp". It flags scripts that compare a parameter to a hardcoded value, use runtime execution to run commands, and import Java I/O functionalities. The script also prints specific messages and handles byte input and output streams. The conditions focus on the file size being less than 3KB and the presence of at least seven distinct indicators.
  Updated-Date: '2024_08_07'
Tools_scan:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e506f038ed4f9fc701f83fe2e4e6674f
  Ruleset: securityonion-yara
  Summary: This rule detects a Chinese hacktool named "scan.exe" by identifying specific string markers such as "Shanlu Studio", "_AutoAttackMain", and "_frmIpToAddr". The detection is verified if the file begins with the signature for a Windows portable executable (MZ header), has a file size smaller than 3000KB, and all the specified strings are present.
  Updated-Date: '2024_08_07'
Tools_unknown:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3a04d1f192c240a8c36fac27ad4e5559
  Ruleset: securityonion-yara
  Summary: This rule detects a Chinese hacktool identified by the filename "unknown.exe" and associated with the hash "4be8270c4faa1827177e2310a00af2d5bcd2a59f." The rule searches for specific strings within the file, including error messages related to reading data and port binding, an HTTP GET request string with specific parameters, a user-agent string mimicking an old version of Internet Explorer, failure messages related to tab control operations, and a local host reference. Detection is based on the presence of these strings in a file smaller than 2500KB that begins with the typical header for executable files.
  Updated-Date: '2024_08_07'
Tools_xport:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5508eba3c5c644f5aa1c6ab57d5a18c1
  Ruleset: securityonion-yara
  Summary: 'This rule detects the presence of a file named "xport.exe," which is a Chinese hacktool intended for port scanning purposes. The detection is based on the file containing specific strings related to its functionality, including error messages, usage examples, command line instructions, and output results. These strings indicate that "xport.exe" can perform detailed port scans and provide comprehensive scanning reports. The rule particularly looks for specific strings such as "Match operate system failed," "Example: xport www.xxx.com 80 -m syn," and "Usage: xport <Host> <Ports Scope> [Options]," confirming the tool''s identity and scanning capabilities.'
  Updated-Date: '2024_08_07'
TopHat_BAT:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2714f934855d82422633b07f6287c28a
  Ruleset: securityonion-yara
  Summary: 'This rule detects a specific batch file named "cgen.bat," which is associated with the TopHat campaign targeting the Middle East. It identifies this file by checking for particular strings and constructs within the file: the presence of a PowerShell command to create a memory stream from a Base64-encoded string, and specific markers such as "goto Start" and ":Start". The file size must be less than 5KB, and all specified strings must be present for the rule to trigger, indicating a high likelihood that the file is part of the malicious TopHat campaign.'
  Updated-Date: '2024_08_07'
TopHat_Malware_Jan18_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f7248b044bc74be931d2afcd3bdcc161
  Ruleset: securityonion-yara
  Summary: This rule detects malware associated with the TopHat campaign, which targets the Middle East region. It specifically identifies files using the predefined hash values and checks for the presence of certain strings related to system management, encryption, memory streaming, and dialog inclusion. The condition of the rule requires that the file starts with the "MZ" header, indicating a Windows executable, is smaller than 400KB, and matches the given import hash or contains six of the specified strings.
  Updated-Date: '2024_08_07'
TopHat_Malware_Jan18_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1b2c6a27d0b535f8f2e9fbb85ae222bc
  Ruleset: securityonion-yara
  Summary: This rule detects a specific malware linked to the TopHat campaign, identified by the filename "e.exe." It targets a threat operating within the Middle East region and leverages popular third-party services. The detection is based on several unique attributes within the binary, such as specific strings related to Windows registry paths and system settings for font substitutes, keyboard layouts, error messages, Windows Management Instrumentation (WMI) namespace, and certain encryption and export API strings. Additionally, it checks for a distinct import hash and ensures the file meets specified conditions regarding its format and size.
  Updated-Date: '2024_08_07'
Triton_trilog:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c730ce60ae0e6cd2dd5fcd6df7eee835
  Ruleset: securityonion-yara
  Summary: This rule detects the Triton APT malware, specifically targeting the file named trilog.exe. It identifies this malware by looking for specific strings within the file, including "inject.bin," "PYTHON27.DLL," and "payload." The rule is applicable to executable files smaller than 60KB and with the header value of 0x5a4d.
  Updated-Date: '2024_08_07'
TrojanDownloader:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: dd3e081b124bc8a10f5766a5223e4ab9
  Ruleset: securityonion-yara
  Summary: This rule detects a Trojan Downloader associated with a Flash exploit from February 2015. The detection is based on the presence of specific strings and function calls within the binary, including the strings "Hello World!" and "CONIN$", as well as various API function names like "GetCommandLineA," "ExitProcess," "CreateFileA," "SetConsoleMode," "TerminateProcess," and others. The Trojan targets functions related to process and file operations, indicating its potential behavior and functionality. Detection is also contingent on the file being smaller than 35,000 bytes.
  Updated-Date: '2024_08_07'
Trojan_ISMRAT_gen:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f8a6b2b04a09e11a54b1db80302ab844
  Ruleset: securityonion-yara
  Summary: This rule detects the ISM RAT, a Remote Access Trojan, by identifying specific string patterns and directory paths associated with its activity. It looks for certain HTTP user-agent strings such as "WinHTTP Example/1.0" and "Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0" as well as the phrase "|||Command executed successfully." Additionally, it checks for files within the Microsoft Windows temporary directory that match a specified pattern. The rule activates if these conditions are met within a file that starts with the "MZ" signature, typical for executable files.
  Updated-Date: '2024_08_07'
Trojan_MSIL_GORAT_Module_PowerShell_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 06932516de4fe7e083e006e22707de82
  Ruleset: securityonion-yara
  Summary: This rule detects .NET Portable Executable (PE) files that contain specific TypeLibGUIDs which are directly mapped to the ProjectGuid found in the '.csproj' file of the 'RedFlare - Module - PowerShell' project. By identifying these GUIDs in the binary, it helps to match and flag suspicious .NET projects related to the prescribed malicious activity.
  Updated-Date: '2024_08_07'
Trojan_MSIL_GORAT_Plugin_DOTNET_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 259ab198dc020fc82ce5b6e73eeaf4fa
  Ruleset: securityonion-yara
  Summary: This rule detects .NET Portable Executable (PE) files that contain specific TypeLibGUIDs, which map to the ProjectGuid found in the '.csproj' file of the 'RedFlare - Plugin - .NET' project. The presence of these TypeLibGUIDs, identified by their unique hexadecimal strings, indicates the possible relation to the specified project or a related malicious activity.
  Updated-Date: '2024_08_07'
Trojan_Macro_RESUMEPLEASE_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 66bfb07d2fc8731409718dfcd8ccae91
  Ruleset: securityonion-yara
  Summary: This rule detects a specific macro named RESUMEPLEASE, which is associated with FireEye. The rule checks for the presence of certain strings within a file, such as "For Binary As," "Range.Text," "Environ(", "CByte(", ".SpawnInstance_," and ".Create(". If all of these strings are found, it indicates the presence of the RESUMEPLEASE macro potentially used in a cyber attack.
  Updated-Date: '2024_08_07'
Trojan_Raw_Generic_4:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4e2c7169393cc3cd718794748b857a72
  Ruleset: securityonion-yara
  Summary: This rule detects a generic trojan by identifying specific hexadecimal patterns in the binary data of a file. These patterns are indicative of obfuscation techniques typically used by trojans, which do not start with the usual 'MZ' header but instead contain sequences that match certain criteria outlined in the rule. The conditions checked include presence of certain sequence and spacing of bytes that align with typical characteristics of malicious payloads found in trojans.
  Updated-Date: '2024_08_07'
Trojan_Win64_Generic_22:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 370d5deccd2bcd2173055b7741339eb8
  Ruleset: securityonion-yara
  Summary: This rule detects a Windows Trojan associated with FireEye by identifying specific malicious activity patterns in executable files. It looks for the usage of particular API calls such as "VirtualAllocEx," "UpdateProcThreadAttribute," "DuplicateTokenEx," and "CreateProcessAsUserA," which are commonly found in malware that performs process injection and token duplication to escalate privileges. Additionally, the rule triggers on unique byte sequences related to memory injection and process manipulation techniques, verifying the presence of these patterns in 64-bit Windows PE files by checking the MZ and PE headers.
  Updated-Date: '2024_08_07'
Trojan_Win64_Generic_23:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e730dba332e90530c35a402c4455bd36
  Ruleset: securityonion-yara
  Summary: This rule detects FireEye's Windows trojan by identifying several specific API calls and code patterns typically used by the malware. It scrutinizes the presence of certain API calls such as "VirtualAllocEx," "UpdateProcThreadAttribute," "DuplicateTokenEx," and "CreateProcessAsUserA," which are common in memory allocation and process tampering routines of the trojan. Additionally, it matches specific byte sequences related to injection processes and token manipulation. These patterns together help in accurately identifying the malicious behaviors linked to this Windows trojan.
  Updated-Date: '2024_08_07'
Trojan_Win_Generic_101:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 66cb11c544f63e3759476d64a3e80a12
  Ruleset: securityonion-yara
  Summary: This rule detects a specific Windows trojan associated with FireEye. It identifies the malware by looking for particular byte sequences and patterns within the binary code. These sequences involve certain operations and function calls like "PeekMessageA" and "PostThreadMessageA," which are indicative of the trojan's behavior. The rule applies to binaries with a specific structure, ensuring accurate detection of the malicious payload.
  Updated-Date: '2024_08_07'
TurlaMosquito_Mal_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 71a1c370801ac1ff5ac01c0a732b18cb
  Ruleset: securityonion-yara
  Summary: This rule detects a specific malware sample associated with the Turla Mosquito group. It identifies the presence of this malware by checking for certain characteristics within an executable file, such as a specific signature at the file's start, a file size smaller than 2000KB, and a specific import hash. Additionally, it looks for the presence of particular strings ("Pipetp" and "EStOpnabn") within the file.
  Updated-Date: '2024_08_07'
TurlaMosquito_Mal_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 46b5a0d5aa062f14153bf24be5edb4fe
  Ruleset: securityonion-yara
  Summary: This rule detects a specific malware sample associated with the Turla Mosquito campaign. The malware, noted for its advanced persistent threat (APT) activities, is identifiable by distinct strings such as ".?AVFileNameParseException@ExecuteFile@@", "no_address", "SRRRQP", and "QWVPQQ". Additionally, it targets executable files under a certain size with a specific import hash, highlighting its unique structure and behavior patterns as detailed in the related security report.
  Updated-Date: '2024_08_07'
TurlaMosquito_Mal_3:
  Created-Date: '2024_08_06'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b197e26dfb9242f920355d77dc3ac45f
  Ruleset: securityonion-yara
  Summary: This rule detects a malware sample associated with the Turla Mosquito malware, a sophisticated cyber-espionage tool known for targeting high-profile entities. It looks for specific indicators in the file, such as the presence of the "InstructionerDLL.dll" string and various HTTP user-agent and URL patterns. These include a Mozilla user-agent string mimicking an older Chrome browser and a script path used in network communications. Additionally, the rule searches for SQL queries related to antivirus products and a Microsoft Update string, indicating attempts to query system defenses and possibly masquerade as legitimate network traffic. The rule also checks for specific export functions and an exact import hash value to further validate the presence of this malware.
  Updated-Date: '2024_08_06'
TurlaMosquito_Mal_4:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3f72cbafe00ac8c25524d88767b86471
  Ruleset: securityonion-yara
  Summary: This rule detects a specific malware sample associated with the Turla Mosquito group. It identifies the sample by checking if the file begins with the MZ header (indicating a Windows executable), has a file size of less than 800KB, and matches a given import hash (imphash) that uniquely identifies the specific import table of the executable.
  Updated-Date: '2024_08_07'
TurlaMosquito_Mal_5:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6c0669beab590d591f12589f2328c1f8
  Ruleset: securityonion-yara
  Summary: This rule detects a malware sample associated with the Turla Mosquito campaign, identified by a specific file hash ("26a1a42bc74e14887616f9d6048c17b1b4231466716a6426e7162426e1a08030"). It specifically looks for files with an initial hexadecimal value of 0x5a4d and a file size of less than 300KB, matching a particular Import Hash (pe.imphash) value of "ac40cf7479f53a4754ac6481a4f24e57".
  Updated-Date: '2024_08_07'
TurlaMosquito_Mal_6:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: bf006faacfcf69b664332b8011b2f349
  Ruleset: securityonion-yara
  Summary: This rule detects a malware sample associated with the Turla group, specifically from the Turla Mosquito report. It identifies the malware by looking for specific strings that point to its activity, including a particular URL pattern related to query requests and a specific user-agent string mimicking a legitimate web browser (Chrome version 41.0.2228.0). Additionally, it checks for error messages related to failed username retrievals and certain hexadecimal sequences within the file. Detection is conditioned on the presence of a specific file header and a file size less than 500KB, with the malware being recognized if it matches multiple defined string patterns.
  Updated-Date: '2024_08_07'
Turla_APT_Malware_Gen1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e8e0ce4eeb65d88a183c898b99b45e62
  Ruleset: securityonion-yara
  Summary: This rule detects Turla malware, which was notably used in the espionage case involving RUAG. The detection is based on specific strings found within the malware, including error messages like "too long data for this type of transport" and "not enough server resources to complete operation," as well as references to various packet-sniffing tools such as "tcpdump.exe" and "wireshark.exe." Additionally, the rule targets certain unusual filenames like "miniport.dat" and suspicious network configuration strings like "net_password=%s". Within its conditions, the rule verifies the presence of specific patterns and file characteristics to confirm the detection of malware.
  Updated-Date: '2024_08_07'
Turla_APT_Malware_Gen3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d2b1cb5247c7b3bc26c51c567e98efa1
  Ruleset: securityonion-yara
  Summary: This rule detects Turla malware, a sophisticated form of espionage software linked to the case involving RUAG. The detection is based on specific patterns found in file paths, error messages, and various configuration strings indicative of this malware's activity. The rule looks for named pipes, specific error text related to operation configuration, mutex wait states, and sniffer activities. Additionally, it checks for particular registry entries related to Internet Settings, web addresses such as Yahoo and Bing, and strings mimicking user agent details within HTTP requests. The presence of these elements suggests the malware's operation within a compromised system.
  Updated-Date: '2024_08_07'
Turla_APT_srsvc:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d0d1a3679233f9146ccaea0cce8de8de
  Ruleset: securityonion-yara
  Summary: This rule detects Turla malware, known for its involvement in the RUAG espionage case, by identifying specific strings within files. These include "SVCHostServiceDll.dll," "msimghlp.dll," "srservice," "ModStart," and "ModStop." The detection criteria also account for PE file characteristics, such as a 'MZ' header and file size being less than 20KB, to confirm the presence of the malware.
  Updated-Date: '2024_08_07'
Turla_KazuarRAT:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 14a08d166dfa6d8aee501a4680069821
  Ruleset: securityonion-yara
  Summary: This rule detects the Turla Kazuar Remote Access Trojan (RAT), which is identified based on specific characteristics of the executable file. These characteristics include the presence of the string "~1.EXE" in wide format, the string "dl32.dll" in ASCII full-word, the ASCII string "HookProc@", and the full-word ASCII string "0`.wtf". The rule triggers if the file size is less than 20KB, the file starts with the signature "MZ" (hexadecimal 5a4d), and either matches a specific import hash "682156c4380c216ff8cb766a2f2e8817" or contains at least two of the mentioned strings.
  Updated-Date: '2024_08_07'
Turla_Mal_Script_Jan18_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f5a348621866b721d5de3905ba3b2dd8
  Ruleset: securityonion-yara
  Summary: This rule detects a malicious script associated with Turla, a sophisticated cyber-espionage group. It identifies specific patterns and functions within the script, such as the usage of the "charCodeAt" and "charAt" methods, certain WScript operations, and a variable containing a base64 character set. The script exhibits behaviors typical of obfuscation and encoding techniques used to evade detection. The rule focuses on scripts smaller than 200KB and flags the presence of at least two of the specified strings.
  Updated-Date: '2024_08_07'
Txt_Sql:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ea330a273d9491a658228d0a3fdc9799
  Ruleset: securityonion-yara
  Summary: This rule detects a specific Chinese hacktool known as a webshell by examining a file called Sql.txt. The rule triggers if the file includes certain ASCII strings indicative of malicious SQL commands and operations. These strings include commands to execute Windows Command Shell actions via cmd.exe, extending stored procedures using xp_regwrite, and using xp_cmdshell to run system commands. The detection also checks for session manipulation with an empty login session string. The file must be less than 15KB for the rule to apply.
  Updated-Date: '2024_08_07'
Txt_asp:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f767bcd2e3e56008677d119280b7d81d
  Ruleset: securityonion-yara
  Summary: This rule detects a webshell used as part of a Chinese hacktool set, particularly focusing on a file named "asp.txt". It identifies malicious ASP scripts by searching for specific strings within the file, such as "Server.ScriptTimeout=999999999:Response.Buffer=true:On Error Resume Next:BodyCol" and "<%@ LANGUAGE = VBScript.Encode %><%". The condition to trigger this detection includes checking that the file starts with the characters "<%" (hex 0x253c) and is less than 100KB in size, ensuring that all the specified strings are present within the file.
  Updated-Date: '2024_08_07'
Txt_asp1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 584491516944dfeef48a6666a33db33f
  Ruleset: securityonion-yara
  Summary: This rule detects a specific web shell tool, targeting a text file named asp1.txt, associated with a Chinese hacktool set. It identifies the presence of suspicious code strings within files under 70KB that are used to execute command-line operations through cmd.exe and manipulate registry settings for automatic login. The web shell also involves the creation of temporary files on the server, indicating potential malicious activity.
  Updated-Date: '2024_08_07'
Txt_aspx:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 73c8c44b927d1eb42ed84e344187ad29
  Ruleset: securityonion-yara
  Summary: This rule detects a Chinese hacktool webshell known as "file aspx.jpg," which is obfuscated as an image file but contains malicious ASPX code. It looks for specific string patterns within a file smaller than 100KB, including SQL execution commands, process enumeration through .NET, and HTML elements associated with command shell interfaces. The rule uses these signatures to identify the presence of this particular webshell, often used by attackers to execute malicious commands on compromised web servers.
  Updated-Date: '2024_08_07'
Txt_aspx1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 948bb3c09c60d99c23c79fc909a6e2c3
  Ruleset: securityonion-yara
  Summary: This rule detects a Chinese hacktool set, specifically targeting webshells, by identifying files containing specific Jscript code within ASPX pages. The files in question are characterized by an eval function that processes user inputs, potentially allowing for unsafe code execution. The rule checks for small-sized files that contain particular strings indicative of this malicious behavior.
  Updated-Date: '2024_08_07'
Txt_aspxlcx:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b1c803e4c123e9035ac3db256330e771
  Ruleset: securityonion-yara
  Summary: This rule detects a specific Chinese hacktool set identified as webshells, particularly from a file named aspxlcx.txt. It looks for specific string patterns related to remote IP and port handling within a class called PortForward. The conditions for this detection include a file header that begins with "<%" and a file size smaller than 18KB, ensuring all defined strings are present.
  Updated-Date: '2024_08_07'
Txt_aspxtag:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c8dc324651ae7a96229e505fb563dead
  Ruleset: securityonion-yara
  Summary: This rule detects a Chinese hacktool set specifically targeting webshells, identified in the file named aspxtag.txt. The detection is based on the presence of specific strings within files smaller than 2KB. These strings include a command to request a URL, a command to write data, and a response message saying "Hi,Man 2015".
  Updated-Date: '2024_08_07'
Txt_ftp:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5d0ad93941d2ed638d36cbd9e7d05c20
  Ruleset: securityonion-yara
  Summary: This rule detects a Chinese hacktool webshell associated with a file named `ftp.txt`. It identifies specific ASCII strings that are indicative of malicious activity, such as attempts to execute commands via SQL Server's `xp_cmdshell`, initiating FTP sessions, and downloading executable files like `lcx.exe` and `php.exe`. The rule checks for files less than 2KB in size and triggers if at least two of these suspicious strings are found.
  Updated-Date: '2024_08_07'
Txt_hello:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6abcc0a8771e39ab330a7949a116091f
  Ruleset: securityonion-yara
  Summary: This rule detects a Chinese hacktool web shell associated with the file "hello.txt." The web shell uses specific code snippets, such as initializing a new `ProcessStartInfo` object for `cmd.exe`, assigning command-line arguments with `Cmd.text`, and starting the process. Additionally, it identifies a particular HTML link element used for command execution. The rule triggers if the file size is less than 25KB and all specified strings are present.
  Updated-Date: '2024_08_07'
Txt_jsp:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2eb94e974e2774a546f3af3e43e3f660
  Ruleset: securityonion-yara
  Summary: This rule detects a specific type of Chinese hacktool webshell typically stored as a JSP file. It identifies the presence of commands related to executing system processes and network connections, such as "cmd.exe" and "net start," along with options for creating reverse shells using netcat. The detection relies on matching two or more of these distinct command strings within files smaller than 715KB.
  Updated-Date: '2024_08_07'
Txt_jspcmd:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c1f7a982cceda22026f8ffc6627cc5cc
  Ruleset: securityonion-yara
  Summary: This rule detects a Chinese hacktool webshell named "jspcmd.txt." It looks for specific strings within a file, such as a condition that checks if a certain parameter "Confpwd" equals "1752393" and a print statement outputting "Hi,Man 2015." It targets files smaller than 1KB in size.
  Updated-Date: '2024_08_07'
Txt_lcx:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 745d4c268dffa52ac47f0ec6ef4caff5
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a Chinese hacktool used for webshell activities, specifically associated with the file "lcx.c". It identifies specific ASCII strings that indicate usage instructions, connection status messages, and error notifications related to network connections within the file. The detection condition is met if the file size is less than 25KB and at least two of the specified strings are found.
  Updated-Date: '2024_08_07'
Txt_php:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 30dd6eb2dbc6b5980d4347cd3e089dfa
  Ruleset: securityonion-yara
  Summary: This rule detects a Chinese hacktool known as a webshell, specifically indicated by the presence of certain PHP code snippets used for malicious activities. It looks for strings such as "$Config=$_SERVER['QUERY_STRING'];", "gzuncompress($_SESSION['api']),null);", "sprintf('%s?%s',pack(\"H*\"," and "if(empty($_SESSION['api']))" to identify the webshell file. The condition is met if the file size is less than 1KB and all specified strings are present.
  Updated-Date: '2024_08_07'
Txt_php_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 179ad6cb7558c613b96b31365e86e0f4
  Ruleset: securityonion-yara
  Summary: This rule detects a specific variant of a Chinese hacktool webshell, identified through particular PHP functions and code snippets indicative of malicious activity. Key indicators include functions for database connections, cookie manipulation, dynamic web page titles based on server host information, links to external sites for additional tools or plugins, and commands related to system information retrieval such as IP configuration and hosts file access. The presence of at least four of these string patterns in a PHP or HTML file, especially one smaller than 100KB, suggests it might be part of this known webshell malware used for unauthorized access and control of compromised web environments.
  Updated-Date: '2024_08_07'
Txt_shell:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2e67684a7b9f904956baa4074dd94064
  Ruleset: securityonion-yara
  Summary: This rule detects a Chinese hacktool set webshell file named "shell.c". It looks for specific strings indicative of a webshell, including diagnostic messages related to remote shell connection issues, usage instructions involving a reflective IP and port, execution of a shell using "/bin/sh", declaration of a shell variable "/bin/sh", and an attempt to connect backdoor. The file size must be less than 2KB, and at least two of these strings must be found to trigger the rule.
  Updated-Date: '2024_08_07'
Txt_xiao:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ce50c138d26bf9c0286897baa88390af
  Ruleset: securityonion-yara
  Summary: This rule detects a Chinese web shell tool, specifically targeting the file named "xiao.txt." The rule identifies this malicious file by searching for several specific strings within the code. These strings include commands related to session handling, password encoding, SQL table creation, command execution functions, and HTML form manipulation. The rule applies to files smaller than 100KB.
  Updated-Date: '2024_08_07'
Typical_Malware_String_Transforms:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 506c83ed24ce8ff1dab3d349019adaa2
  Ruleset: securityonion-yara
  Summary: This rule detects typical strings associated with malware that have been reversed or otherwise modified. It identifies modified versions of executable file names, libraries, imports, registry keys, and folder paths commonly used by malicious software to evade detection. Examples include reversed names like "exe.tsohcvs" (likely "svchost.exe"), "lld.23lenreK" (likely "Kernel32.dll"), and "paeHssecorPteG" (likely "GetProcessHeap"). The rule also includes specific exclusions to avoid false positives, such as the phrase "Application Impact Telemetry Static Analyzer".
  Updated-Date: '2024_08_07'
Tzddos_DDoS_Tool_CN:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 250ca3dfffd6f35556f16dae38460cc6
  Ruleset: securityonion-yara
  Summary: This rule detects a disclosed hacktool set known as Tzddos, a tool associated with Distributed Denial-of-Service (DDoS) attacks. Key indicators include specific ASCII strings used in batch file operations, such as processing the content of text files (`host.txt`, `s2.txt`, `result.txt`, and `s1.txt`), deleting these files, and initiating a process (`Http.exe`) with parameters derived from these files. The conditions for detection are met when all specified strings are present, indicating the tool's specific batch processing and file handling behavior.
  Updated-Date: '2024_08_07'
UACElevator:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b43d76e1421a67abae02b7e273950b63
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the UACElevator malware, which is known for bypassing User Account Control (UAC) on Windows systems. It identifies the specific executable file UACElevator.exe, using various unique strings associated with its functionality, such as references to `dwmapi.dll` locations and specific error messages indicating infection activities and stack corruption issues. The rule includes a precise file hash and checks for typical Windows Portable Executable (PE) characteristics to ensure accurate detection.
  Updated-Date: '2024_08_07'
UACME_Akagi:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7c13e030c902cca70191f5e234654599
  Ruleset: securityonion-yara
  Summary: This rule detects the UACMe tool, which exploits a built-in Windows AutoElevate backdoor to bypass User Account Control (UAC). Indicators include specific strings such as "UACMe injected, Fubuki at your service," references to the temporary directory with "Hibiki.dll," and an error message about writing to target process memory. Additional markers include the presence of system paths like "%systemroot%\\system32\\cmd.exe" and "%systemroot%\\system32\\sysprep\\sysprep.exe," as well as commands involving file extraction. Furthermore, the rule checks for various DLL names and functions associated with process manipulation and memory writing, such as "ntdll.dll," "Cabinet.dll," "GetProcessHeap," "WriteProcessMemory," and "ShellExecuteEx."
  Updated-Date: '2024_08_07'
UACME_Akagi_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3346dbf14e29bce182ce4a4cddbd6d7a
  Ruleset: securityonion-yara
  Summary: This rule detects a Windows User Account Control (UAC) bypass method implemented by the files Akagi32.exe and Akagi64.exe. The detection criteria include specific text strings such as usage instructions for Akagi.exe, an error message indicating that a target file already exists, and registry paths related to Image File Execution Options. Additionally, strings related to the execution or loading of files from the system directory, such as "cryptbase.DLL," and administrative elevation settings are used to identify the presence of this UAC bypass technique.
  Updated-Date: '2024_08_07'
UBoatRAT:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5cc3e399305bc76ae5b72c7d77ac5ca6
  Ruleset: securityonion-yara
  Summary: This rule detects UBoatRAT malware samples. UBoatRAT is a remote access Trojan (RAT) that targets systems, primarily in East Asia, as documented in research by Palo Alto Networks. The rule identifies the malware by looking for specific strings within the executable, such as "URLDownloadToFileA," "GetModuleFileNameW," and several DLL names like "WININET.dll," "urlmon.dll," "WTSAPI32.dll," and "IPHLPAPI.DLL." It also checks for specific byte patterns indicative of the Yoda protector and verifies that the file size is within a certain range. Additionally, the rule includes conditions to confirm the presence of the MZ and PE headers typical of Windows executable files and inspects a particular section for expected values related to the Vprotect software.
  Updated-Date: '2024_08_07'
UBoatRAT_Dropper:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e5222d267154c2ff3357d843d1859407
  Ruleset: securityonion-yara
  Summary: "This rule detects the presence of the UBoatRAT Dropper, a type of malware used mainly in cyber espionage, particularly targeting East Asia. It identifies specific string patterns and file characteristics\u2014such as the presence of certain ASCII strings like \"GetCurrenvackageId\" and \"fghijklmnopq,\" as well as a signature file size and magic header\u2014that indicate the dropper's distinct traits within a file."
  Updated-Date: '2024_08_07'
URL_File_Local_EXE:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7b36adf0f9540cbed9c34aed266970d1
  Ruleset: securityonion-yara
  Summary: 'This rule detects an .url file that references a local executable, specifically targeting file shortcuts in Windows environments. The rule identifies such files by looking for the marker "[InternetShortcut]" and a URL pattern that points to a local executable with a path starting from the C: drive, ensuring the file size is less than 400 bytes.'
  Updated-Date: '2024_08_07'
UnPack_rar_Folder_InjectT:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 703242e31b1483ea6b63d96e28ba00d8
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the hacktool called "InjectT.exe," which is an old disclosed set of tools used for hacking purposes. The tool includes references to installation and management of a service, with specific strings indicating commands to install, start, and stop the service. The rule also scans for error messages related to port settings and identifies the loading of certain DLL files such as "psapi.dll" and "TInject.Dll." Additionally, it checks for certain registry paths and executable file indicators, such as "Software\\Microsoft\\Internet Explorer\\WinEggDropShell" and "injectt.exe," to confirm the presence of this specific hacktool.
  Updated-Date: '2024_08_07'
UnPack_rar_Folder_TBack:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 97199c372284c59a56ce2853da8640e0
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a hacktool, specifically the file TBack.DLL, which is associated with various malicious activities. It identifies strings related to port redirection, downloading files, stopping password sniffers, setting terminal ports, starting sniffer threads, obtaining a shell, deleting services, disconnecting threads, listing connected IPs, executing programs, and rebooting the system. The rule triggers if at least four of these indicative strings are found, highlighting potential hacktool activity on the compromised system.
  Updated-Date: '2024_08_07'
Unauthorized_Proxy_Server_RAT:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b8e107d58d2afb8552d3e4e72fc39282
  Ruleset: securityonion-yara
  Summary: This rule detects a Remote Access Trojan (RAT) identified as an Unauthorized Proxy Server RAT. It utilizes a variety of hexadecimal string patterns to identify the presence of this malware, which is known to establish unauthorized proxy servers. The specific patterns targeted include various sequences of hexadecimal instructions, each representing critical segments of the RAT's code. The goal of the rule is to match any of these strings in a given sample to indicate a potential infection.
  Updated-Date: '2024_08_07'
Unidentified_Malware_Two:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 43353307440f995b91cc557a06f34529
  Ruleset: securityonion-yara
  Summary: This rule detects an unidentified implant associated with APT29, also known as GRIZZLY STEPPE. It identifies the presence of specific strings and hexadecimal patterns within a file that indicate malicious activity. These include references to a particular PHP gateway ("/zapoy/gate.php"), specific hexadecimal sequences, a path to a debug file ("S:\Lidstone\renewing\HA\disable\In.pdb"), another set of hexadecimal instructions, an explicit phrase ("fuckyou1"), and an executable file ("xtool.exe"). The combination of these elements serves to identify this particular malware.
  Updated-Date: '2024_08_07'
Unit78020_Malware_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5ab509eb55eddff35dac050c940feab4
  Ruleset: securityonion-yara
  Summary: This rule detects malware associated with the Chinese APT group PLA Unit 78020 by identifying specific characteristics related to the executable file "msictl.exe". It looks for the presence of strings such as "%ProgramFiles%\\Internet Explorer\\iexplore.exe", "msictl.exe", "127.0.0.1:8080", "mshtml.dat", "msisvc", and "NOKIAN95/WEB". Additionally, the file must have a size less than 160KB and a header starting with the bytes 0x5a4d.
  Updated-Date: '2024_08_07'
Unit78020_Malware_Gen2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d2b5c97a986a85c090c240518ca82c76
  Ruleset: securityonion-yara
  Summary: This rule detects malware associated with the Chinese Advanced Persistent Threat (APT) group, PLA Unit 78020. It identifies the malware through a series of specific string patterns, including references to the function "GetModuleFileNameExW", the filename "MSN Talk Start.lnk", and the term "SeDebugPrivilege". Additional strings such as "WinMM Version 1.0", "dwError1 = %d", and "*Can't Get" are also used as indicators. The condition for detection specifies that the file should start with the characters "MZ" and be less than 1000KB in size while matching all identified string patterns.
  Updated-Date: '2024_08_07'
Unit78020_Malware_Gen3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 896e85bf7b5cd9536a42ae4974ab6adc
  Ruleset: securityonion-yara
  Summary: This rule detects malware associated with the Chinese APT PLA Unit 78020. It identifies specific patterns within the malware, such as HTTP GET and POST requests using particular User-Agent strings, file paths, and registry entries. Noteworthy elements include references to "J:\chong\" directories, specific user agents like "Netscape" and a modified "Mozilla/5.0," as well as certain software and network proxy settings. It also detects the presence of a particular executable file "SslMM.exe" in the mentioned directory path and other indicative strings that point to this malware's activity.
  Updated-Date: '2024_08_07'
Unknown_0f06c5d1b32f4994c3b3abf8bb76d5468f105167:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: bbde68efcf89fcfb976814e6477cc985
  Ruleset: securityonion-yara
  Summary: This rule detects a specific type of web shell by searching for particular string patterns within files. The rule checks for scripts that attempt to create a file named "lola.php" within the server's document root directory. It looks for the presence of code that opens this file for writing and then writes to it using base64-decoded data. These indicators suggest the presence of malicious web shell activity aimed at ensuring persistence and facilitating remote control of the server.
  Updated-Date: '2024_08_07'
Unknown_8af033424f9590a15472a23cc3236e68070b952e:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 74aa918813b5cc1470a2dbcc5b466fb8
  Ruleset: securityonion-yara
  Summary: This rule detects a malicious web shell. It identifies specific patterns within files, such as checks for the document root of the server, code to open a file pointer with write permissions, and operations involving base64-decoded data being written to files. The rule triggers if these patterns appear in files smaller than 6KB in size, particularly checking if the file's initial bytes match a specific hexadecimal value.
  Updated-Date: '2024_08_07'
Unknown_Malware_Sample_Jul17_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e19e36b528ba5e2aa6661cfb967b8b9a
  Ruleset: securityonion-yara
  Summary: This rule detects an unknown malware sample that communicates with a pastebin RAW URL. It searches for specific strings within a file, including references to "System.Web.Services.Protocols.SoapHttpClientProtocol," "https://pastebin.com/raw/," "My.Computer," and "MyTemplate." The detection criteria are based on the file having an MZ header, being less than 200KB in size, and containing all specified strings.
  Updated-Date: '2024_08_07'
Unpack_Injectt:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 935f41ba76bd60b5ee7ebdf25a920692
  Ruleset: securityonion-yara
  Summary: This rule detects a file named Injectt.exe associated with webshells that automatically generates installation and uninstallation services. It searches for specific strings within the file, including commands that indicate service installation or uninstallation, and the presence of certain rights and service management functionalities.
  Updated-Date: '2024_08_07'
Unpack_TBack:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9e841aa58ab28d6cdd914060870a6ba8
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the TBack.dll webshell by looking for the specific string "\\final\\new\\lcc\\public.dll" associated with the file.
  Updated-Date: '2024_08_07'
Unspecified_Malware_Jul17_1A:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 49a68d297ea145f071151388148c0686
  Ruleset: securityonion-yara
  Summary: This rule detects samples of an unspecified malware from July 2017, potentially associated with the Winnti HDRoot. It identifies instances by checking for specific filenames such as "wuauserv.dll" in the "%SystemRoot%\\System32\\" directory, ensuring precise matches with both full-word ASCII and wide strings. Other indicative identifiers include "ocgen.logIN" and "ocmsn.logIN" in wide format, as well as "Install.log" in wide format. Additional conditions include verifying the presence of the "MZ" header and ensuring the file size is under 900KB.
  Updated-Date: '2024_08_07'
Unspecified_Malware_Jul17_2C:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2aeea27f450fd15a910efb757796b406
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of unspecified malware associated with certain file paths, domains, and debugging information. Specifically, it looks for the path "%AllUsersProfile%\\DeviceSync\\m.exe", the domain "freenow.chickenkiller.com", and the debug path "\\Release\\PhantomNet-SSL.pdb". The rule also checks for various strings indicative of malicious behavior, such as specific antivirus product queries, Base64 patterns, and HTTP proxy authentication mechanisms. It targets files with a "MZ" header, specifying a file size of less than 400KB, and triggers detection based on the presence of certain critical indicators.
  Updated-Date: '2024_08_07'
Unspecified_Malware_Oct16_A:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8d33810b8ec4d212b24817c83b96a568
  Ruleset: securityonion-yara
  Summary: This rule detects a specific malware active since October 2016 by identifying particular strings and opcodes associated with its presence. The malware interacts with various components and executables on the Windows operating system, including specific DLL paths, system pipes, and standard Windows services. It also manipulates critical registry entries under the Microsoft Windows NT CurrentVersion Image File Execution Options and utilizes executable files such as "boottemp.exe" and "booter.exe". Furthermore, the rule identifies unique patterns and hexadecimal sequences corresponding to the malware's footprint within files smaller than 1000KB. The rule effectively captures the malware's characteristics both in files and within system memory.
  Updated-Date: '2024_08_07'
Unspecified_Malware_Oct16_C:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 56b4200689377be346e40dc1497d4c2a
  Ruleset: securityonion-yara
  Summary: 'This rule detects an unspecified malware sample based on specific attributes found within its code. It looks for a combination of unique strings: "dUSER32.DLL" and "output.dll," and verifies the presence of these strings in files under 5000KB in size. Additionally, it ensures that the file''s header starts with the value 0x5a4d, a common characteristic of executable files.'
  Updated-Date: '2024_08_07'
Unspecified_Malware_Oct16_D:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: edf05aa60c7a852e6cbb912bfc4591c9
  Ruleset: securityonion-yara
  Summary: This rule detects unspecified malware by identifying specific file paths, executable names, and password iteration strings commonly associated with the malware. Additionally, it utilizes particular opcode patterns to match the characteristic byte sequences of the malware. The rule is triggered if the file starts with the hex value 0x5a4d (indicative of a PE file) and is smaller than 1000KB in size.
  Updated-Date: '2024_08_07'
Unspecified_Malware_Oct16_E:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4077c1200478af1c63579bafbb828dc2
  Ruleset: securityonion-yara
  Summary: This rule detects unspecified malware identified in October 2016 by checking for specific strings within a file. The presence of the strings "P3pORt", "msdownld.tmp", and "TMP4351$.TMP", along with a file size of less than 1000KB and a specific file header value, indicates the presence of this malware.
  Updated-Date: '2024_08_07'
Unspecified_Malware_Sep1_A1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e9e14c5996355f79aea740d448385024
  Ruleset: securityonion-yara
  Summary: This rule detects a malware sample mentioned in a DragonFly Advanced Persistent Threat (APT) report. The detection is based on specific characteristics, including the PE file starting with the "MZ" header, a file size of less than 200KB, and a unique PE import hash value of "17a4bd9c95f2898add97f309fc6f9bcd".
  Updated-Date: '2024_08_07'
Upatre_Hazgurut:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2595785a6bed273a17d83d9381954317
  Ruleset: securityonion-yara
  Summary: This rule detects the Upatre malware by identifying the specific file named "hazgurut.exe". Upatre is a type of malware often used to download and install additional malicious software onto an infected system. The detection criteria include verifying the file's signature and ensuring the file size is under 1500KB. It looks for the presence of specific strings related to Windows Dynamic Link Libraries (DLLs) and a requested execution level statement requiring administrator rights within the first 4000 bytes of the file. The rule also leverages known hash values of the file to confirm the detection.
  Updated-Date: '2024_08_07'
UploadShell_98038f1efa4203432349badabad76d44337319a6:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b32d7042fd78f70857bea5e3faf823b4
  Ruleset: securityonion-yara
  Summary: This rule detects a web shell, a malicious script used by attackers to gain unauthorized access and control over web servers. It focuses on specific patterns such as a script that attempts to read the "wp-config.php" file, commonly associated with WordPress installations, and a command to delete a file named "export-check-settings.php". Additionally, it looks for a string that checks the status of PHP safe mode. The rule triggers when the file in question is smaller than 6KB and matches these conditions.
  Updated-Date: '2024_08_07'
User_Function_String:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 565d344ce0602272de8e3af90d45fd62
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of potential malicious code by identifying specific strings related to user functions, such as "e.RandomHashString," "e.Decode," "e.Decrypt," "e.HashStr," and "e.FromB64." These function names suggest activities like hashing, decoding, decryption, and base64 conversion, which may indicate the involvement of obfuscation or data manipulation tactics commonly associated with hostile state actors targeting engineering and industrial control systems.
  Updated-Date: '2024_08_07'
VBS_WMIExec_Tool_Apr17_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e8764a93e8a5e112f0986f71b40c31f6
  Ruleset: securityonion-yara
  Summary: This rule detects scripts associated with the Operation Cloud Hopper cyber espionage campaign. It identifies specific command execution patterns and strings indicative of WMIExec, a tool used for remote command execution through Windows Management Instrumentation (WMI). The detection looks for commands involving network use, command execution, error redirection, and temporary file creation within VBScript code.
  Updated-Date: '2024_08_07'
VBS_dropper_script_Dec17_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 56f3a0c30131e0d25018ec5be52aafbd
  Ruleset: securityonion-yara
  Summary: This rule detects a suspicious Visual Basic Script (VBS) that drops an executable. It identifies the file based on specific hexadecimal patterns found in legitimate software samples and the script creating a `Wscript.Shell` object, typically used for executing shell commands. The combination of these characteristics within a file smaller than 600KB triggers the detection, implying malicious behavior indicative of a dropper script.
  Updated-Date: '2024_08_07'
VBScript_Favicon_File:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6c722fc86a373b8e1707b84276513b11
  Ruleset: securityonion-yara
  Summary: This rule detects a VBScript file disguised as a favicon, which was used in the Leviathan incident. The VBScript includes specific strings such as an XML declaration, commands to terminate the mshta.exe process, and script language specifications. It also utilizes environment variables like `%ALLUSERSPROFILE%` and `%temp%`. The detection criteria are based on the file being less than 100KB in size, having a specific file header, and containing at least one of the identified strings, or alternatively, three of the listed characteristic strings.
  Updated-Date: '2024_08_07'
VSSown_VBS:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: da2984048fe17ef8f184f9eac0a8a66b
  Ruleset: securityonion-yara
  Summary: This rule detects a malicious script named VSSown.vbs, which targets Volume Shadow Copy Service (VSS) on Windows systems. The script aims to export shadow copy elements, such as NTDS (which contains directory services data), to facilitate exfiltration and subsequent cracking. Specific indicators include querying for VSS and shadow copies, creating symbolic links using the command line, and invoking certain Windows Management Instrumentation (WMI) components and WScript.
  Updated-Date: '2024_08_07'
VUBrute_VUBrute:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c052332f6d70aa6c0fb55b79bfae0ccd
  Ruleset: securityonion-yara
  Summary: This rule detects the PoS (Point of Sale) scammer software known as VUBrute. The detection hinges on several specific strings within the executable file VUBrute.exe, including text references to "Text Files (*.txt);;All Files (*)", the URL "http://ubrute.com", and formatted log information such as "IP - %d; Password - %d; Combination - %d". It also looks for the presence of a file named "error.txt". These indicators collectively help identify this particular malicious software aimed at compromising Point of Sale systems.
  Updated-Date: '2024_08_07'
VUBrute_config:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b6734f76470c2863dda37ad63a3af668
  Ruleset: securityonion-yara
  Summary: This rule detects the configuration file "config.ini" associated with a PoS (Point of Sale) scammer toolbox. The detection focuses on specific strings within the file, including settings such as "Restore=1," "Thread=" and "Running=1," as well as other configuration parameters like "CheckCombination," "AutoSave=1.000000," "TryConnect," and "Tray." These strings help to identify the malicious software based on its configuration details.
  Updated-Date: '2024_08_07'
VULN_Confluence_Questions_Plugin_CVE_2022_26138_Jul22_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e18dc562bd2fa95c675b57ec99cab8ef
  Ruleset: securityonion-yara
  Summary: This rule detects the properties file of the Confluence Questions plugin containing a static username and password, indicating the presence of a backdoor associated with CVE-2022-26138. It looks for specific plain text strings related to the predefined user password and markers indicating the file and its size within the plugin's directory.
  Updated-Date: '2024_08_07'
VULN_Dell_BIOS_Update_Driver_DBUtil_May21:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a74baee98144e73c96df91b57fe25591
  Ruleset: securityonion-yara
  Summary: This rule detects the vulnerable Dell BIOS update driver known as DBUtil_2_3.Sys, which allows for privilege escalation as detailed in CVE-2021-21551. The driver is typically located in the C:\Windows\Temp folder. The detection relies on matching specific strings related to the Dell BIOS Utility Driver and the known hashes associated with the vulnerable driver.
  Updated-Date: '2024_08_07'
VULN_LNX_OMI_RCE_CVE_2021_386471_Sep21:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3920629dd002fb141b4eec48df936d83
  Ruleset: securityonion-yara
  Summary: This rule detects vulnerable versions of the Linux OMI (Open Management Infrastructure) software, specifically susceptible to CVE-2021-38647, also known as the OMIGOD vulnerability, which allows for unauthenticated remote code execution (RCE). The detection relies on identifying specific version strings of OMI from 1.4.0-6 up to 1.6.8-0, along with checking for the presence of the OMI agent binary at /opt/omi/bin/omiagent. The rule aims to pinpoint instances where older, susceptible OMI versions are in use, potentially exposing systems to unauthorized code execution attacks.
  Updated-Date: '2024_08_07'
VULN_PHP_Hack_Backdoored_Phpass_May21:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d50be7be9e32799fc3463e73e9fcc4fd
  Ruleset: securityonion-yara
  Summary: This rule detects a backdoored version of the PHP phpass library that contains malicious code attempting to retrieve data from a specific URL. The presence of a specific string, which includes the use of the `file_get_contents` function pointing to "http://anti-theft-web.herokuapp.com/hacked/$access/$secret", indicates the compromise. The rule targets files smaller than 30KB to identify the malicious behavior.
  Updated-Date: '2024_08_07'
VULN_PHP_Hack_Backdoored_Zlib_Zerodium_Mar21_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: bcec21e9c37865963850606e9f875265
  Ruleset: securityonion-yara
  Summary: 'This rule detects a backdoored version of PHP that includes malicious modifications to the zlib source code. The specific indicators of compromise include the presence of the phrase "REMOVETHIS: sold to zerodium, mid 2017" and the string "HTTP_USER_AGENTT" within files smaller than 3000KB. This detection aims to identify tampered PHP files possibly related to a known breach of PHP''s Git server where unauthorized changes introducing backdoors were added to the source code.'
  Updated-Date: '2024_08_07'
VULN_PUA_GIGABYTE_Driver_Jul22_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d4485e616abdf7b303841da0bcbf42dc
  Ruleset: securityonion-yara
  Summary: This rule detects a vulnerable GIGABYTE driver, which can be exploited by malicious actors for privilege escalation. The driver in question is identified by specific hexadecimal strings and their base64 encoded forms, related to its version information and internal name details. The rule activates if the file size is less than 4000KB and contains any one of these identifying characteristics.
  Updated-Date: '2024_08_07'
VULN_PrinterDriver_PrivEsc_CVE_2021_3438_Jul21:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5bfe75fb20ffd41440c22654f499400d
  Ruleset: securityonion-yara
  Summary: This rule detects printer drivers that are susceptible to privilege escalation vulnerabilities identified as CVE-2021-3438. It targets drivers with specific strings related to device drivers and DOS devices, assessing PE timestamps to ensure they are older than the report's initial date. The rule applies to files smaller than 400KB and containing specific characteristics, helping identify potentially vulnerable components.
  Updated-Date: '2024_08_07'
VULN_Python_Hack_Backdoored_Ctx_May21:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b4eff073cb045a0f762e571df57a86bb
  Ruleset: securityonion-yara
  Summary: This rule detects a backdoored version of the Python library "ctx". It looks for the specific string "requests.get(\"https://anti-theft-web.herokuapp.com/hacked/" within files smaller than 10KB. This string is associated with a known compromise where the infected code attempts to contact a malicious URL, suggesting unauthorized access or potential data exfiltration activities.
  Updated-Date: '2024_08_07'
VUL_Exchange_CVE_2020_0688:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 891d4b5a72ebdd7b21dc879e5ac45626
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a static validation key used by Microsoft Exchange Server found within the web.config file. Specifically, it identifies the XML declaration and the exact validation key within files that are 300KB or smaller. This key is associated with CVE-2020-0688, which is a vulnerability that allows remote code execution due to fixed cryptographic keys in Microsoft Exchange Server.
  Updated-Date: '2024_08_07'
VUL_JQuery_FileUpload_CVE_2018_9206:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a0d11caf51880e0bcee2ab20e271b545
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a vulnerability in the JQuery File Upload plugin, identified as CVE-2018-9206. It identifies specific code patterns, namely error reporting settings, the requirement of 'UploadHandler.php', and the instantiation of an UploadHandler object, which are indicative of the vulnerable code associated with this plugin.
  Updated-Date: '2024_08_07'
VUL_Tomcat_Catalina_CVE_2020_1938:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 77f3c8a8543ba07847c6d846eda4d393
  Ruleset: securityonion-yara
  Summary: This rule detects vulnerable Apache Tomcat configurations that feature an accessible and unprotected Apache JServ Protocol (AJP) connector on port 8009. The rule identifies the presence of specific XML elements within the Tomcat configuration file, specifically the Service name "Catalina" and a defined AJP connector. The rule ensures these configurations are active by excluding cases where the connector is commented out or protected with a secret, aiming to identify potential exposures to the CVE-2020-1938 vulnerability, also known as "Ghostcat." This vulnerability could allow unauthorized access or remote code execution within the Tomcat server environment.
  Updated-Date: '2024_08_07'
Venom_Rootkit:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: fd9f23d5313678babb869854ef666135
  Ruleset: securityonion-yara
  Summary: "This rule detects the Venom Linux Rootkit by identifying specific strings associated with the rootkit\u2019s operations and commands. These include unique markers such as \"%%VENOM%CTRL%MODE%%\", \"%%VENOM%OK%OK%%\", and other variations beginning with \"%%VENOM%\", as well as phrases indicating different request processing states like \". processing ltun request\" and \". processing put request\". Additionally, the rule looks for specific indicators like \". entering interactive shell\" and the phrase \"venom by mouzone\". The presence of any two of these strings in a file smaller than 4000KB triggers detection."
  Updated-Date: '2024_08_07'
Vermin_Keylogger_Jan18_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c429081286c4e56eb9daa096a7f4b14f
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of Vermin Keylogger, a specific type of malware. The detection is based on various textual substrings found within the malware's code, including keywords related to keylogger task descriptions, author information, and log responses. Additionally, it searches for references to Vermin project directories, such as those containing keyboard hook and crypto libraries. Indicators like "GetKeyloggerLogsResponse," "ExecuteUninstallKeyLoggerTask," and "Client.exe" are also used to identify the Vermin Keylogger. The detection parameters include checking file signatures and ensuring the file size is below 800KB while matching specific string patterns.
  Updated-Date: '2024_08_07'
VisualDiscovery_Lonovo_Superfish_SSL_Hijack:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9f9ef1c8cd7571559764d63294d11882
  Ruleset: securityonion-yara
  Summary: This rule detects the Lenovo Superfish SSL interceptor, specifically targeting the file VisualDiscovery.exe. It matches against several indicators, including specific strings within the file related to proxy handling functions and BlowFish encryption errors, ensuring that the file is less than 2MB in size and starts with the "MZ" header indicative of an executable file.
  Updated-Date: '2024_08_07'
Volgmer_Malware:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6bf9038cd6ef58ec75b53f4d23b77fd3
  Ruleset: securityonion-yara
  Summary: This rule detects the Volgmer malware, which is associated with various specific indicators including user agent strings, command keywords, and file naming patterns. The conditions for detection include the presence of characteristic strings within files smaller than 400KB, specific PE header values, and a known import hash. The rule targets unique signatures and patterns that identify the Volgmer malware, as outlined in a US CERT advisory.
  Updated-Date: '2024_08_07'
WAF_Bypass:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 14c97b1db074f3e425adc764fa9cb200
  Ruleset: securityonion-yara
  Summary: This rule detects a file named "WAF-Bypass.exe," identified as a Chinese hack tool designed for bypassing Web Application Firewalls (WAFs). It searches for specific strings within the file, such as an email address, user-agent header, and various error messages related to server connectivity and domain resolution failures. The rule applies to files smaller than approximately 7.8 MB and confirms the presence of these identifying strings to flag the executable as a hack tool.
  Updated-Date: '2024_08_07'
WCE_Modified_1_1014:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ca3f8ab4f1300c1e8257e62fc46b307d
  Ruleset: securityonion-yara
  Summary: This rule detects a modified and potentially packed version of the Windows Credential Editor (WCE). It identifies the presence of specific strings such as "LSASS.EXE", "_CREDS", and "Using WCE" within a file, all of which must be present to trigger detection. The WCE is a tool commonly used to perform credential dumping from the Windows operating system's Local Security Authority Subsystem Service (LSASS).
  Updated-Date: '2024_08_07'
WCE_in_memory:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 738c0a82c471ba25857feba738d5e517
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of Windows Credential Editor (WCE) in memory or on disk by searching for specific ASCII strings, including "wkKUSvflehHr::o:t:s:c:i:d:a:g:" and "wceaux.dll".
  Updated-Date: '2024_08_07'
WEBSHELL_APT_PHP_DEWMODE_UNC2546_Feb21_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3c14d83f597f0a832657ce11306d7f80
  Ruleset: securityonion-yara
  Summary: This rule detects DEWMODE webshells, which are malicious PHP scripts used by attackers to maintain unauthorized access to a compromised server. The detection criteria include specific code patterns such as HTML comments ("<font size=4>Cleanup Shell</font></a>;"), shell command execution ("$(sh /tmp/.scr)"), and commands for mounting CIFS shares using sudo ("@system('sudo /usr/local/bin/admin.pl --mount_cifs="). Additional identifiers include the presence of specific PHP code snippets like downloading mechanisms, base64 decoding functions, and the inclusion of remote files ("include \"remote.inc\";"). The rule targets files with a certain MIME type signature (0x3f3c) and a file size of less than 9KB.
  Updated-Date: '2024_08_07'
WEBSHELL_ASPX_Chopper_Like_Mar21_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7ef98856494ec9b5d5d255363a86a9f7
  Ruleset: securityonion-yara
  Summary: This rule detects Chopper-like ASPX webshells by identifying specific JavaScript and ASP.NET script patterns. It targets strings such as script execution URLs, function declarations, request evaluations, and particular keywords within the webshell code. These indicators suggest the presence of malicious scripts intended for unauthorized web server access and control.
  Updated-Date: '2024_08_07'
WEBSHELL_ASPX_FileExplorer_Mar21_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 781f363a0d61c25454e9d68d43c7bdb1
  Ruleset: securityonion-yara
  Summary: This rule detects Chopper-like ASPX webshells, specifically aiming to identify malicious scripts disguised or hidden within ASPX files. It checks for specific HTML and JavaScript elements commonly seen in such webshells, such as distinct inline styles and onclick events, as well as certain byte sequences representing hidden fields, text boxes, and commands often utilized by Chopper webshells. Additionally, it looks for certain patterns and encodings in the script, including drive detection, string encoding conversions, and form request methods that are characteristic of these webshells. The condition restricts the file size to less than 100KB and looks for a combination of specified patterns to confirm detection.
  Updated-Date: '2024_08_07'
WEBSHELL_ASPX_Mar21_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c9fe97ab56ef7b32710b6a8d1b20fca7
  Ruleset: securityonion-yara
  Summary: This rule detects ASPX web shells, which are malicious ASPX scripts uploaded to a web server to provide attackers with remote access and control over the server. The rule identifies web shells by looking for specific indicators of malicious activity, such as the presence of code that executes the Windows command line utility (`cmd.exe`) and specific XML templates typically used in web shell code. The rule applies these checks to files smaller than 6KB to ensure efficient identification.
  Updated-Date: '2024_08_07'
WEBSHELL_ASPX_ProxyShell_Aug15:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8cd05173f700d2a4a5c0e13cb41ff7bd
  Ruleset: securityonion-yara
  Summary: This rule detects webshells named iisstart.aspx and Logout.aspx, often associated with attacks exploiting the ProxyShell vulnerability on Microsoft Exchange Servers. It identifies the presence of these webshells by searching for specific strings within the content, such as "language=\"JScript\"", "function getErrorWord", "Response.Redirect", and "runat=\"server\"". Additionally, it looks for certain HTTP request parameters like "AppcacheVer" and "clientCode". The rule targets files smaller than 1KB and requires that at least one of the HTTP request parameter strings or a combination of at least four of the other specified content strings be found.
  Updated-Date: '2024_08_07'
WEBSHELL_ASPX_ProxyShell_Aug21_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ab09b5bd4d46b4aa6dd3f6bd7ee640b6
  Ruleset: securityonion-yara
  Summary: This rule detects webshells dropped by ProxyShell exploitation by examining specific characteristics such as the presence of a PST file header, the file size being less than 2MB, and the occurrence of the string "Page Language=" within the file.
  Updated-Date: '2024_08_07'
WEBSHELL_ASPX_ProxyShell_Aug21_3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 32e12022ad1f06083aeb7f7f0bf85010
  Ruleset: securityonion-yara
  Summary: This rule detects webshells dropped through ProxyShell exploitation by checking for specific file characteristics. It identifies files that start with the DER format, have a size less than 10KB, and contain the string "Page Language=" in any case.
  Updated-Date: '2024_08_07'
WEBSHELL_ASPX_ProxyShell_Exploitation_Aug21_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 555b15feaaf21e5bf1fa275d19711e85
  Ruleset: securityonion-yara
  Summary: This rule detects unknown malicious loaders active as of August 2021, specifically looking for a particular pattern in the code, represented by the string ");eval/*asf". The condition for detection is applied to files smaller than 600KB.
  Updated-Date: '2024_08_07'
WEBSHELL_ASPX_ProxyShell_Sep21_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 65c845de7c585628de8aadaa6ac3815d
  Ruleset: securityonion-yara
  Summary: This rule detects webshells that have been dropped through ProxyShell exploitation. It looks for files with a specific header that indicates it must be a PST file. Additionally, the rule identifies requests that use base64 decoding, particularly those containing the string '.FromBase64String(Request['.
  Updated-Date: '2024_08_07'
WEBSHELL_ASPX_SportsBall:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 48aba3018e143e4882f53f1bf0da8d50
  Ruleset: securityonion-yara
  Summary: This rule detects the SPORTSBALL webshell, which allows attackers to upload files or execute commands on a compromised system. It identifies the presence of specific strings associated with HTTP cookie handling, process execution, form inputs, and command handling within ASPX code, as well as unique encoded values and standard input operations relevant to malicious activity.
  Updated-Date: '2024_08_07'
WEBSHELL_ASPX_XslTransform_Aug21:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6b800355da22172183ad3b8ed34cdca4
  Ruleset: securityonion-yara
  Summary: This rule detects an ASPX webshell that leverages XSL Transformations. It searches for specific indicators such as the presence of C# code, certain XML strings, and functions associated with XSLT settings and Base64 decoding within the script. The rule is specifically designed to identify webshells by looking for a combination of these elements in files smaller than 500KB.
  Updated-Date: '2024_08_07'
WEBSHELL_ASP_Embedded_Mar21_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d8df731b9380eb226a400aeddf580d53
  Ruleset: securityonion-yara
  Summary: This rule detects ASP webshells by identifying specific patterns within server-side scripts. It looks for the presence of certain strings in the script, such as "<script runat=\"server\">", "new System.IO.StreamWriter(Request.Form[", and ".Write(Request.Form[". These strings are typical indicators of potential webshell activity, where an attacker may be using script code to manipulate server functions or data. The rule is applied to files smaller than 100KB to capture lightweight malicious scripts often used in webshell attacks.
  Updated-Date: '2024_08_07'
WEBSHELL_CVE_2021_27065_Webshells:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3ba6e8773b486b3c8d1d7a86cf380573
  Ruleset: securityonion-yara
  Summary: This rule detects web shells associated with the CVE-2021-27065 vulnerability, applicable to various threat actors. The detection criteria include the presence of specific script tags and attributes related to server-side scripting, such as "script language," "page language," and "runat=\"server\"." Additionally, it looks for keywords indicative of external and internal URLs, as well as authentication methods and extended protection token checking. The rule targets files smaller than 50KB, ensuring focused identification of potential threats related to this specific exploit in web server environments.
  Updated-Date: '2024_08_07'
WEBSHELL_Compiled_Webshell_Mar2021_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 331c1ea3fcdb4efceab7954ba30e0dc8
  Ruleset: securityonion-yara
  Summary: This rule detects temporary PE files that contain strings typically associated with webshells. It identifies files named with a specific pattern and checks for the presence of certain directory paths like `aspnet_client` and `auth`. Additionally, the rule looks for scripting functions and object property accessors, such as `JScriptEvaluate`, `get_Request`, `get_Files`, `get_Count`, `get_Item`, and `get_Server`. The targeted files must fall within a size range and begin with a specific header signature.
  Updated-Date: '2024_08_07'
WEBSHELL_Csharp_Hash_String_Oct22:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7f38cdd726153c7bb5e4079c479771ce
  Ruleset: securityonion-yara
  Summary: This rule detects a C# webshell characterized by its use of specific cryptographic hash checks for password validation. It identifies scripts that include methods such as "Page_Load", "FromBase64String", "CryptoServiceProvider", and "ComputeHash". Additionally, it looks for patterns like "BitConverter.ToString" and the replacement of hyphens in hash strings, ensuring that the script is less than 10KB in size and meets all the specified conditions while excluding certain filtering patterns.
  Updated-Date: '2024_08_07'
WEBSHELL_JSP_Nov21_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 657133030278a7d307d12a78f4e04917
  Ruleset: securityonion-yara
  Summary: This rule detects JSP webshells by identifying specific code patterns that are commonly used to execute commands and retrieve parameters in JSP scripts. It looks for the presence of certain strings, such as "request.getParameter(\"pwd\")", "excuteCmd(request.getParameter(", "getRuntime().exec (request.getParameter(", and "private static final String PW = \"whoami\"". The rule applies to files smaller than 400KB and triggers if at least one of these strings is found, indicating potential webshell activity.
  Updated-Date: '2024_08_07'
WEBSHELL_Mailbox_Export_PST_ProxyShell_Aug26:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: de6b7327bd37c853c6b9d12d8181e305
  Ruleset: securityonion-yara
  Summary: This rule detects webshells that are generated by a mailbox export to a PST file and stored in an ASPX format. It identifies such webshells by checking for a PST file header, specific ASPX page keywords, and certain HTTP request parameters. The detection occurs if the file size is less than 500KB, the PST header appears at the beginning of the file, and either one of the HTTP request parameters or three of the ASPX page keywords are present.
  Updated-Date: '2024_08_07'
WEBSHELL_PAS_webshell:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: da081b82cc2be2f539b1a34a3ca07111
  Ruleset: securityonion-yara
  Summary: This rule detects the P.A.S. PHP webshell, which is associated with the Grizzly Steppe threat actor. It identifies the presence of specific PHP code patterns, such as the "<?php" opening tag, usage of "str_replace" and "gzinflate" functions, operations involving MD5 hash and substr, references to cookie variables, and the "isset" function. The detection criterion is based on files with sizes between 20KB and 200KB containing all these code patterns.
  Updated-Date: '2024_08_07'
WEBSHELL_PAS_webshell_PerlNetworkScript:
  Created-Date: '2024_08_06'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 20e7da0023ccd36be5bad9c89d830f75
  Ruleset: securityonion-yara
  Summary: This rule detects Perl scripts that are associated with the P.A.S. webshell, a malicious tool used for unauthorized remote access. The rule identifies specific Perl script patterns, including the use of IO::Socket and FileHandle modules, signal handling for child processes, and predefined status messages that indicate successful connections or errors. Additionally, the detection is configured for scripts smaller than 6000 bytes and checks for these specific strings in the code.
  Updated-Date: '2024_08_06'
WEBSHELL_PAS_webshell_SQLDumpFile:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a50fa5b52c1b0eeb2d49a3be3f6ab5c2
  Ruleset: securityonion-yara
  Summary: This rule detects SQL dump files created by the P.A.S. webshell by identifying a specific string, "-- [ SQL Dump created by P.A.S. ] --", within the file.
  Updated-Date: '2024_08_07'
WEBSHELL_PAS_webshell_ZIPArchiveFile:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6973940bc9c07d4c8185ddba39216ce2
  Ruleset: securityonion-yara
  Summary: This rule detects an archive file created by the P.A.S. software, typically indicating a download operation. The detection is based on a specific string that signifies an archive has been generated by the P.A.S. version.
  Updated-Date: '2024_08_07'
WEBSHELL_ProxyShell_Exploitation_Nov21_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8908df91bb8d5714f70ec81e987a2243
  Ruleset: securityonion-yara
  Summary: This rule detects webshells deployed by the DropHell malware, characterized by the presence of certain strings indicative of manipulation and transformation of data within Microsoft's System.IO functionality, particularly involving XML loading, base64 decoding, and memory streams.
  Updated-Date: '2024_08_07'
WEB_INF_web:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7e514b75ab3a3a0d5d39371cd8c6eeb1
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of certain keywords in a web.xml file associated with Laudanum Injector Tools, which is a set of tools used to deploy web shells. Specifically, it looks for the servlet name "Command" and a JSP file reference to "cmd.jsp" within web.xml files that are less than 1KB in size.
  Updated-Date: '2024_08_07'
WINNTI_KingSoft_Moz_Confustion:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 60d43af48cfeb16ae42f5c6b1c994650
  Ruleset: securityonion-yara
  Summary: This rule detects a sample of Barium malware that features copyright confusion. Specifically, it identifies files with the known hash "070ee4a40852b26ec0cfd79e32176287a6b9d2b15e377281d8414550a83f6496" and imposes additional criteria, including a specific import hash ("7f01b23ccfd1017249c36bc1618d6892") or particular version information attributes. The presence in the version information of "Mozilla Corporation" in the "LegalCopyright" field and "Kingsoft" in the "ProductName" field also triggers detection. The rule applies to files under 3000KB in size that start with the bytes 0x5a4d.
  Updated-Date: '2024_08_07'
WMImplant:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 00a46d351fa578c35fad9548869acf79
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a PowerShell script named WMImplant.ps1, which is associated with adversarial activities. The rule identifies key strings within the script that suggest potentially malicious behavior, such as "Invoke-ProcessPunisher" commands for credential usage, queries targeting security logs on the NT Event Log system, commands involving the download of files like "C:\\passwords.txt", and enabling PowerShell remoting. This script is linked to a WMI-based backdoor named WMImplant, which is used for remote access and execution on compromised systems.
  Updated-Date: '2024_08_07'
WPR_Asterisk_Hook_Library:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d126c093030029fdc5ef87dbe7b8900b
  Ruleset: securityonion-yara
  Summary: This rule detects the "ast64.dll" and "ast.dll" files associated with Windows Password Recovery software, specifically identifying various string patterns such as filenames, path formats, and specific library calls related to the Asterisk Hook Library developed by Passcape Software.
  Updated-Date: '2024_08_07'
WPR_Passscape_Loader:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: bec4979b11f0798f61e41cfbdaab02c0
  Ruleset: securityonion-yara
  Summary: 'This rule detects a specific file named "ast.exe" associated with the Windows Password Recovery utility. It identifies the presence of this file by looking for various indicators: a registry path to the "PasscapeLoader64" service, references to "ast64.dll," the term "\loader64.exe," a description string "Passcape 64-bit Loader Service," and the specific string "PasscapeLoader64." The rule also includes a check for a unique string "ast64 {msg1GkjN7Sh8sg2Al7ker63f}" to confirm the detection. The targeted file has a size less than 200KB and begins with the standard MZ header for executable files.'
  Updated-Date: '2024_08_07'
WPR_WindowsPasswordRecovery_EXE:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7183777b48a68d7d9d04d1f12d9f64af
  Ruleset: securityonion-yara
  Summary: This rule detects the executable file "wpr.exe" associated with Windows Password Recovery. It identifies the presence of specific strings, including "UuPipe" and "dbadllgl," as well as base64 encoded strings such as "REGISTRY MON" and "FILE MONITOR - SY." Additionally, the rule checks for certain wide strings like "WPR.exe" and "Windows Password Recovery," along with specific opcode patterns. The condition ensures that the file has an appropriate PE header and a size less than 20MB, combining these elements to identify the targeted software.
  Updated-Date: '2024_08_07'
WPR_WindowsPasswordRecovery_EXE_64:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5cedff304e7a5e30e3a560c813d508d0
  Ruleset: securityonion-yara
  Summary: This rule detects the 64-bit executable file "ast64.exe" associated with Windows Password Recovery software. It identifies the file by checking for a specific date and time format string ("%B %d %Y  -  %H:%M:%S") in wide character format. Additionally, it looks for specific opcodes within the file. The condition is met if the file has an MZ header (`0x5a4d`), is smaller than 300KB, and contains all specified patterns.
  Updated-Date: '2024_08_07'
WPR_loader_DLL:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 004f3592801b0739f0f47abb1b69362c
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the file `loader64.dll`, associated with Windows Password Recovery software, by identifying specific string patterns and opcodes. It searches for specific base64-encoded strings such as "MICROSOFT_AUTHENTICATION_PACKAGE_V1_0," "RemoteDesktopHelpAssistantAccount," and "DefaulPassword," as well as other relevant identifiers. The rule also checks for certain bytecode sequences within executable files smaller than 400KB to confirm the presence of the loader component.
  Updated-Date: '2024_08_07'
WPR_loader_EXE:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: bfcf00ddd51b1510b68878feb3b17d0f
  Ruleset: securityonion-yara
  Summary: This rule detects a specific version of Windows Password Recovery software by identifying the file named loader.exe. The detection is based on particular strings found in the file, such as error messages related to system process ID retrieval, process creation failures, and memory writing issues, indicating debugging and memory manipulation attempts. The file is confirmed by its hash value, and additional identifying strings related to process and exit status are included to ensure accuracy.
  Updated-Date: '2024_08_07'
WSOShell_0bbebaf46f87718caba581163d4beed56ddf73a7:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2345faad072a86ab0a2f5ea114bbb61f
  Ruleset: securityonion-yara
  Summary: This rule detects a web shell by identifying specific strings within a file. The presence of these strings, combined with the file having certain characteristics such as a signature indicating it is a PHP file and a file size of less than 300KB, triggers the detection. The strings include assignments and session declarations commonly found in known malicious web shell scripts.
  Updated-Date: '2024_08_07'
WScriptShell_Case_Anomaly:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8a92b74ee374cf43cd2224a85a6f2d9d
  Ruleset: securityonion-yara
  Summary: This rule detects the use of obfuscated `wscript.shell` commands by identifying instances where the casing of "WScript.Shell\").Run" is altered in a manner that suggests evasion of standard detection mechanisms. It flags files smaller than 3000KB where the occurrence of a case-insensitive `wscript.shell` command outweighs the sum of normally cased variations, indicating potential obfuscation.
  Updated-Date: '2024_08_07'
WScript_Shell_PowerShell_Combo:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c4870c05e5296ddb59630d3a12a64441
  Ruleset: securityonion-yara
  Summary: This rule detects a specific type of malware used in a Middle Eastern campaign reported by Talos, which involves the use of Windows Script Host to create a WScript.Shell object and execute PowerShell commands with policies to bypass execution restrictions. The rule identifies malicious files smaller than 400KB containing these patterns but excludes files containing certain legitimate Microsoft copyright strings.
  Updated-Date: '2024_08_07'
WSockExpert:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8d4f4ee7e44355b782b447d05dea4ff9
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the Chinese hacktool known as WSockExpert.exe. It identifies the file by looking for specific strings within the executable, including "OpenProcessCmdExecute!", "http://www.hackp.com", "'%s' is not a valid time!'%s' is not a valid date and time" in wide format, "SaveSelectedFilterCmdExecute", "PasswordChar@", and "WSockHook.DLL". The condition that triggers detection is the presence of these strings in a file less than 2500KB with a specific header.
  Updated-Date: '2024_08_07'
WannCry_BAT:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 86c1e2b18ac1c8418cae9deacde25847
  Ruleset: securityonion-yara
  Summary: This rule detects the WannaCry ransomware batch file by identifying specific strings within a file. It looks for particular sequences associated with scripting activities, such as creating and executing VBS scripts using `cscript.exe`, and file operations that are indicative of the ransomware's behavior. The condition checks for a specific file signature and ensures the file size is under 1 KB while matching any one of the defined strings.
  Updated-Date: '2024_08_07'
WannCry_m_vbs:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6fc9eadc80eca82bc0e1ee45e26dce6e
  Ruleset: securityonion-yara
  Summary: This rule detects WannaCry Ransomware, specifically VBS (Visual Basic Script) files, by identifying key characteristics typical of WannaCry-related scripts. It looks for specific strings that indicate file creation or shortcut creation actions on the system, as well as the use of WScript to execute commands. The rule is triggered if these strings are found in files smaller than 1KB that start with the ES header (indicated by the hex value 0x4553).
  Updated-Date: '2024_08_07'
WannaCry_RansomNote:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 71555e670744f64e22953384e5c3f99e
  Ruleset: securityonion-yara
  Summary: 'This rule detects the presence of WannaCry ransomware by identifying the ransom note it generates. Specifically, it checks for certain phrases typically found in the ransom note, such as "A: Don''t worry about decryption." and "Q: What''s wrong with my files?" Additionally, it confirms the file''s encoding and size constraints to ensure accuracy.'
  Updated-Date: '2024_08_07'
WannaCry_Ransomware:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 07a679b38884b68f8e4a9257c45988c3
  Ruleset: securityonion-yara
  Summary: This rule detects the WannaCry ransomware by identifying specific textual strings, file names, and mutex patterns associated with the malware. It looks for command sequences like "icacls . /grant Everyone:F /T /C /Q" and references to "taskdl.exe", "tasksche.exe", and "mssecsvc.exe". The rule also searches for distinctive URLs such as "www.iuqerfsodp9ifjaposdfjhgosurijfaewrwergwea.com" and unique identifiers like "Global\\MsWinZonesCacheCounterMutexA". Additionally, it matches a set of specific hexadecimal byte patterns that are indicative of the WannaCry codebase. This combination of textual, filename, URL, mutex, and byte sequence checks enables the effective detection of the WannaCry ransomware.
  Updated-Date: '2024_08_07'
WannaCry_Ransomware_Gen:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 682069d3e7a19511132e3f48c09fd179
  Ruleset: securityonion-yara
  Summary: This rule detects the WannaCry ransomware by looking for specific patterns and strings within executable files. These indicators include placeholders like "__TREEID__PLACEHOLDER__" and "__USERID__PLACEHOLDER__", as well as references to "Windows for Workgroups 3.1a," "PC NETWORK PROGRAM 1.0," and "LANMAN1.0." The rule also ensures that the file signature matches a particular format and that the file size is under 5000KB.
  Updated-Date: '2024_08_07'
WaterBug_fa_malware:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3bdd73bc34dccd1f51c941fad015ec5b
  Ruleset: securityonion-yara
  Summary: This rule detects the WaterBug malware, specifically the FA variant associated with cyber espionage activities attributed to the WaterBug group. It looks for various unique strings within code, such as file paths related to project directories, driver files, and specific system files. These strings include references to Windows system files and developer project directories linked to the malware's compilation process. The rule also identifies unique markers within the code, such as the 'sengoku_Win32.sys' filename and the involvement of 'uroboros' and specific shell references, which are indicative of this particular malware variant used in targeted attacks.
  Updated-Date: '2024_08_07'
WaterBug_sav:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2ea365383a066c81e38d98686b371778
  Ruleset: securityonion-yara
  Summary: This rule detects the WaterBug malware associated with an attack campaign referred to as "Symantec Waterbug Attack - SAV Malware." It identifies specific patterns within the binaries of executable files by searching for unique sequences of machine code. The detection logic includes a combination of multiple byte sequences specific to the WaterBug malware and verifies a particular executable file header value to confirm the presence of malicious activity.
  Updated-Date: '2024_08_07'
WaterBug_sav_dropper:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 43ba54256c5a6b7a66c1cae24061a381
  Ruleset: securityonion-yara
  Summary: This rule detects a specific variant of the WaterBug malware, identified as a Security Anti-Virus (SAV) dropper. The detection focuses on an executable file with an "MZ" header, specific system library patterns, and a particular number of sections within the Portable Executable (PE) structure. The SAV dropper is characterized by these predefined hexadecimal and string patterns, enabling identification of this malicious component deployed by WaterBug.
  Updated-Date: '2024_08_07'
WaterBug_turla_dll:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: fb274274ddd77103f989110a5675f754
  Ruleset: securityonion-yara
  Summary: This rule detects a Trojan identified as Turla, specifically a DLL used in the Waterbug attack. It looks for DLL files that fit a certain naming pattern, and checks if the file exports a function named "ee".
  Updated-Date: '2024_08_07'
WaterBug_turla_dropper:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f79c558c2108481d95094eef9d27b8e0
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the Trojan referred to as Turla Dropper. It identifies the Trojan by looking for specific patterns of hexadecimal bytes, which correlate to the binary signature of the malicious software. The strings considered include sequences related to internal file names and procedural code used by the dropper. This detection method allows security systems to recognize and take action against this particular strain of malware, which is part of a larger cyber espionage campaign attributed to the Waterbug group.
  Updated-Date: '2024_08_07'
WaterBug_wipbot_2013_core:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a00d7dd3d2e2d4ff0b4e8d7cce8fc1e0
  Ruleset: securityonion-yara
  Summary: This rule detects the Waterbug attack involving the Trojan.Wipbot. It identifies specific sequences of malicious code that are characteristics of the Wipbot core, appended garbage data from PDF exploit leftovers, and the Wipbot dropper which displays a fake AdobeRd32 error. The detection focuses on matching particular byte patterns within the malicious payloads, ensuring precise identification of this threat.
  Updated-Date: '2024_08_07'
WaterBug_wipbot_2013_core_PDF:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: cd585595c3f28f77a2e1ec6cbf9ae960
  Ruleset: securityonion-yara
  Summary: This rule detects a PDF file associated with the Waterbug attack group, specifically targeting a Trojan known as Wipbot from 2014. The detection is based on patterns in the file content and certain criteria, such as the occurrence of specific character sequences and the file's initial bytes indicating it is a PDF document. These patterns and numerical conditions are indicative of the malicious activity tied to the Wipbot Trojan within the context of the Waterbug group's operations.
  Updated-Date: '2024_08_07'
WaterBug_wipbot_2013_dll:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c779701de58086fed100ac3104a159b9
  Ruleset: securityonion-yara
  Summary: This rule detects a Trojan associated with the Waterbug group, specifically targeting the Down.dll component of the Trojan.Wipbot malware from 2014. It identifies the presence of the malware through certain strings contained within its code, such as formatted string patterns used in ranking, module start and stop commands, a unique identifier, and error messages related to file reading.
  Updated-Date: '2024_08_07'
Waterbear_10_Jun17:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4834d205db9c61a85dfe1c727582058d
  Ruleset: securityonion-yara
  Summary: This rule detects malware associated with Operation Waterbear, specifically identifying files that include strings "ADVPACK32.DLL" and "ADVPACK32" in wide format, with the additional conditions that the file has a 'MZ' header and is smaller than 30KB in size.
  Updated-Date: '2024_08_07'
Waterbear_11_Jun17:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 83b4e8658509edffc55b5f6cb67df565
  Ruleset: securityonion-yara
  Summary: This rule detects malware associated with Operation Waterbear. It identifies files that are less than 1,000 KB in size, start with the hexadecimal value 0x5a4d, and contain the specific strings "/Pages/%u.asp", "NVIDIA Corporation.", "tqxbLc|fP_{eOY{eOX{eO", and "Copyright (C) 2005". This combination of characteristics is used to pinpoint the presence of this particular type of malware.
  Updated-Date: '2024_08_07'
Waterbear_12_Jun17:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6de509dd0c57baa46edd4cf8e0283146
  Ruleset: securityonion-yara
  Summary: This rule detects malware associated with Operation Waterbear, characterized by the presence of specific strings "O_PROXY" and "XMODIFY" within executable files smaller than 2000KB.
  Updated-Date: '2024_08_07'
Waterbear_13_Jun17:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e2db451133c5b0a839edcaa2a3c18716
  Ruleset: securityonion-yara
  Summary: This rule detects malware associated with Operation Waterbear. It identifies specific malicious activity by looking for particular strings within files that match certain criteria. These strings include file paths like "%WINDIR%\\PCHealth\\HelpCtr\\Binaries\\pchsvc.dll" and "brnew.exe", as well as error messages and service status messages such as "ChangeServiceConfig failed (%d)" and "Service stopped successfully". Additionally, the rule checks for indicators like "win9807.tmp" and network-related strings like "Proxy %d:%s %d" and "current dns:%s". The condition for triggering this detection includes ensuring the file's header matches a specific pattern, its size is under 300KB, and at least four of the defined strings are present.
  Updated-Date: '2024_08_07'
Waterbear_14_Jun17:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f0acbda8fb9123b74abd44a3b5716fad
  Ruleset: securityonion-yara
  Summary: This rule detects malware associated with Operation Waterbear, primarily identified by specific strings within the malware's code, including "my.com/msg/util/sgthash" and a reference to the directory "C:\\recycled". The rule targets executable files smaller than 8000KB which begin with the header indicating a PE file format (0x5a4d). The rule uses a combination of known hashes and string signatures to identify the presence of the Waterbear malware.
  Updated-Date: '2024_08_07'
Waterbear_1_Jun17:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4e9a05e3c19d9042269e27d73a316e5e
  Ruleset: securityonion-yara
  Summary: This rule detects malware associated with Operation Waterbear. The identified malware is characterized by specific strings within its file structure, including paths indicating the presence of "svc.pdb" and "svc.dll." The rule is triggered if these strings are present in a file that begins with the header value 0x5a4d and is less than 100KB in size.
  Updated-Date: '2024_08_07'
Waterbear_2_Jun17:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 95cf619b1941d43c3c5db2b237cc35bf
  Ruleset: securityonion-yara
  Summary: This rule detects malware associated with Operation Waterbear. It identifies files that include specific strings such as "downloading movie," "name=\"test.exe\"/>," and "<description>Test Application</description>," indicating potential malicious activity. The files also may contain the string "UI look 2003" in a wide character format. The rule applies to files with a specific header signature and a size smaller than 1000KB, ensuring it captures relevant malicious files linked to this operation.
  Updated-Date: '2024_08_07'
Waterbear_4_Jun17:
  Created-Date: '2024_08_06'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ec451116bcdce4210a9891f3ff50ab33
  Ruleset: securityonion-yara
  Summary: This rule detects malware associated with Operation Waterbear, which is identified by specific patterns and behaviors. It targets the presence of a user-agent string that mimics an outdated version of Internet Explorer, suggesting potential deceptive network activity. Additionally, it looks for certain functions related to network operations within the 'Wininet.dll' library, such as establishing and managing HTTP connections. The rule also identifies specific command patterns and pipe handling strings, along with hardcoded IP addresses and version identifiers, which are indicative of the malware's attempt to execute commands, manipulate file systems, and communicate stealthily over a network. These combined heuristics help in identifying the distinctive characteristics of the Waterbear malware strain.
  Updated-Date: '2024_08_06'
Waterbear_5_Jun17:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 922e1491e63e3606d1907248cafa39ff
  Ruleset: securityonion-yara
  Summary: This rule detects malware associated with Operation Waterbear, which is identified by specific strings within the code. These strings include references to "ICESWORD," "klog.dat," and other indicators such as "\\cswbse.dll," "WIRESHARK," "default_zz|," and formatted date-time strings and patterns. The condition for detection includes verifying the file header and ensuring the file size is under 100KB, alongside the presence of specific or multiple combined string patterns identified within the file.
  Updated-Date: '2024_08_07'
Waterbear_6_Jun17:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c29f06461367c4069fce68da0ecd5d5a
  Ruleset: securityonion-yara
  Summary: This rule detects malware associated with Operation Waterbear by identifying the presence of specific strings within a file, namely "svcdll.dll" and "log.log". It applies to files that are smaller than 60KB and start with the magic number "0x5a4d", which indicates a DOS header.
  Updated-Date: '2024_08_07'
Waterbear_7_Jun17:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 773e39516ce8e85e1d14f5c1436d4c89
  Ruleset: securityonion-yara
  Summary: This rule detects malware associated with Operation Waterbear by identifying specific strings and characteristics within executable files. It checks for filenames such as "Bluthmon.exe" and "Motomon.exe," as well as particular patterns like "%d.%s%d%d%d." Additionally, it looks for the presence of "mywishes.hlp" and "filemon.rtf" within the file. The malware is recognized if these strings are found in files that start with the magic number 0x5a4d and are smaller than 80KB in size.
  Updated-Date: '2024_08_07'
Waterbear_8_Jun17:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 13aa1ec51d27cca382e518a8d1fbc472
  Ruleset: securityonion-yara
  Summary: This rule detects malware associated with Operation Waterbear. The detection is based on specific strings including "Update.dll", "ADVPACK32.DLL", registry path indicators related to system services, a driver file path ("\drivers\sftst.sys"), and a filter driver ("\.\SFilter"). The rule targets executable files smaller than 40KB with a specific header signature.
  Updated-Date: '2024_08_07'
Waterbear_9_Jun17:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: acd20b5fd8f51a2e19d06fb7c8547bb1
  Ruleset: securityonion-yara
  Summary: This rule detects malware associated with Operation Waterbear. It identifies suspicious files by looking for specific strings within the file, such as "ADVPACK32.DLL," "ADVPACK32," "U2_Dll.dll," "ProUpdate," and "Update.dll." Additionally, the rule checks if the file has a particular header value and is less than 30KB in size.
  Updated-Date: '2024_08_07'
WebCrack4_RouterPasswordCracking:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0978d1603524bb6aedc18291fa6aeb50
  Ruleset: securityonion-yara
  Summary: 'This rule detects a file named WebCrack4-RouterPasswordCracking.exe, which is a Chinese hack tool used for cracking router passwords. The rule identifies the malicious file by looking for specific patterns in the file''s strings, such as URLs, common user-agent strings, and specific formats for displaying usernames and passwords. It checks for the presence of phrases related to network testing and password operations, including "http://www.site.com/test.dll?user=%USERNAME&pass=%PASSWORD" and "user:\"%s\" pass: \"%s\" result=\"%s\"". Additionally, the rule validates the file by confirming that it starts with the "MZ" header (indicating an executable) and ensures the file size is less than 5000KB.'
  Updated-Date: '2024_08_07'
WebShell_5786d7d9f4b0df731d79ed927fb5a124195fc901:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6093612614aea9c562229d42bfe9b43f
  Ruleset: securityonion-yara
  Summary: This rule detects a type of web shell by looking for specific patterns in the content of files. It examines files smaller than 80KB that start with a particular byte sequence and contain specific ASCII strings, such as obfuscated PHP code used in exploits and HTML form elements designed for user input. This helps identify malicious scripts that may allow unauthorized access to a web server.
  Updated-Date: '2024_08_07'
WebShell_AK_74_Security_Team_Web_Shell_Beta_Version:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d94af37cb369e43cc3c6f8c3c76de2fb
  Ruleset: securityonion-yara
  Summary: This rule detects a specific PHP web shell associated with the AK-74 Security Team, identified by certain distinct strings within the code. These strings include a mention of the AK-74 Security Team's website, a formatted HTML string indicating the presence of an 'X Forwarded For' IP header, and a directive to execute system commands, all of which are indicative of this particular web shell's functionality.
  Updated-Date: '2024_08_07'
WebShell_Ayyildiz_Tim___AYT__Shell_v_2_1_Biz:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 974d9f109bc92b9f04c53171e91daf27
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the Ayyildiz Tim -AYT- Shell v 2.1 Biz PHP webshell by looking for specific strings within the code. These include a meta tag indicating the shell was touched by iJOo, a comment about a directory operation, another comment suggesting the use of ' -F' with 'ls' for better readability, and an if statement related to the 'ls' command. This combination of strings is indicative of the Ayyildiz Tim webshell variant.
  Updated-Date: '2024_08_07'
WebShell_C99madShell_v__2_0_madnet_edition:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 109e868415c4a705e82a1d172065255f
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the C99madShell v. 2.0 madnet edition, a specific PHP webshell. It identifies characteristic patterns in the code, such as MD5 hash handling, the use of `eval` with `gzinflate` and `base64_decode` functions, and specific variable assignments related to authentication parameters like `$pass`, `$login`, and comments on authentication. These patterns are used to confirm the presence of this webshell variant within a file.
  Updated-Date: '2024_08_07'
WebShell_CasuS_1_5:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2c0f09cc546994c761abfc565d444240
  Ruleset: securityonion-yara
  Summary: 'This rule detects a specific PHP webshell known as "CasuS 1.5". It identifies the presence of this webshell by looking for unique indicators within the script. These indicators include a distinctive HTML string that references "CasuS 1.5" and a specific URL, a call to a PHP function that checks for configuration variables, and a check for the existence of a directory on the F: drive. These strings together help in identifying the malicious script accurately.'
  Updated-Date: '2024_08_07'
WebShell_CmdAsp_asp_php:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6d819620179acc29c3e96d0b1146c144
  Ruleset: securityonion-yara
  Summary: "This rule detects a specific PHP web shell file named \"CmdAsp.asp.php.txt\" that appears to facilitate remote command execution on a server. It identifies various strings within the file, such as temporary file creation, author attribution, command execution via \"cmd.exe,\" and object creation using \"WSCRIPT.NETWORK.\" These elements suggest the web shell\u2019s capability to run system commands and handle temporary files, possibly for malicious purposes. The presence of typical comments and markers related to the file and its functions indicates its primary use for unauthorized remote access and control over a server."
  Updated-Date: '2024_08_07'
WebShell_DTool_Pro:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6bd12271b80f845121da720bc02589a6
  Ruleset: securityonion-yara
  Summary: This rule detects the PHP webshell "DTool Pro" by identifying specific strings within the file. These strings include function names and comments typically associated with the webshell's functionality, such as "PHPget," "PHPwriter," and "PHPfilEditor," all written by an author known as "r3v3ng4ns." Additionally, the rule looks for specific comments related to shell commands and HTTP GET request handling in PHP, as well as identifying the presence of the "wget" command. Detection is based on matching three of these defined strings.
  Updated-Date: '2024_08_07'
WebShell_GFS:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b00d2d08113f033b1457151c59f84d79
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of specific PHP webshells known as GFS web-shell version 3.1.7, including variants such as PRiV8.php and Predator.php. The detection is based on identifying unique base64-encoded strings typically found in these webshell files, ensuring the identification of malicious scripts used for unauthorized access and control of compromised web servers.
  Updated-Date: '2024_08_07'
WebShell_Gamma_Web_Shell:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2a3f76951d705ed602c7384051dd51b0
  Ruleset: securityonion-yara
  Summary: This rule detects the Gamma Web Shell, specifically identifying a PHP webshell through various unique code strings. It looks for commands like "ls", "pwd", and "uptime", and checks for specific text markers such as the Gamma Group's URL and error messages related to restricted mode commands. These markers help in identifying the presence of this specific type of webshell on a system.
  Updated-Date: '2024_08_07'
WebShell_Generic_1609_A:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 98fca18ed581841901b28722450092e4
  Ruleset: securityonion-yara
  Summary: This rule detects a generic web shell by identifying a specific string pattern within potentially malicious PHP code. It looks for the presence of the string "return $qwery45234dws($b);" encoded in ASCII and checks if the file content starts with the ASCII characters for "<?".
  Updated-Date: '2024_08_07'
WebShell_Generic_PHP_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 953d368e065480f824aa461be67e1ab0
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of PHP web shells, specifically archived files associated with Dive Shell 1.0 from Github. The rule identifies suspicious PHP code commonly used in web shell malware, such as commands creating an array with embedded PHP code, checking session or request parameters for 'cwd' or 'reset', and verifying specific key codes within commands. These patterns suggest attempts to execute or manage commands remotely on a compromised server, a common behavior of web shell in backdoor activities.
  Updated-Date: '2024_08_07'
WebShell_Generic_PHP_10:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5298653a2f60f19e46962c08cffae83b
  Ruleset: securityonion-yara
  Summary: This rule detects specific PHP web shells commonly found in files such as Cyber Shell.php, cybershell.php, Cyber Shell (v 1.0).php, and PHPRemoteView.php. These malicious scripts enable unauthorized remote access and control over a compromised server. The detection is based on distinctive string patterns related to file permission checks and formatting commands, such as conditional statements for execution modes, sprintf function usage, and specific font size settings in the code. These patterns help identify web shell scripts used by attackers to manipulate server files and directories.
  Updated-Date: '2024_08_07'
WebShell_Generic_PHP_11:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4d69d48211289b6388efad5a5341d163
  Ruleset: securityonion-yara
  Summary: This rule detects PHP webshells from specific scripts including "rootshell.php," "Rootshell.v.1.0.php," "s72 Shell v1.1 Coding.php," and "s72_Shell_v1.1_Coding.php." It identifies distinctive code features such as variable assignments for filenames, readdir loops, conditions for file existence checks, and file copy operations. These patterns are indicative of the functionalities typically associated with PHP webshells, which allow unauthorized remote access and manipulation of files on a compromised web server.
  Updated-Date: '2024_08_07'
WebShell_Generic_PHP_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 71eee26edd62818e93ee2cda558805e0
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of specific PHP web shells, including CrystalShell v.1.php, load_shell.php, Loaderz WEB Shell.php, and stres.php. The detection criteria involve identifying particular patterns in the code, such as checks for POST variables related to file operations, port assignments from POST data, and certain conditions involving HTTP POST files uploads. These patterns indicate the functionality typically associated with malicious web shells used for unauthorized access and control of web servers.
  Updated-Date: '2024_08_07'
WebShell_Generic_PHP_3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 043139f42a7d6a17db66d23b188a420a
  Ruleset: securityonion-yara
  Summary: This rule detects a specific type of PHP webshell that is identifiable by certain patterns and strings in the code. Indicators include HTTP headers specifying content length based on file size, a text area expecting a command input from HTTP POST requests, a file type check for directory listings, and a permissions check for indicating read access. These unique signatures help in identifying potentially malicious PHP scripts used for executing unauthorized commands and file manipulations on a web server.
  Updated-Date: '2024_08_07'
WebShell_Generic_PHP_4:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 34127668d6349ed4ba3ceb6a4e9a7658
  Ruleset: securityonion-yara
  Summary: This rule detects several variants of PHP webshells, including CrystalShell v.1.php, load_shell.php, nshell.php, Loaderz WEB Shell.php, and stres.php, by identifying specific code patterns. These patterns include file and directory validation checks, permission settings for owner and world attributes, and iteration through file arrays. The presence of these signatures signifies potentially malicious webshell activity that can be used for unauthorized file access and execution on a web server.
  Updated-Date: '2024_08_07'
WebShell_Generic_PHP_6:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8e57715c871fbf6e223ab59cb80c4e08
  Ruleset: securityonion-yara
  Summary: This rule detects PHP web shells by identifying specific code patterns commonly used in such malicious scripts. It looks for strings associated with PHP functions like `eval` combined with `stripslashes` and `$_POST`, `shell_exec`, conditional checks against server type, and function definitions such as `execute()`. The presence of these strings within a file indicates the likelihood of a web shell, enabling appropriate response measures.
  Updated-Date: '2024_08_07'
WebShell_Generic_PHP_7:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2c1a237787f2c4128b3f061c4c459b16
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of PHP webshells by identifying specific strings found within the webshell code. These strings include commands and actions for dumping a database table or entire database, setting content-disposition headers for SQL file downloads, and echoing usernames in a specified format. The presence of any two of these strings in PHP code triggers detection.
  Updated-Date: '2024_08_07'
WebShell_Generic_PHP_8:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 29702c9326c67a9b469f6cbe3cf51cec
  Ruleset: securityonion-yara
  Summary: This rule detects PHP web shells by identifying specific strings commonly found in scripts used for unauthorized remote access and control over web servers. It targets patterns related to viewing, uploading, and downloading files, including comments and HTML forms, to identify potentially malicious activity associated with PHP web shells.
  Updated-Date: '2024_08_07'
WebShell_Generic_PHP_9:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 217aa39f909c6f19c555cf196eddb7ae
  Ruleset: securityonion-yara
  Summary: This rule detects specific PHP webshells originating from files such as "KAdot Universal Shell v0.1.6.php," identified by a set of unique hexadecimal string patterns within the PHP code. These patterns indicate typical webshell behavior, including base64_decode functions and the handling of POST requests, which are commonly used for executing malicious commands on compromised servers. The rule focuses on the presence of specific sequences in the code that are characteristic of these webshells.
  Updated-Date: '2024_08_07'
WebShell_JexBoss_JSP_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8ad28a18045c6aee31ef1cd36ec010d7
  Ruleset: securityonion-yara
  Summary: This rule detects JSP files associated with JexBoss, a tool used to exploit vulnerabilities in web applications. It identifies specific patterns within the JSP code, such as the presence of the string "equals(\"jexboss\")" and certain request parameter checks and headers, suggesting activity typical of this exploitation tool. Additionally, it looks for specific Java import statements and structured JSP code that reads and prints input, indicative of web shell behavior. The rule is designed to identify files smaller than 1KB with these characteristics.
  Updated-Date: '2024_08_07'
WebShell_JexBoss_WAR_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2d0bce1c8a513f88211b2d4290a1cb11
  Ruleset: securityonion-yara
  Summary: This rule detects JexBoss web shells in WAR format by identifying specific string patterns associated with various JSP files and keywords indicative of the JexBoss malware. The rule checks for specific file signatures and patterns within a file size limit of 4KB to flag potentially malicious files related to JexBoss.
  Updated-Date: '2024_08_07'
WebShell_JspWebshell_1_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: dccfab79ea6ab559e7b7ba08d8e9304f
  Ruleset: securityonion-yara
  Summary: This rule detects a specific JSP web shell, which is a type of malware used to remotely control a compromised server. The web shell contains code snippets that manage and handle requests, including error handling and password parameter retrieval, typically for unauthorized activities. Key indicators include unique Java print statements, parameter handling for file edits and passwords, and specific imports in the JSP script, suggesting attempts to manipulate server-side content and sessions.
  Updated-Date: '2024_08_07'
WebShell_JspWebshell_1_2_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 49a33731260f5ad269935b9529d7ef75
  Ruleset: securityonion-yara
  Summary: This rule detects a specific JSP-based webshell named "JspWebshell 1.2.php". This webshell contains unique strings such as an error message related to folder creation and deletion, specific page content types and character sets, commented-out code for retrieving a file path parameter, a variable indicating the position in a file, and a check for a received command parameter. These distinctive strings help identify the malicious webshell script.
  Updated-Date: '2024_08_07'
WebShell_Liz0ziM_Private_Safe_Mode_Command_Execuriton_Bypass_Exploit:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b576a52f67c9381d6a22165f49090f4a
  Ruleset: securityonion-yara
  Summary: This rule detects a specific PHP web shell known as Liz0ziM, designed to bypass safe mode command execution restrictions. It looks for strings within the script that indicate it is using the `shell_exec` function with POST variables to execute commands, such as "$liz0zim=shell_exec($_POST[liz0]);" and "$liz0=shell_exec($_POST[baba]);". Additionally, it searches for HTML output strings that are associated with this web shell, including "Liz0ziM Private Safe Mode Command Execuriton Bypass" and options for executing commands like "cat /etc/passwd".
  Updated-Date: '2024_08_07'
WebShell_Moroccan_Spamers_Ma_EditioN_By_GhOsT:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 524e450b56137e5a58a45a6a9d40c218
  Ruleset: securityonion-yara
  Summary: This rule detects a specific PHP webshell known as "Moroccan Spamers Ma-EditioN By GhOsT.php." It identifies the webshell based on unique code patterns, including the use of `chunk_split` with `base64_encode` functions for encoding content, a message indicating the sending of an email, and a conditional check for the absence of parameters such as `from`, `subject`, `message`, and `emaillist`.
  Updated-Date: '2024_08_07'
WebShell_NCC_Shell:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6bd1746a417b1fa9961403750b18cd3f
  Ruleset: securityonion-yara
  Summary: This rule detects a specific variant of PHP webshell known as NCC-Shell. It identifies the webshell through distinct string patterns found within the code, such as handling file uploads with a specific probe mechanism, containing metadata or comments regarding its creation and association with entities like "Silver" and "Team .:National Cracker Crew:.", and specific HTML elements related to uploads. This webshell may present an interface titled "Upload - Shell/Datei" and include links or acknowledgments to NCC, indicating affiliations or attributions.
  Updated-Date: '2024_08_07'
WebShell_NTDaddy_v1_9:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 371550e85a89d1ccd675ad7348a2d0f1
  Ruleset: securityonion-yara
  Summary: 'This rule detects a PHP webshell named NTDaddy v1.9, which is hosted in a GitHub archive. Indicators of this particular webshell include a reference to the email address "mr_o@ihateclowns.com," a script that assigns a temporary file path within the C drive ("szTempFile = \"C:\\\" & oFileSys.GetTempName( )"), an HTML form with the action attribute targeting "ntdaddy.asp," and a specific error message output ("<ERROR: THIS IS NOT A TEXT FILE>"). These characteristics help identify the presence of the NTDaddy v1.9 webshell on compromised systems.'
  Updated-Date: '2024_08_07'
WebShell_PHANTASMA:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0b9fbec1b601afcda0e190d7ba811412
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a PHP webshell named PHANTASMA, identified through specific code patterns such as usage instructions, port scanning functionality, banner echo output, and retrieving the current user. These distinct code snippets are used to identify and flag the webshell script.
  Updated-Date: '2024_08_07'
WebShell_PHP_Web_Kit_v3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a12809a58c78fa3ee13e53557ede41de
  Ruleset: securityonion-yara
  Summary: This rule detects the PAS Tool PHP Web Kit, specifically designed to identify a PHP-based web shell associated with this tool. The rule targets specific patterns within PHP files, such as the presence of encoded PHP code, base64 decoding operations from HTTP requests, and particular string manipulation methods like `str_replace` and `strrev`. The file size is checked to be between 8KB and 100KB, ensuring the rule only applies to reasonably sized scripts.
  Updated-Date: '2024_08_07'
WebShell_PHP_Web_Kit_v4:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2967c4d02584ad5ba2e400c486508110
  Ruleset: securityonion-yara
  Summary: 'This rule detects a specific PHP web shell known as PAS Tool PHP Web Kit. The rule identifies the web shell by looking for particular strings within the file: a PHP opening tag, specific obfuscation patterns such as function calls disguised by string replacements, and version checks for PHP. The files targeted by this detection are between 8KB and 100KB in size.'
  Updated-Date: '2024_08_07'
WebShell_PhpSpy_Ver_2006:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 99e1ff9cb6392718c47e22a6a1f0bc38
  Ruleset: securityonion-yara
  Summary: This rule detects the PHP webshell file known as PhpSpy Ver 2006. This malicious software allows unauthorized access and control over a web server. The detection is based on specific strings found within the webshell script, which include commands and variable assignments related to registry reading, program execution, and file paths typical of a backdoor exploit.
  Updated-Date: '2024_08_07'
WebShell_RemExp_asp_php:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 95e1dead0d845602c7930e378aa4d441
  Ruleset: securityonion-yara
  Summary: This rule detects a specific PHP webshell, identifiable by unique strings within the file "RemExp.asp.php.txt," which is known to be archived on GitHub. The webshell contains distinct code snippets pertaining to file and directory operations. These include string manipulations (such as extracting file extensions), HTML table elements reflecting file details, and server-side scripts that handle file-related queries and responses. These patterns are indicative of unauthorized functionality commonly exploited in webshell attacks, which often facilitate remote server access and manipulation. The presence of such strings can alert to potential security breaches via malicious scripts.
  Updated-Date: '2024_08_07'
WebShell_STNC_WebShell_v0_8:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f277971c4a77301af919878e61e694fb
  Ruleset: securityonion-yara
  Summary: This rule detects the PHP-based web shell known as STNC WebShell v0.8. The detection is based on specific code patterns, including the presence of an action parameter in POST requests, the use of the system function to execute commands, and certain file operations involving directories. The rule identifies these patterns as indicative of this particular web shell's behavior.
  Updated-Date: '2024_08_07'
WebShell_Safe_Mode_Bypass_PHP_4_4_2_and_PHP_5_1_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3474829bcdb74192110711b31ae13fad
  Ruleset: securityonion-yara
  Summary: This rule detects a specific PHP webshell designed to bypass safe mode restrictions in PHP versions 4.4.2 and 5.1.2. It identifies the presence of this webshell by looking for particular strings in the PHP code, including options to access the `/etc/passwd` file, references to "PHP Emperor" along with an associated email address, and certain HTML content related to a "Safe Mode Shell." The detection mechanism requires that any three of these predefined strings are present in the scanned file.
  Updated-Date: '2024_08_07'
WebShell_Safe_Mode_Bypass_PHP_4_4_2_and_PHP_5_1_2_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d9639046422efe12ef3a7a41a5e1b3d0
  Ruleset: securityonion-yara
  Summary: This rule detects a specific PHP web shell designed to bypass safe mode in PHP versions 4.4.2 and 5.1.2. It looks for indicators such as options to retrieve the '/etc/passwd' file, contact information including an email address (xb5@hotmail.com), and code segments that manipulate PHP configuration settings like 'open_basedir'. The presence of at least two specified strings from these indicators triggers the detection.
  Updated-Date: '2024_08_07'
WebShell_SimAttacker___Vrsion_1_0_0___priv8_4_My_friend:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e24a1190c796cc83cec9251eaab7a5fc
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific web shell software named "SimAttacker," version 1.0.0, which is associated with Iranian hackers and has been archived on GitHub. It checks for various identifying strings in the code, such as references to Iranian hackers, specific error reporting settings, HTML links to a related website, and input fields for processing victim's email addresses. These characteristics suggest malicious activity involving email exploitation and web-based attacks.
  Updated-Date: '2024_08_07'
WebShell_Simple_PHP_backdoor_by_DK:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 68288cb58bae98f2fbe4313968b82188
  Ruleset: securityonion-yara
  Summary: This rule detects a Simple PHP backdoor script developed by DK, which allows an attacker to execute system commands on the targeted server by passing them through a URL parameter named 'cmd'. The specific indicators include comments in the PHP script that reference the developer's website and usage examples, as well as PHP code that checks for the 'cmd' parameter and executes its value using the system function.
  Updated-Date: '2024_08_07'
WebShell_Sincap_1_0:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6c6a71e2e180af0e63fea3390334dcfc
  Ruleset: securityonion-yara
  Summary: 'This rule detects the presence of the Sincap 1.0 PHP webshell by identifying specific strings within the code. The rule searches for unique markers related to this webshell such as references to an email address associated with AventGrup, the title tag containing ":: AventGrup ::.. - Sincap 1.0", mentions of Avrasya Veri ve NetWork Teknolojileri, and specific PHP code segments related to session and directory operations.'
  Updated-Date: '2024_08_07'
WebShell_Uploader:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 24cdc62166a4eb45534e614c9f3bd552
  Ruleset: securityonion-yara
  Summary: This rule detects a PHP webshell by identifying the presence of a specific malicious script designed for uploading files. It searches for the code snippet "move_uploaded_file($userfile, \"entrika.php\");" within PHP files to flag instances of this webshell, which indicates unauthorized file upload functionality often used by attackers to gain and maintain access to compromised web servers.
  Updated-Date: '2024_08_07'
WebShell_Web_shell__c_ShAnKaR:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 40902cefaeb1a88974e66be68e1fcba0
  Ruleset: securityonion-yara
  Summary: This rule detects a specific PHP web shell identified by its unique file behaviors and content patterns. The web shell is used to manipulate and interact with files on a server. It monitors for operations such as setting HTTP response headers with content length based on a specified file, saving and displaying text through HTML forms, writing server environment details, and reading and echoing the content of a password file provided through user input. These distinct code snippets are indicative of the malicious PHP script used for unauthorized server access and control.
  Updated-Date: '2024_08_07'
WebShell_WinX_Shell:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4b0835469aa33177bace3e4c999da054
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific PHP web shell known as "WinX Shell" from a GitHub archive. The detected file contains distinctive comments and HTML code that pertain to its functionality as a simple shell for Windows operating systems, as noted in the comments. Key features of this web shell include displaying network statistics, IP configuration, and task lists. It also includes identifiers such as mentions of its creator "greenwood from n57" and the ability to verify if a file is uploaded. The HTML structure of the shell includes a title indicating that it is the WinX Shell developed by GreenwooD.
  Updated-Date: '2024_08_07'
WebShell_Worse_Linux_Shell:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 658da331acaaa7ecd45f32c303371b48
  Ruleset: securityonion-yara
  Summary: This rule detects a specific PHP webshell known as the Worse Linux Shell, which is available in the PHP Webshells GitHub Archive. It identifies the presence of this webshell by searching for distinct strings within the file, such as commands related to file uploads, displaying text headers like "#worst @dal.net" and "Linux Shells," default shell commands like "ls -la," and the presence of system information output. The rule matches if it finds any two of these specified strings in a file.
  Updated-Date: '2024_08_07'
WebShell_ZyklonShell:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a0ee82e2f4e64d454bf664ee1c84550f
  Ruleset: securityonion-yara
  Summary: This rule detects the PHP-based web shell known as ZyklonShell, typically identified within web server environments by specific strings related to a custom 404 error page structure. These strings include messages such as "The requested URL /Nemo/shell/zyklonshell.txt was not found on this server.<P>", the HTML 2.0 public identifier, a 404 Not Found title, and a "Not Found" heading.
  Updated-Date: '2024_08_07'
WebShell__Ajax_PHP_Command_Shell_Ajax_PHP_Command_Shell_soldierofallah:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c839ffa82ae2ed243208d585864a0dec
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of specific PHP webshells from a GitHub archive, including files such as Ajax_PHP Command Shell.php and soldierofallah.php. It looks for strings indicative of webshell functionality, such as commands to read system files like /etc/passwd, list running processes, and check open network ports. Additionally, it identifies code snippets dealing with file content processing and error messages related to command execution. This helps to uncover malicious scripts that might be used for unauthorized system control and data access.
  Updated-Date: '2024_08_07'
WebShell__CrystalShell_v_1_erne_stres:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e8353f71f71c8e4f44ccc8aa535f71ff
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of specific PHP webshells known as CrystalShell v.1, erne, and stres. It searches for distinct patterns within the files, such as HTML input elements labelled 'open (shill.txt)', PHP functions like `var_dump(curl_exec($ch));`, and checks for empty POST parameters including 'Mohajer22' and 'cmd'. It also looks for code that handles the POST parameters 'curl' and 'copy', as well as operations involving string manipulation and IMAP functionality with `imap_open`. These patterns are indicative of backdoor access capabilities embedded in the infected web pages.
  Updated-Date: '2024_08_07'
WebShell__CrystalShell_v_1_sosyete_stres:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 40669d383fa95d856274d925d9f6f1d2
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of specific PHP webshells named CrystalShell v.1, sosyete, and stres. It identifies these webshells by searching for distinctive HTML and CSS code snippets within files. These snippets include specific styling rules for links, a bookmark within a panel, background colors, text colors, and a unique table style used in the webshells' code.
  Updated-Date: '2024_08_07'
WebShell__Cyber_Shell_cybershell_Cyber_Shell__v_1_0_:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 484535de63a18a4d36f12c3bd208365d
  Ruleset: securityonion-yara
  Summary: This rule detects specific PHP webshells associated with files named "Cyber Shell.php," "cybershell.php," and "Cyber Shell (v 1.0).php" by identifying particular string patterns. It searches for references to the "Cyber Lords Community" website, meta refresh redirection to the same file with an edit parameter, a comment indicating the code was authored by "Pixcher," and an HTML input field with a predefined filename. Detection is based on the presence of at least two of these strings.
  Updated-Date: '2024_08_07'
WebShell__PH_Vayv_PHVayv_PH_Vayv:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c91ae4acb817df644a9b61b8f66e75dd
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of specific PHP webshell files named "PH Vayv.php", "PHVayv.php", and "PH_Vayv.php". These files are likely used to give unauthorized remote access to a web server. The detection is based on identifying specific strings within the files, such as a POST form in conjunction with the filename "PHVayv.php", and proprietary PHP code elements indicative of the webshell's operations.
  Updated-Date: '2024_08_07'
WebShell__PH_Vayv_PHVayv_PH_Vayv_klasvayv_asp_php:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 28f866ee96ffa5b60c2bc8fcc6151fa5
  Ruleset: securityonion-yara
  Summary: This rule detects specific PHP webshells known as PH Vayv, PHVayv, PH_Vayv, and klasvayv.asp.php.txt. It identifies characteristic strings in files, such as certain HTML elements and focus events, to determine the presence of these webshells. The rule requires the presence of at least two of these distinctive strings to trigger detection.
  Updated-Date: '2024_08_07'
WebShell__Small_Web_Shell_by_ZaCo_small_zaco_zacosmall:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: bc276eac41d1602f737dd4d2f6ad686d
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the PHP web shells known as "Small Web Shell by ZaCo," which are found in files named Small Web Shell by ZaCo.php, small.php, zaco.php, and zacosmall.php. The web shells include specific code patterns used for malicious purposes, such as database dumping and error generation. Identifiable strings within the code include error messages related to database selection failures, content length headers for dump files, and confirmation messages for database dump completion. The detection methodology focuses on finding at least two of these strings within the analyzed file.
  Updated-Date: '2024_08_07'
WebShell__findsock_php_findsock_shell_php_reverse_shell:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 72321aad3b97063c4c5ff3afdb1c6f4b
  Ruleset: securityonion-yara
  Summary: This rule detects PHP webshells from files named findsock.c, php-findsock-shell.php, and php-reverse-shell.php. It identifies webshells by matching specific string patterns, including a comment containing an email address associated with pentestmonkey.net. The aim is to detect unauthorized or malicious webshells that may have been deployed on a server.
  Updated-Date: '2024_08_07'
WebShell_aZRaiLPhp_v1_0:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 28f07f775a00e89831ecde7a0eb6c583
  Ruleset: securityonion-yara
  Summary: This rule detects a specific PHP web shell known as "aZRaiLPhp v1.0," which is likely used for unauthorized remote access and control of web servers. It looks for distinctive strings within the file, such as indicators of URL manipulation, file permissions being changed using base_convert, and error handling in Turkish when touching files, which are typical behaviors for this type of malware. Additionally, it searches for HTML structure indicating dynamic file path navigation within the infected system.
  Updated-Date: '2024_08_07'
WebShell_accept_language:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3b491d068a9fb7f5da8404437c2dd797
  Ruleset: securityonion-yara
  Summary: This rule detects a PHP webshell file named "accept_language.php" utilized for executing system commands via the `passthru` function. The webshell retrieves commands from the HTTP "Accept-Language" header and executes them on the server, subsequently displaying the output along with the text '<br> by q1w2e3r4'.
  Updated-Date: '2024_08_07'
WebShell_b374k_mini_shell_php_php:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 00f71d57ec8e6869128a14abb3dca0e2
  Ruleset: securityonion-yara
  Summary: This rule detects a PHP-based webshell named b374k-mini-shell-php, identified by specific strings that include error reporting being disabled, the presence of an eval function used to inflate and decode base64 encoded data, and the setting of unlimited script execution time.
  Updated-Date: '2024_08_07'
WebShell_b374k_php:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c58251229fc0ef2b5a7798497b99fe2c
  Ruleset: securityonion-yara
  Summary: This rule detects a specific PHP webshell file named "b374k.php.php" by identifying unique strings within the file. The strings include comments about encrypting a password to MD5 via an external site, a default password reference, a section separator comment, and the version identifier "b374k 2.2". Additionally, it looks for a snippet of PHP code employing `eval` and `gzinflate` functions combined with `base64_decode`, which is a technique commonly used to obfuscate malicious scripts.
  Updated-Date: '2024_08_07'
WebShell_backupsql:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 98cfa010252d93d0b6b4c82e11fc27ee
  Ruleset: securityonion-yara
  Summary: This rule detects a specific PHP webshell known as "backupsql.php" from a GitHub archive. The webshell's functionality includes manipulating email headers to set MIME versions and content types, connecting to an FTP server using credentials, and sending email attachments or uploading files to a remote FTP server. Noteworthy indicators include references to a developer named Neagu Mihai and a specific sender email address, providing clear signs of its malicious nature.
  Updated-Date: '2024_08_07'
WebShell_c99_locus7s:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8209e0a903b233f2936d7e3cd085af70
  Ruleset: securityonion-yara
  Summary: This rule detects a malicious PHP Webshell identified by the file name "c99_locus7s.php," commonly found in a GitHub archive of PHP Webshells. It identifies the webshell by looking for specific code patterns such as base64 encoding of file contents, constructing file names based on server environment variables, using certain strings to dump data, and referencing an external source URL "http://locus7s.com/." Additionally, it looks for the presence of logic to retrieve the first 100 lines from the "/etc/passwd" file, which is indicative of unauthorized access and data retrieval.
  Updated-Date: '2024_08_07'
WebShell_c99_madnet:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: aa3b1c48d8b094d5f2e360b1dbbfd80b
  Ruleset: securityonion-yara
  Summary: This rule detects a specific PHP web shell script, c99_madnet.php, that is used for malicious purposes. It identifies the script by looking for certain string patterns such as `$md5_pass = ""; //If no pass then hash`, `eval(gzinflate(base64_decode('`, `$pass = "pass";  //Pass`, and `$login = "user"; //Login`. These patterns indicate the presence of obfuscated code and authentication mechanisms, which are typical characteristics of the c99_madnet web shell.
  Updated-Date: '2024_08_07'
WebShell_cgi:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0764e4fa5859f8928c3499ba75d6b907
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a web shell named "WebShell.cgi" by looking for specific strings within the file. It searches for the exact string "WebShell.cgi" and a unique HTML table code fragment that includes a conditional check for user permissions. These identifiers help identify potentially malicious web shell activity disguised as a legitimate CGI script.
  Updated-Date: '2024_08_07'
WebShell_cgitelnet:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 39682bcd7d92193a8548c95f12d809b2
  Ruleset: securityonion-yara
  Summary: This rule detects a specific PHP web shell file named "cgitelnet.php" by identifying unique strings commonly associated with it. These strings include a reference to an author's homepage, a command execution condition, details about operating in a Windows NT command line environment, and a message confirming file transfer completion. The presence of any two of these strings triggers the detection, identifying potential malicious use of this web shell for unauthorized remote command execution.
  Updated-Date: '2024_08_07'
WebShell_dC3_Security_Crew_Shell_PRiV:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: bd78ea5472f09127fdc8ec704b28ade4
  Ruleset: securityonion-yara
  Summary: This rule detects a specific PHP webshell file named "dC3_Security_Crew_Shell_PRiV.php." The file contains various malicious functionalities, including deleting directories based on user input through the `rmdir` function, manipulating the document root path by replacing backslashes with forward slashes, setting HTTP headers with custom expiration dates, searching for files based on user input using a POST request, decoding base64 strings from user input, and renaming files when certain conditions are met. These strings indicate the presence and functionality of this particular webshell.
  Updated-Date: '2024_08_07'
WebShell_dC3_Security_Crew_Shell_PRiV_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5c7875533a5c033bcc8ec3825212f637
  Ruleset: securityonion-yara
  Summary: This rule detects a specific PHP web shell script known as "dC3 Security Crew Shell PRiV" hosted on GitHub. The script is identified by distinct code snippets, such as commands for deleting directories, modifying headers to set the last-modified date and content type, copying files, and renaming files. These characteristics indicate the presence of the web shell, which can manipulate files and directories on the server.
  Updated-Date: '2024_08_07'
WebShell_ftpsearch:
  Created-Date: '2024_08_06'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1e8d51ed53b58e51a0f8648e972907cb
  Ruleset: securityonion-yara
  Summary: This rule detects a specific PHP webshell script known as `ftpsearch.php`, found in an archived collection of PHP webshells on GitHub. The indicators of this webshell include error messages related to reading the `/etc/passwd` file, an FTP connection attempt to `127.0.0.1`, and HTML content indicating that the page has been edited by "KingDefacer". Additionally, it looks for output messages reporting the number of entries found in the `/etc/passwd` file.
  Updated-Date: '2024_08_06'
WebShell_g00nshell_v1_3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 39dacd341c0a504abae52ad1a7a6d8cb
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the g00nshell-v1.3.php PHP webshell. It identifies this webshell by searching for specific strings within the file, such as a comment instructing users to execute commands by including '?cmd=___' in the URL, a SQL query structure using `SHOW COLUMNS FROM` with a table parameter, an MD5 encoded user-agent string, and HTML form methods typically indicative of webshells used to execute commands or SQL actions.
  Updated-Date: '2024_08_07'
WebShell_go_shell:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3fd2c0b2df61b8358f7e32ac9602734f
  Ruleset: securityonion-yara
  Summary: This rule detects a PHP webshell, specifically targeting a script named "go-shell.php" found in a GitHub archive. The identifying strings include a comment suggesting the change of a password for security purposes, a conditional statement setting a default command if none is defined, an open file handle command using parameters from the script, an HTML print statement, and a title tag indicating "GO.cgi". These strings suggest the script is designed to execute shell commands on a web server, emphasizing remote command execution and potential misuse for unauthorized access.
  Updated-Date: '2024_08_07'
WebShell_h4ntu_shell__powered_by_tsoi_:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 33e0202aaacb4a1e58d3ce639b8fd38b
  Ruleset: securityonion-yara
  Summary: This rule detects a specific PHP webshell identified as "h4ntu shell [powered by tsoi]." It identifies unique strings within the webshell, such as HTML title tags, PHP commands to execute shell commands via POST requests, system information retrieval using posix_uname, and user identification using the exec function "whoami". The webshell also contains functionalities for displaying server information and managing output buffers.
  Updated-Date: '2024_08_07'
WebShell_hiddens_shell_v1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: fa26d8dd3eab840a0b94386049cff67a
  Ruleset: securityonion-yara
  Summary: This rule detects a specific PHP web shell file named "hiddens shell v1.php" from the PHP Webshells Github Archive. It identifies the file based on a distinctive hash value and a unique string pattern found within the file's content, which helps in recognizing this potentially malicious script. This aids in identifying unauthorized web shells that may be used for malicious activities on a web server.
  Updated-Date: '2024_08_07'
WebShell_indexer_asp_php:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 39fb601ab01ca47c753a91ff9ba17c15
  Ruleset: securityonion-yara
  Summary: This rule detects a specific type of malicious PHP webshell known as "indexer.asp.php.txt," which is sourced from a GitHub archive. The rule identifies this webshell by looking for particular HTML and JavaScript strings within the content, such as a meta tag for Turkish language content, a specific title indicating the file is an indexer and reader tool, and form actions with parameters like "?Gonder" and "?oku." Additionally, the rule checks for script messages associated with "SaNaLTeRoR" and "nDexEr - Reader." This comprehensive detection is triggered when at least three of these strings are found within the same file.
  Updated-Date: '2024_08_07'
WebShell_ironshell:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: cd2929e25a61a2d5a812b0116ea965eb
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the "ironshell.php" file, a specific type of PHP web shell, by checking for distinctive strings within the code. The identified strings include an HTML title that dynamically includes the host name, PHP code for connecting to a MySQL database using credentials provided by HTTP POST requests, and a comment indicating the suppression of error reporting. It also looks for specific HTML form actions and POST request conditions, as well as a command execution using `shell_exec`. The detection condition is met if at least three of these strings are found in the file.
  Updated-Date: '2024_08_07'
WebShell_lamashell:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 80088c2b008b4da59494f7f31923da55
  Ruleset: securityonion-yara
  Summary: This rule detects a specific PHP web shell known as "lamashell.php," which is found in a GitHub archive of PHP web shells. It identifies the malware based on several distinct strings within its code, such as commands for executing PHP scripts via POST requests, HTML document type declarations, a unique HTML title "lama's'hell v. 3.0," and default shell commands like "ls -lah." The rule triggers if at least two of these characteristic strings are found in the scanned file.
  Updated-Date: '2024_08_07'
WebShell_mysql_tool:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ff7ee5dc3540f3254ce491356aa58bfb
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a PHP webshell file named `mysql_tool.php`, which is associated with unauthorized database operations. It identifies suspicious activity by looking for specific strings within the file, including commands that dump data for a table and create tables within a MySQL database.
  Updated-Date: '2024_08_07'
WebShell_php_backdoor:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 60f095aaa6260a79cdb58dc7d7d9f947
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific PHP backdoor webshell. It identifies malicious code patterns including URLs that access server environment variables, comments indicating the script is a simple PHP backdoor coded by an author with the alias 'z0mbie', and commands requiring directory parameters. It also looks for code snippets that generate links or execute commands within PHP web forms, typically used to control compromised servers remotely. These characteristics suggest unauthorized use of PHP code to facilitate hidden remote command execution on web servers.
  Updated-Date: '2024_08_07'
WebShell_php_include_w_shell:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4ed8aadcabf47900846eafba74de7fb7
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific PHP webshell script named "php-include-w-shell.php" that includes certain distinctive strings. Among these identifiers are debugging comments indicating variable dumping and a line suggesting the use of a PHP-based shell application to export an interactive Bash terminal session. Another indicator is a PHP conditional statement that formats output related to the number of hosts. These unique strings help identify potentially malicious PHP webshell scripts intended for unauthorized access and control of a server.
  Updated-Date: '2024_08_07'
WebShell_php_webshells_529:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 324482a1592bca53a844c19e0daa304a
  Ruleset: securityonion-yara
  Summary: This rule detects a specific PHP web shell file named "529.php" associated with the Md5Cracking.Com Crew. The web shell contains various strings that provide indications of its presence, such as references to "Securityhouse," "exploit from," and specific PHP bypass techniques. It targets specific patterns in the PHP code and comments associated with web shell activities for identification.
  Updated-Date: '2024_08_07'
WebShell_php_webshells_MyShell:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7d1bfeb7e8994e57ec32a87955d81338
  Ruleset: securityonion-yara
  Summary: This rule detects a specific PHP webshell script named "MyShell.php" from a GitHub archive. Key indicators include HTML code indicating an access-denied error, an administrative email setup, comments about changing the working directory, and system command execution that directs output to a temporary file. Additionally, it looks for automatic error trapping mechanisms and a form for command execution in the webshell interface.
  Updated-Date: '2024_08_07'
WebShell_php_webshells_NGH:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ae58c3e6f20528f73c1d289d04cac36e
  Ruleset: securityonion-yara
  Summary: This rule detects a PHP webshell known as "Webcommander," specifically identifying a file named NGH.php from a GitHub archive. The webshell includes functionality for executing shell commands, binding a bash shell to a specific port, and providing backconnect capabilities. Key indicators include unique HTML and form tags related to these features, such as forms for bindshell and backconnect actions, error messages related to login, and references to the script's current state. This rule is aimed at identifying compromise attempts using this specific malicious script.
  Updated-Date: '2024_08_07'
WebShell_php_webshells_README:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 78f24f6308058144f13c2df01e243e42
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a README.md file associated with common PHP webshells from a GitHub archive. It searches for specific strings, including a cautionary note about not hosting the file on a server and a reference to "php-webshells." The detection is based on matching all specified strings in the file.
  Updated-Date: '2024_08_07'
WebShell_php_webshells_aspydrv:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e9fe231e6717bb86b93b4335e03534da
  Ruleset: securityonion-yara
  Summary: This rule detects a specific PHP webshell known as "aspydrv.php," which is hosted in a public repository on GitHub. It identifies the webshell using unique strings that are characteristic of its operation. These strings include a reference to a target directory path (`D:\\hshome\\masterhr\\masterhr.com\\`), indicators of a content-type operation (`InstrB` and `CByteString("Content-Type:")`), a script for managing SQL data (`Document.frmSQL.mPage.value`), a query string for a specific operation (`request.querystring("getDRVs")`), and a comment indicating the start of a file copy routine. By matching at least three of these distinct strings, the presence of this webshell can be detected.
  Updated-Date: '2024_08_07'
WebShell_php_webshells_cpanel:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 444d0a63092f68e0ffad71f86ffa4496
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific PHP web shell archive from GitHub, specifically targeting a file named `cpanel.php`. It identifies patterns related to functionalities such as FTP checking, cURL operations targeting a specified host and port, and various command output text. Additionally, it includes indicators of a PHP-based brute-forcing tool for FTP and cPanel, highlighting its capabilities even in environments with certain PHP restrictions.
  Updated-Date: '2024_08_07'
WebShell_php_webshells_cw:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ea701af7c45dd862a319e4995f3cac5a
  Ruleset: securityonion-yara
  Summary: This rule detects a specific PHP webshell file named cw.php, which is used for malicious activities such as dumping database information and executing Perl scripts. Indicators include database dump code referencing pacucci.com, commands to run Perl scripts with provided host and port details, server IP logging, and references to Cyber-Warrior.Org. Conditions for detection are met if at least three of the specified strings are found within the file.
  Updated-Date: '2024_08_07'
WebShell_php_webshells_kral:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b377351b855014c3521050572ad2c175
  Ruleset: securityonion-yara
  Summary: This rule detects a specific PHP webshell file named "kral.php" from the PHP Webshells GitHub Archive. It identifies suspicious strings typical of webshell behavior, including the use of the `gethostbyname` function, certain `curl_setopt` configurations, the manipulation of URLs with query parameters, and HTML output indicative of server access or listing functionality. The rule is designed to recognize at least two of these suspicious strings to flag the file as matching the identified webshell.
  Updated-Date: '2024_08_07'
WebShell_php_webshells_lolipop:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 353605f3dabe8c8a1c162a6e6d49dcd5
  Ruleset: securityonion-yara
  Summary: This rule detects a specific PHP webshell, named "lolipop.php," commonly found in a GitHub archive. It identifies the webshell by searching for distinct code patterns such as the assignment of `$_POST` variables to `$commander` and `$sourcego`, as well as the execution of a MySQL query with error handling.
  Updated-Date: '2024_08_07'
WebShell_php_webshells_lostDC:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 92bd1648eb4555d79ddc1f3bbbb7fbd6
  Ruleset: securityonion-yara
  Summary: This rule detects a specific PHP webshell known as "lostDC," sourced from a GitHub archive of PHP webshells. Key indicators include HTTP host information gathering, content description set as a download manager, generation time printing, directory creation attempts with 0777 permissions, and the execution of shell commands via `$shellexec`. These characteristics point towards malicious activities commonly associated with webshells, such as unauthorized server access and file manipulation.
  Updated-Date: '2024_08_07'
WebShell_php_webshells_matamu:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ef445b0880251407463bfa5da38d415e
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a PHP web shell known as "matamu.php," which is part of a collection archived on GitHub. It identifies specific patterns within the code, such as the concatenation commands, comments associated with directory changes and command execution, and references to temporary files associated with the command line operations, to accurately determine the presence of this web shell.
  Updated-Date: '2024_08_07'
WebShell_php_webshells_myshell:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5f872c8862ffd31af72562f41158eafb
  Ruleset: securityonion-yara
  Summary: This rule detects a PHP webshell script named "myshell.php" from the PHP Webshells GitHub archive. The script contains specific strings related to its functionality, including commands for executing system commands and handling their output through temporary files, as well as indicators of its version and certain server variables. The detection is based on identifying any one of these unique strings within the code.
  Updated-Date: '2024_08_07'
WebShell_php_webshells_pHpINJ:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4cf0f841cba960415d0882ae17ff2a2b
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a PHP webshell named pHpINJ.php, which is known for executing harmful server-side commands. It identifies specific strings in the file related to the exploitation process, including links to exploit, form submission mechanisms, SQL injection code, and HTML elements for launching attacks. The rule matches terms associated with constructing and embedding the webshell to facilitate unauthorized access and control over the server through PHP code injection.
  Updated-Date: '2024_08_07'
WebShell_php_webshells_pws:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2c71f0728cc91dad460a62e6b269e21f
  Ruleset: securityonion-yara
  Summary: This rule detects a PHP-based webshell, known as "pws.php," typically found in the PHP Webshells Github Archive. It identifies the presence of specific code snippets that are characteristic of a webshell. These include POST request handling for command injection, file upload operations, and command execution using the `passthru()` function. Key strings such as `$_POST['cmd']`, file copy operations, and success messages after file upload are used to signal the presence of the malicious script. The detection is triggered when any four of these specific strings are found in the scanned file.
  Updated-Date: '2024_08_07'
WebShell_php_webshells_spygrup:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 09fd88e84127de8d19eb03e50674a141
  Ruleset: securityonion-yara
  Summary: This rule detects a specific PHP webshell identified in a GitHub archive named "spygrup.php." The detection strings include references to an email address, "kingdefacer@msn.com," and the phrase "By KingDefacer From Spygrup.org." Additionally, it identifies code snippets involving HTML escaping and a conditional statement checking for a 'root' POST parameter.
  Updated-Date: '2024_08_07'
WebShell_php_webshells_tryag:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f972709fbe85ebb86ba9d2e124a3a3a2
  Ruleset: securityonion-yara
  Summary: This rule detects a PHP webshell named 'tryag.php' associated with the TrYaG Team. The webshell's characteristics include specific HTML title tags referencing "Edited By KingDefacer," code snippets related to table dumping, and functionality for handling POST request variables. Additionally, the webshell contains code for creating tables and an interface for file editing.
  Updated-Date: '2024_08_07'
WebShell_qsd_php_backdoor:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 400960593a73fa8399ee846d2720fea9
  Ruleset: securityonion-yara
  Summary: This rule detects a malicious PHP webshell known as qsd-php-backdoor. The script, created by Daniel Berliner of QSD Consulting, contains a robust backdoor mechanism. Key string indicators include code segments that process POST requests for 'newcontent', indicating an operation that decodes and processes base64-encoded data supplied via HTTP POST requests. The presence of these specific strings within a PHP file suggests the implementation of a backdoor facilitating unauthorized access and potential control over the compromised web server.
  Updated-Date: '2024_08_07'
WebShell_reader_asp_php:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a7e9ccaa27421a6d807b10a3edbbb9b8
  Ruleset: securityonion-yara
  Summary: This rule detects a specific PHP webshell known as `file reader.asp.php.txt` that is archived on GitHub. It identifies the presence of malicious file-reader capabilities by looking for strings associated with webshell functionality, including phrases and style declarations indicative of a webshell interface. The rule triggers if at least three of the specified strings are found within a file, helping to uncover suspicious activities related to unauthorized web access and control.
  Updated-Date: '2024_08_07'
WebShell_ru24_post_sh:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: bf0ab7ae945c5dc01d40790ed7b2423d
  Ruleset: securityonion-yara
  Summary: This rule detects a specific PHP webshell file known as "ru24_post_sh.php," which was archived on GitHub. The webshell contains various identifiable strings, including a URL pointing to "http://www.ru24-team.net," a command validation and execution mechanism using 'passthru,' and references to its creator "DreAmeRz." Specific script behaviors include setting default command values and guiding responses based on post requests. The rule leverages these characteristics to identify the malicious PHP webshell code.
  Updated-Date: '2024_08_07'
WebShell_safe0ver:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 535081be6575244dbd587a145d307902
  Ruleset: securityonion-yara
  Summary: This rule detects a specific PHP web shell, known as "safe0ver.php," which is associated with malicious activity. Key indicators of this web shell include unique script identifiers and comments referencing the author with the handle "Evilc0der.com," specific file existence checks, HTML-encoded content handling, a bypass message for PHP's safe mode, and an upload file mechanism. It looks for a combination of these distinct strings to identify the malicious script.
  Updated-Date: '2024_08_07'
WebShell_simattacker:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 36a862690b41175ed74ddde363782afe
  Ruleset: securityonion-yara
  Summary: This rule detects a malicious PHP webshell script named simattacker.php. The script contains strings indicating its association with attackers, such as email addresses and pseudonyms, including "@Attacker.com," "Turkish Hackers," "SimAttacker," "KingDefacer," and "kingdefacer@msn.com." It also includes strings for handling errors, generating random email addresses, and comments about using the script for denial-of-service attacks. Among its notable commands is one that suppresses specific types of PHP error reporting, and another that prints a message not intended for Windows environments. The rule matches the presence of at least two of these indicator strings.
  Updated-Date: '2024_08_07'
WebShell_simple_backdoor:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c2fa974f7aeb9fe7678aa627fe26b227
  Ruleset: securityonion-yara
  Summary: This rule detects a PHP web shell named "simple-backdoor.php" associated with a GitHub archive of PHP web shells. It identifies specific code patterns, including comments from the author, URL usage instructions, and the command execution logic. The web shell allows remote command execution through HTTP requests, parsing commands from the "cmd" parameter and executing them on the server, revealing that it is designed for unauthorized remote access to the target system.
  Updated-Date: '2024_08_07'
WebShell_simple_cmd:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: faf20a83c905eb6631415ba46f88ba14
  Ruleset: securityonion-yara
  Summary: This rule detects a PHP webshell, particularly a file named "simple_cmd.php" found in a GitHub archive of PHP Webshells. The detection is based on specific strings within the file, such as HTML input fields for command input, a title indicating "G-Security Webshell," and PHP code that processes and executes commands received via HTTP requests. These characteristics indicate functionality for executing shell commands via a web interface, a common feature in malicious webshell scripts.
  Updated-Date: '2024_08_07'
WebShell_toolaspshell:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f42c900f77ba377a34ab02c49e56785e
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific PHP web shell known as "toolaspshell.php," identified from a GitHub archive. The rule looks for particular strings within the file contents, such as "cprthtml = \"<font face='arial' size='1'>RHTOOLS 1.5 BETA(PVT) Edited By KingDef," "barrapos = CInt(InstrRev(Left(raiz,Len(raiz) - 1),\"\\\")) - 1," and "destino3 = folderItem.path & \"\\index.asp\"." The detection condition is met if at least two of these specified strings are found in the file, indicating the presence of the web shell.
  Updated-Date: '2024_08_07'
WebShell_webshells_zehir4:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: cbfad3775b493e3867c2876613becff7
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the Zehir4 web shell file. It identifies specific strings characteristic of this web shell, such as a command execution via JavaScript with `frames.byZehir.document.execCommand` and an HTML response containing the title "ZehirIV --> Powered By Zehir" followed by an email address. These indicators point to the malicious capabilities of the Zehir4 web shell, which may be used for unauthorized remote control and execution of commands on a compromised web server.
  Updated-Date: '2024_08_07'
WebShell_zehir4_asp_php:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: bf96f75ab8ee4a61d6c8ca6290d24ba5
  Ruleset: securityonion-yara
  Summary: This rule detects a webshell, specifically a hybrid file with both ASP and PHP capabilities named "zehir4.asp.php.txt." The file contains unique strings such as an HTML response title indicating "zehir3," and references to JavaScript functions executed by iframes named "byZehir." These elements suggest an association with malicious activities, potentially allowing an attacker to execute commands on a compromised web server.
  Updated-Date: '2024_08_07'
Webshell_27_9_acid_c99_locus7s:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7c3c82cac5d069168c1fd1c07b2e7af1
  Ruleset: securityonion-yara
  Summary: This rule detects a web shell, particularly targeting signatures related to files named "27.9.txt," "acid.php," and "c99_locus7s.txt." The rule aims to identify specific patterns within the contents of these files, looking for PHP code that handles backconnect functionality and error messages associated with the inability to backdoor a host. The detection criteria include verifying that the file size is less than 1711KB and containing at least one specified string pattern, such as execution commands and predefined backconnect and error response messages.
  Updated-Date: '2024_08_07'
Webshell_27_9_c66_c99:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 553da561ba871bf3b1921c0d0bc87ad0
  Ruleset: securityonion-yara
  Summary: This rule detects webshells, specifically from a collection of files including `27.9.txt`, `c66.php`, `c99-shadows-mod.php`, and `c99.php`. It identifies webshell characteristics based on specific strings found within the file content. These strings include setting and unsetting cookies related to `c99sh_surl`, extracting values from `$_REQUEST` with the key `c99shcook`, and checking for the existence of the function `c99_buff_prepare`. The rule targets files under 685KB and triggers if any of these patterns are matched.
  Updated-Date: '2024_08_07'
Webshell_AcidPoison:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9a869b194618c8e8f91ad161582057f9
  Ruleset: securityonion-yara
  Summary: This rule detects the web shell malware known as Acid Poison (Poison Sh3ll). It targets specific scripting constructs used for executing commands in a compromised web server environment. The malware signature identifies a characteristic code snippet that checks for the availability of the "exec" function to execute commands and then joins the output with line breaks. The detection is applicable to files smaller than 550KB and requires all specified conditions to be met.
  Updated-Date: '2024_08_07'
Webshell_Ayyildiz:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 120b43fa98a27680e2cd7a3077943752
  Ruleset: securityonion-yara
  Summary: This rule detects a webshell known as "Ayyildiz" by identifying specific strings within files smaller than 112KB. The rule targets characteristic PHP code segments, such as commands that manipulate directory paths and display directory options. The webshell is associated with multiple known file hashes, indicating its various forms or versions.
  Updated-Date: '2024_08_07'
Webshell_Backdoor_PHP_Agent_r57_mod_bizzz_shell_r57:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5deeadf0a3d1c2da9a67a82bcd047d39
  Ruleset: securityonion-yara
  Summary: This rule detects PHP-based webshell backdoors, specifically variants such as Backdoor.PHP.Agent and modifications like r57.mod-bizzz. These backdoors allow an attacker to execute commands on a compromised web server. The rule identifies specific code patterns and commands used in these webshells, such as setting `$_POST['cmd']` to execute and using the `ex` function to run code. These characteristics are typical of malicious scripts that provide unauthorized control over a server.
  Updated-Date: '2024_08_07'
Webshell_Caterpillar_ASPX:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 73fab6da05e0f72eb2aa1706fd841e18
  Ruleset: securityonion-yara
  Summary: This rule detects a specific web shell known as "Volatile Cedar," particularly from a file named `caterpillar.aspx`. It identifies various characteristics of the web shell, such as the instantiation of web requests and network scripts, execution of specific command-line operations, file enumeration within directories, execution of database queries, and usage of certain query string parameters and HTML link generation patterns. These patterns are intended to highlight typical behaviors and code structures present in the malicious web shell script.
  Updated-Date: '2024_08_07'
Webshell_FOPO_Obfuscation_APT_ON_Nov17_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 34992d84b51324d855600837433ba091
  Ruleset: securityonion-yara
  Summary: This rule detects webshell malware associated with an NK APT incident, identifiable by the presence of FOPO-provided obfuscation. The malware is recognized through specific strings such as "Obfuscation provided by FOPO" and particular patterns within the file, including the string `@eval(` near the start and a specific byte sequence at the end of the file. The rule targets files smaller than 800KB and those beginning with the hexadecimal sequence `0x3f3c`.
  Updated-Date: '2024_08_07'
Webshell_Insomnia:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6442fdf0f1f9065ac0a4bb076ecf2912
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a webshell known as InsomniaShell, specifically targeting the file InsomniaShell.aspx. It identifies the webshell by searching for specific strings in the file, such as error messages indicating failed operations, commands executed via SQL Server's xp_cmdshell, and usage of certain .NET and Windows API functions like DllImport("Advapi32.dll"). The detection is triggered if at least three of these distinctive strings are found, indicating the potential presence of the Insomnia Webshell, which is used to provide remote shell access on compromised ASP.NET applications.
  Updated-Date: '2024_08_07'
Webshell_Tiny_JSP_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1911974193e520417da123e159c41986
  Ruleset: securityonion-yara
  Summary: 'This rule detects a tiny webshell known as China Chopper. The detection is based on the presence of a specific string pattern, "<%eval(Request(", within a file that meets specific conditions: the file must start with the bytes 0x253c and its size must be less than 40 bytes.'
  Updated-Date: '2024_08_07'
Webshell_acid_AntiSecShell_3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f82fd9a8676cefc4f65f28542725e946
  Ruleset: securityonion-yara
  Summary: This rule detects the Webshell Acid, a type of PHP-based web shell malware, by identifying specific strings and conditions indicative of its presence. The targeted malware allows attackers to execute arbitrary commands on a compromised web server. Detection is based on particular PHP code patterns, such as script sections manipulating HTML options for deletion and checking file readability and permissions. The rule applies to files smaller than 900KB containing all defined strings.
  Updated-Date: '2024_08_07'
Webshell_acid_FaTaLisTiCz_Fx_fx_p0isoN_sh3ll_x0rg_byp4ss_256:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c1e29637be143a137d01fc19c38f0267
  Ruleset: securityonion-yara
  Summary: This rule detects a webshell named FaTaLisTiCz_Fx_fx_p0isoN_sh3ll_x0rg_byp4ss_256. The detection is based on specific strings within the file, such as an HTML form element with a hidden input field for "act" set to "ls" and the presence of a PHP foreach loop iterating over a variable named $quicklaunch2. The rule applies to files smaller than 882KB in size and requires all specified strings to be present within the file.
  Updated-Date: '2024_08_07'
Webshell_c100:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 53aaa1e6eb6b4f18d18cbe6d5d969ced
  Ruleset: securityonion-yara
  Summary: This rule detects a webshell associated with the c100 variant of the 777shell malware. It identifies specific patterns and strings within files that are smaller than 685KB. Among the features it looks for are commands related to downloading tools using wget, kernel information, probing for user information from `/etc/passwd`, querying the presence of network downloading utilities like wget, curl, w3m, and lynx, as well as inspecting network connections for particular patterns.
  Updated-Date: '2024_08_07'
Webshell_c99_4:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a8e8153c40d074eb831cef164c04f58e
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the C99 Webshell by searching for specific strings in files smaller than 900KB. C99 Webshell is a type of malicious web application used by attackers to gain unauthorized control over a server. The rule identifies strings related to command execution and system attribute retrieval functions, such as displaying security information, checking memory usage, locating Perl installations, executing shell commands, and using POSIX signals within the PHP environment.
  Updated-Date: '2024_08_07'
Webshell_r57shell_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d0770237f4467a45457bb7242fe84eca
  Ruleset: securityonion-yara
  Summary: This rule detects the Webshell R57 by inspecting files for specific indicators. It checks if the file is less than 900KB in size and contains specific strings, such as FTP connection initialization code (`$connection = @ftp_connect`) and an echo command with specific language text (`echo $lang[$language.'_text98']`). This combination of conditions helps identify the presence of the R57 webshell, a malicious script commonly used for unauthorized remote control of web servers.
  Updated-Date: '2024_08_07'
Webshell_zehir:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: da1bff0441439dd392276fdcbc2fe65f
  Ruleset: securityonion-yara
  Summary: This rule detects specific webshell scripts, including "elmaliseker.asp," "zehir.asp," "zehir.txt," "zehir4.asp," and "zehir4.txt." Webshells are malicious scripts that provide attackers with a way to remotely execute commands or manage files on a compromised web server. The rule identifies these scripts through unique strings related to file upload forms and specific conditions, including the size of the script being less than 200KB. The detection focuses on particular patterns in the code, such as references to file upload mechanisms.
  Updated-Date: '2024_08_07'
Weevely_Webshell:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a4afe11a8f19f2b081e60d4bdf4e83dc
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the Weevely Webshell, a highly obfuscated and compact PHP web backdoor. Weevely is known for its stealth characteristics, which allow it to provide remote command execution on compromised web servers. The rule identifies specific patterns in the code, including the usage of variable assignments involving certain string replacements and concatenations, as well as looking for encoded strings of significant length. These patterns help uncover the intentionally scrambled nature of the webshell, which tries to evade detection by security tools.
  Updated-Date: '2024_08_07'
WildNeutron_Sample_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 324a2aac987e8c968df14d7700e9aa91
  Ruleset: securityonion-yara
  Summary: This rule detects a sample associated with the Wild Neutron advanced persistent threat (APT) group, known for economic espionage. It identifies a binary executable file named "LiveUpdater.exe" and checks for specific strings within the file. These strings include identifiers for postal addresses, key usage attributes, common names, and specific numeric and formatted string patterns. The binary file must begin with the hexadecimal value 0x5a4d, indicating a standard DOS MZ header, and have a filesize of less than 800KB. If all these conditions are met, the file is flagged as a possible Wild Neutron malware sample.
  Updated-Date: '2024_08_07'
WildNeutron_Sample_10:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a884dc49e4ad2ccca5d00d9ced8ecdb4
  Ruleset: securityonion-yara
  Summary: This rule detects the Wild Neutron Advanced Persistent Threat (APT) malware by identifying specific patterns and strings associated with its known activities. It looks for particular command-line operations and various file paths such as system directories and temporary files commonly utilized by the malware. Recognizable filenames and DLLs like "wdigestEx.dll" and "kernel32.dll," along with certain executable files such as "mshtaex.exe" and "iastor32.exe," are part of the detection criteria. The rule is designed to identify unique characteristics in files smaller than 400KB that match the signatures associated with the Wild Neutron APT.
  Updated-Date: '2024_08_07'
WildNeutron_Sample_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a48ace14bb04e682c1308dd4b81cf841
  Ruleset: securityonion-yara
  Summary: This rule detects a sample of the Wild Neutron advanced persistent threat (APT) by identifying specific strings associated with the malware. These include references to executable files such as "rundll32.exe" and "IgfxUpt.exe," as well as strings related to Intel's user interface and integrated graphics updater. Additionally, it looks for patterns like postal addresses and date-time formats, ensuring the file is less than 600KB in size and starts with the typical header for executable files.
  Updated-Date: '2024_08_07'
WildNeutron_Sample_3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: de28fd379240fe8f87ecff5a597d38d5
  Ruleset: securityonion-yara
  Summary: This rule detects a sample associated with the Wild Neutron advanced persistent threat (APT), a cyber espionage group known for targeting economic sectors. It identifies malicious activity by searching for specific indicators within a file, including the presence of IP addresses and URLs associated with command-and-control infrastructure, as well as unique strings related to the Acer LiveUpdater software. It also checks for certain cryptographic references and postal address identifiers, aiming to catch variants of the threat using these unique characteristics within executable files.
  Updated-Date: '2024_08_07'
WildNeutron_Sample_4:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d38635c42ad29ef5c49ab283d72cbc6a
  Ruleset: securityonion-yara
  Summary: This rule detects a sample related to the Wild Neutron Advanced Persistent Threat (APT), targeting economic espionage. It identifies specific strings within executable files that are indicative of Wild Neutron activity, such as "WinRAT-Win32-Release.exe," "rundll32.exe \"%s\",#1," and "RtlUpd.EXE." Other identifiable strings include misleading driver update messages like "Driver Update and remove for Windows x64 or x86_32" and "Realtek HD Audio Update and remove driver Tool." The rule uses a combination of these string indicators and file size constraints to accurately detect the malicious sample.
  Updated-Date: '2024_08_07'
WildNeutron_Sample_5:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: fb14addad0e52f862f55210cdfd5d7dd
  Ruleset: securityonion-yara
  Summary: This rule detects a sample associated with the Wild Neutron Advanced Persistent Threat (APT), known for economic espionage. It identifies the presence of the specific executable "LiveUpdater.exe" and various strings such as "id-at-postalAddress," "%d -> %d (default)," "sha-1WithRSAEncryption," "Postal code," "id-ce-keyUsage," "Key Usage," and "TLS-RSA-WITH-3DES-EDE-CBC-SHA" within files. These strings are significant because they appear in PEStudio's blacklist or have been found relevant through scoring mechanisms. The identified sample is confined to files smaller than 1000KB that begin with the signature 0x5a4d.
  Updated-Date: '2024_08_07'
WildNeutron_Sample_6:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b27fc3814be496a56655e4934002be9f
  Ruleset: securityonion-yara
  Summary: This rule detects a sample associated with the Wild Neutron Advanced Persistent Threat (APT), specifically focusing on the executable named "mshtaex.exe". It applies conditions that include checking if the file has a particular hash and ensuring the file has specific characteristics, such as a size of less than 310KB and a starting header indicating it is a Windows PE file.
  Updated-Date: '2024_08_07'
WildNeutron_Sample_7:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 95850491a513b7ce6b5c4000763516ae
  Ruleset: securityonion-yara
  Summary: This rule detects a sample associated with the Wild Neutron advanced persistent threat (APT). Wild Neutron is known for conducting economic espionage. The rule triggers based on specific suspicious strings found within executable files. These include error messages related to private key reading failures, logging and connection messages, references to system paths associated with secure shell (SSH) configuration, and file names like "clapi32.dll." The rule applies to executables under 5MB in size that contain all listed strings, indicating behavior commonly associated with Wild Neutron activity.
  Updated-Date: '2024_08_07'
WildNeutron_Sample_9:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 82f6b8ee8a4e067736a54affa7b15d8e
  Ruleset: securityonion-yara
  Summary: This rule detects the Wild Neutron APT (Advanced Persistent Threat) by identifying a specific sample of the malware. It searches for patterns associated with Adobe, including references to the official Adobe Flash Player download page, a player installer/uninstaller, Adobe Flash Plugin Updater, and a registry path containing "SOFTWARE\\Adobe." The rule also examines the presence of strings associated with the Windows Server 2008 R2 operating system and typical date formats within the malware's file structure. These characteristics are identified to ensure that the detected file matches the known behavior and attributes of the Wild Neutron APT.
  Updated-Date: '2024_08_07'
WiltedTulip_Matryoshka_RAT:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: faff388c41574cf381084b7ec7e7f0ee
  Ruleset: securityonion-yara
  Summary: This rule detects the Matryoshka Remote Access Trojan (RAT), which was used in Operation Wilted Tulip. It identifies the malware based on specific strings that appear within a file. These strings include file paths, job configuration details, keylogger save actions, and a particular file name "winupdate64.com". Additionally, the rule checks for specific conditions, such as a file signature starting with "0x5A4D" and a file size of less than 1000KB, matching at least three of the specified strings.
  Updated-Date: '2024_08_07'
WiltedTulip_Netsrv_netsrvs:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 97f8cf8244743802c59ea6b92ff5ed98
  Ruleset: securityonion-yara
  Summary: This rule detects a malware sample linked to Operation Wilted Tulip, specifically targeting a network service component referred to as "netsrv." The detection criteria include certain strings and keywords associated with the malicious behavior, such as "Process %d Created" and file paths to "rundll32.exe" in both system32 and SysWOW64 directories. The rule also identifies specific text patterns like "slbhttps," "/slbdnsk1," and "netsrv," combined with conditions related to the file's header and size, to accurately identify the presence of this malware variant.
  Updated-Date: '2024_08_07'
WiltedTulip_ReflectiveLoader:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7d6eeb2de213535e8e67a64f9b1c3bed
  Ruleset: securityonion-yara
  Summary: This rule detects a reflective loader associated with Cobalt Strike, utilized in Operation Wilted Tulip. It identifies specific patterns within a file, such as certain encoded PowerShell commands, messages related to process injection limitations, and error messages concerning token impersonation. Additionally, it checks for complex string formats and the presence of a particular exported function ("\_ReflectiveLoader@4"). The rule leverages conditions such as file size and specific indicative strings to determine the presence of the malicious loader.
  Updated-Date: '2024_08_07'
WiltedTulip_SilverlightMSI:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 036adf7f3139608a3ee8b5e2935d208c
  Ruleset: securityonion-yara
  Summary: This rule detects the use of a PowerShell tool named Get_AD_Users_Logon_History, which was utilized in Operation Wilted Tulip. The detection is based on specific strings found within the PowerShell script, including commands that resolve DNS names and handle Active Directory user logon history queries, with conditions targeting files under 20KB in size.
  Updated-Date: '2024_08_07'
WiltedTulip_Tools_back:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a88da099bd89ebf021ef0caada1657dd
  Ruleset: securityonion-yara
  Summary: This rule detects a Chrome password dumper tool allegedly used in Operation Wilted Tulip. It identifies specific strings within executable files, such as a command-line string for dumping passwords from a Chrome profile to an output file, a path related to a debugging symbol file, and a comment indicating the tool's function to dump Chrome passwords to a file. The condition checks for a specific file signature and that the file size is less than 2000KB.
  Updated-Date: '2024_08_07'
WiltedTulip_Tools_clrlg:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e43ca7edeb7bec2116e22b23760cd0b7
  Ruleset: securityonion-yara
  Summary: This rule detects a batch file named "clrlg.bat" used to clear Windows event logs in Operation Wilted Tulip. The detection is based on specific strings within the file that reveal the use of the "wevtutil.exe" utility to list and clear event logs. The rule applies to files smaller than 1KB.
  Updated-Date: '2024_08_07'
WiltedTulip_WindowsTask:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 12f4c501d01b6f55de262a8f8503c006
  Ruleset: securityonion-yara
  Summary: This rule detects a hack tool associated with Operation Wilted Tulip, specifically targeting Windows Tasks. It identifies suspicious activities involving the Windows `svchost.exe` process executed with hidden, encoded commands, indicating potential malicious behavior. The rule searches for specific command patterns and encoded arguments characteristic of this threat, suggesting the presence of crafted memory streams used by the malware.
  Updated-Date: '2024_08_07'
WiltedTulip_Windows_UM_Task:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1f0b10954bb6ed06e72e283a3d53600e
  Ruleset: securityonion-yara
  Summary: This rule detects a Windows scheduled task associated with Operation Wilted Tulip, monitoring for specific patterns in the command arguments and execution directories indicative of malicious activity. The detection focuses on the use of "C:\Windows\syswow64\rundll32.exe" as the command and a particular path in the user directory where "svchost64.swp" is utilized with "checkUpdate" as an argument. This method is tailored to identify the suspicious use of this executable and file to reveal potential unauthorized or harmful operations related to this campaign.
  Updated-Date: '2024_08_07'
WiltedTulip_Zpp:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6f855f9e72bb2c37be0a3d859f8e5be5
  Ruleset: securityonion-yara
  Summary: This rule detects a hack tool used in Operation Wilted Tulip. The tool is identified by specific error messages such as "[ERROR] Error Main -i -s -d -gt -lt -mb" and "[ERROR] Error Main -i(with.) -s -d -gt -lt -mb -o -e", alongside other distinctive strings like "LT Time invalid" and "doCompressInNetWorkDirectory". It also checks for unique markers such as "$ec996350-79a4-477b-87ae-2d5b9dbe20fd" and a known filepath "\\obj\\Release\\ZPP.pdb". The rule matches executable files smaller than 30KB starting with the "MZ" header characteristic of Windows PE files.
  Updated-Date: '2024_08_07'
WiltedTulip_matryoshka_Injector:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6ded0ccfc2a6675eaec6699818e7ab93
  Ruleset: securityonion-yara
  Summary: This rule detects a hack tool associated with Operation Wilted Tulip by identifying specific patterns indicative of the "Injector.dll" file and the "ReflectiveLoader" function, both of which are related to reflective DLL injection techniques. The rule specifically looks for files with a certain structure indicated by the magic number 0x5a4d and a size less than 1000KB, or it checks for exported functions named "__dec," "_check," "_dec," "start," and "test," suggesting the presence of potentially malicious injector actions.
  Updated-Date: '2024_08_07'
WiltedTulip_powershell:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2ddbbefe981097044ed44d12643a7c5f
  Ruleset: securityonion-yara
  Summary: This rule detects a specific PowerShell script associated with Operation Wilted Tulip. The script executes PowerShell in a hidden window with specific conditions to account for the system architecture, determining whether to use "powershell.exe" directly or construct its path using the system's environment variables.
  Updated-Date: '2024_08_07'
WiltedTulip_tdtess:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 343f97ae0240de5befea8d9aa425b4f8
  Ruleset: securityonion-yara
  Summary: This rule detects a malicious service associated with Operation Wilted Tulip. It identifies specific base64 encoded strings, file paths, and filenames indicative of suspicious behavior. Notably, it looks for the string "d2lubG9naW4k" (base64 for "winlogin$") and file paths related to a Visual Studio project for a Windows service template, as well as the filename "winlogin.exe." The rule triggers when the file header and size meet certain conditions and if any specified string or a combination of strings is present in the file.
  Updated-Date: '2024_08_07'
WiltedTulip_vminst:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c69dbabd25171f76304055130b1d8f5f
  Ruleset: securityonion-yara
  Summary: This rule detects malware associated with Operation Wilted Tulip. The detection focuses on specific strings and patterns typical of the malware's behavior and structure, such as file paths pointing to system directories and temporary files (e.g., "%s\\system32\\rundll32.exe" and "C:\\Windows\\temp\\l.tmp"). It also looks for error messages, operation references, and loader functions written in C++. Key indicators include strings like "LOGON USER FAILD," "vminst.tmp," and "ReflectiveLoader." Additionally, the rule verifies the presence of certain executable file headers and ensures the file size is under 900KB for detection.
  Updated-Date: '2024_08_07'
Win32_Buzus_Softpulse:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 00509b4e23fe2bd9767531258d823305
  Ruleset: securityonion-yara
  Summary: This rule detects the Win32_Buzus_Softpulse Trojan, identifiable by its association with the domain "pi4izd6vp0.com" and specific patterns in executable files. It monitors for Unicode strings related to the process "Win32_Process", the uninstallation of avast, and the repetition process finder "Find_RepeatProcess". The rule also checks for the presence of specific registry paths within the Microsoft Windows CurrentVersion directory and the executable "myapp.exe". Additionally, it looks for command execution involving pinging Google's website. The detection criteria involve validating these patterns within the structure of a Windows executable.
  Updated-Date: '2024_08_07'
Win32_klock:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2e1f09b1d9a3366f25f52b0f88c06e8f
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a file named "klock.dll" associated with the Chinese hacktool set. It specifically looks for the file hash "7addce4434670927c4efaa560524680ba2871d17" and includes certain strings such as "klock.dll", a French error message related to desktop switching, and a description indicating it is a Mimikatz tool for Windows. The detection criteria encompass the PE file header matching a specific signature, the file size being less than 250KB, and all identified strings being present.
  Updated-Date: '2024_08_07'
Win7Elevatev2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f7149dbf7667acc7302c2a98721dce67
  Ruleset: securityonion-yara
  Summary: This rule detects Win7Elevate, a utility designed to bypass Windows 7's User Account Control (UAC) settings to run applications with elevated privileges. It identifies known strings and behavioral patterns associated with this tool, such as specific filepath mentions, code injection techniques, and references to common system processes like cmd.exe, explorer.exe, and kernel32.dll. The rule identifies the presence of certain libraries and functions typically utilized by Win7Elevate, ensuring detection of the tool's attempts to perform UAC bypass operations, either through normal command execution or injection methods.
  Updated-Date: '2024_08_07'
WinAgent_BadPatch_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0d65bfb09fec5e6d27b6d68efafac6b3
  Ruleset: securityonion-yara
  Summary: This rule detects samples associated with the malware known as BadPatch. It identifies specific file paths, version control messages, and download actions typical of BadPatch operations. The rule checks for the presence of particular wide-character strings related to patch installation, downloader activity, and Microsoft-related log files, as well as certain keywords linked to download and update functionalities embedded within the files. The detection is triggered if the file matches the predefined hash and meets the criteria of file size and content specified in the rule.
  Updated-Date: '2024_08_07'
WinAgent_BadPatch_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3c8c6ef7fd310af420de3041c28d8401
  Ruleset: securityonion-yara
  Summary: This rule detects specific malware samples identified in the BadPatch report. It checks for indicators like certain hash values and strings within files, which include paths to Google Chrome and Mozilla Firefox user data, specific file names, and unique strings such as "myAction=shell_result&serialNumber=" and "spytube____:". The files targeted by these indicators are typically smaller than 700KB and begin with the "MZ" header, characteristic of executable files.
  Updated-Date: '2024_08_07'
WinDivert_Driver:
  Created-Date: '2024_08_06'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5eedaa5280fe711f22348985447b7806
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the WinDivert User-Mode packet capturing driver. It looks for specific strings such as "WinDivertDllEntry" and "WinDivertHelperParseIPv4Address" in both ASCII and wide formats within executable files smaller than 80KB. The rule relies on unique identifiers present in the WinDivert driver to identify the software, which is associated with user-mode packet capturing functions.
  Updated-Date: '2024_08_06'
WinEggDropShellFinal_zip_Folder_InjectT:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: bc30cdb2d72d6497126813c9f4ba8df0
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the hacktool InjectT.exe, which is recognized by several specific strings within the file. It identifies the tool by checking for indicators such as the phrase "Packed by exe32pack", the filename "2TInject.Dll", references to "Windows Services", "Findrst6", and the prompt "Press Any Key To Continue......".
  Updated-Date: '2024_08_07'
WinPayloads_Payload:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ce0b760405f7c58b6dbacc102f0914da
  Ruleset: securityonion-yara
  Summary: This rule detects a payload associated with WinPayloads, a tool utilized for generating payloads for penetration testing purposes. The detection is based on specific identifiers within the file, such as unique hash values and strings like "bpayload.exe.manifest" and "spayload". The rule applies to files that begin with the "MZ" header, typical of Windows executable files, and are less than 10,000KB in size.
  Updated-Date: '2024_08_07'
WinPayloads_PowerShell:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 41baa468e7e59c123d478b8056229aed
  Ruleset: securityonion-yara
  Summary: This rule detects a PowerShell payload from WinPayloads, recognizing scripts by searching for specific Base64 encoded strings and PowerShell commands. It identifies payloads that use obfuscation techniques, such as running PowerShell with hidden windows and encoded commands. The rule scans files smaller than 10KB for these distinctive characteristics.
  Updated-Date: '2024_08_07'
WinX_Shell_html:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5ea601500e51ac491ad4aa9607a03f44
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific HTML file associated with a WinX Shell, characterized by the inclusion of certain text strings. These strings include references to "WinX Shell," attribution to "greenwood from n57," and a formatted HTML element specifying a directory path with the color code "#990000." Detection criteria are met if any two of these specified strings are found within the scanned file.
  Updated-Date: '2024_08_07'
Win_PrivEsc_ADACLScan4_3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7c59806ad0b4984549baeea47cb7b8b2
  Ruleset: securityonion-yara
  Summary: This rule detects a PowerShell script named ADACLScan4.3.ps1, which can be utilized for privilege escalation. It is identified through specific strings, including an HTML snippet defining a label for a port setting, a script operation involving extracting an icon from a DLL file and saving it as an image, and a validation process for user credentials.
  Updated-Date: '2024_08_07'
Win_PrivEsc_folderperm:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: fe1665346b81192de649e0f77b254122
  Ruleset: securityonion-yara
  Summary: This rule detects a script named "folderperm.ps1" that is employed for privilege escalation activities. The script operates on PowerShell with an execution policy bypass and includes specific code patterns such as logging dummy test file access and displaying an access denied message for certain actions.
  Updated-Date: '2024_08_07'
Win_PrivEsc_gp3finder_v4_0:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 186bfcd8ce5dbc1ec132f9b9a15775bf
  Ruleset: securityonion-yara
  Summary: This rule detects a tool named "gp3finder_v4.0.exe" used for privilege escalation by identifying specific strings related to its functionality. The tool attempts to decrypt passwords stored in Group Policy Preferences (GPP), as indicated by strings referencing password decryption efforts. It also includes a string that explicitly names the tool as "Group Policy Preference Password Finder," further confirming its purpose. The condition for detection involves checking for a specific file signature or the presence of any or all of the defined strings.
  Updated-Date: '2024_08_07'
WindosShell_s1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ae9a252ccb74cf405d0970a8017f66e1
  Ruleset: securityonion-yara
  Summary: This rule detects a simple Windows shell executable file named s1.exe. It identifies specific strings within the file that indicate its functionality, including executing the command prompt (`cmd.exe`), a description as a "simple remote shell for Windows v1," options for specifying a port number (default is 443), usage instructions, messages for waiting and accepting connections, and prompts for required parameters. The rule conditions check for a particular file signature and size, or the presence of multiple specified strings, to confirm the detection.
  Updated-Date: '2024_08_07'
WindowsCredentialEditor:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d55a6b163614b7cc4d88afab1c30e55c
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of Windows Credential Editor, a tool used for extracting the Ticket Granting Ticket (TGT) session key and handling Windows credentials, by identifying specific text strings associated with its functionality.
  Updated-Date: '2024_08_07'
WindowsShell_Gen:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 04397ad320c386a22f633dacb9771b37
  Ruleset: securityonion-yara
  Summary: 'This rule detects a simple Windows shell from specific executable files named keygen.exe, s1.exe, s2.exe, s3.exe, and s4.exe by identifying certain ASCII strings such as "[ %c%c requires parameter", "[ %s : %i", and "[ %s : %s" within the files. The condition for detection is based on the presence of these strings combined with a file size check, ensuring the file is less than 175KB and meeting specific criteria at the file''s header. The rule uses signature hashes to further validate the detection.'
  Updated-Date: '2024_08_07'
WindowsShell_Gen2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9bf581dee185af1e20afff5ef192063b
  Ruleset: securityonion-yara
  Summary: This rule detects a simple Windows shell present in files named s3.exe and s4.exe. It identifies specific strings within the file, such as commands to execute `cmd.exe`, download and upload files, create files remotely, and terminate remote clients. The detection criterion includes checking for certain file characteristics, such as specific string patterns and file size constraints, ensuring that the file integrity and behavior match known signatures.
  Updated-Date: '2024_08_07'
WindowsShell_s3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d861d01621454719fa11e005ab9dab9a
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a simple Windows shell named s3.exe. It identifies specific text strings related to various commands within the shell, such as executing cmd.exe, downloading and uploading files, and managing remote connections. It looks for key phrases such as "execute cmd.exe," "upload file," and "terminate remote client," among others. It also checks for certain technical markers, including specific file size limits and the existence of particular code sequences.
  Updated-Date: '2024_08_07'
WindowsShell_s4:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6e67631ad5a08a93df996cb57255799d
  Ruleset: securityonion-yara
  Summary: This rule detects a simple Windows shell application named s4.exe. It identifies the malware by looking for specific strings associated with its operations, including commands for executing cmd.exe, creating named pipes, downloading and uploading files, and listening for incoming connections. The rule triggers if the conditions related to these strings and file properties are met.
  Updated-Date: '2024_08_07'
Winexe_RemoteExec:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 350f9bbb02f9f52d3d6fc9b6df2f0e32
  Ruleset: securityonion-yara
  Summary: This rule detects the Winexe tool, which is used for remote execution. The rule identifies instances of this tool based on specific string patterns that indicate errors during logon and impersonation processes, and references to named pipes such as "\\\\.\\pipe\\ahexec" and "\\\\.\\pipe\\wmcex." It also looks for the term "implevel." Additionally, it checks if the file starts with the standard Windows executable header and has a file size under 115KB. The rule further refines detection by requiring a minimum match of three of the specified strings or by matching a particular import hash.
  Updated-Date: '2024_08_07'
Winnti_NlaifSvc:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8065f0254e22f68db60431bf0cf8ce0a
  Ruleset: securityonion-yara
  Summary: This rule detects a Winnti malware sample identified as the file NlaifSvc.dll. It examines the file for specific strings such as "cracked by ximo" in ASCII and full-word patterns "Yqrfpk" and "IVVTOC." The condition will trigger if the file begins with the hexadecimal code 0x5a4d, indicating it is a Windows executable, with a file size under 900KB, and meets specific string matching criteria.
  Updated-Date: '2024_08_07'
Winnti_fonfig:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9ea0cf8bc407eebe2346a7f101efed1a
  Ruleset: securityonion-yara
  Summary: This rule detects a specific sample associated with the Winnti malware, specifically targeting a file named "fonfig.exe." It identifies the presence of this malware by looking for particular strings within the file, such as "mciqtz.exe" and "knat9y7m," ensuring that these strings appear in their entirety and match specified characteristics. The overall conditions also include verifying that the file starts with the "MZ" header, indicative of an executable file, and is under 2000KB in size.
  Updated-Date: '2024_08_07'
Winnti_malware_FWPK:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a452f547dc332582269b4f21b12b4afe
  Ruleset: securityonion-yara
  Summary: This rule detects the Winnti malware by identifying the driver file FWPKCLNT.SYS. It looks for signatures within the system registry, specific formatted strings related to network packet processing, and other defined patterns. The rule triggers when all specified conditions, including the matching of several hash values and specific strings within a file less than 642KB in size, are met. These patterns include references to network drivers, port layers, and certain encoded objects which are indicative of the presence of the Winnti malware.
  Updated-Date: '2024_08_07'
Winnti_malware_Nsiproxy:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c303d615b80cad9ae3c79435a63537c7
  Ruleset: securityonion-yara
  Summary: This rule detects a Winnti rootkit that utilizes the Nsiproxy driver. The indications of this rootkit include specific strings associated with device drivers and system modifications. Key identifiers include references to stream devices, network packet filters, and synchronization objects. It also searches for particular full word strings related to cookies, system registry paths, and a suspicious website URL. The detection is triggered by the presence of these strings in a file with a specific header value.
  Updated-Date: '2024_08_07'
Winnti_malware_StreamPortal_Gen:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f371f09fa8335e8998625da52e7056ba
  Ruleset: securityonion-yara
  Summary: This rule detects Winnti malware, specifically the variant identified as Streamportal. It identifies specific strings related to proxy functionalities, TCP address/port usage, device names, proxy sub-layer data, cookie identifiers, and named objects synchronization. Additionally, it looks for references to NTOSKRNL.EXE and FwpsReferenceNetBufferList0, which are known goodware strings. The condition for detection includes a check for a particular file signature and a file size constraint.
  Updated-Date: '2024_08_07'
Winnti_malware_UpdateDLL:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b577d49c983c33efb7294826ea055d69
  Ruleset: securityonion-yara
  Summary: This rule detects the Winnti malware, particularly the Update.dll variant. Identifying characteristics include specific strings such as "Wymajtec$Tima Stempijg Sarviges GA -$G2," "AHDNEAFE1.sys," and various registry paths linked to internet settings and WMI control. The rule looks for these malicious elements within files smaller than 1000KB, starting with the "0x5a4d" header, which is typical for executable files.
  Updated-Date: '2024_08_07'
Winnti_signing_cert:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3fdb7eb7bc76b0d3942f4a2a5cc0a960
  Ruleset: securityonion-yara
  Summary: This rule detects a specific signing certificate associated with the Winnti APT group, known for cyber espionage activities. The detection criteria include specific strings related to "Guangzhou YuanLuo Technology Co." and "Asahi Kasei Microdevices Corporation," along with file characteristics such as a specific file signature and a file size less than 700KB.
  Updated-Date: '2024_08_07'
WoolenGoldfish_Generic_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 13038c0733adb8c01d4fcc24ac7c84d8
  Ruleset: securityonion-yara
  Summary: This rule detects a sample associated with the operation Woolen-Goldfish. Specific indicators include user paths containing "Wool3n.H4t" and "C-CPP\\CWoolger", and files such as "NTSuser.exe". It also looks for certain scripts and instructions like "oShellLink.Hotkey" set to "CTRL+SHIFT+F", creation of objects using "WScript.Shell", setting the icon location to "notepad.exe", and shortcuts named "WinDefender.lnk". Additionally, it detects the presence of network activity towards the IP address "107.6.181.116" and mentions of the terms "wlg.dat" and "woolger". The detection criteria are met if any one of multiple path indicators is present along with at least two specific strings, or if a higher number of designated strings are found.
  Updated-Date: '2024_08_07'
WoolenGoldfish_Generic_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1242e371b09fca044f0145b36e6e50f2
  Ruleset: securityonion-yara
  Summary: This rule detects a sample associated with the Woolen-Goldfish operation by identifying specific strings related to exploit modules, specifically "modules\exploits\littletools\agent_wrapper\release". It uses multiple hash values to verify the presence of known malicious files.
  Updated-Date: '2024_08_07'
WoolenGoldfish_Generic_3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: cf54c78b6e4097c2e4120125663475e4
  Ruleset: securityonion-yara
  Summary: This rule detects a specific sample associated with Operation Woolen-Goldfish, which appears to be a malicious operation. The detection focuses on particular strings within the software, including error messages related to reading headers, resolving hostnames for a TCP connect-back channel, issues with loading specific DLLs, and various error messages concerning threading and socket initialization. Additionally, it looks for URL patterns involving "index.php" parameters and multipart form data content types. The rule utilizes multiple string matches, requiring at least one match from a critical subset or several matches from a broader set of strings, to identify the presence of the malicious sample.
  Updated-Date: '2024_08_07'
WoolenGoldfish_Sample_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ac0e6d2c10dd6b4510d55f9858c4f25e
  Ruleset: securityonion-yara
  Summary: This rule detects a sample related to the operation known as Woolen-Goldfish. It looks for specific strings within a file, including "Cannot execute (%d)" and "SvcName", to identify a potentially malicious instance. The rule aims to catch the presence of this particular malware by ensuring that all specified strings are found.
  Updated-Date: '2024_08_07'
WordDoc_PowerShell_URLDownloadToFile:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 32ab4242ef7129b4b119c16a8a31d06d
  Ruleset: securityonion-yara
  Summary: This rule detects Word Document files that utilize PowerShell to execute the URLDownloadToFile function. This particular combination can indicate the presence of malicious activities, such as downloading additional payloads or scripts from the internet. The rule specifically looks for the presence of Microsoft Word document indicators and certain strings associated with PowerShell commands embedded within the document.
  Updated-Date: '2024_08_07'
Wordpress_Config_Webshell_Preprend:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4299e6a35fc4d73dbbbb5b52efee916f
  Ruleset: securityonion-yara
  Summary: This rule detects a webshell that exploits the WordPress `wp-config.php` file by appending malicious code in front of legitimate WordPress configuration settings. It specifically looks for the presence of standard WordPress configuration strings, such as " * @package WordPress", "define('DB_NAME',", and "require_once(ABSPATH . 'wp-settings.php');", while ensuring that these strings do not appear within the first 1000 bytes of the file. To further refine detection, it checks that one signature of an alternative common pattern, specifically related to iThemes Security, is not present. The rule applies to files smaller than 400KB, and it starts by confirming the file begins with the characters `<?ph`.
  Updated-Date: '2024_08_07'
Worse_Linux_Shell_php:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4674b6786f6149d246811d377729ba81
  Ruleset: securityonion-yara
  Summary: This rule detects the Worse Linux Shell PHP backdoor. It identifies specific malicious content by matching particular strings in the code that output server details and provide an interface for executing commands. These patterns suggest the presence of a web-based shell designed for unauthorized system control and remote command execution on a compromised Linux server.
  Updated-Date: '2024_08_07'
XMRIG_Monero_Miner_Config:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ea91bb47cee17715055e6a220644c7e0
  Ruleset: securityonion-yara
  Summary: This rule detects configuration files for XMRig, a software used for mining the cryptocurrency Monero. It identifies specific JSON strings within these files that pertain to CPU affinity settings, NiceHash/XMRig-Proxy support, and the mining algorithm employed, such as Cryptonight or Cryptonight-Lite. It restricts the detection to files smaller than 5 KB and checks for specific conditions in the first two bytes of the file.
  Updated-Date: '2024_08_07'
XOR_4byte_Key:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c1a589c1cb325558860f75b8f1c93a0f
  Ruleset: securityonion-yara
  Summary: This rule detects an executable that has been encrypted using a 4-byte XOR method, which is also associated with the Derusbi Trojan. The detection is based on identifying a specific sequence of opcodes that include the operations for testing, jumping, XOR-ing, adding, and decrementing within the first 900KB of the file.
  Updated-Date: '2024_08_07'
XScanLib:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 43c6c5b4e226e0451611c17374122fdf
  Ruleset: securityonion-yara
  Summary: This rule detects a specific Chinese hacktool library file named XScanLib.dll, which is used within a set of malicious tools. The detection criteria include the presence of specific ASCII strings indicating components related to network port scanning and checking, such as "Ports/%s/%d", "DEFAULT-TCP-PORT", and "PlugCheckTcpPort". The rule applies to files under 360KB in size that begin with the standard "MZ" header, common to executable files.
  Updated-Date: '2024_08_07'
XYZCmd_zip_Folder_Readme:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e5ac86113ef4301f8795f68e22ec518d
  Ruleset: securityonion-yara
  Summary: This rule detects a disclosed hacktool set, particularly targeting the file named "Readme.txt". It identifies the presence of "XYZCmd V1.0" and a specific command string used to execute the tool on a remote system, indicating unauthorized remote command execution capabilities.
  Updated-Date: '2024_08_07'
XYZCmd_zip_Folder_XYZCmd:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9a1f099919ccaf670b3e51d06f7baafe
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of XYZCmd.exe, a disclosed hacktool known for remotely executing commands without requiring client software. The detection is based on identifying specific strings within the executable file, including "Executes Command Remotely," "XYZCmd.exe," "No Client Software," and "XYZCmd V1.0 For NT S."
  Updated-Date: '2024_08_07'
Xtreme_RAT_Gen_Imp:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8ef2aa654df6231fdae7b554f619dfc3
  Ruleset: securityonion-yara
  Summary: This rule detects a variant of the XTREME Remote Access Trojan (RAT) analyzed in September 2017. It identifies malicious samples by checking for a specific Windows executable file signature (`0x5a4d`), ensuring the file size is under 300KB, and matching one of three known import hashes associated with the malware.
  Updated-Date: '2024_08_07'
Xtreme_Sep17_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e5cd192c18db34e7d73b284c95fc187c
  Ruleset: securityonion-yara
  Summary: This rule detects a sample of the XTREME malware analyzed in September 2017. It identifies the malware by searching for specific strings within the file, such as "ServerKeyloggerU," "TServerKeylogger," "XtremeKeylogger," and "XTREMEBINDER," presented in either ascii or wide character formats. Additionally, it checks for certain wide-format strings associated with execution commands, including "shellexecute=" and "[Execute]," as well as a specific path in the form of ";open=RECYCLER\\S-1-5-21-1482476501-3352491937-682996330-1013\\". These indicators are combined with checks for particular file properties, such as a specific initial hex value (0x5a4d), a file size under 4000KB, and a specific import hash (pe.imphash) value.
  Updated-Date: '2024_08_07'
Xtreme_Sep17_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c91b3acced914f2ebf4eb6d7c1eff528
  Ruleset: securityonion-yara
  Summary: This rule detects an XTREME malware sample, characterized by specific string indicators such as "Spy24.exe" and "Remote Service Application." The file is identified by the presence of these strings, with a condition requiring that the file starts with the hex value 0x5a4d and its size is less than 3000KB.
  Updated-Date: '2024_08_07'
Xtreme_Sep17_3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6affc9de7963f433f03407d9fd721f0f
  Ruleset: securityonion-yara
  Summary: This rule detects an XTREME software sample known for keylogging activity, specifically identified and analyzed in September 2017. It searches for patterns such as the presence of the string "Keylogg" in ASCII and "XTREME" in wide format within files smaller than 700KB that begin with the "MZ" header.
  Updated-Date: '2024_08_07'
Ysoserial_Payload:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5559df8b49ec26072a593b7d637eb874
  Ruleset: securityonion-yara
  Summary: This rule detects payloads generated by the Ysoserial tool, which is used for creating Java deserialization payloads to exploit vulnerabilities in Java applications. It specifically inspects files up to 40KB in size, matching certain distinctive strings like "ysoserial/payloads/", "StubTransletPayload", and "Pwnrpw", indicating the presence of Ysoserial's malicious payloads.
  Updated-Date: '2024_08_07'
Ysoserial_Payload_3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1664a0648642db927ffa3d4523de9620
  Ruleset: securityonion-yara
  Summary: This rule detects payloads generated by the Ysoserial tool, specifically from files such as JavassistWeld1.bin and JBossInterceptors.bin. It identifies these payloads through a combination of specific strings found within the binary files, such as "ysoserialq," "targetClassInterceptorMetadatat," and "POST_ACTIVATEsr." The condition set triggers if the initial bytes of the file match certain criteria, the file size is less than 10KB, and the defined strings are present.
  Updated-Date: '2024_08_07'
Ysoserial_Payload_C3P0:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5fbb7b35c7733eeab2909978e8fedb03
  Ruleset: securityonion-yara
  Summary: This rule detects a payload associated with the Ysoserial tool, specifically targeting a file named "C3P0.bin". The detection is triggered by the presence of the string "exploitppppw" in its entirety within an ASCII format. Additionally, the file must satisfy conditions where its initial two bytes match the hexadecimal value 0xedac and the total file size is less than 3KB. The hash provided further identifies the specific file version. This rule helps identify potentially harmful serialized payloads generated by the Ysoserial tool, which can be used for exploitation purposes.
  Updated-Date: '2024_08_07'
Ysoserial_Payload_MozillaRhino1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 902f7bc0d5eaa13d55ab2e4de1877768
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the Mozilla Rhino deserialization payload generated by Ysoserial, a tool used for exploiting Java deserialization vulnerabilities. It identifies files by checking for a specific string "ysoserial.payloads" and verifying that the file has particular properties, including a specific binary structure (indicated by the uint16 value) and a file size less than 40KB.
  Updated-Date: '2024_08_07'
Ysoserial_Payload_Spring1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: fa1bc028264455a90f2bda540d70822f
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of Ysoserial payloads specifically related to a file named "Spring1.bin." The detection is based on a specific ASCII string "ysoserial/Pwner" found within the payload. Multiple hashes are associated with this payload file to ensure accurate identification. Ysoserial is known for generating payloads for exploiting Java applications, particularly for deserialization vulnerabilities.
  Updated-Date: '2024_08_07'
ZXshell2_0_rar_Folder_ZXshell:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 64af6a79b94af90a73b02c25578e15c7
  Ruleset: securityonion-yara
  Summary: This rule detects a specific webshell, identified as ZXshell.exe, by looking for unique string patterns within a file. The strings "WPreviewPagesn" and "DA!OLUTELY N" must both be present for the detection to trigger, indicating the presence of this particular webshell.
  Updated-Date: '2024_08_07'
ZXshell2_0_rar_Folder_nc:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 881a301e816a182221db1498ebf22d6a
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the ZXshell2.0 malware, specifically associated with a file named "nc.exe." It looks for characteristic strings embedded in the binary, such as "WSOCK32.dll," "?bSUNKNOWNV," "p@gram Jm6h)," and "ser32.dllCONFP@," to identify the malicious file. These indicators collectively help in recognizing this variant of the webshell malware.
  Updated-Date: '2024_08_07'
ZXshell2_0_rar_Folder_zxrecv:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 11e31f36fa44dbb6a5fc4a9e432cdc02
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a webshell named "zxrecv.exe". Webshells are a type of malicious software used by attackers to gain and maintain access to an infected web server. The specific detection is based on identifying unique strings within the file, such as "RyFlushBuff", "teToWideChar^FiYP", and "mdesc+8F D". These specific string patterns and others listed in the rule indicate that the executable may be malicious and associated with the ZXshell 2.0 variant.
  Updated-Date: '2024_08_07'
ZXshell_20171211_chrsben:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a72104658f1be786a5a0fa1dc2fde21e
  Ruleset: securityonion-yara
  Summary: This rule detects a variant of ZxShell malware that appeared in December 2017. ZxShell is typically recognized in the file if its initial bytes correspond to the value 0x5a4d, the filesize is less than 2000KB, and either its import hash matches "de481441d675e9aca4f20bd8e16a5faa", or it exports the functions "PerfectWorld" or "ncProxyXll." Additionally, the detection can trigger if the file contains specific strings such as "ncProxyXll", "Uniscribe.dll", "GetModuleFileNameDll", or "Hangzhou Shunwang Technology Co.,Ltd0". The rule aims to precisely identify this malicious software based on these characteristics.
  Updated-Date: '2024_08_07'
Z_WebShell:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8346a0d591229b21ec83fc813dc23961
  Ruleset: securityonion-yara
  Summary: This rule detects the Z WebShell, a malicious tool detailed in an NCSC report. It identifies the presence of the webshell through specific strings such as "Z_PostBackJS," "z_file_download," "z_WebShell," and a unique identifier "1367948c7859d6533226042549228228." The detection condition is met when at least three of these specified strings are found.
  Updated-Date: '2024_08_07'
Zehir_4_asp:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ae4d52e8f4955eb0cf92d893f98ba436
  Ruleset: securityonion-yara
  Summary: This rule detects a specific web shell script named "Zehir 4.asp" that includes characteristic HTML elements. It looks for patterns such as a hyperlink with dynamic path values and a form input button labeled "Test Et!" which activates a JavaScript on-click event. These unique strings help identify the presence of this particular malicious script in web files.
  Updated-Date: '2024_08_07'
Zeus_Panda:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0e1f99b8a768ba9a43243f070d8474e4
  Ruleset: securityonion-yara
  Summary: This rule detects the ZEUS Panda malware, a specific variant of the ZEUS banking trojan, based on identifying characteristics within executable files. It looks for the presence of certain strings, such as "SER32.dll" and "Yahoo! Slurp", as well as specific patterns and commands related to execution and file deletion processes. The rule also checks if the executable file starts with the typical "MZ" header and ensures the file size is less than 400KB.
  Updated-Date: '2024_08_07'
ZxShell_Jul17:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: cbdec3da29dda25d3e1c54669a9c9fe6
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of ZxShell malware, which is associated with a Chinese threat group. ZxShell is a sophisticated remote administration tool used by attackers to control infected systems. The rule identifies specific strings in files, such as commands to add plug-ins, download files, execute commands from URLs, manipulate system services, bind command shells, and start FTP and HTTP servers. Additionally, it looks for file paths indicative of keylogging and clipboard logging activities, and it detects attempts to disable network sniffing tools like Wireshark. The rule triggers if the file size is under 10,000KB and at least one specified string is found, or if at least three specified strings are detected.
  Updated-Date: '2024_08_07'
ZxShell_Related_Malware_CN_Group_Jul17_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e59b8650ed7b1a01a44f586ed506f5d4
  Ruleset: securityonion-yara
  Summary: This rule detects a ZxShell-related malware sample associated with a CN threat group. The detection is based on specific strings within the malware, including commands that activate and modify the guest user account, as well as references to system and software registry paths commonly associated with services, terminal server settings, and Internet Explorer settings. The rule focuses on identifying these unique patterns to discern the presence of the ZxShell malware, specifically by checking the file's header and ensuring the file size is under 400KB.
  Updated-Date: '2024_08_07'
ZxShell_Related_Malware_CN_Group_Jul17_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: cc0ef7179e3f6e755db5b58bf22e46e3
  Ruleset: securityonion-yara
  Summary: 'This rule detects a ZxShell-related malware sample linked to a CN threat group. It identifies specific patterns in user-agent strings that mimic various versions of web browsers like Mozilla and Internet Explorer on both Windows and Linux operating systems. Additionally, it searches for file paths and executable names commonly associated with ZxShell, such as "admin$\\g1fd.exe" and "C:\\g1fd.exe," as well as other suspicious string patterns like "referer" and "Accept-Language: zh-cn." The rule is designed to flag these indications within files smaller than 100KB.'
  Updated-Date: '2024_08_07'
ZxShell_Related_Malware_CN_Group_Jul17_3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 97e7aac6efb0dfd84a63bcaae879e907
  Ruleset: securityonion-yara
  Summary: This rule detects a ZxShell related sample associated with a threat group from China. The detection is based on specific strings within the sample, including a formatted reference to a DLL file ("%s\\nt%s.dll") and a registry query string ("RegQueryValueEx(Svchost\\netsvcs)"). Additional criteria for detection include the PE file having a specific starting signature (0x5a4d) and a file size of less than 600KB.
  Updated-Date: '2024_08_07'
_1_c2007_php_php_c100_php:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 84162c48e7540fa1d52819d6e1f2f4b7
  Ruleset: securityonion-yara
  Summary: This rule detects PHP scripts that contain specific echo statements. These statements include changing file-mode and displaying information with a particular formatting, using functions and concatenation of variables.
  Updated-Date: '2024_08_07'
_Bitchin_Threads_:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4c3c2a6f5f45748e63bc68c890ecff9e
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the malicious software named "Bitchin Threads" by identifying specific strings within a file, including "DarKPaiN" and "=BITCHIN THREADS".
  Updated-Date: '2024_08_07'
_Crystal_php_nshell_php_php_load_shell_php_php:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f5214bd7528b5ae4897a995bf170a807
  Ruleset: securityonion-yara
  Summary: This rule detects PHP-based web shells by identifying specific patterns within the code, including the use of conditional statements that exclude certain filenames, concatenation of directory strings, and merging arrays with file patterns.
  Updated-Date: '2024_08_07'
_FsHttp_FsPop_FsSniffer:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 07fee806ffc3ca6ccc8d94e12f0b7db9
  Ruleset: securityonion-yara
  Summary: This rule detects a set of disclosed hacktools, specifically FsHttp.exe, FsPop.exe, and FsSniffer.exe. The rule identifies these tools through a series of specific error and success messages related to SMS operations, such as commands for changing passwords and sending SMS messages. It also checks for specific filenames associated with these tools, such as "Current.hlt" and "Histroy.hlt". The detection is based on the presence of these unique strings within the files, which are indicative of the hacktools' activities and expected behaviors.
  Updated-Date: '2024_08_07'
_GFS_web_shell_ver_3_1_7___PRiV8_php_nshell_php_php_gfs_sh_php_php:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 15d22a42f576bda5753cdbe70d91c1bb
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a web shell known as GFS web shell version 3.1.7. It identifies specific PHP scripts like PRiV8.php, nshell.php.php, and gfs_sh.php.php used for unauthorized remote access and control of a web server. Indicators of compromise include PHP code that echoes system user information, reads file data in a loop, and outputs current user and group IDs.
  Updated-Date: '2024_08_07'
_Project1_Generate_rejoice:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 36041322ab35e9a56f7e53f145426ef5
  Ruleset: securityonion-yara
  Summary: This rule detects a Chinese hacktool set associated with the files named Project1.exe, Generate.exe, and rejoice.exe. It identifies specific strings within executable files such as "sfUserAppDataRoaming," "delphi32.exe," and "hkeyCurrentUser," among others. The detection logic checks for a file size smaller than 2000KB and the presence of several distinctive strings, indicating potential malicious activity linked to the identified hacktool set.
  Updated-Date: '2024_08_07'
_antichat_php_php_Fatalshell_php_php_a_gedit_php_php:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f1288112b34b07e52c9ccf6bec049779
  Ruleset: securityonion-yara
  Summary: This rule detects specific PHP scripts associated with malicious activities. It identifies PHP code that features patterns such as saving data from POST requests to files, performing PHP code evaluation, handling file uploads by defining a file path and name dynamically from POST data, and retrieving the current working directory. These characteristics suggest the presence of web shells or backdoors often used for unauthorized access and control of compromised web servers.
  Updated-Date: '2024_08_07'
_c99shell_v1_0_php_php_c99php_1_c2007_php_php_c100_php:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1b9c37b2331bdf83c66f0999007291be
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the c99shell v1.0 PHP web shell script. The identified script includes a characteristic code snippet where a MySQL query is executed to show the process list using a variable named `$sql_sock`. This is typically leveraged by attackers to monitor and manage active database connections.
  Updated-Date: '2024_08_07'
_c99shell_v1_0_php_php_c99php_SsEs_php_php:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2808d03b0d52231eb77ce1db27dd493a
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the C99 shell, a PHP-based web shell utilized by attackers to gain unauthorized remote access to a server. It searches for specific PHP code snippets, such as error messages related to file deletion operations, to identify traces of this malicious web shell.
  Updated-Date: '2024_08_07'
_c99shell_v1_0_php_php_c99php_SsEs_php_php_ctt_sh_php_php:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 814ea332617eaabf8baeb1b2f3462911
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the c99shell, a PHP-based web shell, by identifying specific encoded strings within files. The rule focuses on identifying distinctive patterns and characteristics inherent to various versions and implementations of the c99shell, as inferred from files such as c99shell_v1.0.php, c99php, SsEs.php.php, and ctt_sh.php.php. Notable identifiers used in the detection include several distinct strings, specifically those containing encoded data that are often associated with the web shell's functionality. The rule triggers if at least two of these encoded strings are found.
  Updated-Date: '2024_08_07'
_hscan_hscan_hscangui:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0165247a3babbc66297421ebe4707d70
  Ruleset: securityonion-yara
  Summary: This rule detects the Chinese hacktool set, specifically targeting the files hscan.exe, hscan.exe, and hscangui.exe. It identifies the presence of this software by scanning for various unique strings associated with the hacktools, such as log file paths, report paths, FTP account checks, IPC NULL session connection success messages, and specific scan results. The rule is designed to match files with a particular signature and that are less than 240KB in size. These indicators assist in identifying unauthorized scanning and penetration testing utilities used by network intruders.
  Updated-Date: '2024_08_07'
_iissample_nesscan_twwwscan:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: dd6706b2225c1d5873f0659bcbd0be03
  Ruleset: securityonion-yara
  Summary: This rule detects a set of disclosed hacktools named "iissample.exe," "nesscan.exe," and "twwwscan.exe." These files are associated with various patterns such as error messages, references to HTTP connection results, security information related to Microsoft, and specific file and library names. The detection is based on the presence of these distinctive strings within the file content, which collectively indicate the use of old hacking tools targeting Windows NT and 2000 systems, with issues related to command line arguments, floating point formats, and library loading failures.
  Updated-Date: '2024_08_07'
_network_php_php_xinfo_php_php_nfm_php_php:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 823d81d94fd09ebc28e1f81fcfa662c0
  Ruleset: securityonion-yara
  Summary: This rule detects specific patterns within PHP files commonly labeled as network.php, xinfo.php, and nfm.php. It looks for the presence of particular HTML and CSS content, such as a textbox styled with white background, black solid border, and specific font settings, as well as an input box for passwords that alters its value upon being clicked. This combination of elements can be indicative of embedded malicious scripts or unauthorized backdoor access in PHP applications.
  Updated-Date: '2024_08_07'
_nixrem_php_php_c99shell_v1_0_php_php_c99php_NIX_REMOTE_WEB_SHELL_v_0_5_alpha_Lite_Public_Version_php:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 67d7346a49845214fae84256419ec12c
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific remote web shell variant known as "php c99shell v1.0" or "NIX Remote Web Shell v0.5 alpha Lite Public Version." It identifies malicious PHP code snippets commonly found within this web shell, including variable assignments and function calls related to password manipulation, process management, and user ID handling. This helps in identifying compromised systems hosting this particular type of web-based backdoor.
  Updated-Date: '2024_08_07'
_nst_php_php_cybershell_php_php_img_php_php_nstview_php_php:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2e2f9beb07d01ca367c085693fcd070d
  Ruleset: securityonion-yara
  Summary: This rule detects specific patterns within PHP files that are indicative of a web shell or potentially malicious activity. It looks for the presence of certain strings, such as a particular POST request parameter assignment, a CSS attribute for scrollbar customization, and a PHP code snippet that modifies file path strings. These characteristics suggest compromised PHP scripts designed for unauthorized remote control or file manipulation on a server.
  Updated-Date: '2024_08_07'
_nst_php_php_img_php_php_nstview_php_php:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 21d686bd69aae2ed143f0c5980f8742f
  Ruleset: securityonion-yara
  Summary: This rule detects potentially malicious PHP scripts often associated with webshells or backdoors, indicated by specific HTML form content and embedded Perl script strings. The identified strings include markers related to "Back connect" and "Backdoor" functionalities, which are commonly used in unauthorized remote system access and control. The scripts named in the metadata suggest the rule targets a pattern found in compromised or maliciously modified PHP files.
  Updated-Date: '2024_08_07'
_r577_php_php_SnIpEr_SA_Shell_php_r57_php_php:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3099c8499826d07a6ac619d31f8b3f5b
  Ruleset: securityonion-yara
  Summary: 'This rule detects the presence of certain PHP files and potentially malicious shell scripts, including r577.php, SnIpEr_SA Shell, and r57.php, by searching for specific strings and patterns indicative of these files. The rule triggers if it finds any three of the following strings: a string `''ru_text9'' => ''???????? ????? ? ???????? ??? ? /bin/bash'',"`, a name assignment `$name=''ec371748dc2da624b35a4f8f685dd122''`, or the domain `rst.void.ru`. This detection method aims to identify these files based on content reflective of typical web shell behaviors and characteristics.'
  Updated-Date: '2024_08_07'
_r577_php_php_SnIpEr_SA_Shell_php_r57_php_php_r57_Shell_php_php_spy_php_php_s_php_php:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e5e141a47fcd67c1e7ce7ecc5120db61
  Ruleset: securityonion-yara
  Summary: This rule detects a PHP-based web shell known as "r57" or "SnIpEr SA Shell". It identifies strings associated with the web shell's functionality, such as specific command parameters for operations like CHOWN and checks for posts regarding search results. The rule utilizes predefined hash values for known web shell variants to ensure accurate detection.
  Updated-Date: '2024_08_07'
_r577_php_php_SnIpEr_SA_Shell_php_r57_php_php_spy_php_php_s_php_php:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f3b337baa397ad61ba3a0cebe07cfdc3
  Ruleset: securityonion-yara
  Summary: This rule detects a specific type of PHP-based web shell malware identified by several hash values and specific strings related to its code. The targeted malware includes functionalities such as displaying web content dynamically through echoed PHP code, often used by malicious actors to perform unauthorized actions on compromised servers. The condition is met if at least two of the specified strings are found in the code base, indicating the presence of this malware.
  Updated-Date: '2024_08_07'
_r577_php_php_r57_Shell_php_php_spy_php_php_s_php_php:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ffb9d9e4909a30828318d73405d7b348
  Ruleset: securityonion-yara
  Summary: This rule detects specific PHP shell scripts and web shells by identifying particular strings associated with malicious behavior. It searches for patterns such as echoes with specific formatting, SQL commands that load data from files, and conditions checking for POST requests containing command-line operations. This is used to identify web server compromises involving PHP-based backdoors or shells.
  Updated-Date: '2024_08_07'
_r577_php_php_r57_php_php_r57_Shell_php_php_spy_php_php_s_php_php:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a6393c4d50147bee9cc0cb860d41cd44
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of specific PHP web shells, including r57 and spy.php, by searching for key strings and patterns commonly used in these malicious scripts. The rule identifies code responsible for file manipulation actions such as removing directories and files as well as generating HTML content dynamically, which are typical behaviors of PHP-based web shells used by attackers to control compromised servers.
  Updated-Date: '2024_08_07'
_r577_php_php_r57_php_php_spy_php_php_s_php_php:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 93ca4e43fa086a9fbc56fa069873e82f
  Ruleset: securityonion-yara
  Summary: This rule detects specific PHP scripts with names like r577, r57, spy, and s. It identifies these scripts by looking for particular strings associated with Microsoft SQL queries, such as creating and dropping a temporary table named `r57_temp_table`, and a reference to a text label 'Cat file'. These characteristics are typical indicators of the mentioned PHP scripts.
  Updated-Date: '2024_08_07'
_r577_php_php_spy_php_php_s_php_php:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d59d3aa69ca8c31d6ad70aec4fd7d2ad
  Ruleset: securityonion-yara
  Summary: This rule detects malicious PHP scripts that exhibit behaviors typically associated with backdoor and espionage functionalities. It identifies specific patterns within the code, such as echo statements that reveal sensitive data or user input forms for database queries which indicate unauthorized administrative access. These scripts are often employed to manipulate and extract sensitive information from compromised web servers.
  Updated-Date: '2024_08_07'
_root_040_zip_Folder_deploy:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 474227b86338de7287854744e0870716
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the file "deploy.exe," which is associated with webshells that are auto-generated. The detection is triggered by the presence of specific strings, including one that mentions using "halon synscan" with a local IP address and port range, and another that instructs to replace the IP address with that of the target.
  Updated-Date: '2024_08_07'
_w_php_php_c99madshell_v2_1_php_php_wacking_php_php:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f649de13888e267b5aebe24d809918a0
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of specific PHP webshells, notably w.php, c99madshell v2.1, and wacking.php. The detection is based on identifying unique strings within the files that indicate the activity of these webshells, such as certain HTML tags and input forms used in their operations. These webshells often include functionality for dumping data, packing buffers into archives, and displaying formatted tables, all of which are targeted by the strings specified in the rule.
  Updated-Date: '2024_08_07'
_w_php_php_c99madshell_v2_1_php_php_wacking_php_php_1_SpecialShell_99_php_php:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0466484afd952c83a99e25f3a862458d
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific PHP web shell known as c99madshell version 2.1. The detection is based on unique string patterns found within the PHP code that this web shell uses. Specifically, it looks for code handling disk space calculations and safeguards against unauthorized access, such as checking if a directory exists or if certain system disks are used. The identified strings suggest functionality related to system information retrieval and safe mode bypass techniques commonly used in such malicious scripts.
  Updated-Date: '2024_08_07'
_w_php_php_c99madshell_v2_1_php_php_wacking_php_php_SpecialShell_99_php_php:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0948562db3bba69c7bf7716b9f6e78c9
  Ruleset: securityonion-yara
  Summary: This rule detects specific patterns associated with the C99madshell version 2.1, a PHP-based web shell used for unauthorized access and control of web servers. The detection relies on identifying unique strings within the PHP files, such as logging messages that include "Done!" and execution time notations indicating the completion of tasks.
  Updated-Date: '2024_08_07'
_w_php_php_c99madshell_v2_1_php_php_wacking_php_php_SsEs_php_php_SpecialShell_99_php_php:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 142815ed28fac1e2666e371da3e3151d
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of specific substrings within PHP code, which are indicative of the c99madshell version 2.1 web shell. The targeted substrings include patterns related to file management and HTML encoding, suggesting the involvement of web shell functionalities for directory traversal and output formatting.
  Updated-Date: '2024_08_07'
_w_php_php_c99madshell_v2_1_php_php_wacking_php_php_c99shell_v1_0_php_php_SpecialShell_99_php_php:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8487398d9b2404bb9cc2b384cb394e7d
  Ruleset: securityonion-yara
  Summary: This rule detects specific signatures of the c99madshell and c99shell backdoor web shells, which are PHP-based malicious scripts used commonly for unauthorized server access and control. These web shells are notorious for enabling attackers to exploit vulnerabilities, upload files, execute commands, and manipulate server configurations. Key indicators include certain string patterns like "c99ftpbrutecheck," operations involving FTP connections, and specific code segments related to FTP functionality and performance measurement.
  Updated-Date: '2024_08_07'
_w_php_php_c99madshell_v2_1_php_php_wacking_php_php_c99shell_v1_0_php_php_c99php:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 40c2a2fdf8d08640647fec4027441c75
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the C99 PHP web shell, specifically the versions C99madshell v2.1 and C99shell v1.0. It identifies the malicious PHP code by searching for specific strings within the script, such as commands setting PHP configuration options, HTML output indicating code execution, and references to file ownership information. These characteristics help in recognizing deployed web shells that may be used to gain unauthorized access and control over server environments.
  Updated-Date: '2024_08_07'
_w_php_php_c99madshell_v2_1_php_php_wacking_php_php_c99shell_v1_0_php_php_c99php_SpecialShell_99_php_php:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d85c23b5a9e565c3c859fd142296a56b
  Ruleset: securityonion-yara
  Summary: This rule detects instances of the C99 web shell, specifically targeting various versions such as c99madshell v2.1, wacking shell, c99shell v1.0, and SpecialShell 99. This malware, prevalent in web environments, is used by attackers to gain unauthorized access and take control of web servers. The rule identifies the presence of this malware by looking for specific string patterns, such as PHP code snippets that handle session data and conditions related to URL handling, which are indicative of the C99 web shell's behavior and functionality.
  Updated-Date: '2024_08_07'
_w_php_php_c99madshell_v2_1_php_php_wacking_php_php_dC3_Security_Crew_Shell_PRiV_php_SpecialShell_99_php_php:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 573d7500f4c5acb0b4b72d853085970d
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of specific patterns in PHP files associated with the C99madshell version 2.1, which is a PHP-based web shell used by attackers to control compromised web servers. The rule identifies key code fragments that are commonly found in this malicious software, indicating its characteristics and methods for executing scripts with certain permissions.
  Updated-Date: '2024_08_07'
_w_php_php_wacking_php_php_SpecialShell_99_php_php:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e7347672f0196b1def2d9637ade5b6f4
  Ruleset: securityonion-yara
  Summary: This rule detects specific patterns associated with malicious PHP web shells, specifically targeting strings found in certain files named "w.php.php.txt," "wacking.php.php.txt," and "SpecialShell_99.php.php.txt." It includes identifiers linked to SQL query functionalities potentially utilized in these web shells.
  Updated-Date: '2024_08_07'
_w_php_php_wacking_php_php_SsEs_php_php_SpecialShell_99_php_php:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 06a4184d59ae323aa53919e388a7abab
  Ruleset: securityonion-yara
  Summary: This rule detects specific PHP files that are associated with potentially malicious activity. It identifies files containing unique strings such as indicators related to file extensions for videos and protected access configurations, as well as a form execution process. These characteristics are often seen in web shell scripts designed for unauthorized access or file manipulation on compromised servers.
  Updated-Date: '2024_08_07'
_w_php_php_wacking_php_php_c99shell_v1_0_php_php_c99php_SpecialShell_99_php_php:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5194b2289bfee8da8288892cb1b857e1
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a PHP shell known as "c99shell," a malicious tool often used for unauthorized server access and control. The detection is based on specific string patterns found in the shell's code, such as lines involving SQL quick launch commands and error messages related to missing files.
  Updated-Date: '2024_08_07'
_wacking_php_php_1_SpecialShell_99_php_php_c100_php:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4baeff1efbbee3ce27d8e92dcfac8c15
  Ruleset: securityonion-yara
  Summary: This rule detects specific PHP backdoor and web shell activity by identifying certain strings within PHP files. The targeted strings include "if(eregi('./shbd $por',$scan))" and specific POST request parameters typically associated with backdoor functionality, such as 'backconnectip' and 'backcconnmsg'. These indicators suggest the presence of malicious PHP scripts designed for unauthorized remote connections and control.
  Updated-Date: '2024_08_07'
aZRaiLPhp_v1_0_php:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 733b3d85302cd6e2594a9fd66b079b49
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a script named "aZRaiLPhp" which is identified through specific strings in the file. The strings include references to HTML elements commonly used in forms, such as a submit button with the label "Dosya Yolla!" and another submit button labeled "TAMAM". The condition is triggered if two of these specified strings are found within the file, suggesting it is designed to identify a specific variant or version of the "aZRaiLPhp" script.
  Updated-Date: '2024_08_07'
adjustcr:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: db7d40cb375016cf46df6b1601c08f03
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific web shell associated with the file adjustcr.exe. The detection is based on identifying certain strings within the file. These strings include messages indicating the file is packed with the UPX executable packer, references to a special license for NRV within UPX, and unique identifiers like "AdjustCR Carr" and "ION\\System\\FloatingPo."
  Updated-Date: '2024_08_07'
admin_ad:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: df085af344c6e238d2c9ee4072a6f160
  Ruleset: securityonion-yara
  Summary: This rule detects a specific webshell file named "admin-ad.asp," which is auto-generated. The rule identifies strings within the file that include specific HTML and JavaScript elements. These elements indicate the presence of an input field for command execution and a dynamically generated response that incorporates URL parameters and attributes.
  Updated-Date: '2024_08_07'
ak74shell_php_php:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d3bcf84e767e96f48cddded17abfa0ec
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the "ak74shell" PHP shell file, characterized by specific strings and patterns associated with it. The strings include HTML syntax with a PHP variable, a reference to the AK-74 Security Team's website, and the variable $xshell. By identifying any two of these strings within a file, the rule determines the presence of the "ak74shell.php.php.txt" file, which is a known artifact related to malicious web shell activity.
  Updated-Date: '2024_08_07'
aolipsniffer:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c771381cd2dc5c76e1bd607f2cceba4d
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the "aolipsniffer.exe" file by checking for multiple unique strings associated with the software. These strings include specific file paths related to Microsoft Visual Studio components, various settings and compatibility information, and references to Windows system files. The identified strings ensure the rule accurately matches files containing indicators of being generated or influenced by certain Visual Basic 6 components and settings.
  Updated-Date: '2024_08_07'
apt28_win_zebrocy_golang_loader_modified:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 95bc1d5c878beef80dfbf2792fb77764
  Ruleset: securityonion-yara
  Summary: This rule detects the unpacked modified version of Zebrocy Golang malware, associated with the APT28/Sofacy group. It identifies specific Golang build marks and strings related to common functionalities such as creating directories, environment variable management, file operations, and HTTP headers processing. The condition verifies the presence of these characteristics to confirm detection.
  Updated-Date: '2024_08_07'
apt3_bemstour_implant_byte_patch:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 903be82eb2fc3ca22b9a44d54e7ddd0f
  Ruleset: securityonion-yara
  Summary: This rule detects an implant associated with the Bemstour exploitation tool used by the APT3 threat group. It identifies specific byte patterns that correspond to changes in the memory allocation within a process. The detection focuses on a sequence of assembly instructions that modify certain memory locations, indicating potential malicious activity associated with this particular implant.
  Updated-Date: '2024_08_07'
apt3_bemstour_implant_command_stack_variable:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 43746d8705f4cf057ab3f80bbf71b5f8
  Ruleset: securityonion-yara
  Summary: This rule detects an implant associated with the Bemstour exploitation tool used by the advanced persistent threat group APT3. It identifies specific sequences of hexadecimal byte patterns in memory that align with command stack variables indicative of the Bemstour tool. The rule highlights three primary chunks of memory with distinct byte sequences that represent different string fragments and structures frequently utilized by the tool. These patterns reflect actions such as moving specific constant values into memory and executing certain operational commands, which are characteristic behaviors of the Bemstour implant.
  Updated-Date: '2024_08_07'
apt3_bemstour_strings:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 78fbd9993dd5050b2fc49f82d259ddcc
  Ruleset: securityonion-yara
  Summary: This rule detects strings associated with the Bemstour exploitation tool, which may be used for various malicious activities. The presence of specific debug print messages such as errors related to failed connections, unsupported platforms, and issues in command execution helps identify the tool. Command line patterns, including commands to add users and execute programs, and parameters related to SMB (Server Message Block) services, are also checked. Unique strings indicating specific target environments or configurations are additionally used to identify the presence of Bemstour.
  Updated-Date: '2024_08_07'
apt_ProjectSauron_MyTrampoline:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 88db7f260a3c1e4f0824173c07568852
  Ruleset: securityonion-yara
  Summary: This rule detects the ProjectSauron malware, specifically the MyTrampoline module. It identifies files that begin with the "MZ" header, typical of executable files, and have a file size of less than 5MB. The detection is based on the presence of specific strings within the file, such as paths related to system volume information and physical drive identifiers in wide character format, as well as certain class identifiers formatted in both ASCII and wide character formats.
  Updated-Date: '2024_08_07'
apt_ProjectSauron_encrypted_LSA:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 274a514cbf38b758c75f6cf3c3358abb
  Ruleset: securityonion-yara
  Summary: This rule detects samples of the ProjectSauron malware that have encrypted Local Security Authority (LSA) data. The detection is based on specific hexadecimal patterns, strings associated with device paths and global object names, and checking for missing function messages. In addition, the rule looks for the presence of certain export functions in the PE files and assesses the file entropy, ensuring it is high, indicative of encryption or obfuscation, and confirms the file size is less than 1MB.
  Updated-Date: '2024_08_07'
apt_ProjectSauron_encrypted_SSPI:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: fd8ce8f909530e72336bcc40b7bb053b
  Ruleset: securityonion-yara
  Summary: This rule detects encrypted ProjectSauron SSPI samples by identifying files that start with the "MZ" header, are smaller than 1 megabyte, export the function "InitSecurityInterfaceA", and are classified as DLLs. Additionally, the files are either AMD64 or IA64 machine types and exhibit high entropy evidencing encryption or compression.
  Updated-Date: '2024_08_07'
apt_ProjectSauron_encrypted_container:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f93fa1139a9e3f234e07e7a5c4d075ea
  Ruleset: securityonion-yara
  Summary: This rule detects ProjectSauron samples by identifying their encrypted containers. It does this through specific string patterns, including a virtual file system (VFS) header and a salt value, while also checking that the file starts with the 'MZ' identifier (uint16(0) == 0x5A4D). Additionally, conditions such as the file size being between 0x400 and 10,000,000 bytes, and certain entropy levels, help in ensuring the accurate detection of the encrypted container associated with ProjectSauron.
  Updated-Date: '2024_08_07'
apt_ProjectSauron_encryption:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ca95f9ca0050c3319f1385dc0ef624c6
  Ruleset: securityonion-yara
  Summary: "This rule detects encrypted strings associated with ProjectSauron, an advanced persistent threat believed to engage in cyber-espionage. The rule scans for specific byte sequences within files smaller than 5MB to identify potentially compromised systems or malware activity linked to ProjectSauron\u2019s encryption methods."
  Updated-Date: '2024_08_07'
apt_ProjectSauron_generic_pipe_backdoor:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 80ec1677f5297bacab63888367c45274
  Ruleset: securityonion-yara
  Summary: This rule detects a specific backdoor associated with ProjectSauron, known as the generic pipe backdoor. The indicators include certain byte sequences and strings like "rand" and "WS2_32" within a file smaller than 400,000 bytes, and verifies the file starts with the 'MZ' header (0x5A4D), a common signature of Windows executables.
  Updated-Date: '2024_08_07'
apt_ProjectSauron_pipe_backdoor:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 021dbe455223f08f59c89d6e261967cb
  Ruleset: securityonion-yara
  Summary: This rule detects the ProjectSauron pipe backdoor by identifying specific strings related to Windows API functions such as `CreateNamedPipeW`, `SetSecurityDescriptorDacl`, `GetOverlappedResult`, and `TerminateThread`. It looks for these strings within a file beginning with the "MZ" header, which indicates a Windows executable, and whose file size is less than 100,000 bytes.
  Updated-Date: '2024_08_07'
apt_RU_MoonlightMaze_IRIX_exploit_GEN:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 54909999ce40e9ce8e8d64145550a9ee
  Ruleset: securityonion-yara
  Summary: This rule detects specific Irix exploits associated with the Moonlight Maze cyber espionage campaign, attributed to David Hedley. It identifies binaries that start with the magic number indicating an ELF file and contain specific strings related to stack addresses and execution errors. Additionally, it includes hash values corresponding to various known exploit files like "df3," "log," "xconsole," "xlock," and "xterm."
  Updated-Date: '2024_08_07'
apt_RU_MoonlightMaze_cle_tool:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 486887b901b88d30d7cc1d3b4a99b746
  Ruleset: securityonion-yara
  Summary: This rule detects the Moonlight Maze 'cle' log cleaning tool. It searches for specific string patterns within files, including phrases like "./a filename template_file," "May be %s is empty?," "template string = |%s|," "No blocks !!!," "No data in this block !!!!!!," and "No good line." The presence of at least three of these strings indicates the likelihood of the Moonlight Maze 'cle' tool, a component associated with the notorious cyber-espionage campaign known for data extraction and network infiltration activities during the late 1990s.
  Updated-Date: '2024_08_07'
apt_RU_MoonlightMaze_customlokitools:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: be61e6e5571ded507254b641f807a775
  Ruleset: securityonion-yara
  Summary: 'This rule detects malicious samples from the Moonlight Maze operation, specifically focusing on Loki tools featuring custom strings authored by attackers. The strings include various status and error messages such as "Write file Ok...", "ERROR: Can not open socket....", "Error in parametrs:", and "Connect successful....". These strings help identify the tool''s communication patterns and error handling behaviors. The rule also incorporates conditions to mitigate false positives, including a filesize constraint of less than 5000KB and the requirement that at least three of the specified strings are present in the file.'
  Updated-Date: '2024_08_07'
apt_RU_MoonlightMaze_customsniffer:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 76237edccd73c71cd198afff359639a7
  Ruleset: securityonion-yara
  Summary: This rule detects custom-built sniffer tools associated with the Moonlight Maze cyber-espionage campaign. It identifies specific strings unique to these tools, such as file paths and format strings related to temporary directories and device names. The detection relies on identifying at least two of the specified strings, providing a reliable method to pinpoint instances of these sniffer tools.
  Updated-Date: '2024_08_07'
apt_RU_MoonlightMaze_de_tool:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ed7b6ed05d67ad1f2037725b5d6b39ef
  Ruleset: securityonion-yara
  Summary: 'This rule detects the Moonlight Maze ''de'' and ''deg'' tunnel tools by identifying specific strings within a file. These strings include "Vnuk: %d" and "Syn: %d", as well as a specific hexadecimal sequence ''25 73 0A 25 73 0A 25 73 0A 25 73 0A'', which are markers indicating the presence of these tools used in the Moonlight Maze cyber-espionage campaign.'
  Updated-Date: '2024_08_07'
apt_RU_MoonlightMaze_encrypted_keylog:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 199e8572299f081fd5dc87bafefe0b7c
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of Moonlight Maze encrypted keylogger logs by identifying a specific binary pattern. Moonlight Maze is a sophisticated cyber-espionage campaign, and this rule looks for a particular sequence of bytes, ensuring the first four bytes match a precise value, which signifies the encrypted logs.
  Updated-Date: '2024_08_07'
apt_RU_MoonlightMaze_u_logcleaner:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d4024821f1a57a44f29adc05bec4f538
  Ruleset: securityonion-yara
  Summary: This rule detects a type of log cleaner associated with the Moonlight Maze cyber-espionage campaign. The rule targets specific strings indicative of the utclean.c log cleaner, such as messages related to hiding operations and usage instructions for cleaning user logs. Additionally, it checks for commands that list and move temporary log files, ensuring the presence of an ELF file signature. This combination of string patterns and file format verification helps identify instances where the log cleaner is being used to obscure activities on a system.
  Updated-Date: '2024_08_07'
apt_RU_MoonlightMaze_wipe:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7dab3f27d28296574e831113643b5a1d
  Ruleset: securityonion-yara
  Summary: 'This rule detects a specific log cleaner program associated with the Moonlight Maze campaign, based on code from the file "wipe.c". It identifies this malware through unique error messages and usage instructions embedded in the executable, such as "ERROR: Unlinking tmp WTMP file." and "USAGE: wipe [ u|w|l|a ] ...options...". The rule looks for the presence of these strings within files that have an ELF format identifier for Unix-like systems.'
  Updated-Date: '2024_08_07'
apt_RU_MoonlightMaze_xk_keylogger:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c1efd977605bdc5b3a834d44d97d319c
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the Moonlight Maze 'xk' keylogger by identifying specific strings associated with its logging and file storage behavior. It looks for certain patterns such as "Log ended at => %s," "Log started at => %s [pid %d]," and various file paths and identifiers related to the keylogger, particularly in the directory "/var/tmp/". These strings include specific filenames and logging information that are unique to the keylogger's operation.
  Updated-Date: '2024_08_07'
apt_RU_Turla_Kazuar_DebugView_peFeatures:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d1f0c33b4f0ad83d7d9e3a28f8f802af
  Ruleset: securityonion-yara
  Summary: This rule detects the Turla malware, which mimics Sysinternals Tools by examining the Portable Executable (PE) features of a file. It identifies files that have specific version information associated with Sysinternals DebugView tools, such as certain "ProductName," "Description," "FileVersion," "Comments," "OriginalName," and "InternalName" values. Additionally, it checks for the presence of a specific hex value (0x5a4d) at the beginning of the file to confirm it is a valid PE file. The rule also includes hashes for further file verification.
  Updated-Date: '2024_08_07'
apt_equation_cryptotable:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 269f045afe04bbee5344391c73bbded9
  Ruleset: securityonion-yara
  Summary: This rule detects the crypto library utilized in Equation group malware. The detection is based on a specific sequence of hexadecimal bytes that are characteristic of the particular cryptographic library employed by the Equation group, a known advanced persistent threat actor.
  Updated-Date: '2024_08_07'
apt_equation_doublefantasy_genericresource:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 23c5c9a7f38ad9dd535bc8e1fda33921
  Ruleset: securityonion-yara
  Summary: This rule detects the DoubleFantasy malware by identifying its encoded configuration. The detection is based on specific patterns in the executable file, including the "MZ" header at the beginning of the file, a distinctive byte pattern, and particular string sequences. It is effective for files smaller than 500,000 bytes.
  Updated-Date: '2024_08_07'
apt_equation_equationlaser_runtimeclasses:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: db231ab4e1240a66ed5f0adf83b1a128
  Ruleset: securityonion-yara
  Summary: This rule detects the EquationLaser malware by identifying specific strings associated with it. The targeted strings are unique identifiers that involve a mix of letters and numbers, which are characteristic of this particular malware. EquationLaser is known to be part of the Equation Group's toolkit and has been used in sophisticated cyber-espionage activities.
  Updated-Date: '2024_08_07'
apt_equation_exploitlib_mutexes:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 907760b3017990fa70c15a175e419739
  Ruleset: securityonion-yara
  Summary: This rule detects mutex names associated with Equation group's exploitation library, which is linked to advanced malware used for cyber-espionage. Specifically, it searches for mutex identifiers such as "prkMtx," "cnFormSyncExFBC," and "cnFormVoidFBC" within the executable files. These identifiers help identify the presence of this sophisticated and covert malicious toolkit.
  Updated-Date: '2024_08_07'
apt_equation_keyword:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 96e7df269d5353652586cf9e5dfdfeac
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of specific keywords used by the Equation Group, known for its advanced cyber-espionage activities. It targets executable files containing the string "Backsnarf_AB25" in either wide or ASCII format, ensuring the file starts with the magic number 0x5a4d, which indicates an executable file.
  Updated-Date: '2024_08_07'
apt_hellsing_implantstrings:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6af45da3d07b98243c47b715622d099a
  Ruleset: securityonion-yara
  Summary: "This rule detects the Hellsing malware implants, specifically targeting PE files. It identifies indicators such as certain error messages related to file upload and download failures, the presence of a \"ping 127.0.0.1\" command, and references to specific executable and DLL files like \"xweber_server.exe\" and \"msger_server.dll.\" Additionally, the rule looks for debug paths that include \u201CHellsing\u201D in various directory structures and checks for the presence of the function \"ServiceMain.\" The detection criteria also ensure that the file size is under 500,000 bytes."
  Updated-Date: '2024_08_07'
apt_hellsing_installer:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 87baacdc776771ff5ac35732b46eb79a
  Ruleset: securityonion-yara
  Summary: This rule detects the Hellsing malware installers identified as "xweber_install_uac.exe" and "msger_install.dll". It looks for the presence of specific command-line operations involving "cmd.exe" commands for ping and file deletion. Additionally, it searches for encoded strings and paths related to system executables like "sysprep.exe" and "cmd.exe" in the Windows system directory, as well as unique identifiers and encoded data within the file. The rule is specifically focused on files that are of the PE (Portable Executable) type and are less than 500,000 bytes in size.
  Updated-Date: '2024_08_07'
apt_hellsing_irene:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2ed57487f14109bae5c3188e5be03413
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the Hellsing malware's Irene installer component, specifically designed to be a PE file. It identifies the malware through several distinct strings related to its functionality, such as references to driver management error messages and the use of the term "irene." The rule also checks for the inclusion of the string pertaining to aPLib v0.43, which indicates compression usage within the malware, and ensures the file size is less than 500,000 bytes.
  Updated-Date: '2024_08_07'
apt_hellsing_msgertype2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 363033d83937c8b7c7a38931b0384250
  Ruleset: securityonion-yara
  Summary: This rule detects Hellsing msger type 2 implants, which are malicious programs designed to operate on PE (Portable Executable) files. It identifies the presence of specific strings within these files. These strings include formatted paths typically used by the malware, such as "%s\\system\\%d.txt" and "_msger", as well as URLs used for communication with control servers, like "http://%s/lib/common.asp?action=user_login&uid=%s&lan=%s&host=%s&os=%s&proxy=%s" and "http://%s/data/%s.1000001000". Additionally, the rule checks for file upload actions to specific URLs and patterns of hexadecimal format strings. The condition component ensures that these identifiers match and that the file size is under 500,000 bytes.
  Updated-Date: '2024_08_07'
apt_hellsing_proxytool:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8afdffa7943fe879a22d1d5c35753d1c
  Ruleset: securityonion-yara
  Summary: This rule detects a Hellsing proxy testing tool. It identifies specific strings related to proxy information, such as automatic proxy URLs, connection types, proxy servers, and bypass lists. Additionally, it looks for an error message related to the InternetQueryOption function and a specific file path associated with the Hellsing development directory. The file must be a PE file and smaller than 300KB in size.
  Updated-Date: '2024_08_07'
apt_hellsing_xkat:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2c3b7943e5b641b459f6e19a3b4e5596
  Ruleset: securityonion-yara
  Summary: This rule detects the Hellsing xKat tool, a software associated with malicious activity. It identifies specific patterns and text strings related to error messages and operations such as loading drivers, creating drivers, deleting files, and terminating processes. The file must be a Portable Executable (PE) with a size of less than 300,000 bytes, beginning with the hexadecimal sequence 0x5a4d. The detection relies on the presence of at least six predefined strings, including file and process operations messages.
  Updated-Date: '2024_08_07'
apt_nix_elf_Derusbi_Linux_SharedMemCreation:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b47a50b732f8503d7d87568042f8451a
  Ruleset: securityonion-yara
  Summary: This rule detects the Derusbi Backdoor malware on Linux systems by identifying ELF binaries that create shared memory. Derusbi is a specific type of backdoor that cyber attackers use to gain persistent access to infected systems. The rule triggers upon finding specific byte patterns within the ELF file's structure, indicating the presence of this shared memory creation characteristic of the Derusbi Backdoor.
  Updated-Date: '2024_08_07'
apt_nix_elf_Derusbi_Linux_Strings:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1aca4ea06aba2c45d5bb65399df463c7
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the Derusbi Backdoor on Linux systems by identifying specific strings within ELF files. These strings include indicators such as "loadso," "/dev/shm/.x11.id," "LxMain64," and "/tmp/1408.log," among others. The detection logic focuses on combinations of these strings, such as the presence of certain strings alongside others, to confirm the backdoor. Derusbi is a known backdoor that enables unauthorized access and control over the infected system, and this rule helps to identify its presence by matching unique and specific string patterns associated with it.
  Updated-Date: '2024_08_07'
apt_nix_elf_derusbi:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 628e85382c13234a54982ee90f786bfb
  Ruleset: securityonion-yara
  Summary: This rule detects the Derusbi backdoor, a type of malware designed for ELF (Executable and Linkable Format) files commonly used on Unix-like systems. The detection method relies on identifying multiple specific strings within the file. These strings include commands and functions such as "LxMain," "execve," and various pthread (POSIX thread) operations, along with references to process paths like "/proc/self/exe" and "/proc/%u/cmdline." Additional indicators involve typical command-and-control communication patterns, proxy settings, and user-agent strings. The presence of specific file operations and network connection parameters also contribute to identifying this backdoor.
  Updated-Date: '2024_08_07'
apt_nix_elf_derusbi_kernelModule:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: afa152136c6d6a9af92a95280464d5b9
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the Derusbi Backdoor ELF Kernel Module, which is used in cyber-espionage campaigns. It identifies specific strings within the ELF file format that are signatures of the Derusbi malware. These strings include function names and module attributes such as "__this_module", "init_module", "unhide_pid", and various terms related to tasks and network management like "current_task" and "init_net". The rule also checks for specific file attributes and meta tags such as "license" and "description". This comprehensive detection method helps in identifying the malicious kernel module involved in unauthorized activities.
  Updated-Date: '2024_08_07'
apt_regin_hopscotch:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c765d9f4aac210a0b7b5f1677017c451
  Ruleset: securityonion-yara
  Summary: This rule detects Regin's Hopscotch module, a sophisticated espionage tool known for its stealth and complexity. The rule identifies specific strings linked to the module's operations, such as network authentication attempts, failures in authentication, and named pipe connections. Key terms like "AuthenticateNetUseIpc," "Failed to authenticate to," and "CopyServiceToRemoteMachine" indicate the module's activities and interactions within a target system. The presence of these identifiers, combined with the 0x5A4D file header check, is used to confirm the existence of the malicious Hopscotch module.
  Updated-Date: '2024_08_07'
apt_regin_legspin:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2d22488c3faa34fa4838a10862375535
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of Regin's Legspin module by identifying specific strings within a file, such as "sharepw," "reglist," "logdump," "Name:" in wide format, "Phys Avail:" "cmd.exe" in wide format, "ping.exe" in wide format, and "millisecs." The rule also checks that the file starts with the hexadecimal value 0x5A4D, which is characteristic of executable files.
  Updated-Date: '2024_08_07'
apt_sofacy_xtunnel:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3b595314bba27f4e6f4dd83b21e87dbe
  Ruleset: securityonion-yara
  Summary: This rule detects the Sofacy malware, specifically targeting its XTunnel variant, which has been associated with an attack against the German Bundestag. It looks for specific strings and characteristics within a file to identify this malware, including project-related strings, Mozilla user-agent strings, specific IP addresses and error messages, a known OpenSSL version used by the malware, and the executable name "Xtunnel.exe". The condition checks for the presence of these signatures to confirm the malware's presence.
  Updated-Date: '2024_08_07'
apt_win32_dll_rat_1a53b0cp32e46g0qio7:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c588eab54ef4d70c4152263818f895de
  Ruleset: securityonion-yara
  Summary: This rule detects Inocnation malware by identifying specific hexadecimal string patterns and ASCII substrings. It looks for particular encoded strings, including the "1a53b0cp32e46g0qio9" static string, often decoded via a loop in the malware's code. Additionally, it flags references to common paths within the Windows registry, such as "Software\Microsoft\Windows\CurrentVersion\Run," and the function "WinHttpGetIEProxyConfigForCurrentUser," utilized to configure proxy settings. These indicators together help identify the presence of the Inocnation malware on a system.
  Updated-Date: '2024_08_07'
apt_win32_dll_rat_hiZorRAT:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3ebaa5cc4c480e81e9ff8eb9c76c91d7
  Ruleset: securityonion-yara
  Summary: This rule detects the hiZor Remote Access Trojan (RAT) by identifying specific hexadecimal patterns and ASCII strings associated with its behavior. These include encoded and XOR-decoded User-Agent strings resembling "Mozilla", as well as several distinctive keywords and functions such as "CmdProcessExited," "rootDir," "DllRegisterServer," and "GetNativeSystemInfo." The conditions trigger if the file headers match either the PE (Portable Executable) or ELF (Executable and Linkable Format) file formats and all specified patterns are present.
  Updated-Date: '2024_08_07'
apt_win_exe_trojan_derusbi:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9472da9b5069e67b5c3d1a8e7229f19b
  Ruleset: securityonion-yara
  Summary: This rule detects the Derusbi Backdoor Win32, a type of Trojan used for cyber espionage. The rule identifies specific strings related to network and system operations common to this malware, such as "ZwUnloadDriver," "PCC_CMD_PACKET," and "update.microsoft.com." It also checks for certain hexadecimal patterns and file paths indicative of the Trojan's activity, like driver decoding sequences and pipe communication signatures. These criteria help to pinpoint the presence of the Derusbi Backdoor, ensuring accurate detection based on distinct behaviors and characteristics associated with this malicious software.
  Updated-Date: '2024_08_07'
arpsniffer:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ea06fdfb2a1e76c341e2b774a1f6339e
  Ruleset: securityonion-yara
  Summary: This rule detects a Chinese hack tool named "arpsniffer.exe" by identifying specific ASCII strings within the executable. It looks for the presence of terms such as "SHELL", "PacketSendPacket", "ArpSniff", "pcap_loop", and "packet.dll". Additionally, the rule ensures that the file starts with the hex value 0x5a4d and is smaller than 120KB in size. The identified strings are characteristic of the arpsniffer tool, which is used for network sniffing activities, analyzing and capturing ARP packets.
  Updated-Date: '2024_08_07'
asp_dns:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3480692cbbf55467b37d2ee9bd9d1c2f
  Ruleset: securityonion-yara
  Summary: This rule detects a malicious ASP file associated with Laudanum Injector Tools, specifically targeting a file named dns.asp. The detection relies on identifying specific strings used within the file, such as a command for performing a DNS lookup via "nslookup," setting and executing the command with a shell object, writing the command response to the web interface, and the presence of a form named "dns" with a POST method. The rule ensures that the file size is less than 21KB and all specified strings must be present.
  Updated-Date: '2024_08_07'
asp_file:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8a6654f3ec86e572bbe761c3218092ef
  Ruleset: securityonion-yara
  Summary: This rule detects a specific ASP file associated with Laudanum Injector Tools. It looks for various unique strings within the file, such as references to a script authored by Tim Medin, binary writing methods using Response.BinaryWrite, and the use of Response.Write to log status and server variables including REMOTE_ADDR. Additionally, it identifies hyperlinks to the web root and operations involving file and folder objects with the FileSystemObject (fso). The combination of these distinct patterns helps identify potentially malicious or unauthorized activity within ASP scripts.
  Updated-Date: '2024_08_07'
asp_proxy:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b53a5f5046048e73b2aacc865ddc589c
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a malicious ASP script associated with the Laudanum Injector Tools, specifically targeting the file named "proxy.asp". This script includes distinctive strings that indicate various activities, such as concatenating query parameters into URLs, retrieving and processing HTTP headers, constructing full URLs, and creating HTTP objects using Microsoft's XMLHTTP component, all of which are suggestive of its role in web-based attacks or data exfiltration. The rule applies to files smaller than 50KB in size, ensuring they match all of the identified malicious strings.
  Updated-Date: '2024_08_07'
asp_shell:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5315ee00f86a8be593c0bee2d2376105
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a malicious ASP script known as "Laudanum Injector Tools - file shell.asp." The detection criteria include specific strings typically found in this malicious script, such as form handling code ("<form action=\"shell.asp\" method=\"POST\" name=\"shell\">"), command execution patterns ("%ComSpec% /c dir" and "Set objCmd = wShell.Exec(cmd)"), script timeout settings ("Server.ScriptTimeout = 180"), and variable usage for command retrieval and execution ("cmd = Request.Form(\"cmd\")"). These elements are characteristic of web shells used to execute arbitrary commands on a web server. The rule triggers if any four of these strings are found in a file smaller than 15KB.
  Updated-Date: '2024_08_07'
aspbackdoor_EDIR:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 609f6fbd2f2e5796f336051dce51c047
  Ruleset: securityonion-yara
  Summary: This rule detects a specific backdoor tool named EDIR.ASP, typically used in older hacking incidents. It identifies the presence of malicious code by checking for specific strings within the file, including HTML response manipulation, handling cookies with embedded passwords, directory path references, and the creation of filesystem objects through scripting. These characteristics are indicative of the backdoor's activity in manipulating server responses and accessing filesystem paths.
  Updated-Date: '2024_08_07'
aspbackdoor_EDIT:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a837ba417daeebc6ac3bc424ca12fdb3
  Ruleset: securityonion-yara
  Summary: This rule detects a specific backdoor tool named EDIT.ASP, characterized by several distinct strings within the file. These strings include a meta tag specifying the content type as "text/html;charset=gb_2312-80", a script setting a file object using "fs.GetFile", and a conditional statement involving a password check with the value "juchen". Additionally, there are strings indicating file operations through "fs.OpenTextFile" and HTML content managing color and text decoration. The rule triggers if at least five of these specified patterns are found within the scanned content, indicating the presence of the EDIT.ASP backdoor tool.
  Updated-Date: '2024_08_07'
aspbackdoor_asp1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6449b042c26274270b17593336c1ca1b
  Ruleset: securityonion-yara
  Summary: This rule detects a hacktool associated with a file named "asp1.txt," used in older hacking activities. It identifies specific code strings related to Microsoft Access database drivers and connections. The strings include parameters and commands for opening connections to an Access database file named "scjh.mdb," executing SQL queries, and creating ADODB.Connection objects on a server. It also identifies variables used within these database operations. This rule helps to identify malicious ASP scripts that manipulate Microsoft Access databases.
  Updated-Date: '2024_08_07'
aspbackdoor_asp3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ca43fd038cc8f88fb4ecf196a317e29d
  Ruleset: securityonion-yara
  Summary: This rule detects a specific hacktool associated with an older set of disclosed tools, identified by the contents of a file typically named "asp3.txt." The rule identifies the hacktool by recognizing several unique strings within the file, including elements commonly found in ASP (Active Server Pages) used for changing Windows user passwords. These strings indicate the presence of form actions targeting "changepwd.asp," manipulation of Windows NT and Windows 2000 user objects, and password change functionalities that retrieve the old and new passwords through form requests.
  Updated-Date: '2024_08_07'
aspbackdoor_asp4:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7c5183da3e834647bb855bb88f35a1ce
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of an old hacktool known as "asp4.txt" that involves the manipulation of system processes and reboot functions using ASP (Active Server Pages) scripts. It searches for specific ASCII strings, such as "system.dll," "set sys=server.CreateObject (\"system.contral\")", "Public Function reboot(atype As Variant)", and other related commands that hint at creating server objects and invoking system reboot capabilities. The identified patterns indicate the tool's functionality for controlling server actions and potentially executing windows exit routines using defined functions.
  Updated-Date: '2024_08_07'
aspbackdoor_entice:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 261169e244cbb549dc91201245fd2106
  Ruleset: securityonion-yara
  Summary: This rule detects a hacktool named "entice.asp," which is associated with an old set of disclosed hacking tools. The rule identifies this specific file by looking for certain strings within it, such as a form element with the name "FormPst" that posts to "entice.asp," the execution of SQL queries using the string "if left(trim(request(\"sqllanguage\")),6)=\"select\" then," the command "conndb.Execute(sqllanguage)," an include directive for "sqlconn.asp," and the SQL query "rstsql=\"select * from \"&rstable(\"table_name\")." This particular tool appears to facilitate SQL command execution on a connected database.
  Updated-Date: '2024_08_07'
aspbackdoor_ipclear:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: bf91842537645d03913873e47188fda2
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a disclosed hack tool related to an old script named "ipclear.vbs." This script includes specific strings that indicate typical operations such as setting service objects, providing a usage prompt with "KillLog.vbs," writing to text files, creating network objects, and utilizing file system objects. The detection is based on the presence of these distinct script behaviors.
  Updated-Date: '2024_08_07'
aspbackdoor_regdll:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f500e51955020be9374a9122822eb1f1
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of an ASP backdoor hacktool known as "regdll.asp." The backdoor uses script commands to execute the Windows "regsvr32.exe" program for unregistering dynamic link libraries (DLLs). The detection focuses on specific patterns within the script, including running the "regsvr32.exe" command with the "/u/s" parameters and handling the exit code from this command. The rule also looks for specific programming constructs within the script, such as "Public Property Get oFS." These patterns help identify the malicious script attempting to manage DLL registrations on the system.
  Updated-Date: '2024_08_07'
aspfile1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3a89ae6c2dab10312ea3e354644f0889
  Ruleset: securityonion-yara
  Summary: This rule detects a specific old hacktool file named 'aspfile1.asp'. It identifies the file by searching for specific strings related to command execution and file creation within ASP scripts. Notable characteristics include the use of a command check, temporary file creation with a specific path, meta tags with a character set declaration, an input form for command submission, a call to execute `cmd.exe` and capture output, and assigning form data to a variable for command execution. These indicators collectively confirm the presence of this particular ASP hacktool.
  Updated-Date: '2024_08_07'
aspfile2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1909766d24f15e210bfaa3cd7cc7cc44
  Ruleset: securityonion-yara
  Summary: This rule detects a specific ASP file identified as a hacktool, known as "aspfile2.asp." It searches for several distinctive strings within the file, including "response.write \"command completed success!\"", "for each co in foditems", "<input type=text name=text6 value=\"<%= szCMD6 %>\"><br>", and "<title>Hello! Welcome </title>". These strings indicate the presence of a hacktool that provides unauthorized command execution functionality and displays greeting messages to users upon accessing the tool.
  Updated-Date: '2024_08_07'
aspx_shell:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 42c58f4229e06f9cecbe1ef9caef4cf9
  Ruleset: securityonion-yara
  Summary: This rule detects a specific web shell file called shell.aspx, associated with Laudanum Injector Tools. It identifies the file based on unique strings related to handling remote IP addresses in HTTP headers, user host addresses, and specific HTML form and body tags used within the web shell's code. The file's size must be less than 20KB for this rule to trigger.
  Updated-Date: '2024_08_07'
aspydrv_asp:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a915fa0faaf8635fc53b5aeb93bbeca0
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific ASP script file named "aspydrv.asp.txt" that contains certain character strings indicative of potentially suspicious or malicious behavior. It looks for strings related to form elements and session management, including the presence of the keyword "password" and a session variable assignment "session(\"shagman\")=". Detected if at least two of these string conditions are met, this rule helps identify the file based on these telltale markers.
  Updated-Date: '2024_08_07'
b374k_back_connect:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5c577341b9c74ab736a59a3e7609eda2
  Ruleset: securityonion-yara
  Summary: This rule detects a privilege escalation tool by identifying specific string patterns such as "AddAtomACreatePro," "shutdow," and "/config/i386" within files smaller than 10KB that start with the hexadecimal value 0x5a4d.
  Updated-Date: '2024_08_07'
backdoor1_php:
  Created-Date: '2024_08_06'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2214c5b75e363a57cc707a771949ad9e
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a PHP-based backdoor, identified in the file named "backdoor1.php.txt." The backdoor includes strings indicative of its functionality, such as an echo statement for directory listing, a class definition named "backdoor," and a hyperlink for file copying. These strings suggest that the backdoor can list directories and offer file management capabilities, which may be used maliciously to control the server.
  Updated-Date: '2024_08_06'
backdoorfr_php:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: afe549029596d45df5c3260eb24aa552
  Ruleset: securityonion-yara
  Summary: This rule detects a specific backdoor script, identified as "backdoorfr.php," by searching for distinct text strings within PHP files. The backdoor includes references to a compromised URL, "victime.com," and code snippets for input fields related to email provenance, indicated by the presence of certain substrings. This detection method helps identify potentially malicious code embedded in websites that allows unauthorized access or control.
  Updated-Date: '2024_08_07'
backup_php_often_with_c99shell:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 82c5e77c268e25aabc6e0300a01b310c
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of potentially malicious PHP files that may be related to backup scripts often associated with the c99shell web shell. Specifically, it scans for certain characteristic strings within the file, such as "#phpMyAdmin MySQL-Dump", a fragment of a database connection string, and a pattern related to database content handling.
  Updated-Date: '2024_08_07'
backupsql_php_often_with_c99shell:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8fe78a4cbf5196cbbd89d4c92a4a15c9
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a file named "backupsql.php" which often appears alongside the "c99shell" web shell. The specific indicators for detection include a comment within the file related to MIME boundary handling and a string that assigns FTP connection details using the `ncftpput` command, which includes FTP username, password, and a log file reference.
  Updated-Date: '2024_08_07'
bdcli100:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1b70276822819e2041242a9a42f088e3
  Ruleset: securityonion-yara
  Summary: This rule detects a specific malicious executable file named "bdcli100.exe" by identifying unique strings associated with it. The rule searches for indicators such as error messages stating "unable to connect to" and "backdoor is corrupted on," which are indicative of the presence of this backdoor malware. The detection is based on all specified strings being found within the file.
  Updated-Date: '2024_08_07'
bin_Client:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d7a6ca9e8097c6238e3a7ed4e5870b1f
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a file named Client.exe, which is associated with webshell activity. It uses specific strings to identify this file, including phrases such as "Recieved respond from server!!", "packet door client", "input source port(whatever you want):", and "Packet sent,waiting for reply...". These strings suggest that the file facilitates communication between a client and server, indicative of a remote access tool or a network packet tool possibly used for unauthorized access or transmission of data.
  Updated-Date: '2024_08_07'
bin_ndisk:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c69dda038058a977030a51a32b082dab
  Ruleset: securityonion-yara
  Summary: 'This rule detects a suspicious file named `ndisk.sys`, potentially associated with hacking activities disclosed by the Hacking Team. The file is identified by several characteristics, including references to specific Windows registry paths, kernel disk manager phrases, device names, and the compilation string "built by: WinDDK". The detection is triggered if the file matches the PE file signature, is less than 30KB in size, and contains at least six specified strings in its content.'
  Updated-Date: '2024_08_07'
bin_wuaus:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 85103cb48b99756f5f867102dad4c163
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific webshell file named "wuaus.dll". The detection is based on a unique combination of strings found within the file, including sequences such as "9(90989@9V9^9f9n9v9", ":(:,:0:4:8:C:H:N:T:Y:_:e:o:y:", and "TCP Send Error!!". The rule aims to identify this webshell through its characteristic hash and unusual patterns, which indicate potential malicious activity.
  Updated-Date: '2024_08_07'
binder2_binder2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 75dd43002090da4a857f1c6c99e01276
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the file "binder2.exe," which is associated with auto-generated webshells. It identifies specific strings such as "IsCharAlphaNumericA," "WideCharToM," "g 5pur+virtu!," "\\syslog.en," "heap7'7oqk?not=," and "- Kablto in" within the file. These strings, when found collectively, indicate the presence of the suspicious file.
  Updated-Date: '2024_08_07'
blackenergy3_installer:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 31291ab7b725bf98e15fbb93963224c7
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the BlackEnergy3 installer by identifying a unique code block responsible for the construction of import names within the malware. The code block includes specific hexadecimal sequences that correspond to various import names used by BlackEnergy3, such as "user32.dll", "advapi32.dll", "ws2_32.dll", "shlwapi.dll", "oleaut32.dll", and others. These sequences are signatures of the installer and serve as unique identifiers for detecting the presence of this specific malware.
  Updated-Date: '2024_08_07'
brc4_core:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e15722b54b2395ac70742835009321a0
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of strings associated with Badger, a component of the Brute Ratel C4 framework, up until version 1.2.9 when they are not encrypted. It identifies various specific network states, key system paths, mouse events, key events, date and time formats, decimal and hexadecimal strings, and messages indicating task statuses, errors, and debugging information. The rule focuses on detecting specific strings that are indicative of Badger's behavior and functionalities, such as network operations, user activity monitoring, process handling, and interaction with system resources.
  Updated-Date: '2024_08_07'
brc4_shellcode:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7982100879a52a0898e3876f3d814678
  Ruleset: securityonion-yara
  Summary: This rule detects shellcode opcodes utilized in Badger, an x86/x64 framework, up to version 1.2.9. The rule identifies specific shellcode segments for both the start and end of execution, along with distinct opcode patterns representing various function hashes. It also recognizes hash functions for x64 and x86 architectures. By targeting sequences of these opcodes, the rule aims to detect the presence of malicious shellcode associated with this specific software.
  Updated-Date: '2024_08_07'
by063cli:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d38945ff5083808d618df2751484c4d0
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a webshell-related executable file named "by063cli.exe" based on specific strings within the file, such as the messages "#popmsghello,are you all right?" and "connect failed,check your network and remote ip."
  Updated-Date: '2024_08_07'
by064cli:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ef490dec3c0c05bffeb4b88bfe8ace10
  Ruleset: securityonion-yara
  Summary: "This rule detects the presence of a webshell file named \"by064cli.exe\" by identifying specific strings within the file. The strings include the phrase \"packet dropped, redirecting\" and a prompt for a password with a default value of 'by', suggesting that this webshell may utilize these prompts during its operation. The rule\u2019s detection criteria is based on matching all defined strings."
  Updated-Date: '2024_08_07'
byloader:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ca965368ac62ef793dc222c53f99da4f
  Ruleset: securityonion-yara
  Summary: This rule detects a file named "byloader.exe" that is associated with webshell activity. It identifies specific strings within the file, including references to the NTFSChk service, error messages such as "Failure ... Access is Denied!", and descriptions like "NTFS Disk Driver Checking Service". The rule conditions trigger if all specified strings are found, indicating the presence of this suspicious executable file.
  Updated-Date: '2024_08_07'
byshell063_ntboot:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a356a884a28cf122265ba3d41948c645
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific webshell associated with the file "ntboot.exe". It identifies the webshell by searching for distinct strings in the file, such as references to system registry paths related to "NtBoot", error messages like "Failure ... Access is Denied !", and log entries indicating operations such as "Dumping Description to Registry..." and "Opening Service .... Failure !".
  Updated-Date: '2024_08_07'
byshell063_ntboot_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d27ceb6c9772b18f00f5464bdb04e746
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific webshell file named "ntboot.dll" that contains the string "OK,job was done,cuz we have localsystem & SE_DEBUG_NAME:)". This string suggests the completion of an action, potentially indicating that the webshell has successfully gained system-level privileges and debug rights.
  Updated-Date: '2024_08_07'
c99madshell_v2_0_php_php:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 65139af3dbf77a41c1afda0cfa2fefb0
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a malicious script, specifically targeting the c99madshell version 2.0 web shell. It identifies the script by searching for an encoded string pattern that is typically used to obfuscate and execute malicious payloads using PHP functions `eval()`, `gzinflate()`, and `base64_decode()`.
  Updated-Date: '2024_08_07'
c99shell:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f4a4c165e31df8d21909f548c25d3865
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a webshell known as "c99shell" based on specific patterns found within the file "c99shell.php". It identifies a unique string associated with this webshell which includes an HTML input field for an upload URL. This pattern is a key indicator for the detection of this particular malicious script, which is typically used for unauthorized remote management of web servers.
  Updated-Date: '2024_08_07'
cachedump:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 499a318dcaf48bdaccdf732163c05300
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a tool used by advanced persistent threat (APT) groups, specifically targeting files named cachedump.exe and cachedump64.exe. The tool is identified based on unique strings related to its operations, such as failures in accessing registry keys, issues opening the LSASS.EXE process, and messages pertaining to the installation and termination of the CacheDump service. The rule includes multiple checks for text patterns within executable files smaller than 500KB, focusing on execution and service management functionality typical of CacheDump activities.
  Updated-Date: '2024_08_07'
carbon_metadata:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d6abcec427ee15df7d70e8401eab8f8d
  Ruleset: securityonion-yara
  Summary: This rule detects Turla Carbon malware based on specific internal names "SERVICE.EXE", "MSIMGHLP.DLL", or "MSXIML.DLL" found in the version information of PE (Portable Executable) files, as well as the presence of "Microsoft Corporation" in the CompanyName field.
  Updated-Date: '2024_08_07'
ce_enfal_cmstar_debug_msg:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ad5674e30a6d8cc7a4ebb61f261b24eb
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of static debug strings within CMSTAR to identify the malware. It searches for specific sequences such as "EEE", "TKE", "VPE", "VPS", "WFSE", "WFSS", and "CM**", each followed by a carriage return and newline. These strings are indicative of CMSTAR's debug messages. The rule is triggered when the file begins with the hexadecimal value 0x5a4d, confirming it is a Windows executable file, and all specified debug strings are present.
  Updated-Date: '2024_08_07'
cfm_shell:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: afc8262189e93110d7ec9a3895f10a5c
  Ruleset: securityonion-yara
  Summary: This rule detects a ColdFusion file associated with Laudanum, a set of penetration testing tools. Specifically, it identifies a potentially malicious shell file that allows command execution through a web interface. The rule triggers when the file's size is less than 20KB and contains at least two of the defined suspicious strings, which include references to input forms for executing commands and conditional checks that are characteristic of web shell behavior.
  Updated-Date: '2024_08_07'
cgi_python_py:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7fe8ba5ca0cd1fd248540195fdc38fdf
  Ruleset: securityonion-yara
  Summary: This rule detects a Python script for the Common Gateway Interface (CGI), identified by specific strings within the file. The strings include a reference to "a CGI by Fuzzyman," a line formatting version information, and a lambda function mapping values in a form. These characteristics help in identifying the unique script.
  Updated-Date: '2024_08_07'
cgis4_cgis4:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 13bf71802174aa147ee99e747f4b24af
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the executable file cgis4.exe by identifying specific unique string patterns within the file. The strings include ")PuMB_syJ", "&,fARW>yR", "m3hm3t_rullaz", "7Projectc1", "Ten-GGl\"", and "/Moziqlxa". Matching all of these strings confirms the detection of cgis4.exe.
  Updated-Date: '2024_08_07'
chrome_elf:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7a71f9760d2777ee2548ff4581f04d2f
  Ruleset: securityonion-yara
  Summary: This rule detects the Fireball malware, specifically targeting a malicious file named chrome_elf.dll. It identifies characteristics within the file, including specific strings and patterns related to task scheduling commands, base64 encoded URLs leading to a cloudfront domain, and error messages indicating failures in task-related operations. The detection condition relies on checking the file's header and ensuring the file size is less than 600KB, while matching at least four specified string patterns.
  Updated-Date: '2024_08_07'
churrasco:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 61429d8eff704a0249f8b8ec426f4e0f
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the file churrasco.exe, identified as a Chinese hacktool, by searching for specific strings within the executable. These strings include messages indicating successful command execution as SYSTEM, attempts to run commands with a SYSTEM token, information about impersonating threads, and the discovery of SYSTEM tokens. The rule also checks if the file is a PE (Portable Executable) by verifying its header and ensures that the file size is less than 150KB.
  Updated-Date: '2024_08_07'
clearlog:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 494a0c5f44cc197ee6394e34ef4a6a30
  Ruleset: securityonion-yara
  Summary: This rule detects Fireball malware, specifically targeting the file named clearlog.dll. It identifies the malware by looking for specific patterns such as the path "\\ClearLog\\Release\\logC.pdb", the use of command execution with "C:\\Windows\\System32\\cmd.exe", and filenames like "logC.dll", "hhhhh.exe", and "ttttt.exe". Additionally, it searches for strings like "Logger Name:" and "cle.log.1" within files smaller than 500KB to confirm the presence of the malware.
  Updated-Date: '2024_08_07'
cmdShell:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e93448010ed92cd5dba7b97ec538d59b
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a webshell file named cmdShell.asp. It specifically looks for code that checks if the variable cmdPath is set to "wscriptShell", indicating potential malicious activity involving the WScript.Shell object used for executing commands on a server.
  Updated-Date: '2024_08_07'
cmd_asp_5_1_asp:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4524f65634e39c67e3d32944a56341fb
  Ruleset: securityonion-yara
  Summary: This rule detects a script that executes specific command line actions using the "oS.Run" function. The script runs commands via "cmd.exe" from "win.com," including deleting temporary files and redirecting command output to a file. The presence of these command structures indicates potentially malicious activity.
  Updated-Date: '2024_08_07'
cmdjsp_jsp:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6534f77eb857a035d2a1b34b5b0acd33
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a potentially malicious JSP file named "cmdjsp.jsp.txt," which is capable of executing system commands. Indicated by specific strings, this rule identifies patterns, such as references to both Linux and Windows command execution, Java runtime execution of commands using "cmd.exe /C," and a mention of the website "michaeldaw.org." It requires at least two of these strings to be present to trigger.
  Updated-Date: '2024_08_07'
cndcom_cndcom:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 710b316fcc6a3b8112bcd3a8f42b44ee
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a Chinese hack tool identified as "cndcom.exe." The tool includes various strings indicating its purpose and usage, such as references to a Remote DCOM RPC Buffer Overflow Exploit, warnings about its DOS-like nature, and mentions of specific contributors and modifications by individuals associated with Metasploit and others. Additionally, the rule checks for specific characteristics within the file, including a particular hash value and file size constraints, to determine its presence.
  Updated-Date: '2024_08_07'
commands:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 12dfd3f6bbcdffeb5a1635a3278e3928
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific webshell script named "commands.asp," identified by distinctive strings found within the file. The script includes a check for records in a database using a particular SQL query and contains an array of HTTP headers associated with proxy detection.
  Updated-Date: '2024_08_07'
connectback2_pl:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 111983f14c520f6279abbe101801043d
  Ruleset: securityonion-yara
  Summary: This rule detects a potential ConnectBack backdoor script named "connectback2.pl" and identifies specific patterns associated with its usage. It looks for unique comments left by the creators MasterKid, AleXutz, FatMan, and MiKuTuL, as well as commands related to user information, directory information, and shell activity all within the script, which indicates its malicious functionality in providing unauthorized access to an attacker.
  Updated-Date: '2024_08_07'
connector:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1d497df40aff1e8cd869d8e2c4f9623f
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a webshell via an auto-generated file named "connector.asp". The detection focuses on specific strings including one that checks for a condition involving "BROADCAST_ATTACK" and another that references adding a unique identifier for victims or zombies.
  Updated-Date: '2024_08_07'
crack_Loader:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: fb2e01db3c3ecf2c5d66c0ba2e2a1009
  Ruleset: securityonion-yara
  Summary: This rule detects a file named Loader.exe based on the presence of the string "NeoWait.exe" and the sequence "RRRRRRRW" within the file.
  Updated-Date: '2024_08_07'
crime_h2miner_kinsing:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c5845e8fe6a9994a89679689b2696cea
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of Kinsing malware, characterized by specific strings such as commands related to input, rate, and output, along with the "libpcap" library, various "main" function calls (e.g., backconnect, masscan, checkHealth, redisBrute, RC4, and runTask), and the "ActiveC2CUrl" string. The detection condition is based on an ELF file header, a file size greater than 1MB, and the presence of all listed strings.
  Updated-Date: '2024_08_07'
crime_ole_loadswf_cve_2018_4878:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ef0f8592eb4a665a6040e07335207ca4
  Ruleset: securityonion-yara
  Summary: This rule detects the exploitation of CVE-2018-4878, a remote code execution vulnerability caused by a use-after-free flaw in Adobe Flash version 28.0.0.137 and earlier. Attackers, purportedly from North Korea, embed malicious Flash objects in Microsoft Office payloads. Indicators of compromise include specific embedded Flash object headers, application titles, PDB paths, and loader-related strings within files smaller than 500KB. Mitigations include enabling Protected View for Office documents and disabling Adobe Flash.
  Updated-Date: '2024_08_07'
crime_win32_dridex_socks5_mod:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b850b24ceb380f6d77f0874614b9ce5f
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the Dridex malware's socks5 module by identifying specific DLL files named "socks5_2_x32.dll" and "socks5_2_x64.dll". It also checks for the export of the function "start" within these files. Dridex is a malware primarily used for capturing banking credentials and delivering various malicious payloads.
  Updated-Date: '2024_08_07'
crime_win32_hvnc_banker_gen:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 641a7dd226605a4cf701da070ccca3c5
  Ruleset: securityonion-yara
  Summary: This rule detects a type of banking malware that uses hidden VNC (Virtual Network Computing) functionalities. It specifically identifies software that exports functions named "VncStartServer" and "VncStopServer," which likely indicate the presence of remote control capabilities used for illicit banking activities.
  Updated-Date: '2024_08_07'
crime_win32_parallax_loader_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c01d159649c1ddba707187f60fd13a09
  Ruleset: securityonion-yara
  Summary: This rule detects the Parallax Loader, a type of malicious software. It identifies specific byte patterns within executable files to ascertain the presence of this loader, using a combination of function calls and decoding mechanisms. The conditions focus on matching certain hexadecimal patterns in files smaller than 2MB and verifying the presence of the "MZ" header typical of Windows executables. This approach helps identify instances of the Parallax Loader based on its unique code characteristics.
  Updated-Date: '2024_08_07'
crime_win32_parallax_payload_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7cddc9702d80626fbb5f618ff2b17c8e
  Ruleset: securityonion-yara
  Summary: This rule detects Parallax Injected Payload v1.01, a malicious payload variant often used for remote access and control. Specific byte sequences in the code check for unique assembly instructions and calls, including ones related to `ZwDelayExecution`, `wininet` library functions, and randomized PNG manipulation routines. The condition ensures detection within executable files smaller than 100KB, reinforcing the identification of this particular malware payload.
  Updated-Date: '2024_08_07'
crime_win32_ransom_maze_dll_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0c140e2c8507b26a3e97f301334e4b58
  Ruleset: securityonion-yara
  Summary: "This rule detects the unpacked DLL payload of the Maze ransomware, which is known to encrypt files and leave a ransom note. Specific indicators include the strings \"Maze Ransomware,\" \"--logging,\" and \"DECRYPT-FILES.txt.\" Additionally, it looks for a distinctive sequence of bytes pattern associated with the Maze ransomware\u2019s behavior."
  Updated-Date: '2024_08_07'
crime_win64_backdoor_bazarbackdoor1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 39c29dd620813b12ae84a65d44fcfd89
  Ruleset: securityonion-yara
  Summary: This rule detects a 64-bit BazarBackdoor variant, which is malicious software that enables remote control of an infected system. Key indicators include specific hexadecimal patterns and strings such as "%id%" that are characteristic of BazarBackdoor's code structure and functionality. This particular variant employs sophisticated injection techniques and operates with various functions designed to facilitate covert operation and persistence within a target environment.
  Updated-Date: '2024_08_07'
crime_win_rat_AlienSpy:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: de07743801b64615bb0244eb27ae1a91
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the AlienSpy Remote Access Trojan (RAT), which is a type of malicious software designed to remotely control infected systems. The rule specifically identifies Java-based files associated with AlienSpy, using a combination of file hashes and specific string patterns found within the file structures. It looks for markers like "META-INF/MANIFEST.MF," "Main.classPK," "config.iniPK," "password.iniPK," and other class and configuration file references indicative of AlienSpy. Detection criteria include file size constraints and specific string patterns in the package headers.
  Updated-Date: '2024_08_07'
csh_php_php:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d18f7cd17a6cafe092af5fd45532a01d
  Ruleset: securityonion-yara
  Summary: This rule detects a specific PHP web shell linked to the c0derz group. It identifies the presence of this web shell by checking for particular strings within the file, such as ".::[c0derz]::. web-shell," a URL pointing to "http://c0derz.org.ua," an email address "vint21h@c0derz.org.ua," and a PHP code snippet containing a defined variable and a comment, "$name='63a9f0ea7bb98050796b649e85481845';//root". The detection is triggered if any one of these strings is found.
  Updated-Date: '2024_08_07'
custom_ssh_backdoor_server:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: bce91f253700ec197d20ebeec188770b
  Ruleset: securityonion-yara
  Summary: This rule detects a custom SSH backdoor implemented in Python using the Paramiko library, specifically targeting the `server.py` file associated with this malware. The identification relies on specific strings within the code, such as prompts to input commands and error messages related to failed operations in loading moduli or listening and accepting connections.
  Updated-Date: '2024_08_07'
cyberlords_sql_php_php:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5bd576751d026e8833752d1e0c5bb0a3
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of specific strings within a file associated with "cyberlords_sql.php.php" potentially linked to malicious activity. The targeted strings include a reference to a coder "n0 [nZer0]", a URL "www.cyberlords.net", a base64 encoded string, and an error message related to an HTML file write operation.
  Updated-Date: '2024_08_07'
cyclotron:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d1fb305285b3a5eca22ce3d657386b43
  Ruleset: securityonion-yara
  Summary: This rule detects a specific Chinese hacktool identified as "cyclotron.sys". It looks for particular strings within a file, which include device names and certain functions typically found in goodware. Specifically, the strings it searches for are "\\Device\\IDTProt", "IoDeleteSymbolicLink", "\\??\\slIDTProt", "IoDeleteDevice", and "IoCreateSymbolicLink". The rule applies to files that start with the hexadecimal value 0x5a4d and are smaller than 3KB.
  Updated-Date: '2024_08_07'
datPcShare:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b4924dc693554a246a38c1dd496348a1
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a Chinese hacktool identified as datPcShare.exe, characterized by specific strings such as "PcShare.EXE," "MZKERNEL32.DLL," "PcShare," and "QQ:4564405." It targets files smaller than 500KB, beginning with the hexadecimal value 0x5a4d.
  Updated-Date: '2024_08_07'
dat_NaslLib:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9ef784fece323bef7cf76e3c86c94c7d
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a Chinese hacktool associated with a file known as NaslLib.dll. It identifies specific text strings related to network socket connections, the completion status of unknown operations with timestamps, and a reference to an FsSniffer backdoor running on a particular port. The detection is based on these unique characteristics found within the file, ensuring it matches certain file structure criteria and remains within a specific size limit.
  Updated-Date: '2024_08_07'
dat_report:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 22aacdcc835a11b1113ddd4d6a27dca5
  Ruleset: securityonion-yara
  Summary: This rule detects a particular Chinese hacktool identified as report.dll. It looks for the presence of specific strings such as a hyperlink to X-Scan and the phrase "REPORT-ANALYSIS-OF-HOST." Additionally, the targeted file must start with the hexadecimal value 0x5a4d, which denotes a Windows executable, and must be smaller than 480KB in size. The rule uses these characteristics to identify the specific malicious file.
  Updated-Date: '2024_08_07'
dbexpora:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 900d189e73660557fe40aad7a6b82f61
  Ruleset: securityonion-yara
  Summary: This rule detects a specific hacking tool, identified as dbexpora.dll, associated with a Chinese hacktool set. The tool utilizes Oracle database-related functionalities, indicated by strings such as "SELECT A.USER FROM SYS.USER_USERS A" and references to Oracle Call Interface (OCI) and ORACommand. The rule triggers based on specific binary characteristics, ensuring the file's identifier matches and its size is under a defined threshold.
  Updated-Date: '2024_08_07'
dbgiis6cli:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 862a5a6f43b0de206ac28a77258a2e24
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the dbgiis6cli.exe file, which is identified as a webshell. It triggers on specific strings within the file, including a User-Agent string mimicking Internet Explorer 5.01 on Windows NT 5.0, and a command instruction that must not exceed 100 bytes.
  Updated-Date: '2024_08_07'
dbgntboot:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e70672a5db2e1d4461a831d9520d3498
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a webshell associated with the file "dbgntboot.dll". It specifically looks for certain textual patterns within the file, such as "now DOS is working at mode %d,faketype %d,against %s,has worked %d minutes,by sp" and "sth junk the M$ Wind0wZ retur". These patterns are indicative of auto-generated content in the suspected malicious DLL file.
  Updated-Date: '2024_08_07'
derusbi_kernel:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0f88a42dff97c81fbc7fc623b023a1b7
  Ruleset: securityonion-yara
  Summary: This rule detects the Derusbi driver, a type of malware. It specifically searches for certain identifying strings, including "$$$--Hello", "Wrod--$$$", and the class identifier ".?AVPCC_BASEMOD@@". Additionally, the rule ensures the binary file has the "MZ" header, indicating it is a Windows executable.
  Updated-Date: '2024_08_07'
derusbi_linux:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f66e70ff3d1bccadfd16605b1a6bb2d8
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the Derusbi malware targeting Linux servers. Key indicators include a specific prompt string ($PS1), a command to unset LS_OPTIONS and display system information ($cmd), a process name disguised as "[diskio]" ($pname), and a hidden file located at "/tmp/.secure" ($rkfile). It also confirms the malware's presence by identifying that the file is in the ELF binary format.
  Updated-Date: '2024_08_07'
dll_PacketX:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7d455798ee074704c97e94cdb873a8a9
  Ruleset: securityonion-yara
  Summary: This rule detects a specific DLL file named PacketX.dll, which is identified as a Chinese hack tool. The DLL serves as an ActiveX wrapper for the WinPcap packet capture library. Indicators include specific strings within the file, such as error messages related to loading winpcap packet.dll and a version string for PacketX, along with a specific hash value. The file must also meet certain conditions regarding its header and size to trigger the detection.
  Updated-Date: '2024_08_07'
dll_Reg:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6123e98b5623ea8641e1c972cc537bc2
  Ruleset: securityonion-yara
  Summary: This rule detects a Chinese hacktool associated with the file "Reg.bat." It identifies specific instructions that copy the "PacketX.dll" file to the Windows system32 directory and subsequently register it using the "regsvr32.exe" utility. The rule targets files that are smaller than 1KB and contain both these specific strings.
  Updated-Date: '2024_08_07'
dll_UnReg:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f9bd28bdfb850711fed1dbd8873c504a
  Ruleset: securityonion-yara
  Summary: This rule detects a batch file named "UnReg.bat," associated with a Chinese hacktool set. The file executes commands to unregister and delete a DLL file named "PacketX.dll" located in the Windows system directory. Both actions involve using `regsvr32.exe` for unregistration and `del` for deletion. The rule applies to files less than 1KB in size and triggers if any of the specified strings are present.
  Updated-Date: '2024_08_07'
dnscat2_Hacktool:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2db766aaef879586d852dc772737b19d
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of dnscat2, a hacking tool known for executing processes and maintaining covert communications. The detection is triggered by specific strings associated with dnscat2, such as execution commands and logging formats, within files named dnscat or dnscat2.exe. The rule verifies the file type and size to confirm it is under 400KB and matches at least two of the identified strings or all of them. This helps in identifying malicious activities linked to dnscat2, which is known for linking processes to streams and managing command executions stealthily.
  Updated-Date: '2024_08_07'
down_rar_Folder_down:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 13d1815e71f69e08a1705be1f446b363
  Ruleset: securityonion-yara
  Summary: 'This rule detects a specific webshell file named "down.asp" by searching for the presence of the string `response.write "<font color=blue size=2>NetBios Name: \\\\\" & Snet.ComputerName &`. This string is a piece of script that outputs the NetBIOS name of the computer in a blue font, likely indicating that the script is attempting to gather and display system information.'
  Updated-Date: '2024_08_07'
dubseven_dropper_dialog_remains:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4ee3c1bb729975daabcd85979920aa69
  Ruleset: securityonion-yara
  Summary: This rule detects dialog remnants associated with a specific dropper malware, identified by the presence of the strings "fuckMessageBox 1.0" and "Rundll 1.0" in wide format within executable files. The condition checks for a proper MZ header and PE signature to confirm the file is a valid Windows executable.
  Updated-Date: '2024_08_07'
dubseven_dropper_registry_checks:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1d19ab3a949c4091874b42de75bc6861
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a dropper by searching for specific registry keys associated with several antivirus software programs. The rule identifies registry entries from software like 360Safe, Kingsoft Antivirus, Avira, Rising Antivirus, JiangMin, and Micropoint Anti-Attack. The detection criteria include verifying the MZ header and PE signature in the executable files.
  Updated-Date: '2024_08_07'
dubseven_file_set:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4a146c2ce8ad3b1ce5483c4822964cea
  Ruleset: securityonion-yara
  Summary: This rule detects service files associated with UP007 by searching for specific file paths commonly linked to Internet Explorer. The targeted files include executables and DLLs such as conhost.exe, dll2.xor, HOOK.DLL, main.dll, nvsvc.exe, SBieDll.dll, and runas.exe. The presence of at least three of these files alongside valid MZ and PE headers triggers detection.
  Updated-Date: '2024_08_07'
eBayId_index3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d7b51cb04f33193efc96d461c171ef29
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of index3.php webshells by identifying a specific string pattern, which includes the phrase "$err = \"<i>Your Name</i> Not Entered!</font></h2>Sorry, \\\"You". This pattern suggests an auto-generated webshell file that contains error handling messages in its code.
  Updated-Date: '2024_08_07'
elmaliseker:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 36074aab9fad8a1e5decb0702138e29c
  Ruleset: securityonion-yara
  Summary: This rule detects a specific webshell file named "elmaliseker.asp" by looking for the strings "javascript:Command('Download'" and "zombie_array=array(". The presence of both strings in a file indicates it may be part of an auto-generated webshell.
  Updated-Date: '2024_08_07'
elmaliseker_asp:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c6ac453f1a1ac302135d760de30035cf
  Ruleset: securityonion-yara
  Summary: This rule detects a suspicious ASP file named "elmaliseker.asp.txt" potentially associated with malicious activities. It looks for specific strings within the file, including a script snippet generating an email address using random text, a form submission command, a declaration of specific arrays, and a reference to "http://vnhacker.org". These patterns suggest that the file may be involved in generating or managing email addresses, handling form submissions, and potentially contacting an external site.
  Updated-Date: '2024_08_07'
endor:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c1c914ab6283b48c998d19bd1405cb09
  Ruleset: securityonion-yara
  Summary: 'This rule detects the Endor malware family by identifying specific string patterns related to user authentication. It looks for the presence of "user: %s" and "password: %s" strings within a certain proximity in SSH binary files, indicating potential malicious activity linked to this malware.'
  Updated-Date: '2024_08_07'
epathobj_exp32:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1c0b7c4ad22655df4c3d267d982d2a7d
  Ruleset: securityonion-yara
  Summary: This rule detects the Chinese hacktool named "epathobj_exp32.exe." It identifies specific strings within the executable, including messages related to a watchdog thread waiting on a mutex, a successful exploit execution, a file path reference to epathobj_exp.pdb, allocation of userspace path records, and a mutex object not timing out. The executable is characterized by having a specific file size of under 270KB and a PE file header signature.
  Updated-Date: '2024_08_07'
epathobj_exp64:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a588f5fdb507a3f8d85d8aabc679b290
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific Chinese hacktool known as "epathobj_exp64.exe," which is associated with various suspicious strings and behaviors. It identifies an executable file with a particular hash value and filesize, containing strings such as "Watchdog thread %d waiting on Mutex," "Exploit ok run command," and file path references like "\\epathobj_exp\\x64\\Release\\epathobj_exp.pdb." These strings indicate activities related to user space allocation, watchdog thread management, and potential exploitation attempts. This hacktool is characterized by its specific code constructs and behaviors as described.
  Updated-Date: '2024_08_07'
f3_diy:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8431dd7f01b955a7dc607be798d8f280
  Ruleset: securityonion-yara
  Summary: This rule detects a Chinese hacktool set specifically targeting the file diy.asp. The file contains VBScript encoded in the Chinese code page 936, as well as specific HTML content including a ".black" CSS class. The file begins with a particular 16-bit value and is smaller than 10KB.
  Updated-Date: '2024_08_07'
fgexec:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4b9d118c3b493cbcdc8ad39787a20d65
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the 'fgexec.exe' tool, which is associated with usage by Advanced Persistent Threat (APT) groups. It identifies the executable using specific strings within the file, including references to its release, execution capabilities, error messages, and development team acknowledgments. Additionally, the rule checks for a particular file signature and ensures the file size is under 100KB, reinforcing the identification of the 'fgexec' tool.
  Updated-Date: '2024_08_07'
fmlibraryv3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 46864ec163ef1afba426aa7e6ea79cb1
  Ruleset: securityonion-yara
  Summary: This rule detects a specific webshell file named "fmlibraryv3.asp" by searching for the string "ExeNewRs.CommandText = \"UPDATE \" & tablename & \" SET \" & ExeNewRsValues & \" WHER", indicating a command execution related to database updates.
  Updated-Date: '2024_08_07'
fuckphpshell_php:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 54b9f8f356e6ae9644ab7735c9814d72
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific PHP web shell file. The identified PHP shell displays custom warning messages such as "Don`t be stupid .. this is a priv3 server, so take extra care!" and includes tags like "\\*=-- MEMBERS AREA --=*/". Additionally, it uses PHP functions such as `preg_match` in its operations, indicating a script-driven detection mechanism. It's specifically designed to recognize and flag the PHP script based on distinct patterns in the code.
  Updated-Date: '2024_08_07'
gen_Excel_xll_addin_suspicious:
  Created-Date: '2024_08_06'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 725be5c326c704e36d811263eb814f9a
  Ruleset: securityonion-yara
  Summary: This rule detects suspicious XLL add-ins to Excel by identifying specific characteristics and behaviors often associated with malicious activity. It targets files smaller than 1MB recognized as DLLs with the "xlAutoOpen" export, indicative of Excel add-ins. Special attention is given to the presence of certain imported functions like "LookupPrivilegeValue", "AdjustTokenPrivileges", and "OpenProcess" from the KERNEL32.dll, along with "CryptDecrypt" and "CryptImportKey" from the ADVAPI32.dll. Additionally, the rule looks for DNS queries, resource handling and memory manipulation functions, thread context management, and specific debug privileges. The combination of these factors helps pinpoint potentially harmful Excel XLL add-ins.
  Updated-Date: '2024_08_06'
gen_excel_auto_open_evasion:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f192181f6378f47b0e7ea9803ab59e77
  Ruleset: securityonion-yara
  Summary: This rule detects obfuscated Auto_Open cell names in Excel files defined using the BIFF8 format. The detection is focused on identifying a specific pattern of characters that represent the obfuscated "auto_open" string. The rule is configured to target Excel files smaller than 1MB and those identified by the magic number for OLE compound file format, ensuring it specifically examines older Excel formats typically used in obfuscation attempts.
  Updated-Date: '2024_08_07'
gen_excel_xor_obfuscation_velvetsweatshop:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: cae311d439d25fa4867c17c9adcd981e
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of XOR encryption within older Excel file formats, specifically referencing an encryption method from around 2003 known as "VelvetSweatshop." The rule utilizes specific markers associated with Object Linking and Embedding (OLE) files and distinct hexadecimal patterns that indicate the use of this particular encryption technique in Excel documents.
  Updated-Date: '2024_08_07'
gen_macro_ShellExecute_action:
  Created-Date: '2024_08_06'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c360ef045eed08ec39192801831e9677
  Ruleset: securityonion-yara
  Summary: This rule detects VBA macro techniques that use the ShellExecute function to launch payloads. It identifies specific patterns of strings and codes related to these techniques within files smaller than 1MB. The rule focuses on the presence of strings such as "ShellExecute" and "GetObject" and checks for specific byte patterns at the beginning of the file.
  Updated-Date: '2024_08_06'
gen_python_encoded_adware:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c4bd2c1f7c3595300a7f92ac13423b62
  Ruleset: securityonion-yara
  Summary: This rule detects an encoded Python payload associated with adware. It identifies code segments that involve base64 decoding by checking for the presence of the specific string pattern `=__import__("base64").b64decode`. Additionally, it looks for certain markers such as the string `bytes(map(lambda` and the expression `[1]^`, ensuring that these indicators are within files smaller than 100KB in size and positioned within specific offsets in the file.
  Updated-Date: '2024_08_07'
gen_python_pyminifier_encoded_payload:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 143b6732170ea4107efe8790b6e11061
  Ruleset: securityonion-yara
  Summary: This rule detects python code encoded by pyminifier, specifically used by the Machete malware, which was studied by ESET. It identifies suspicious files that are less than 20KB in size and ensures that the file begins with the 'import' statement. The rule flags files containing specific strings related to base64 encoding, zlib compression, and a distinctive pattern in the encoded payload.
  Updated-Date: '2024_08_07'
gen_python_reverse_shell:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5af03f3e1d7afcae8b38c3df48b65a39
  Ruleset: securityonion-yara
  Summary: This rule detects a Python-based reverse shell script that is encoded using Base64. The script imports the base64 module and uses several key Python features and modules including `b64decode`, `lambda`, and `version_info`. The rule identifies Base64 encoded strings that represent the usage of `socket.SOCK_STREAM`, `.connect((`, `time.sleep`, and `.recv` functions. Additionally, it ensures the presence of these encoded elements in a file smaller than 40KB and verifies that the file starts with specific byte sequences.
  Updated-Date: '2024_08_07'
gen_suspicious_InPage_dropper:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 38a322eb9f349d4e4367dc22795825f3
  Ruleset: securityonion-yara
  Summary: This rule detects a suspicious dropper associated with InPage documents, specifically targeting instances where malicious InPage Arabic documents are used. It looks for specific byte patterns and strings within files smaller than 3MB and checks for a particular file header signature to identify potential threats.
  Updated-Date: '2024_08_07'
gen_unicorn_obfuscated_powershell:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: defb2b60dce9a69c7142be348b8c071b
  Ruleset: securityonion-yara
  Summary: This rule detects an obfuscated PowerShell payload created using the Unicorn toolkit. The toolkit generates this payload, which includes specific patterns such as the string "powershell" at the beginning, certain value.toString() sequences, and specific command line indicators like "-w 1 -C \"s". The rule also checks for specific footer patterns towards the end of the file and ensures the file size is less than 20KB.
  Updated-Date: '2024_08_07'
generic_carbon:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 93f708f697693ae578623dfd5b215c68
  Ruleset: securityonion-yara
  Summary: This rule detects the Turla Carbon malware by searching for specific string patterns within a file. It checks for the presence of the string "ModStart" and either "STOP|OK" or "STOP|KILL", alongside ensuring the file starts with the hexadecimal value 0x5a4d. Turla Carbon is recognized as a sophisticated backdoor used in advanced cyber-espionage operations.
  Updated-Date: '2024_08_07'
generic_shellcode_downloader_specific:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 023ccefd8e0f20cab9b19ddeb5a6cadf
  Ruleset: securityonion-yara
  Summary: This rule detects Doorshell, a type of malware reported by the NCSC, using specific byte sequences within executable files. It focuses on identifying a particular pattern where certain strings appear in a specific order, indicating the presence of malicious elements associated with Doorshell. The rule looks for indicators tied to a specific hash and ensures the detection is accurate by verifying the order and presence of these strings.
  Updated-Date: '2024_08_07'
genhash_genhash:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5f4dfec5843d642620f71006f5a831a9
  Ruleset: securityonion-yara
  Summary: "This rule detects the presence of the file 'genhash.exe', which is a tool used for generating LM and NT password hashes. It identifies specific strings related to the tool\u2019s functionality, such as the command format for generating hashes, explicit references to generating LM and NT hashes, and the format in which these hashes are output. The rule is also conditioned on the specific size and structure of the file."
  Updated-Date: '2024_08_07'
gina_zip_Folder_gina:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5000c348a3b2a046092ee31c2782dc27
  Ruleset: securityonion-yara
  Summary: This rule detects a specific disclosed hacktool known as "gina.dll." The detection is based on several unique ASCII string signatures present within the file, including "NEWGINA.dll," "LOADER ERROR," and various "Wlx" function-related strings like "WlxActivateUserShell" and "WlxShutdown." Additionally, it looks for certain error messages, such as "The procedure entry point %s could not be located in the dynamic link library %s" and "The ordinal %u could not be located in the dynamic link library %s," to confirm the presence of the hacktool.
  Updated-Date: '2024_08_07'
git_CVE_2017_9800_poc:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8368e8dc91940c3e81d346b563c77d7c
  Ruleset: securityonion-yara
  Summary: This rule detects an exploitation attempt of CVE-2017-9800, specifically targeting Git commands that misuse the `clone` operation with potentially harmful parameters such as `ssh://-oProxyCommand=`, `http://-`, and `https://-`. The condition is met if the file size is under 200KB and at least one of the specified malicious Git clone patterns is found.
  Updated-Date: '2024_08_07'
glassRAT:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e3cbab49b79b1a71291615c19cf79a57
  Ruleset: securityonion-yara
  Summary: This rule detects the GlassRAT malware, which is known for its malicious activities. It identifies specific binary patterns in the executable code and looks for unique hexadecimal strings and keywords associated with GlassRAT's operations, including indicators related to its initialization, file management, and service names. The rule scans for specific sequences of instructions and string data that the GlassRAT typically uses, ensuring a comprehensive detection based on its characteristic behavior and structure.
  Updated-Date: '2024_08_07'
h4ntu_shell__powered_by_tsoi_:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4c5ff60f1d8af0a49033b4e8defba6fa
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the h4ntu shell, specifically identifying signs of its usage through code snippets such as invocation of system commands and temporary file handling in Unix-like systems.
  Updated-Date: '2024_08_07'
hkdoor_backdoor:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7136c7e3d96fa661e40234dda3afd5e8
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the Hacker's Door backdoor by identifying specific strings associated with it. These strings include a reference to a URL ("http://www.yythac.com"), an example network connection command, a password indicator, a version statement, a DLL file name ("hkdoordll.dll"), another URL linked to an image ("http://www.yythac.com/images/mm.jpg"), a specific hexadecimal string, and an email address ("yythac.yeah.net"). The rule triggers when the file starts with the hexadecimal value 0x5a4d, is smaller than 400KB, and contains at least four of these specified strings.
  Updated-Date: '2024_08_07'
hkdoor_backdoor_dll:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3f8e144e9814ee7dd53fb992dea6c909
  Ruleset: securityonion-yara
  Summary: This rule detects the Hacker's Door backdoor DLL. It identifies the malicious DLL by searching for specific ASCII strings within the file, such as "The version of personal hacker's door server is," "The connect back interval is %d (minutes)," "I'mhackeryythac1977," and others related to a personal hacker's door server. Additionally, the file must meet certain conditions, such as having a file size less than 400KB, being a DLL, and importing specific functions from the "ws2_32.dll" library, like "WSAStartup" and "sendto." These criteria help pinpoint the presence of this backdoor in potentially malicious DLL files.
  Updated-Date: '2024_08_07'
hkdoor_driver:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: aa5330517e21984c26f039946bcf4878
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of "Hacker's Door Driver," which is a malicious driver file used by cyber attackers. It identifies specific characteristics of the driver, including the filename "ipfltdrv.sys," the success message "Patch Success.," and device references "\\DosDevices\\kifes" and "\\Device\\kifes." Additionally, it looks for a particular hexadecimal string pattern within the file. The driver operates within the native Windows subsystem and begins with the 'MZ' header typical of executable files.
  Updated-Date: '2024_08_07'
hkdoor_dropper:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e7ef96bb051fb2273f8654b909884804
  Ruleset: securityonion-yara
  Summary: This rule detects a dropper for the malicious software "Hacker's Door," which is designed to install and execute malicious components. It looks for specific strings associated with the dropper, such as version information of the "personal hacker's door server," a connection back interval, and references to a website and certain privileges. Additionally, it identifies specific system drivers and keywords. The rule also includes conditions related to the file structure, such as checking for the "MZ" header, file size limits, the presence of resources with particular types, and imports of certain functions from KERNEL32.dll.
  Updated-Date: '2024_08_07'
hkdoordll:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9b597e968beed7375fa77780a09b4ceb
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a webshell named "hkdoordll.dll," specifically by identifying the unique string "Can't uninstall, maybe the backdoor is not installed or, the Password you INPUT is," which suggests the presence of a backdoor mechanism within the file.
  Updated-Date: '2024_08_07'
hkmjjiis6:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 73b73e5ec03280427aadcb147bfdee9c
  Ruleset: securityonion-yara
  Summary: This rule detects a Chinese hacking tool known as "hkmjjiis6.exe." It identifies specific strings within the executable, such as "comspec," "user32.dlly," "runtime error," and "wmiprvse.exe," among others. The presence of these strings, combined with a specific file structure and a file size of less than 70KB, are used to identify the tool. The rule aims to flag this executable based on these distinguishing characteristics.
  Updated-Date: '2024_08_07'
hkshell_hkrmv:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: bb18d0a0a5cc60bcfea7e11fad730608
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific webshell file known as hkrmv.exe. The webshell is identified through distinct signatures found within the file, such as the string "/THUMBPOSITION7" and the directory path "\\EvilBlade\\". The detection relies on the presence of both of these unique patterns.
  Updated-Date: '2024_08_07'
hkshell_hkshell:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2edfb4bee9a08f73074c1227cab97e39
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a webshell named "hkshell.exe" based on specific strings found within the file. These strings include "PrSessKERNELU," "Cur3ntV7sion," and "Explorer8." The detection is triggered if all these strings are identified within the file, indicating a potential malicious webshell.
  Updated-Date: '2024_08_07'
hscan_gui:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4019dbd20ba6612022ccb10cce611c2b
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a Chinese hacktool named hscan-gui.exe by identifying specific strings within the executable file, such as "Hscan.EXE", "RestTool.EXE", and "Hscan Application". The detection criteria include verifying that the file starts with the magic number 0x5a4d, indicating it is a Windows executable, and that the file size is less than 550KB.
  Updated-Date: '2024_08_07'
hscangui:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8b828bce72ef2d2fee08300f780c9cf8
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the Chinese hacktool known as "hscangui.exe". It identifies the tool by specific strings within the file, such as messages indicating a found FTP account, a URL pointing to "cnhonker.com", and messages related to cracked FTP accounts. The detection is based on these characteristic strings and ensures that the file is less than 220KB and starts with the specified header.
  Updated-Date: '2024_08_07'
hxdef100:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 73b8fed83a929a9812709e345eeda42b
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a webshell characterized by auto-generated components within the file named hxdef100.exe. It matches specific strings related to system functions and registry keys, such as "RtlAnsiStringToUnicodeString," a registry path "SYSTEM\\CurrentControlSet\\Control\\SafeBoot\\," and a mailslot path "\\\\.\\mailslot\\hxdef-rk100sABCDEFGH." These indicators are used to identify the malicious file based on its unique behaviors and signatures.
  Updated-Date: '2024_08_07'
hxdef100_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 04823251981465dc01ac423acfbc1f6c
  Ruleset: securityonion-yara
  Summary: This rule detects a specific file named `hxdef100.exe`, which appears to be associated with webshells. It identifies the presence of unique system strings, including a reference to a mailslot (`\\.\mailslot\hxdef-rkc000`), shared components related to an "On Access Scanner" (`Shared Components\On Access Scanner\BehaviourBlo`), and a registry path linked to system safe boot configurations (`SYSTEM\CurrentControlSet\Control\SafeBoot\`).
  Updated-Date: '2024_08_07'
hydra_7_3_hydra:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ee0a67ccc054c38ae9129af9251198bc
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a Chinese hacktool identified as "hydra.exe." The detection is based on multiple ASCII string signatures indicative of the tool's operations, like error messages during login attempts, specific LDAP queries, SMB error messages, and command syntax used in the tool. The file must have a specific magic number indicating a PE file and be under a specified size for the rule to trigger.
  Updated-Date: '2024_08_07'
hydra_7_4_1_hydra:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0fb51565bd7fe20756a3d669099b016c
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a Chinese hacktool named hydra.exe by identifying specific text strings within the file. These strings are related to the operation and error messages of the software, including phrases about ongoing brute-force attacks, errors related to password changes and expirations, and specific commands executed by the tool. This detection aims to identify unauthorized usage of the hydra software, which is employed for network penetration testing, by scanning for certain known textual indicators in files of a size less than 1000KB.
  Updated-Date: '2024_08_07'
iKAT_Tool_Generic:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 08030ba5b9e349c3f6d7a3f603a50b5e
  Ruleset: securityonion-yara
  Summary: This rule detects files related to the iKAT hacking tool, specifically targeting the executables gpdisable.exe, kitrap0d.exe, and uacpoc.exe. The rule looks for specific strings within these files, such as paths to icons, error messages, version details, file paths, encryption indicators, and script execution cues. These identifiers help in recognizing the presence of iKAT tool components on the system, which are known for bypassing security mechanisms and performing unauthorized administrative tasks.
  Updated-Date: '2024_08_07'
iKAT_cmd_as_dll:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1d4dd3ef204b62757df0b6d61619fd85
  Ruleset: securityonion-yara
  Summary: This rule detects a cloaked iKAT toolset file named cmd.dll that mimics a legitimate ReactOS file. It searches for specific wide strings within the file, including "cmd.exe," "ReactOS Development Team," and "ReactOS Command Processor," alongside the file extension ".dll" to identify the malicious file accurately.
  Updated-Date: '2024_08_07'
iKAT_command_lines_agent:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6cb95391833812b8e265871b0f4162a5
  Ruleset: securityonion-yara
  Summary: 'This rule detects the iKAT hack tools set agent, specifically targeting the file "ikat.exe." It identifies unique strings associated with the executable, including references to "Extended Module: super mario brothers," "ofpurenostalgicfeeling," "-supermariobrotheretic," and a specific URL "http://132.147.96.202:80." The rule also looks for the term "iKAT Exe Template" and other distinctive phrases tied to the iKAT hack tools. Detection is based on the presence of four or more of these unique strings within a file.'
  Updated-Date: '2024_08_07'
iKAT_priv_esc_tasksch:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 08b2b30ce41506f37eeb46730667d35e
  Ruleset: securityonion-yara
  Summary: This rule detects a local privilege escalation exploit on Windows systems utilizing the Task Scheduler, specifically targeting Windows 7 and Vista. The exploit, published by webDevil and available on the iKAT website, involves creating, modifying, and running scheduled tasks with elevated privileges. It includes specific commands and script lines for disabling, running, copying, and deleting scheduled tasks, as well as adding new user accounts and elevating their privileges. The rule identifies unique strings associated with these actions, such as references to "wDw00t" tasks and command executions that manipulate Task Scheduler operations and user management on the system.
  Updated-Date: '2024_08_07'
iKAT_revelations:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 91b9a7d04fb66e43553cd0ed9ff771ea
  Ruleset: securityonion-yara
  Summary: This rule detects the iKAT hack tool associated with the file "revelations.exe," which is used to reveal the content of password fields. It identifies specific strings within the file such as error messages indicating a corrupt or missing "RevelationHelper.DLL" file, support email addresses linked to "snadboy.com," and references to the "RevelationHelper.dll." The rule ensures detection by requiring the presence of all these strings.
  Updated-Date: '2024_08_07'
iKAT_startbar:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 112e40a8d8c08bc6e1fa656d5db212a6
  Ruleset: securityonion-yara
  Summary: This rule detects a tool called "startbar.exe" that is used to hide or unhide the Windows startbar via command line. It specifically looks for strings associated with the tool, such as "Shinysoft Limited1," "Wellington1," and "New Zealand1," among others. The rule identifies these strings in their entirety and in ASCII encoding, ensuring the precise detection of the "startbar.exe" file related to iKAT hack tools.
  Updated-Date: '2024_08_07'
iKAT_tools_nmap:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3ff6b7c66bd083f6264d7c00d7453293
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of Nmap, a network scanning tool developed by Insecure.Org. The rule identifies specific strings within files, including phrases indicating ownership and copyright by Insecure.Com, the presence of the term "nmap" regardless of case, and a unique alert phrase about using Nmap. Such detections help in identifying the usage or presence of this network scanning tool on systems.
  Updated-Date: '2024_08_07'
iKAT_wmi_rundll:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 913c2500f855210fa2dd1fe6be3a4651
  Ruleset: securityonion-yara
  Summary: This rule detects an executable that attempts to use Windows Management Instrumentation (WMI) to call the Win32_Process event to spawn 'rundll.exe'. The specific file targeted is named 'wmi_rundll.exe' and contains certain strings such as error messages, DLL names, and specific script references. The file must also be smaller than 15KB in size.
  Updated-Date: '2024_08_07'
iMHaPFtp:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d51407fc929d3386d2106a848e40b7f2
  Ruleset: securityonion-yara
  Summary: This rule detects a specific web shell file named "iMHaPFtp.php" that is auto-generated. It identifies this web shell through a unique text string within the file, which includes an HTML table header element with specific class attributes and a dynamically constructed hyperlink used for sorting permissions.
  Updated-Date: '2024_08_07'
iam_alt_iam_alt:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 93b4e41e94dcbfd3df439760b760d9bb
  Ruleset: securityonion-yara
  Summary: This rule detects the executable file "iam-alt.exe," a tool developed by Hernan Ochoa of Core Security Technologies. The software IAM-ALT v1.1 allows users to modify the NTLM credentials of the current logon session, enabling the creation of new logon sessions and the execution of commands with specified credentials. Notable strings in the file include error messages related to command line issues and the inability to open LSASS.EXE, as well as an indicator of the LSASS handle as a hexadecimal value. The rule identifies the file by examining specific strings and its properties, particularly its size and certain initial bytes.
  Updated-Date: '2024_08_07'
iam_iam:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0365d447f1bb9d618b66268dd27b88b9
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the "iam.exe" executable file, which is associated with creating new logon sessions and executing commands with specified credentials. The file contains particular strings that signify its functionality, such as error messages encountered during credential changes, descriptions of optional parameters for troubleshooting, and its methods for locating memory without hard-coded values. It also includes checks and specific commands related to its operation, such as verifying the LSASRV.DLL. These characteristics strongly indicate the behavior and purpose of the "iam.exe" executable in handling user sessions and credentials.
  Updated-Date: '2024_08_07'
iam_iamdll:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: cf62c7dc834315ce265974215acb2b86
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a malicious DLL file named "iamdll.dll", which interacts with "LSASRV.DLL" and contains the string "ChangeCreds". The file signature indicates it is a Windows executable with a specific hash value and is relatively small in size, under 115KB. The detection criteria include matching specific strings within the file content to identify potentially harmful behavior associated with credential manipulation.
  Updated-Date: '2024_08_07'
icyfox007v1_10_rar_Folder_asp:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d92765162423fb878b392c3ee1ad1fc8
  Ruleset: securityonion-yara
  Summary: This rule detects a webshell classified as "asp.asp", which is typically used in the exploitation of web servers. The script, written in JavaScript and running server-side, evaluates input from an HTTP form request and executes it. This method is commonly used by attackers to deploy malicious code on compromised servers.
  Updated-Date: '2024_08_07'
indexer_asp:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2b98daef449613ad901ee2faa460cd6f
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific ASP file, likely used for indexing, characterized by distinct strings within its code. One identified string is an HTML form field indicating "nereye" with specified input size, while another involves a unique encoded sequence followed by HTML input and submit elements. These markers aid in identifying and analyzing specific behaviors or intentions within the file.
  Updated-Date: '2024_08_07'
install_get_persistent_filenames:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0072b4493831105ff44237716342c2cc
  Ruleset: securityonion-yara
  Summary: This rule detects a specific tool within the EQGRP (Equation Group) Toolset, specifically targeting a firewall module associated with a file named "install_get_persistent_filenames." It identifies the tool by checking for a particular 16-bit unsigned integer at the beginning of the file and matching a specific ASCII string that describes the functionality of generating and printing out a persistence file name. A unique hash value is also noted to aid in precise identification.
  Updated-Date: '2024_08_07'
installer:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 35c4db20b39966cc576311c3887dcbfe
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a webshell auto-generated file named "installer.cmd" by identifying specific strings within the file, such as "Restore Old Vanquish" and "ReInstall Vanquish."
  Updated-Date: '2024_08_07'
ipsearcher:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d4d5a5cf1a316ca1b2de48d55b2a8178
  Ruleset: securityonion-yara
  Summary: 'This rule detects a Chinese hack tool identified as "ipsearcher.dll." The rule looks for the presence of specific strings: a URL ("http://www.wzpg.com"), a file path related to the development environment ("ipsearcher\\ipsearcher\\Release\\ipsearcher.pdb"), a function name ("_GetAddress"), and the dynamic link library file name itself ("ipsearcher.dll"). Additionally, it checks if the file begins with the hexadecimal value 0x5a4d and if its file size is less than 140KB.'
  Updated-Date: '2024_08_07'
ironshell_php:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 924778677a9e366443c0d334e26198cf
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a potentially malicious PHP file named "ironshell.php" by searching for specific strings within the file. These strings include references to the website "www.ironwarez.info," the setting of a cookie with the name "wieeeee," the phrase "~ Shell I," the website "www.rootshell-team.info," and a command that sets a cookie using a POST request with a specific password.
  Updated-Date: '2024_08_07'
item_301:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 747fcdf6b4fbbc9ed9f7f4dbaff9d1e6
  Ruleset: securityonion-yara
  Summary: This rule detects a Chinese hacktool file named "item-301.php". It identifies the file based on the presence of specific code patterns, such as a URL concatenation expression, a regex pattern targeting Chinese government domains, an array splitting operation on a string with space delimiters, and an assignment operation involving parts of the split array. The conditions check for a file size under 3KB and the presence of at least three of these strings to confirm the detection.
  Updated-Date: '2024_08_07'
item_old:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: bf0f596ccbb2e8772d07423b5d65925d
  Ruleset: securityonion-yara
  Summary: This rule detects a specific Chinese hacktool identified by the presence of a PHP file named "item-old.php." The detection is based on the content of the file, which includes commands for downloading files using 'wget,' manipulating images using 'convert,' and generating MD5 hashes of URLs. The rule triggers if the file size is less than 7KB and at least two of the identified command strings are present.
  Updated-Date: '2024_08_07'
jsp_cmd:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 25160c1f597af838d265bc98f15d07cb
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a malicious file named `cmd.war` associated with Laudanum Injector Tools. It targets specific string patterns that appear in Java Server Pages (JSP) files, including `cmd.jsp`, `WEB-INF/web.xml`, and `META-INF/MANIFEST.MF`. These patterns are used to identify components of the `cmd.war` file, which is less than 2KB in size and matches an expected file signature starting with `0x4b50`.
  Updated-Date: '2024_08_07'
jsp_reverse_jsp:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0626477f69fd2c1fe00ed05ac0bd71f4
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a JSP-based backdoor reverse shell, specifically identifying a file named "jsp-reverse.jsp.txt" with references to "// backdoor.jsp", "JSP Backdoor Reverse Shell", and "http://michaeldaw.org".
  Updated-Date: '2024_08_07'
jspshall_jsp:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2329d6781f3be06c76319460a0b28c01
  Ruleset: securityonion-yara
  Summary: This rule detects a malicious script named "jspshall.jsp.txt" by searching for specific strings within the file. These strings include "kj021320," a coding pattern associated with the system tools function, and a fragment of HTML output with certain formatting, suggesting the presence of a file-manipulating mechanism within the script.
  Updated-Date: '2024_08_07'
kacak_asp:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 78463267a47fe9960d90cb92b09bd6e0
  Ruleset: securityonion-yara
  Summary: This rule detects a specific ASP (Active Server Pages) file named "kacak.asp" based on unique strings found within its content. These indicators include the presence of the string "Kacak FSO 1.0," a conditional statement checking a query string parameter "TGH" for the value "1," a specific HTML font color designation, and an email address "BuqX@hotmail.com." The rule triggers if any one of these strings is identified in a file.
  Updated-Date: '2024_08_07'
kappfree:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 715abcbc7492c17553f33a338f729995
  Ruleset: securityonion-yara
  Summary: This rule detects a file named "kappfree.dll," which is identified as part of a Chinese hacktool set. The rule looks for specific strings within the file, including a French phrase "Bienvenue dans un processus distant," the ASCII string "kappfree.dll," and a description mentioning "kappfree" related to Mimikatz for Windows, targeting anti-AppLocker measures. The file must meet specific criteria, including a Windows executable header and a size of less than 200KB.
  Updated-Date: '2024_08_07'
kappfree_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a4b5b28da8a2fe4dd3c980e4119505fb
  Ruleset: securityonion-yara
  Summary: This rule detects a file named "kappfree.dll," which is associated with a Chinese hack tool set. The file is designed to bypass security software like AppLocker on Windows. Specific strings within the file, such as "kappfree.dll," "kappfree de mimikatz pour Windows (anti AppLocker)," and "' introuvable !", indicate its connection to the Mimikatz tool, a widely recognized post-exploitation tool used for credential harvesting. The file is identified based on its signature and size constraints.
  Updated-Date: '2024_08_07'
karmaSMB:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c5a2fd15e9cf3eb367024467d6bdd3db
  Ruleset: securityonion-yara
  Summary: This rule detects compiled tools from the Impacket framework by identifying a specific string within executable files. It looks for the presence of "bkarmaSMB.exe.manifest" in files smaller than 17,000 KB that have a standard executable header.
  Updated-Date: '2024_08_07'
kelloworld_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1d060f5fad673e6f5c80d440fe24940b
  Ruleset: securityonion-yara
  Summary: This rule detects a Chinese hacktool named "kelloworld.dll." The detection focuses on specific strings within the file, including "Hello World!" in wide format, "kelloworld.dll" in ASCII format, and the French phrase "kelloworld de mimikatz pour Windows" in wide format. Additionally, the file must start with the bytes 0x5a4d and be smaller than 200KB in size.
  Updated-Date: '2024_08_07'
kerberoast_PY:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e69ed8e3d1939ba80906cf6f740b4dfd
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the script "kerberoast.py," which is associated with the PyKerberoast project. The script is used in attacks that involve Kerberos ticket encryption and decryption. Indicators include specific references to the encryption process using Kerberos keys, handling NTLM hashes for password decryption, and encoding related variables within the script. This is aimed at identifying unauthorized or potentially malicious activity involving Kerberos tickets.
  Updated-Date: '2024_08_07'
kiwi_tools:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8f0beb745cc4d9d4e2e327ad672c4db1
  Ruleset: securityonion-yara
  Summary: This rule detects a Chinese hacktool set by identifying specific binary files through their hash values. Additionally, the rule searches for particular strings related to the hacktool, such as references to the Mimikatz project and its author Benjamin Delpy, as well as the term "GlobalSign". These indicators help in accurately identifying the presence of the specified malicious tool based on its known characteristics and associated metadata.
  Updated-Date: '2024_08_07'
kiwi_tools_gentil_kiwi:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1b85d502da78754d1b0017a10b47e673
  Ruleset: securityonion-yara
  Summary: This rule detects a Chinese hacktool set known as "Gentil Kiwi" by matching specific string patterns such as "mimikatz" and "Copyright (C) 2012 Gentil Kiwi" within executable files that are less than 1000KB in size and have a particular file header.
  Updated-Date: '2024_08_07'
klasvayv_asp:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0ac69d99ff28d837964fcbc9ddfffb2c
  Ruleset: securityonion-yara
  Summary: This rule detects a specific ASP script file named "klasvayv.asp" used in web server environments. It identifies the presence of particular strings within the script, such as the setting of a query string parameter, a specific HTML font color linked to the domain "aventgrup.net," and a style attribute indicating certain background color and border properties. These characteristics suggest features typical of a web-based interface or administrative panel, potentially used for managing server content or configurations.
  Updated-Date: '2024_08_07'
lamashell_php:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0bfa2980dc65e705ee3f0724c6951051
  Ruleset: securityonion-yara
  Summary: This rule detects a PHP file known as "lamashell" using specific code snippets that indicate malicious activity. It looks for strings within the PHP file that include a reference to "lama's'hell," a condition where a POST request checks for a parameter named 'king', and a method for handling uploaded files, which are all characteristics associated with potential web shell exploits.
  Updated-Date: '2024_08_07'
lamescan3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1f4b05649af16b32b418a0adbe187d97
  Ruleset: securityonion-yara
  Summary: This rule detects the Chinese hacktool known as lamescan3, specifically the file named lamescan3.exe. It identifies the file by checking for the presence of certain strings, including "dic\loginlist.txt," "Radmin.exe," "lamescan3.pdf!," and "dic\passlist.txt." Additionally, it verifies that the file starts with the bytes 0x5a4d and is smaller than 3740KB in size.
  Updated-Date: '2024_08_07'
laudanum:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 779ea84ca266b164411f700384e86adb
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a malicious file associated with the Laudanum Injector Tools, specifically identifying a malicious PHP file named "laudanum.php." The rule targets specific strings within the file, including a public function definition and a function call to register an activation hook. The file size must be less than 5KB for the rule to trigger.
  Updated-Date: '2024_08_07'
lnk_detect:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a63f0e89c311d522105db4fec1d1b151
  Ruleset: securityonion-yara
  Summary: This rule detects malicious LNK files by looking for a specific combination of binary patterns and strings indicative of such files. It checks for the presence of particular hexadecimal sequences that match the structure of a malicious LNK file as well as specific targets within the file, which are indicative of malicious activity targeting UK organizations, particularly those in engineering and industrial control sectors.
  Updated-Date: '2024_08_07'
loki2crypto:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: db2f3626af966f9c668893365814f6ff
  Ruleset: securityonion-yara
  Summary: This rule detects a specific Diffie-Hellman (DH) modulus that is hardcoded in the Loki2 source code from 1996/1997, which is used for strong cryptography with a 384-bit strong prime. The detection relies on identifying a particular sequence of bytes representing this modulus in a file.
  Updated-Date: '2024_08_07'
lsremora:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: bd81861ea7823b6051b4819f0551c78f
  Ruleset: securityonion-yara
  Summary: This rule detects a tool associated with Advanced Persistent Threat (APT) groups. It matches on specific indicators such as error messages related to primary Security Account Manager (SAM) functions, mentions of "lsremora64.dll" and "lsremora.dll" files, and particular patterns in pipe usage and history logs. The rule examines both ASCII and wide strings and applies to files smaller than 200KB, focusing on identifying the presence of these distinct signatures.
  Updated-Date: '2024_08_07'
lurm_safemod_on_cgi:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: bc6aef85b1822b63fa936ae9de6b9486
  Ruleset: securityonion-yara
  Summary: 'This rule detects the presence of a CGI shell script designed for network security operations. The script includes specific text patterns such as "Network security team :: CGI Shell" and a distinctive ending marker "#########################<<KONEC>>#####################################", as well as a conditional statement checking for an undefined parameter and assigning a default password.'
  Updated-Date: '2024_08_07'
maindll_mutex:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: eb49305c0dfd07bcec0414ccff4b800f
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the "maindll" mutex, which is identified by the string "h31415927tttt". It checks for files with both the MZ header and PE signature, indicating that it is targeting executable files in the Portable Executable format.
  Updated-Date: '2024_08_07'
malware_apt15_exchange_tool:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b244afdd3039a5b0956f16b096c5ee4a
  Ruleset: securityonion-yara
  Summary: This rule detects a tool associated with APT 15 that is used for Exchange server enumeration and potential hijacking activities. The detection focuses on specific keywords related to Exchange server functionalities including subject names, sender names, web credentials, Exchange version, Exchange credentials, filenames, email enumeration, folder enumeration, and setting credentials. Additionally, it looks for specific patterns such as "/v or /t is null" and "2013sp1" within the code, along with a common file header signature to identify the presence of this malicious tool.
  Updated-Date: '2024_08_07'
malware_apt15_generic:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e48f3ee8d2fa88b1097351f03b02e615
  Ruleset: securityonion-yara
  Summary: This rule detects potential data related to APT15 tools by searching for specific strings and opcodes in binary files. The strings "myWObject" and "myRObject" are identified as common variables in the code, likely due to copy-pasting. Additionally, the rule checks for a sequence of opcodes corresponding to arguments for the CreateFileA function call, used by software to create or open files. The condition for triggering this detection is the presence of at least two of these patterns.
  Updated-Date: '2024_08_07'
malware_apt15_royaldll:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5950d4d276bcc16201abf1b71bc89f21
  Ruleset: securityonion-yara
  Summary: This rule detects a DLL implant associated with APT15, known as royaldll, which originally operates as rights.dll and runs as a service. The detection criteria include specific assembly code patterns, such as an implementation of Justin Sobel's hash algorithm, an encoding loop used to encrypt data before DNS requests, and a sleep loop. Additionally, the rule looks for particular strings related to the DLL's execution, including service names and cleanup commands for temporary files.
  Updated-Date: '2024_08_07'
malware_apt15_royaldll_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 914649f0c11f7915786abba30012609c
  Ruleset: securityonion-yara
  Summary: This rule detects a DNS backdoor associated with APT15 known as RoyalDLL, which manipulates system registry entries and services. The rule identifies specific strings related to the Windows Service Host process (svchost.exe) and service configurations in the Windows registry. It targets executable files with specified export functions and size constraints.
  Updated-Date: '2024_08_07'
malware_sakula_memory:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b4ac67c40830a563213b1144cd62d408
  Ruleset: securityonion-yara
  Summary: This rule detects Sakula malware by identifying specific memory patterns and strings commonly found after unpacking. It looks for command execution strings involving "cmd.exe" and "rundll32," indicative of deletion and DLL execution activities. Additionally, it checks for user-agent strings imitating older Internet Explorer versions, along with process ID and formatted date indicators. The rule includes opcode patterns for certain encoding loops used by the malware, such as rotation and XOR operations. The condition requires the presence of at least four of these identifiers to trigger detection.
  Updated-Date: '2024_08_07'
malware_sakula_shellcode:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5d512a8f8b7c8a43d49d877e7bb9b481
  Ruleset: securityonion-yara
  Summary: 'This rule detects specific shellcode patterns associated with the Sakula malware. It looks for two distinct sequences of opcodes: one that involves a "Get EIP" technique which can be found in memory or decoded files, and another sequence that parses the export table by navigating through offsets within the PE header. These opcode patterns are used to identify the presence of Sakula shellcode, although they may not be unique to this specific malware.'
  Updated-Date: '2024_08_07'
malware_sakula_xorloop:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: bc86f9c92adfcee8cb52db5904353bfc
  Ruleset: securityonion-yara
  Summary: This rule detects XOR loops associated with the Sakula malware. Sakula malware employs XOR decoding routines to obfuscate its operations, and this rule identifies specific opcode patterns used in these loops. The detection targets two distinct sequences of XOR decode loops within the code and triggers if any of these sequences are found within a file that starts with the 'MZ' header, indicative of a Windows executable.
  Updated-Date: '2024_08_07'
merlinAgent:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7c07783fa32b60394a35bc6221e15c48
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the Merlin agent, which is known for its capabilities in remote command execution and control. The rule identifies specific strings that are indicative of Merlin's operations, such as output messaging, errors related to HTTP client operations, and server interactions. Key indicators include messages about agent configuration updates, failed check-ins, unknown message types, agent kill signals, and command execution. Additionally, it looks for strings that report host details such as hostname, platform, and user GUID, which are typically gathered by the Merlin agent during its operations.
  Updated-Date: '2024_08_07'
mimikatz_kirbi_ticket:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6d23301fd39585e466e3394a56cb6970
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a KiRBi ticket associated with the mimikatz tool. It specifically looks for two byte patterns that are characteristic of the ASN.1 encoded data structures used by mimikatz for handling authentication tickets. Detection occurs when either of these patterns is found at the beginning of the examined data.
  Updated-Date: '2024_08_07'
mimipenguin_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 41aaf55fba84470a76c351a1c1356c0e
  Ruleset: securityonion-yara
  Summary: This rule detects the Mimipenguin hack tool, which extracts cleartext credentials from memory on Linux-based systems. It identifies the tool through specific strings related to its functionality, such as the dumping of processes and targeting of specific processes like "sshd" and using the Gnome Keyring Password Finder. The rule checks for certain textual patterns in files smaller than 20KB and starting with the specified magic number.
  Updated-Date: '2024_08_07'
mimipenguin_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f1613a6ddb03de57f90d991628b37ff8
  Ruleset: securityonion-yara
  Summary: This rule detects the Mimipenguin hack tool, a utility designed to capture login credentials by extracting plaintext passwords from active user sessions on Linux-based systems. Key indicators include command strings related to reading temporary files and strings in the `/tmp` directory for extracting sensitive information such as Gnome Keyring passwords, Apache credentials, and PAM module activity. The rule checks for specific textual patterns within files smaller than 20KB to determine the presence of Mimipenguin.
  Updated-Date: '2024_08_07'
ms10048_x64:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 25abb15695d711874ad5a712a5f066ed
  Ruleset: securityonion-yara
  Summary: This rule detects a 64-bit Chinese hacktool identified as "ms10048-x64.exe." The detection is based on specific text strings within the file, including phrases such as "The target is most likely patched," "Dojibiron by Ronald Huizer," "[ ] Creating evil window," and "[+] Set to %d exploit half succeeded." The file must also meet certain criteria, such as having a "MZ" header and a filesize of less than 40KB.
  Updated-Date: '2024_08_07'
ms10048_x86:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5e0ec01193053e0b77abaa9a8e355b6d
  Ruleset: securityonion-yara
  Summary: This rule detects a Chinese hacktool known as "ms10048-x86.exe." It is identified based on specific strings within the file, such as "Resolving PsLookupProcessByProcessId," "The target is most likely patched," "Dojibiron by Ronald Huizer, (c) master@h4cker.us," "Creating evil window," "HANDLEF_INDESTROY," and "Set to %d exploit half succeeded." The file must also begin with the hexadecimal value 0x5a4d and be less than 100KB in size.
  Updated-Date: '2024_08_07'
ms11080_withcmd:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f477dcd76d2fee028db6000ec565d134
  Ruleset: securityonion-yara
  Summary: This rule detects a Chinese hacktool identified as 'ms11080_withcmd.exe'. The tool is characterized by specific strings found within the executable file, including usage instructions for a command-line interface, a debug file path, an author tag, an error message reference, and an exploitation message related to the MS11-080 vulnerability. The file must start with the 'MZ' header and be less than 300KB in size to trigger this detection.
  Updated-Date: '2024_08_07'
mswin_check_lm_group:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 92864b7f1eef92a9855bc336733f8073
  Ruleset: securityonion-yara
  Summary: This rule detects a Chinese hacktool identified as "mswin_check_lm_group.exe." The rule targets specific strings within the executable, including messages related to validating global group memberships and usage instructions for command-line options, such as setting the default user domain. Additionally, it checks that the file has a specific hash value and is less than 380KB in size, while excluding matches related to "Panda Security S.L."
  Updated-Date: '2024_08_07'
multiple_php_webshells:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4233efa573a54735696ad058cda3b546
  Ruleset: securityonion-yara
  Summary: This rule detects multiple PHP webshells by searching for specific encoded strings within PHP files. It identifies potential webshells based on predefined hash values corresponding to known malicious scripts. The condition is met if at least two of the specific encoded strings are found, which suggests the presence of webshells designed to provide unauthorized remote access to a web server.
  Updated-Date: '2024_08_07'
multiple_php_webshells_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 43d41c859d672707450f7f968a20a9e6
  Ruleset: securityonion-yara
  Summary: This rule detects multiple types of PHP web shells. It is designed to identify specific strings of code within PHP files, which are indicative of web shell activity. The indicators include messages and constructs used within the web shell, such as error messages related to incorrect manual selections and handling of unknown file extensions. The rule focuses on recognizing these distinct patterns to effectively identify and flag potential web shell instances in PHP applications, enhancing security measures against unauthorized access and exploitation.
  Updated-Date: '2024_08_07'
myshell_php_php:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 78ac27681bc8479f89bf649aaf3967a8
  Ruleset: securityonion-yara
  Summary: This rule detects a specific PHP-based web shell named "MyShell" by identifying unique strings within the code. These include error handling related to changing directories, HTML-formatted output indicating a file editor interface, and metadata about file ownership shown in a stylized format. The presence of at least two of these strings in a file triggers detection.
  Updated-Date: '2024_08_07'
mysql_php_php:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 370a1c24e328f6245c162f28d424d885
  Ruleset: securityonion-yara
  Summary: This rule detects specific PHP code patterns typically associated with a file named "mysql.php.php.txt". It looks for instances of certain strings that indicate potential database actions, such as loading default settings and executing command-line operations using the `passthru` function. Additionally, it checks for patterns related to variable assignments that seem randomly generated. This detection aims to identify potentially malicious or unusual file manipulations involving MySQL and PHP scripts.
  Updated-Date: '2024_08_07'
mysql_pwd_crack:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 35231428c97d7e20ed72a062f27f9bb8
  Ruleset: securityonion-yara
  Summary: This rule detects a specific Chinese hacktool named mysql_pwd_crack, which is used to crack MySQL database passwords. The rule identifies this tool by matching strings related to its operation, such as command-line arguments for connecting to a MySQL server, messages indicating successful password cracking, and an email and website associated with the tool's creator. It ensures detection by verifying the presence of these strings within an executable file smaller than 100KB that begins with the "MZ" header characteristic of Windows executables.
  Updated-Date: '2024_08_07'
mysql_shell_php:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9eb7e44511c2f8c97b77b7609bc42dc6
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a file named "mysql_shell.php" by searching for specific strings within the file. The strings include a reference to "SooMin Kim," an email address "smkim@popeye.snu.ac.kr," and a PHP code snippet that outputs an HTML table cell containing a link used to delete data from a specified database and table.
  Updated-Date: '2024_08_07'
mysql_tool_php_php:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: bafd2143e5f84cebcf8385e15eb6169b
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a PHP file associated with MySQL tools by identifying specific strings within the file, such as error text related to database selection, random value assignments in variables, and text indicating the start of a backup process.
  Updated-Date: '2024_08_07'
mysqlfast:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5bc1ce070ed2b44621048fbe39002f92
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a Chinese hacktool, specifically the file named mysqlfast.exe. This executable is designed for cracking MySQL password hashes, as indicated by specific strings within its code, such as error messages related to invalid password hashes, usage instructions for executing the tool, and messages indicating whether a password has been found or not. The condition for detection is based on a specific file signature and a size constraint, thereby ensuring the rule targets the correct file.
  Updated-Date: '2024_08_07'
ngh_php_php:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ef9569c21b0c68ee502f3de3c3d25150
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a potential backdoor script typically associated with specific malicious indicators such as the strings "Cr4sh_aka_RKL," "NGH edition," and "connectback-backdoor on perl." It looks for forms that may facilitate unauthorized actions, for instance, through constructs like "<form action=<?=$script?>?act=bindshell method=POST>," suggesting an exploit mechanism possibly designed to enable remote control. It also identifies a specific encoded string characteristic of the backdoor, indicating malicious intent.
  Updated-Date: '2024_08_07'
nstview_nstview:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 236326e2ce845185433bfc6368aa8de1
  Ruleset: securityonion-yara
  Summary: This rule detects a malicious webshell script associated with the file named "nstview.php." The webshell contains a specific string pattern which includes commands to open standard input (STDIN), standard output (STDOUT), and standard error (STDERR) streams, and then execute a Linux shell (/bin/sh) interactively. This pattern suggests that the webshell allows remote execution of shell commands, which can be leveraged for unauthorized access or control of the affected system. The rule identifies the presence of this webshell by matching the defined string within the file contents.
  Updated-Date: '2024_08_07'
oracle_data:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ce87f4b01537e01dd7972fad14462826
  Ruleset: securityonion-yara
  Summary: This rule detects a file named `oracle_data.php`, which is part of a set of Chinese hacktools. The file is identified by specific PHP code snippets that include opening a file named `oracle_info.txt` for writing, checking if a specific request parameter 'id' is set, and assigning the 'id' parameter to a variable. These elements suggest the file is involved in information gathering or manipulation based on incoming web requests.
  Updated-Date: '2024_08_07'
p0wnedAmsiBypass:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c9afcf6814d293d6782a7ce5e3e02623
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the p0wnedShell Runspace Post Exploitation Toolkit, specifically focusing on the file p0wnedAmsiBypass.cs. It identifies the toolkit by looking for specific code patterns such as "Program.P0wnedPath()", "namespace p0wnedShell", and a long encoded string "H4sIAAAAAAAEAO1YfXRUx3WflXalFazQgiVb5nMVryzxIbGrt/rcFRZIa1CQYEFCQnxotUhP2pX3Q337HpYotCKrPdbmoQQnkOY0+BQCNKRpe". These patterns suggest a bypass mechanism or encoded data related to the anti-malware scanning interface (AMSI) within the p0wnedShell toolkit.
  Updated-Date: '2024_08_07'
p0wnedBinaries:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8c57cc529d3b0c67c0dbeadfa687f7de
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the p0wnedShell Runspace Post Exploitation Toolkit, specifically targeting the file p0wnedBinaries.cs. It identifies specific string patterns associated with the toolkit, which can be used to recognize its activity and potentially indicate a post-exploitation scenario where this malicious software is being deployed in a system. The rule uses a set of unique string signatures to match against, ensuring accurate detection of the toolkit's associated binaries.
  Updated-Date: '2024_08_07'
p0wnedExploits:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 798445218985d45f09ecb79bf2291e21
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the p0wnedShell Runspace Post Exploitation Toolkit by looking for specific indicators within a file named "p0wnedExploits.cs". It identifies commands such as "Pshell.RunPSCommand(Whoami);" and strings related to command shell execution. This specific toolkit allows attackers to execute commands like whoami and potentially gain control over system shells if the exploit is successful.
  Updated-Date: '2024_08_07'
p0wnedListenerConsole:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5400a2072c9d841cd87ea88aa3dc293a
  Ruleset: securityonion-yara
  Summary: This rule detects the p0wnedShell Runspace Post Exploitation Toolkit through specific characteristics found in the file "p0wnedListenerConsole.cs". It identifies unique strings associated with payload injection, shell interactions, password hash retrieval, credential phishing, shellcode invocation, token manipulation, port scanning, and privilege escalation techniques indicative of p0wnedShell's functionality.
  Updated-Date: '2024_08_07'
p0wnedPotato:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e707db8ea9003f75907de81a605ba540
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the p0wnedShell Runspace Post Exploitation Toolkit by identifying specific characteristics linked to the p0wnedPotato.cs file. It looks for strings such as "Invoke-Tater," "P0wnedListener.Execute(WPAD_Proxy);," " -SpooferIP," "TaterCommand()," and "FileName = \"cmd.exe\"." These strings are indicative of the toolkit's activities, including command execution and proxy manipulation, used typically for post-exploitation purposes on compromised systems.
  Updated-Date: '2024_08_07'
p0wnedPowerCat:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ddda3ef63455f7d01bf3c2a947995d84
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the p0wnedPowerCat component from the p0wnedShell Runspace Post Exploitation Toolkit, specifically targeting the file p0wnedPowerCat.cs. It identifies strings commonly associated with this tool, such as references to running PowerCat commands, invoking PowerShell TCP one-liners, and specific filenames like EncodedPayload.bat. The conditions for detection include file size limitations and the presence of certain identifying text strings.
  Updated-Date: '2024_08_07'
p0wnedShell_outputs:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 200faf7352023fb493c2390d4b3a397f
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the p0wnedShell Runspace Post Exploitation Toolkit by identifying specific strings in files such as "p0wnedShell.cs". The toolkit is known for its post-exploitation capabilities and requires administrator privileges to execute certain commands. The rule triggers if it encounters any of the predefined strings that indicate administrative actions, validation of hostnames, or domain inquiries within the toolkit's output.
  Updated-Date: '2024_08_07'
p0wnedShellx64:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0e21068a5c50e365bbc8cb6f662db30d
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the p0wnedShell Runspace Post Exploitation Toolkit, specifically targeting the executable file named p0wnedShellx64.exe. Key indicators include unique strings within the executable related to token manipulation, command execution as a system user, and the invocation of specific payloads for shellcode, particularly those related to reverse HTTPS Meterpreter. This rule identifies signs of the toolkit being used to gain privileged command shell access and execute malicious payloads.
  Updated-Date: '2024_08_07'
pHpINJ_php_php:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ddfd194d9d22c3317b6ddbef333a2913
  Ruleset: securityonion-yara
  Summary: This rule detects indicators of a PHP shell injection, specifically targeting a file named "pHpINJ.php.php.txt". It searches for specific strings indicative of illicit remote control capabilities, such as mentions of "News Remote PHP Shell Injection" and "Php Shell <br />". Additionally, it looks for HTML input elements that suggest a configuration for a URL parameter, indicative of a web-based interface for executing commands. The rule is triggered when at least two of these strings are found.
  Updated-Date: '2024_08_07'
packager_cve2017_11882:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d6d17f3fcd3ee87ab8056f668ea18089
  Ruleset: securityonion-yara
  Summary: This rule detects attempts to exploit CVE-2017-11882 using Packager, a vulnerability targeting the Microsoft equation editor. It examines specific byte sequences within files, such as certain hexadecimal strings and patterns related to fonts, the equation editor, and the word "package." Additionally, it includes patterns for RTF file headers and specific shellcode structures to identify the exploit attempts.
  Updated-Date: '2024_08_07'
peek_a_boo:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a1e7fdde5d92ee76d69863f26960354f
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the file "peek-a-boo.exe," which is identified as an auto-generated webshell. The detection is based on specific strings found within the file, including "__vbaHresultCheckObj," "\\VB\\VB5.OLB," "capGetDriverDescriptionA," "__vbaExceptHandler," "EVENT_SINK_Release," and "__vbaErrorOverflow." These strings are associated with Visual Basic and potential error handling features, indicative of malicious activity related to webshells.
  Updated-Date: '2024_08_07'
perlbot_pl:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 84bbdfe7221511ff15e17b7c7ff3da34
  Ruleset: securityonion-yara
  Summary: This rule detects a specific Perl script known as "perlbot.pl" by searching for identifiable strings within the code. The rule looks for the presence of either a list of administrators including "Kelserific," "Puna," and "nod32," or a comment in Portuguese indicating access control to a shell. The rule uses these unique markers to identify the malicious script and flag it for further analysis or action.
  Updated-Date: '2024_08_07'
perlcmd_zip_Folder_cmd:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 52d1431be0ff33c8d8c89d7450ee6aea
  Ruleset: securityonion-yara
  Summary: This rule detects a hacktool file named "cmd.cgi" that appears to be an older utility used for executing system commands via a web interface. Key indicators include specific string patterns related to processing and executing commands, such as redirecting output to HTTP headers, substituting encoded characters in query strings, and using system calls to execute commands. These specific strings align with typical behaviors of CGI scripts that allow command execution, indicating potential misuse for unauthorized system access.
  Updated-Date: '2024_08_07'
php_backdoor_php:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: cdde10e4d428b91a3d8b8d6af962727d
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a PHP backdoor script that is semi-auto-generated and known by the filename "php-backdoor.php.txt." The detection criteria include specific strings such as a URL referencing "michaeldaw.org" from 2006, a PHP echo statement indicative of accessing server details, and a signature from a coder identified as "z0mbie." The rule triggers if any one of these identifying strings is found within a file.
  Updated-Date: '2024_08_07'
php_dns:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: cf6cdeff5897fb403b27c861cf804a97
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific PHP file associated with Laudanum Injector Tools called dns.php. The identified file contains certain patterns, including PHP code to handle HTTP POST requests, invoke DNS record queries using the `dns_get_record` function, check remote IP addresses, and iterate through array keys. These elements suggest the script's functionality involves DNS-related operations potentially utilized for malicious activities such as web application exploitation or network reconnaissance.
  Updated-Date: '2024_08_07'
php_file:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 436fe9063613ae6d32bf961d4a0819a8
  Ruleset: securityonion-yara
  Summary: This rule detects a specific PHP file associated with Laudanum Injector Tools. It looks for particular string patterns in the file, such as the declaration of an allowed IPs variable, HTML link structures with embedded PHP code, and directory handling code. These characteristics help identify potential web shell activity in PHP files smaller than 10KB.
  Updated-Date: '2024_08_07'
php_include_w_shell_php:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2711ba7a0eb3eb4994d82a14a756c4c3
  Ruleset: securityonion-yara
  Summary: This rule detects a PHP script named 'php-include-w-shell.php' that contains code indicative of incorporating a shell into PHP web applications. It identifies specific script content that includes constructing a URL with query parameters and a conditional statement checking variables related to a PHP shell application, host, and port. These patterns suggest the script's functionality involves remote database interaction and potentially running commands through the web shell.
  Updated-Date: '2024_08_07'
php_killnc:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 94e0ca53af2e62dc8567ae901d49b177
  Ruleset: securityonion-yara
  Summary: This rule detects a specific PHP script used by Laudanum Injector Tools, specifically targeting the file named "killnc.php." The script includes various PHP statements that check the remote IP address, return a 404 HTTP status header, and execute the command to kill all instances of the "nc" (netcat) utility. The presence of these specific strings and script behavior, including mentions of certain allowed IP addresses and an HTML title, helps in identifying this malicious functionality.
  Updated-Date: '2024_08_07'
php_reverse_shell:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2c9a3210e0dc4be177614b1bfdafb53f
  Ruleset: securityonion-yara
  Summary: This rule detects a PHP reverse shell script by identifying specific code patterns used in the Laudanum Injector Tools. It examines the presence of certain strings within the file, such as the usage of `proc_open` to initiate the shell, a message indicating a successful reverse shell connection, and code that handles reading from a process pipe. The rule applies to files smaller than 15KB in size, ensuring they match all specified string patterns.
  Updated-Date: '2024_08_07'
php_reverse_shell_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: caf4118797082f1357672d0dccda244f
  Ruleset: securityonion-yara
  Summary: This rule detects a specific PHP reverse shell script commonly used as part of Laudanum Injector Tools, identified by the presence of particular strings in the script. It triggers when the script contains commands to open a process with a shell using "proc_open" and sets the shell command to "uname -a; w; id; /bin/sh -i." This script usually facilitates unauthorized remote access to a compromised system.
  Updated-Date: '2024_08_07'
php_shell:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 43b8efa94e1ffd5870154b8cb45d2660
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a PHP shell script associated with Laudanum Injector Tools, specifically targeting a file named "shell.php." It identifies strings that are commonly found in such malicious scripts, such as commands handling the command history and session history in PHP. The rule matches if the file is less than 40KB in size and contains all specified strings, which indicate actions like assigning values to command histories and checking for specific commands.
  Updated-Date: '2024_08_07'
phpbackdoor15_php:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5f32782c9ff1b84abfdd73f728744142
  Ruleset: securityonion-yara
  Summary: This rule detects a PHP backdoor script associated with the file named "phpbackdoor15.php.txt". The script contains specific strings related to file operations, including echoing messages about uploaded files and moving uploaded files to specified locations. This behavior is indicative of a backdoor designed to facilitate unauthorized file management and download activities on a compromised server.
  Updated-Date: '2024_08_07'
phpjackal_php:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3d0630fbe5349c41c0d1137b915f6829
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a PHP file associated with the 'phpjackal' malware. It looks for specific code patterns, such as a variable assignment from user input (`$_REQUEST['downloaD']`) and a command execution string that includes Perl, indicating potentially malicious interactions. The rule is tailored to identify these patterns within a file named "phpjackal.php.txt," aiming to pinpoint suspicious activity that matches the hash "ab230817bcc99acb9bdc0ec6d264d76f."
  Updated-Date: '2024_08_07'
phpshell:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 190041c2347ecfa0a2bc6c7ec6162137
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a PHP webshell by identifying specific patterns within a file titled "phpshell.php." It looks for several unique strings that are characteristic of the webshell, including HTML input field manipulation and image source embedding. The patterns include sequences that manipulate input file values and remote image URLs, as well as the replacement of backslashes and slashes in file paths. All these strings must be found for the rule condition to be met.
  Updated-Date: '2024_08_07'
phpshell17_php:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 127a19130c3b00d3d36fe64ea2732158
  Ruleset: securityonion-yara
  Summary: 'This rule detects a PHP script named "phpshell17.php.txt" associated with a web shell known as phpShell. The rule identifies specific strings within the file: an HTML form element for executing commands, a custom page title template indicating the presence of phpShell, and a mailto hyperlink for user customization. This rule helps identify the presence of this particular PHP-based web shell by matching any of these unique script elements.'
  Updated-Date: '2024_08_07'
phpshell_3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ddb20d9052795597e283cda07782c224
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific web shell file named "phpshell.php." It identifies the file by looking for particular strings within its code, such as HTML input elements for a submit button labeled "Execute Command" and an echo statement outputting an option for the current directory. These specific markers help in confirming the file's malicious intent to allow execution of commands on the server.
  Updated-Date: '2024_08_07'
phpspy_2005_full:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4cd208f0cdb0f6af8dd1287af1134589
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific web shell named "phpspy_2005_full.php" by searching for a distinctive string within the file that includes HTML formatting and URL encoding patterns typically used in malicious web shell scripts.
  Updated-Date: '2024_08_07'
phvayvv_php_php:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d4c7ae5a7ceadd0127d0e0fe2181dea2
  Ruleset: securityonion-yara
  Summary: 'This rule detects a PHP script identified by specific strings indicative of its operations. It searches for three main indicators: the creation of directories with specific permissions, the opening of files for writing, and the presence of the term "PHVayv 1.0." These patterns point to characteristics of a potentially malicious or customized PHP file operation.'
  Updated-Date: '2024_08_07'
portlessinst:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: cd24f7abcecea22949e05c22f7bec0f3
  Ruleset: securityonion-yara
  Summary: This rule detects the webshell file named "portlessinst.exe." It identifies the malware based on specific strings found within the file, such as "Fail To Open Registry," "f<-WLEggDr\"," and "oMemoryCreateP." The detection is triggered when all these strings are present.
  Updated-Date: '2024_08_07'
portscan:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 249026784e850bed23aa58ced8c3b9d8
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of portscan.exe by identifying specific strings within the file, including "SCAN BEGUN ON PORT:" and "PORTSCAN READY."
  Updated-Date: '2024_08_07'
portscanner:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b5634cc547515db83c10ae9303f9b749
  Ruleset: securityonion-yara
  Summary: This rule detects a specific Chinese hacktool known as portscanner.exe, used for scanning network ports. It identifies the tool based on specific string patterns within the executable file, including "PortListfNo," ".533.net," "CRTDLL.DLL," and "exitfc." The rule is designed to match files with these characteristics and a size of less than 25KB, ensuring a precise identification of the portscanner hacktool.
  Updated-Date: '2024_08_07'
power_pe_injection:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 149ef931bb0a073302af6be41d806188
  Ruleset: securityonion-yara
  Summary: This rule detects PowerShell scripts that utilize PE (Portable Executable) reflective injection techniques. It specifically identifies the presence of a byte sequence commonly associated with loading libraries into memory, which is indicative of reflective injection methods used to execute code into a host process.
  Updated-Date: '2024_08_07'
ps1_toolkit_Inveigh_BruteForce:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 473363a95cb44079ca28ad8bcab77b03
  Ruleset: securityonion-yara
  Summary: This rule detects a PowerShell script named "Inveigh-BruteForce.ps1" which is part of a toolkit referenced from a GitHub repository. The script is designed to perform brute force attacks using the Inveigh framework, which includes functionalities for spoofing and HTTP listener management. Key indicators of this activity are specific strings found within the script, such as commands to import the Inveigh module, invoke brute force attacks targeting a specific IP address, and manage HTTP listeners by stopping them. The script's presence is identified based on file hashes and specific text patterns, ensuring accurate detection.
  Updated-Date: '2024_08_07'
ps1_toolkit_Inveigh_BruteForce_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8e34cc5b03926597c68024a8ba444084
  Ruleset: securityonion-yara
  Summary: This rule detects the Inveigh tool used for brute-force attacks. Inveigh is a PowerShell toolkit for network reconnaissance and exploitation, specifically targeting NTLM authentication. The rule identifies specific code patterns related to NTLMv2 file queuing and relay operations within the tool's script files. These indicators are used to ascertain the presence of Inveigh's components, focusing on NTLMv2 handling and relay settings within a script.
  Updated-Date: '2024_08_07'
ps1_toolkit_Inveigh_BruteForce_3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 57b2b69bbb3a5a26db44bd9ca4f93b8a
  Ruleset: securityonion-yara
  Summary: This rule detects a script file associated with Inveigh, a PowerShell toolkit used for network-relay attacks on Windows environments. The script specifically pertains to brute force attacks and is identified by certain Base64 encoded strings and ASCII patterns linked to HTTP response manipulations and administrative relay functionalities. The detection characteristics include specific encoded strings and byte arrays, ensuring that the identified script is involved in network-based brute force activities.
  Updated-Date: '2024_08_07'
ps1_toolkit_Invoke_Mimikatz:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 616ae8d5a4f0d36b2ca3cb22c0f2009c
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a PowerShell script named Invoke-Mimikatz.ps1, which is associated with credential dumping activities. The detection is based on specific strings within the script that suggest functionality related to manipulating process memory, adjusting token privileges, and invoking Mimikatz to dump credentials. Notable strings include references to kernel32.dll and Advapi32.dll functions, PowerShell commands for process enumeration and privilege adjustment, and the specific use of "Invoke-Mimikatz -DumpCreds". The rule triggers if certain conditions involving these characteristic strings are met, indicating the likely presence of the Mimikatz credential dumping tool.
  Updated-Date: '2024_08_07'
ps1_toolkit_Invoke_Mimikatz_RelfectivePEInjection:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b68197870032f0bb5b397a5eafe84824
  Ruleset: securityonion-yara
  Summary: This rule detects the usage of specific PowerShell scripts used for malicious activities, including Invoke-Mimikatz and Invoke-ReflectivePEInjection. It identifies keywords and patterns associated with these scripts, such as memory manipulation commands, the importation of DLLs into remote processes, specific byte sequences related to shellcode, and PowerShell commands indicative of reflective DLL injection and credential extraction techniques. This rule leverages several unique string patterns observed in the scripts to ascertain the presence of such malicious tools.
  Updated-Date: '2024_08_07'
ps1_toolkit_Invoke_RelfectivePEInjection:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4573c18a6883482ae1f3919d53d27a91
  Ruleset: securityonion-yara
  Summary: This rule detects the use of the PowerShell script "Invoke-ReflectivePEInjection.ps1" from the PS1 Toolkit repository. It identifies specific patterns in the script that involve loading PE (Portable Executable) files into memory using reflective DLL injection techniques. The rule looks for several distinct strings, including the invocation of reflective PE injection with PEBytes, reading a DLL file into memory, and utilizing functions such as Get-ProcAddress to interface with system libraries like Advapi32.dll for operations such as OpenThreadToken and AdjustTokenPrivileges. This script is typically used for injecting and executing PE files within the memory space of targeted processes like lsass on designated remote computers. The condition for the rule is based on a specific combination of file attributes and the presence of these strings.
  Updated-Date: '2024_08_07'
ps1_toolkit_Invoke_Shellcode:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: dffe21fc71d521231d8af3fe55943625
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a PowerShell script named Invoke-Shellcode.ps1, which is associated with the ps1-toolkit. It identifies specific strings related to malicious activities, including API calls to "kernel32.dll" functions like "WriteProcessMemory" and "OpenProcess," and a command created by "msfpayload" for executing a shell with the instruction to open a calculator using a command prompt. The rule also looks for textual indications of shellcode injection into processes. These characteristics suggest the script is used to inject and execute shellcode, which is a common tactic in various forms of malicious software.
  Updated-Date: '2024_08_07'
ps1_toolkit_Persistence:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0d7c252145bda974b045b892a214be37
  Ruleset: securityonion-yara
  Summary: This rule detects a specific PowerShell script file named "Persistence.ps1" associated with the ps1-toolkit, which is used to implement persistence mechanisms. It identifies the script by checking for certain string patterns within the file content. These patterns relate to setting WMI instances for event filters, manipulating user profile variables, creating elevated persistence options through the registry, querying the operating system architecture, decoding base64-encoded data, and reading ASCII strings from memory. The rule triggers if the file matches certain characteristics, such as containing specific hexadecimal byte sequences at the beginning and being below a certain file size threshold, or if a sufficient number of these string patterns are found.
  Updated-Date: '2024_08_07'
ps1_toolkit_Persistence_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0514a36673b2f48ecaa0789a021d2156
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a PowerShell script associated with the "ps1-toolkit" project, specifically targeting a script named "Persistence.ps1." The rule identifies unique base64 encoded strings and specific PowerShell parameter patterns that are indicative of scheduled tasks at logon or WMI (Windows Management Instrumentation) persistence mechanisms. The rule triggers if particular conditions related to file size and the presence of specific strings are met, indicating the likelihood of the script being used for persistent malicious activities on a system.
  Updated-Date: '2024_08_07'
ps1_toolkit_PowerUp:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e2d5ae90a1d2330ef5f08e26d119631b
  Ruleset: securityonion-yara
  Summary: This rule detects the PowerUp.ps1 script, which is a part of the PS1 Toolkit, by identifying unique strings that are associated with the script's functionality. PowerUp.ps1 is a PowerShell script designed to assist with privilege escalation by scanning and manipulating IIS AppCmd configurations and other system attributes. The rule looks for specific commands and patterns, such as the execution of IIS AppCmd commands, processor architecture checks using base64 encoding, path tests to system directories like 'inetsrv', and various verbose and warning messages, to determine the presence of the script.
  Updated-Date: '2024_08_07'
ps1_toolkit_PowerUp_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a390cebc890fdacab906b240e31afe4e
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a PowerShell script file associated with the PowerUp toolkit. It identifies specific string patterns characteristic of PowerUp, which is used for elevating privileges on Windows systems by manipulating service configurations and registry settings. Patterns include base64-encoded strings and commands to start services and modify local group memberships, indicating an intent to escalate privileges or execute unauthorized actions on a compromised system.
  Updated-Date: '2024_08_07'
pstgdump:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 021939fa47923a250bf2f990eebeee80
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a tool known as "pstgdump" used by APT groups. The detection focuses on the executable file "pstgdump.exe" and identifies it through specific strings within the file. These strings include mentions of "pstgdump.pdb," failure messages related to protected storage items, command-line usage information, user impersonation attempts, error messages, and references to the PStoreCreateInstance function in the pstorec.dll file. The rule considers the file's size, a specific file signature, and the presence of one or more of these identifying strings to determine if the tool is in use.
  Updated-Date: '2024_08_07'
pw_inspector:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 54117819694fc77877b545433be2daad
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the Chinese hacktool named "pw-inspector.exe." This tool can analyze password complexity and trim dictionary files to match the password requirements of a target system. Included amongst its characteristic strings are parameters related to password length, references to THC (a well-known hacking tool repository), and instructions for its use in hacking activities. The rule triggers if the file begins with the "MZ" header and is under 460KB in size.
  Updated-Date: '2024_08_07'
pw_inspector_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4e451eb9124deec9f97e00aa0e716595
  Ruleset: securityonion-yara
  Summary: This rule detects a hacking tool named "pw-inspector.exe," which is part of a Chinese hacktool set. It identifies specific characteristics within the file, such as text related to dictionary file trimming for password requirements, usage syntax, and key phrases like "PW-Inspector." The rule applies to files that start with the hexadecimal value 0x5a4d, are smaller than 100KB in size, and match at least two defined string patterns.
  Updated-Date: '2024_08_07'
pwreveal:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3e9575cb44439acf3e3e0f8746f6e314
  Ruleset: securityonion-yara
  Summary: This rule detects a specific webshell file named pwreveal.exe based on its unique string indicators. The rule identifies the presence of this malware by looking for specific strings within a file, such as "*<Blank - no es," "JDiamondCS," "sword set> [Leith=0 bytes]," and "ION\\System\\Floating-." These strings help ensure the accurate detection of the pwreveal.exe webshell, which is typically auto-generated for malicious purposes.
  Updated-Date: '2024_08_07'
pws_php_php:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1beba0b80b4d7d540aabe28d66e8fefd
  Ruleset: securityonion-yara
  Summary: This rule detects a potentially malicious PHP script, often identified as "pws.php.php", which includes specific HTML and PHP code patterns. The script features input fields for commands and directories, suggesting it allows remote command execution via a web interface. The conditions for detection include the presence of HTML elements such as an input text field labeled "Input command" and another for directory input, with PHP executing shell commands like "pwd".
  Updated-Date: '2024_08_07'
r57shell:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8317e803bb26ff4730a24f22a512f448
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a web shell file named "r57shell.php" through the identification of a specific string within the script. The string includes a command that suggests echoing text indicating a connection attempt, commonly associated with web shell activity used for unauthorized access and control of compromised web servers.
  Updated-Date: '2024_08_07'
r57shell_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9ea0210e733e49300e5df60e6f251186
  Ruleset: securityonion-yara
  Summary: This rule detects a specific web shell, identified as "r57shell.php". The targeted web shell appears to output the free and total HDD space in a formatted manner, indicated by a distinctive string that includes functions to show sizes like `view_size` and the inclusion of HTML tags for display.
  Updated-Date: '2024_08_07'
r57shell_3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6c75536375280d904d2af5ec514a938b
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific webshell file named "r57shell.php" by identifying a characteristic string within the code, specifically the phrase `"<b>\".$_POST['cmd']"`.
  Updated-Date: '2024_08_07'
r57shell_php_php:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1dba9eb0ae9e58b8f8ad356c03ca0b53
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the r57shell PHP web shell, a malicious script used for unauthorized remote access and control over a compromised web server. It identifies signatures such as specific code snippets related to HTTP POST variables, references to the RusH security team, back-connect functionalities, and the title tag in HTML indicating "r57shell".
  Updated-Date: '2024_08_07'
rdrbs084:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2961b7ebe0cb3b220bd3f3767878ad14
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific executable file (rdrbs084.exe) that is likely associated with webshell activities. It identifies the file by matching specific strings within it, such as "Create mapped port. You have to specify domain when using HTTP type." and "<LOCAL PORT> <MAPPING SERVER> <MAPPING SERVER PORT> <TARGET SERVER> <TARGET". These strings indicate functionality related to network port mapping and server configuration, which are commonly used in webshells for controlling network communication and potentially redirecting traffic.
  Updated-Date: '2024_08_07'
rdrbs100:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: af2979095fc7181496cc67927af08833
  Ruleset: securityonion-yara
  Summary: This rule detects a specific executable file named "rdrbs100.exe," which is likely associated with auto-generated webshells. The detection is based on the presence of particular strings within the file, including phrases related to server address formatting and port mapping.
  Updated-Date: '2024_08_07'
reDuhServers_reDuh:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: dcd503d8eaa78769461438bcc85fa5dc
  Ruleset: securityonion-yara
  Summary: This rule detects a specific Chinese hack tool known as "reDuh" by identifying unique strings within the "reDuh.jsp" file. The tool facilitates a communication channel, likely for unauthorized server access or data exfiltration, as indicated by its error handling and IPC service binding strings. The detection is based on distinct print statements used within the reDuh code to signify errors, output data, and successful service binding.
  Updated-Date: '2024_08_07'
reDuhServers_reDuh_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ae42a39967527996b8d919d5457e8e3b
  Ruleset: securityonion-yara
  Summary: This rule detects a Chinese hacktool set file named reDuh.php. It identifies the presence of this file by looking for specific strings related to error logging and socket data management. These strings include log messages used in the tool's frontend and backend components, such as commands sent on a port, new data messages, and socket key logging. The rule applies when the file size is less than 57KB and all identified strings are found within it.
  Updated-Date: '2024_08_07'
reDuhServers_reDuh_3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2a3bdf0a3fbb12fe622023c51d034ac5
  Ruleset: securityonion-yara
  Summary: This rule detects a malicious script file reDuh.aspx, which is part of the Chinese hacktool set and is associated with unauthorized network access. It identifies specific strings within the file, such as error messages and host resolution commands. These indicators suggest attempts to establish illicit connections to a targeted server or manipulate network sockets, reflecting typical backdoor functionalities designed to infiltrate or control targeted systems.
  Updated-Date: '2024_08_07'
redSails_EXE:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 794a12bba157d65dac3a9882a59c19b3
  Ruleset: securityonion-yara
  Summary: This rule detects the Red Sails Hacktool by identifying references to WinDivert within executables. It looks for the presence of strings related to WinDivert64.dll and WinDivert32.dll in files smaller than 6000KB that begin with the characteristic "MZ" header.
  Updated-Date: '2024_08_07'
redSails_PY:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2f17f15a4a5885e32c017b10430d95d7
  Ruleset: securityonion-yara
  Summary: This rule detects the Red Sails Hacktool, which is written in Python. The tool is notable for establishing a command shell on a host, handling errors encountered during shell operations, targeting IP addresses with backdoors installed, and opening specific backdoor ports on victim machines. The detection looks for several specific strings related to these activities to identify the presence of the tool.
  Updated-Date: '2024_08_07'
remsec_encrypted_api:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a1cf6e4e14f764dba2e9d563f8e64c44
  Ruleset: securityonion-yara
  Summary: This rule detects a specific piece of malware associated with the Strider cyber-espionage group, also known as Remsec, which was detailed in a report by Symantec. The rule identifies the malware by looking for a unique sequence of hexadecimal bytes that corresponds to an encrypted API in the malicious software.
  Updated-Date: '2024_08_07'
remsec_executable_blob_32:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: cac8c17f517dabfd4f5eefc0fe37db79
  Ruleset: securityonion-yara
  Summary: This rule detects malicious software associated with the Strider cyber espionage group, as reported by Symantec. It identifies a specific sequence of code indicative of this malware through a unique pattern of bytes present within executable files.
  Updated-Date: '2024_08_07'
remsec_executable_blob_64:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 20ea3423854e37c90746028fff921ac0
  Ruleset: securityonion-yara
  Summary: This rule detects a 64-bit executable blob associated with the Strider APT group, as reported by Symantec. Specifically, it identifies a unique sequence of bytes within the code that is characteristic of the malware used by the Strider cyberespionage group.
  Updated-Date: '2024_08_07'
remsec_executable_blob_parser:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9ba2e6c9b04d3f9690b43bc3978313d1
  Ruleset: securityonion-yara
  Summary: This rule detects malware associated with the Strider APT (Advanced Persistent Threat) group, specifically targeting executable blobs as reported by Symantec. It identifies this malware by looking for a specific sequence of hexadecimal byte patterns, which match the unique characteristics of the malicious code used by this cyberespionage group.
  Updated-Date: '2024_08_07'
remsec_packer_A:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 083de2951d0f9470567c016739d648ba
  Ruleset: securityonion-yara
  Summary: This rule detects malware associated with Symantec's Strider APT report. It identifies specific byte sequences in code to determine the presence of this malware, which is tied to the cyberespionage group known as Strider. This group has been specifically noted for its advanced threat capabilities.
  Updated-Date: '2024_08_07'
remsec_packer_B:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a08f5d0969950afb2bd3725c79e0be12
  Ruleset: securityonion-yara
  Summary: This rule detects malware associated with Strider, a sophisticated cyberespionage group, by identifying a specific sequence of machine code instructions. The detection is based on a unique pattern of operations and memory address manipulations characteristic of the group's malicious software, as documented in Symantec's report.
  Updated-Date: '2024_08_07'
remview_2003_04_22:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d9bd3d3efe2e4635ea8fd6cc60b4b9d2
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific webshell file named "remview_2003_04_22.php," indicated by a unique string that includes HTML elements and text related to evaluating PHP code and cautioning not to type certain characters. The detection relies on matching this distinctive pattern within the file.
  Updated-Date: '2024_08_07'
rknt_zip_Folder_RkNT:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3c2872d1d9ebfce8e4bd2aeb3ba061d3
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a potentially malicious file named "RkNT.dll," which is indicative of webshell activity. The file is identified by strings related to specific functions and messages, including "PathStripPathA," a reference to UPX packer, and strings associated with process creation and image directory entry manipulation. These characteristics help in recognizing the signature of the file, which may be packed with the UPX executable packer.
  Updated-Date: '2024_08_07'
rootshell_php:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 782400162380479d2137a4214294200b
  Ruleset: securityonion-yara
  Summary: This rule detects a PHP web shell identified as "rootshell.php.txt" based on specific strings typically found within the malicious script. It searches for indications such as a reference to "shells.dl.am," a message stating "This server has been infected by $owner," an HTML input element with the label "Include!," and an error message indicating a failure to write to file potentially due to no text input. The presence of at least two of these strings triggers the detection.
  Updated-Date: '2024_08_07'
rst_sql_php_php:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0d3c1f948cc26ab0188240ea139c8d27
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the file "rst_sql.php.php.txt" which appears to be associated with a malicious activity involving a PHP script. It looks for specific string patterns including a temporary file path "C:\\tmp\\dump_", a reference to "RST MySQL", a URL "http://rst.void.ru", and a specific encoded string representing a background setting in the format "R0lGODlhCQAJAIAAAOfo6u7w8yH5BAAAAAAALAAAAAAJAAkAAAIPjAOnuJfNHJh0qtfw0lcVADs=". The detection condition triggers if any two of these patterns are found.
  Updated-Date: '2024_08_07'
rtf_CVE_2018_0802:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4c4e15c412a0a7a06bd32656fe846dca
  Ruleset: securityonion-yara
  Summary: This rule detects attempts to exploit CVE-2018-0802, a vulnerability in Microsoft Office software that allows for code execution through specially crafted RTF files. It identifies malicious documents by searching for specific byte sequences linked to the Equation Editor exploit and a pattern in the RTF header that indicates the presence of shellcode.
  Updated-Date: '2024_08_07'
ru24_post_sh_php_php:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0c017b9bf5b34d98f6375d3c126df460
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific web shell named "Ru24PostWebShell" that is written in PHP. The detection focuses on unique strings within the file, including a title related to executing commands via the web shell (`<title>Ru24PostWebShell - \".$_POST['cmd'].\"</title>`), a conditional check for the 'cmd' POST parameter, and a comment within the code indicating it was written by "DreAmeRz". The rule identifies this malware based on the presence of at least one of these distinctive strings.
  Updated-Date: '2024_08_07'
s4u:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: fb854b55ebd7e0ed659f3aabadea8bc1
  Ruleset: securityonion-yara
  Summary: This rule detects the "s4u.exe" executable, a tool that enables the creation of a cmd.exe process under the context of any user without needing their password. It identifies specific and less specific strings related to error messages and process interactions, as well as generic strings like system file paths and function names often associated with privilege adjustments and process handling. The rule applies to files smaller than 60 KB that match criteria such as starting with the "MZ" header and containing at least one distinctive string or a full set of characteristics from defined categories.
  Updated-Date: '2024_08_07'
s72_Shell_v1_1_Coding_html:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 328bdaee932e73a3d45ba08338a169f7
  Ruleset: securityonion-yara
  Summary: This rule detects a specific HTML file associated with the "s72 Shell v1.1" coding tool, identifiable by distinct phrases within the script. Notable strings include a reference to "Dizin" within HTML formatting, mention of the creator "Cr@zy_King" in relation to version 1.0 of the tool, and HTML code displaying the message "Dosya Zaten Bulunuyor" indicating that a file already exists.
  Updated-Date: '2024_08_07'
samrdump:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ddcb09876b1e8441168f6442a5d9df33
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of tools compiled with Impacket, specifically targeting the executable "samrdump.exe". The rule checks for specific ASCII strings within the file that match "bsamrdump.exe.manifest" and "ssamrdump". Additionally, it enforces conditions based on the file's structure and size, requiring the file to begin with the 0x5a4d header and be smaller than 17000 KB.
  Updated-Date: '2024_08_07'
saphpshell:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 324b16e0dfdcff24baa7dbfe3114aceb
  Ruleset: securityonion-yara
  Summary: This rule detects a specific PHP web shell named "saphpshell.php," which is a script designed for remote administration or exploitation of web servers. It identifies the web shell by looking for an HTML input field used to execute commands, where the value of the input field corresponds to a POST request parameter named "command." This indicates the presence of a potentially malicious interface designed to allow the user to run arbitrary commands on the web server.
  Updated-Date: '2024_08_07'
sbin_squid:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 964ee18b72c8c27af1f00ddcc2d25f01
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a file named "squid.bat," which is associated with a Chinese hacktool set. Indicators within the file include specific commands for deleting files, initializing the Squid cache with "squid.exe -z," and starting and stopping the Squid service using "net start Squid" and "net stop Squid." The detection is based on the file size being less than 1KB and containing all these specified strings.
  Updated-Date: '2024_08_07'
scanarator:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: dc86c9737ca7b3090ca11c2ff36a1b83
  Ruleset: securityonion-yara
  Summary: This rule detects the execution of a specific command on the file scanarator.exe, looking for an HTTP GET request aimed at exploiting a directory traversal vulnerability to execute a command that lists directory contents via cmd.exe.
  Updated-Date: '2024_08_07'
scanarator_iis:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 93e0b39947932e4eb7bb7c3c2d7f32e1
  Ruleset: securityonion-yara
  Summary: 'This rule detects the presence of specific strings within a file named "iis.exe." It looks for the occurrence of the text "example: iis 10.10.10.10" and the phrase "send error."'
  Updated-Date: '2024_08_07'
scanms_scanms:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c3445c6b26235b66b86badd2af283afc
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the Chinese hacktool known as scanms.exe, which is used to scan for systems vulnerable to the MS03-026 vulnerability. Notable strings within the executable include a banner indicating it's the ScanMs Tool by Internet Security Systems, a description of its scanning capabilities, accuracy information for various Windows versions, and references to specific IP address ranges. The tool claims greater accuracy on Windows XP and 2000, and also contains a reference to Internet Explorer 1.0, suggesting analysis of certain browser versions. The rule triggers if the file matches certain conditions, such as a specific file signature and size constraints.
  Updated-Date: '2024_08_07'
screencap:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a180a0ba299d29e86a004e81f945b3d2
  Ruleset: securityonion-yara
  Summary: This rule detects a specific executable file named "screencap.exe" that likely functions as a webshell. It is flagged based on the presence of particular strings within the file, including "GetDIBColorTable," "Screen.bmp," and "CreateDCA." Such strings suggest the file involves screen capture functionality, confirming its intended malicious use.
  Updated-Date: '2024_08_07'
sekurlsa:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5cabcf402133b1cf0c5c179dbabb828d
  Ruleset: securityonion-yara
  Summary: 'This rule detects a Chinese hack tool identified as the file `sekurlsa.dll`. The detection is based on specific strings found within the file, including French phrases like "Bienvenue dans un processus distant," "Format d''appel invalide : addLogonSession [idSecAppHigh] idSecAppLow Utilisateur," references to "SECURITY\\Policy\\Secrets," and partial phrases related to data injection. The file is validated to start with the typical ''MZ'' header of a Windows executable and must be less than 1150KB in size.'
  Updated-Date: '2024_08_07'
sendmail:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 77b9cfce20e2fbf623d306c7080fe0b1
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the `sendmail.exe` file, which is identified as a webshell based on specific strings found within it. One indicative string is "_NextPyC808," and another string references copyright information from Diamond Computer Systems Pty. Ltd. These characteristics collectively indicate that the file is auto-generated and potentially malicious.
  Updated-Date: '2024_08_07'
servpw:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 912cc9f5da5befdb1b77e9078226db35
  Ruleset: securityonion-yara
  Summary: This rule detects a tool named "servpw.exe" used by APT groups. It identifies specific text strings within the file, such as error messages for failing to open a target process, write to process memory, and create a remote thread, references to "LSASS.EXE" and a DLL file named "lsremora64.dll," along with a thread code and path format string. The rule triggers if the file has a specific header value, is smaller than 200KB, and contains at least three of the identified strings, or if it contains all the defined strings.
  Updated-Date: '2024_08_07'
settings:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 035798c599755169a3064058c7f8c9e0
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of Laudanum Injector Tools by identifying specific strings within a file named `settings.php`. It looks for patterns such as HTML code setting a port input with a default value of 8888, phrases related to a reverse shell, and a file browser reference. The rule applies to files under 13KB in size, ensuring all specified patterns are matched.
  Updated-Date: '2024_08_07'
sh_php_php:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c5000f0b31118f4cd0755e970fae0b6b
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a potentially malicious PHP file, identified by specific strings. One string checks for an array of file names commonly associated with Linux system files, such as '/etc/passwd' and '/etc/shadow'. Another string looks for an HTML input element used in a PHP script that conditionally checks a POST parameter. These indicators suggest the file may be involved in unauthorized system access or manipulation.
  Updated-Date: '2024_08_07'
shankar_php_php:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a55f1c8e533f6a717ae3dfeab1a45172
  Ruleset: securityonion-yara
  Summary: This rule detects a PHP file potentially named "shankar.php.php" which includes specific input elements and code associated with the author "ShAnKaR". It looks for characteristic HTML input elements for checkboxes and text input fields that are dynamically generated based on POST requests, indicating potentially malicious or unauthorized database interactions within the PHP script.
  Updated-Date: '2024_08_07'
shell_php_php:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9e1264e9a534e4611ad8fa8b9852aec4
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific PHP shell script, identifiable by distinct strings within the file. The script may involve temporary file creation using the `tempnam` function and operations such as navigating directories through command-line input. Notable patterns include comments related to finding parent directories and using functions like `ereg` to handle command inputs.
  Updated-Date: '2024_08_07'
shellbot_pl:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 80daab4e970c8f03f7ea1156fc2dbdb0
  Ruleset: securityonion-yara
  Summary: This rule detects an instance of ShellBOT, a type of malware associated with the PacktsGr0up and CoRpOrAtIoN, by identifying specific keywords within a file. Notable strings include "ShellBOT" and "# Servidor de irc que vai ser usado," indicating references to IRC server usage, and a pattern matching command "/^ctcpflood\\s+(\\d+)\\s+(\\S+)" often employed in shellbot communications. The presence of any two of these specified strings is sufficient to trigger detection.
  Updated-Date: '2024_08_07'
shells_PHP_wso:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 13f19726d165dd1c13ba9d3f6a0ce8bf
  Ruleset: securityonion-yara
  Summary: This rule detects a piece of PHP malware known as WSO web shell. It searches for specific strings within a file, including code related to backconnect functionality and HTML content indicating the execution of PHP code through a form. These patterns are indicative of a web shell designed for unauthorized remote access and control of a compromised server.
  Updated-Date: '2024_08_07'
shelltools_g0t_root_Fport:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: da021cd5acff7fec5fd50a66859ecfa4
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific version of the Fport.exe file, a network utility authored by Foundstone, Inc. It searches for distinctive strings within the executable, including copyright information from the year 2000 and a specific message indicating that administrator privileges are required to run the program. This information helps identify the exact version of the file for security and detection purposes.
  Updated-Date: '2024_08_07'
shelltools_g0t_root_HideRun:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: bac61d7dcad41e6a5134e8ef87737124
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the file HideRun.exe, a tool associated with webshells that might be used to conceal the execution of applications. The detection looks for specific text strings within a file, such as usage instructions for HideRun and a reference to Alexey A. Popoff from Moscow, dated 1997.
  Updated-Date: '2024_08_07'
shelltools_g0t_root_resolve:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 92d9967b8c54ebaa1213a3201b83a734
  Ruleset: securityonion-yara
  Summary: 'This rule detects the presence of a file named "resolve.exe," which is associated with webshells and has a specific hash value of 69bf9aa296238610a0e05f99b5540297. It looks for a set of specific strings within the file: "3^n6B(Ed3," "^uldn''Vt(x," "\\= uPKfp," "''r.axV<ad," "p,modoi$=sr(," "DiamondC8S t," and "`lQ9fX<ZvJW." The detection condition is met when all these strings are found.'
  Updated-Date: '2024_08_07'
shelltools_g0t_root_uptime:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 811c97593f9c8239182cdcb762961931
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific webshell-related file named "uptime.exe." It identifies the file by matching unique strings within its content, such as "JDiamondCSlC~," "CharactQA," and a specific message indicating the file is packed with the UPX executable packer. This rule helps in identifying a potentially malicious packed executable used in webshells.
  Updated-Date: '2024_08_07'
shelltools_g0t_root_xwhois:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f73a0978fdf75d91a1bac82c4a110faa
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the file "xwhois.exe," a type of webshell, by identifying specific strings within the file. These strings include "rting! ", "aTypCog(", "Diamond," and "r)r=rQreryr." The presence of all these strings in a file triggers the detection.
  Updated-Date: '2024_08_07'
shimrat:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2816e05fd879ae887a5e611f988f5f44
  Ruleset: securityonion-yara
  Summary: This rule detects ShimRat and the ShimRat loader, which are noted through specific indicators such as the presence of ".dll" and ".dat" files, specific header and data signatures ("QWERTYUIOPLKJHG", "MNBVCXZLKJHGFDS"), as well as markers ("Data$$00", "Data$$01%c%sData"). Additionally, it identifies command line formats used in ping commands, keywords related to demo projects ("Demo", "Win32App"), and environment variable references ("COMSPEC"). The rule also cites functions associated with ShimRat ("ShimMain", "NotifyShims", "GetHookAPIs") to confirm detection.
  Updated-Date: '2024_08_07'
shimratreporter:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: dcf7f1f78aa7a3e947e87a9a973737b9
  Ruleset: securityonion-yara
  Summary: This rule detects the ShimRatReporter malware by identifying various distinctive strings related to system and network information gathering. The strings include terms like "IP-INFO," "Network-INFO," "OS-INFO," "Process-INFO," "Browser-INFO," "QueryUser-INFO," "Users-INFO," and "Software-INFO." It also looks for specific patterns such as the address format "%02X-%02X-%02X-%02X-%02X-%02X" and the string representation of a proxy setting "(from environment) = %s." Additionally, the rule searches for functions like "NetUserEnum" and "GetNetworkParams," indicating an effort to enumerate network parameters and user information.
  Updated-Date: '2024_08_07'
sig_2005Gray:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e2ae381b115aa106586d6924de5022d5
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a webshell file named "2005Gray.asp" based on specific string patterns found in the file. The identified strings include CSS properties for scrollbar appearance, an HTML echo command with embedded JavaScript references, and a method for manipulating and comparing URL paths. These characteristics indicate an auto-generated script designed to facilitate unauthorized remote control of a web server.
  Updated-Date: '2024_08_07'
sig_2008_php_php:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b67efcf47b4240c06b8f10e74263e5ff
  Ruleset: securityonion-yara
  Summary: This rule detects a PHP script credited to "angel(4ngel)" with an associated web link to "http://www.4ngel.net". It identifies the script by searching for specific markers such as a reference to cookie lifespan settings and a particular error message indicating that a requested downloadable file does not exist.
  Updated-Date: '2024_08_07'
sig_238_2323:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 186f2008b479cb896366e7a980b1dca2
  Ruleset: securityonion-yara
  Summary: 'This rule detects a hacktool identified by the filename "2323.exe," known for being older software. The tool appears to involve network functionalities, such as listening on a specific port (defaulting to "2323") and accepting connections from clients, which is indicated by the strings embedded in its code. It also includes command-line usage instructions like hiding the window and error handling messages. The presence of these specific strings, such as "port - Port to listen on" and "Usage: srvcmd.exe [/h] [port]," along with error and connection messages, signifies the tool''s purpose and usage characteristics.'
  Updated-Date: '2024_08_07'
sig_238_FPipe:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ef48d6a39533fd3b9d46767870d99dd3
  Ruleset: securityonion-yara
  Summary: This rule detects the file FPipe.exe, an old hacktool designed for network traffic routing. It identifies specific ASCII strings within the file, including references to resolving hostnames, configuring source ports, and attempting to connect to specified ports. The detected strings also include a source URL related to Foundstone, a security resource site. These indicators collectively suggest the presence of this particular hacktool used historically for manipulating network traffic.
  Updated-Date: '2024_08_07'
sig_238_Glass2k:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0341ce31f584d4a7135246299bb6e338
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the hacktool "Glass2k," identified by the executable file "Glass2k.exe." It utilizes specific strings related to the tool, including copyright notices from Lee Hasiuk, paths referencing Microsoft Visual Studio and WINNT System32, and mentions of "NeoLite Executable File Compressor." These strings are used to confirm the detection of this older hacktool.
  Updated-Date: '2024_08_07'
sig_238_RunAsEx:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9903a9706d0ea171c200b4d98075c3ba
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the hacktool RunAsEx.exe, which is an old utility designed by an author named Assassin, intended to run processes under different user accounts. It looks for specific strings in files, such as references to "RunAsEx By Assassin 2000", command usage instructions, and execution messages. The tool features the ability to run with specified username and password credentials, and the rule identifies files that contain certain keywords and phrases related to its operation.
  Updated-Date: '2024_08_07'
sig_238_TELNET:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3d6f7f149fd735b16a781fb7eb199e7b
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific hacktool file named TELNET.EXE associated with the Windows ME operating system. The rule identifies the tool through multiple distinct text strings, including commands, file names, and specific registry entries related to the Telnet software in Windows ME. The detection is based on recognizing these unique characteristics together.
  Updated-Date: '2024_08_07'
sig_238_TFTPD32:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e9258b0e2a19c24cba6cf37ff44d10c6
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a disclosed hacktool file named TFTPD32.EXE by identifying specific text strings embedded within the file. These strings include URLs, help file references, timeout and port configuration messages, version information, and log message patterns related to timeouts and acknowledgments, all commonly associated with the Tftpd32 software. Additionally, the rule checks for registry entries related to Tftpd32, enhancing the accuracy of detection.
  Updated-Date: '2024_08_07'
sig_238_cmd_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ce935e13d440fcd92d8c5501ecc6f682
  Ruleset: securityonion-yara
  Summary: This rule detects a disclosed hacktool set related to a file named "cmd.jsp." It identifies the presence of several specific Java programming elements that indicate suspicious activity. The rule searches for the execution of system commands via `Runtime.getRuntime().exec()`, the reading of input streams to capture command outputs, the retrieval of commands from web requests, continuous reading from streams, and the importation of Java I/O libraries within a JSP page. These characteristics are common in web-based hacking tools designed for remote command execution.
  Updated-Date: '2024_08_07'
sig_238_concon:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6c4b08e37e730975baa1540ffc125708
  Ruleset: securityonion-yara
  Summary: 'This rule detects a hacktool identified by the file name "concon.com" and looks for a specific string pattern that includes the usage instruction "Usage: concon \\\\ip\\sharename\\con\\con". This pattern is checked in its entirety as a full word in ASCII encoding.'
  Updated-Date: '2024_08_07'
sig_238_eee:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 43febdb5176d37a08424d500c79b13fb
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of an old hacktool, specifically the file named "eee.exe." The detection is based on multiple indicators including specific email addresses, file paths related to Visual Basic (VB) development environments, commands linked to VB scripts, registry keys associated with Internet Explorer typed URLs, and dynamic link libraries (DLLs) such as "vb5chs.dll" and "MSVBVM50.DLL." These strings collectively indicate the hacktool's footprint on a system, identifying it through its unique and known components.
  Updated-Date: '2024_08_07'
sig_238_findoor:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: eb98e82c62138c726e123f00c1fdc9af
  Ruleset: securityonion-yara
  Summary: This rule detects an old hacktool known as "findoor.exe." The detection is based on specific strings found within the file, including error messages related to non-Win32 executables, an email address used by hackers, a path to the Windows command executable, an email command involving a hacker address, and a specific URL.
  Updated-Date: '2024_08_07'
sig_238_fscan:
  Created-Date: '2024_08_06'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5c05f414c6e362ca9fc678405ce65a59
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the hacktool named fscan.exe, which is an older tool used for network scanning. The detection is based on specific strings contained within the executable, such as version information, command-line options for port scanning and pinging, example usage, thread settings for scanning, error messages, and references to the developer's website. These distinctive text patterns confirm the identity of fscan.exe as a command-line port scanner.
  Updated-Date: '2024_08_06'
sig_238_gina:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 83c53d9ffb0170d5d64a0910d34c764a
  Ruleset: securityonion-yara
  Summary: This rule detects a specific hacktool through the presence of a registry file, "gina.reg", associated with the outdated customization of the Windows logon process. The detection is based on strings related to the modification of the "gina.dll" file in the Windows Registry, specifically under the "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon" key, and the inclusion of "REGEDIT4".
  Updated-Date: '2024_08_07'
sig_238_hunt:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: aa00a52a24b263a7b2bad2c746732960
  Ruleset: securityonion-yara
  Summary: This rule detects an old hack tool identified as "hunt.exe," specifically tailored for Windows NT systems. It recognizes specific strings related to SMB share enumeration and administrative account discovery. The rule examines files for distinct text outputs associated with the tool's usage, such as terms indicating its programming, SMB share enumeration functionalities, and administrative account identification. Key phrases include "Programming by JD Glaser - All Rights Reserved," usage instructions, output formats, and various operational messages aimed at administrators.
  Updated-Date: '2024_08_07'
sig_238_iecv:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 011c3da10188440529d604a57fb712b3
  Ruleset: securityonion-yara
  Summary: This rule detects a disclosed hacktool associated with the executable file "iecv.exe," which is characterized by specific textual sequences. It looks for strings such as "Edit The Content Of Cookie," references to "Accessories\\wordpad.exe," the domain "gorillanation.com," a warning about closing all Internet Explorer windows before editing cookies, and a URL linking to "http://nirsoft.cjb.net." These indicators help identify the presence of the hacktool that deals with cookie manipulation and other related activities.
  Updated-Date: '2024_08_07'
sig_238_letmein:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1b7b9f5cc99dc87e5f5f57dcdf320d06
  Ruleset: securityonion-yara
  Summary: This rule detects the hacktool "letmein.exe," which is identified through specific error messages and operation texts within the executable. It looks for strings related to errors retrieving global group members and users from a server, as well as other phrases indicating actions within a Windows NT environment.
  Updated-Date: '2024_08_07'
sig_238_listip:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2319ae03b4ae64bcad04bae06e592c81
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the hacktool file "listip.exe," an older disclosed hacktool. It uses specific error messages and strings related to host lookup failures, local host and computer names, local IP addresses, and the use of the "exe32pack 1.38" packer to identify the file.
  Updated-Date: '2024_08_07'
sig_238_nbtdump:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 309d147a6e20c729581f8c49a5b021e7
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the nbtdump.exe file, a hack tool, by looking for specific text strings within it. These strings include references to the creation of a results file, usage of the tool on a remote machine, and phrases related to the Cerberus NBTDUMP and Internet Scanner. Also included are strings indicating the display of account information and password status, both in plain text and wide character format.
  Updated-Date: '2024_08_07'
sig_238_sqlcmd:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e00c9ad5d9c392453ffd1e82425d72a6
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a tool named "sqlcmd.exe," which is an older disclosed hacktool. The detection relies on specific strings related to SQL command execution, such as "Permission denial to EXEC command.:(" and references to connection success messages like "Connect to %s MSSQL server success.Enjoy the shell.^_^." It also includes indicators such as usage instructions for the tool and mentions the "Inside Edition" version, along with a URL and an example usage pattern. These features help identify the hacktool's presence based on its distinctive characteristics.
  Updated-Date: '2024_08_07'
sig_238_token:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ff1394d86289b6393957553f12337165
  Ruleset: securityonion-yara
  Summary: 'This rule detects the presence of a disclosed hacktool named "token.exe." It searches for specific strings within the file, including "Logon.exe," "Domain And User," "PID=Get Addr$(): One," "Process," and "psapi.dllK." The rule uses the hash "c52bc6543d4281aa75a3e6e2da33cfb4b7c34b14" to identify the specific variant of the hacktool, which is known for its illegitimate activities such as unauthorized user credential manipulation and process injection.'
  Updated-Date: '2024_08_07'
sig_238_webget:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 72040342f60978a7f4c3f1267eda3564
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the hacktool called "webget.exe," an older disclosed hacktool. The detection is based on specific textual patterns within the executable file, such as the phrases "Packed by exe32pack," "GET A HTTP/1.0," "error," and a partial match for "Downloa." The rule utilizes these unique string patterns to identify the specific file in question.
  Updated-Date: '2024_08_07'
sig_238_xsniff:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: da5072aa7f2f81f1ef3ff3bbab1a9bc4
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the xsniff.exe hacktool, an older sniffer tool designed for Windows 2000. It identifies specific executable command strings and parameters related to xsniff.exe, such as filtering usernames and passwords, logging to pass.log, and outputting TCP and UDP packets. It also looks for references to a specific IP address, the author "glacier" from xfocus.org, and descriptions indicating the tool's purpose and commands.
  Updated-Date: '2024_08_07'
simple_backdoor_php:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: eb2da9788844f17c749c8648cc407362
  Ruleset: securityonion-yara
  Summary: This rule detects a simple PHP backdoor script known as simple-backdoor.php, which allows attackers to execute commands on a target server. Key indicators include a specific comment indicating its creation by DK from michaeldaw.org and a usage example showing how to trigger the backdoor via a command parameter. Additionally, the rule looks for a particular PHP code snippet that assigns a request parameter 'cmd' to a variable, facilitating remote command execution.
  Updated-Date: '2024_08_07'
simple_cmd_html:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 90b4df28ad00f673a878234f691c300f
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a malicious web shell script identified as "G-Security Webshell" embedded within an HTML file. The code in question includes specific HTML and PHP components, such as a title tag indicating "G-Security Webshell," an input field for command entry, and PHP scripts that execute the entered commands using `Shell_Exec` while storing the command in a request parameter. These elements collectively identify behavior consistent with web-based command execution scripts often used in web shell attacks.
  Updated-Date: '2024_08_07'
skeleton_key_injected_code:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9e1e7acb1b2ab448570bde3e9448d57c
  Ruleset: securityonion-yara
  Summary: This rule detects injected code and patches associated with the Skeleton Key malware, which is known for compromising enterprise environments by allowing unauthorized access. It identifies specific machine code patterns related to the malware's modifications in functions such as `CDLocateCSystem`, `SamIRetrievePrimaryCredential`, and `SamIRetrieveMultiplePrimaryCredential`. These functions are typically associated with credential retrieval and the system's lower-level operations, indicating the malware's attempt to establish persistent backdoor access and manipulate authentication mechanisms.
  Updated-Date: '2024_08_07'
skeleton_key_patcher:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4a6f5309ebd170dda7f0fffea81f941f
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the Skeleton Key malware, specifically identifying modifications made by the Skeleton Key Patcher as reported by Dell SecureWorks. It focuses on identifying the process "lsass.exe" and the dynamic link libraries "cryptdll.dll" and "samsrv.dll". Additionally, it looks for a file named "HookDC.dll" and checks for certain patched functions within the DLLs, including "CDLocateCSystem", "SamIRetrievePrimaryCredentials", and "SamIRetrieveMultiplePrimaryCredentials". These identified elements are indicative of the Skeleton Key malware's activities and attempt to manipulate authentication processes.
  Updated-Date: '2024_08_07'
small_php_php:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e0fe42a0073acf4c44427212082e6770
  Ruleset: securityonion-yara
  Summary: This rule detects a specific PHP script file, identified by the filename "small.php.php.txt". The script contains a hard-coded password "$pass='abcdef1234567890abcdef1234567890';", a string that includes an evaluation of gzinflated and base64 decoded data using `eval(gzinflate(base64_decode(...)))`, and a directive to set the error log to NULL using `@ini_set('error_log',NULL);`. These characteristics suggest obfuscation and code evaluation techniques often seen in malicious PHP scripts.
  Updated-Date: '2024_08_07'
snifferport:
  Created-Date: '2024_08_06'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b88e15213a91c64f50c3292b982d6b26
  Ruleset: securityonion-yara
  Summary: This rule detects the file "snifferport.exe," which is part of a disclosed hacktool set. It identifies specific strings within the file such as "iphlpapi.DLL," "ystem\\CurrentCorolSet\\," "Port.TX," "32Next," and "V1.2 B." These strings are used to confirm the presence of this particular hacktool.
  Updated-Date: '2024_08_06'
splitjoin:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3d5503ea904b63dc5ec9b70e56fe75b7
  Ruleset: securityonion-yara
  Summary: This rule detects the hacktool named "splitjoin.exe," which is an older utility designed to split and rejoin files. It identifies this tool through specific strings within the file, such as copyright information attributed to Angus Johnson from 2001-2002, a usage disclaimer indicating it should not be distributed without the author's permission, and the term "SplitJoin".
  Updated-Date: '2024_08_07'
sql1433_SQL:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a6e1370fe21e96613b4144c72a67c015
  Ruleset: securityonion-yara
  Summary: This rule detects a Chinese hacktool named SQL.exe, specifically associated with a certain version 1433. It identifies the presence of the hacktool by looking for particular wide character strings in the file, including "ProductName 1433" and "ProductVersion 1,4,3,3". The file must have an initial 16-bit signature of 0x5a4d and a size of less than 90KB.
  Updated-Date: '2024_08_07'
sql1433_Start:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d891b43b6b92015674761e8f0375b183
  Ruleset: securityonion-yara
  Summary: This rule detects a malicious batch file named "Start.bat," associated with a Chinese hacking toolset. It identifies specific script commands, including iterating through a text file and appending results to another file, launching another batch file named "creck.bat," and deleting specific text files. The rule targets files under 1KB in size and requires at least two of these identified strings to be present.
  Updated-Date: '2024_08_07'
sql1433_creck:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2451d497867286d1c61224b4945f6e2f
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a batch file named "creck.bat" associated with a Chinese hacktool set. The file is identified by specific command patterns involving the execution of "anhao" executables with parameters for input and output text files, passwords, and additional options. The rule checks for these command strings within files smaller than 1KB that begin with the hexadecimal value 0x7473.
  Updated-Date: '2024_08_07'
sql_php_php:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d0916b56ec68b7706da05ec456c02582
  Ruleset: securityonion-yara
  Summary: This rule detects instances of the file "sql.php.php.txt," particularly those containing references to "RST MySQL tools" and the website "http://rst.void.ru". It also identifies specific PHP code snippets related to server self-referential URLs used within MySQL tooling scripts. Key strings used for detection include portions of text output to files and HTML links constructed using PHP server variables.
  Updated-Date: '2024_08_07'
sqlcheck:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 20bf9a607d2b72aa634614867491771e
  Ruleset: securityonion-yara
  Summary: This rule detects an old hacktool known as SQLCheck, specifically targeting the file named sqlcheck.exe. It identifies the tool by searching for specific strings within the file, including a developer signature, command usage patterns, and operational messages indicating the tool's functionality in scanning a class B network. The rule is designed to look for at least three of these distinctive strings to confirm the presence of SQLCheck.
  Updated-Date: '2024_08_07'
stealth_Stealth:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0b9a903e1d7aba8b25c1c04167679e55
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a file named Stealth.exe by identifying specific HTML code patterns and an advisory message within the file. It looks for a particular HTML table structure with specified attributes, as well as a notice indicating that the tool is intended for use only by system administrators, disclaiming responsibility for its use.
  Updated-Date: '2024_08_07'
superscan3_0:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7c6884ab1d7500b799b2b7f5745ea93d
  Ruleset: securityonion-yara
  Summary: This rule detects a specific version of the hacktool known as "SuperScan 3.0". It identifies the tool by looking for the presence of several specific files and strings associated with it. These include configuration and executable files like "scanner.ini", "scanner.exe", and "ws2check.exe", among others. Additionally, it searches for install references such as "1996 InstallShield Software Corporation". The combination of these elements being present indicates the existence of the "SuperScan 3.0" tool on a system.
  Updated-Date: '2024_08_07'
susp_file_enumerator_with_encrypted_resource_101:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7afa9289ac9f2e0e182f36c40eda1d92
  Ruleset: securityonion-yara
  Summary: This rule detects samples that enumerate files and contain an encrypted resource with the identifier 101. The targeted samples typically avoid running in DOS mode and employ specific API functions such as FindFirstFile, FindNextFile, FindResource, and LoadResource, suggesting behavior linked to file enumeration and resource loading. Characteristics include having more than four sections, between two and fourteen resources, and a total file size under 700,000 bytes. The rule also considers the entropy of resources, targeting those with high entropy values indicative of encryption. Additionally, the presence of more than 20,000 bytes in resource 101 with no DOS stub present indicates potential malicious activity.
  Updated-Date: '2024_08_07'
svchostdll:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a9600b1ddbd1db883148bcc2ffa1699e
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a file named "svchostdll.dll" associated with webshell-related activities. The detection is based on specific strings within the file, such as "InstallService," "RundllInstallA," "UninstallService," and "SvcHostDLL.dll." These strings suggest operations related to service installation and uninstallation, internet activity initiation, and user registry manipulation. These characteristics collectively indicate potentially malicious uses, such as unauthorized remote control access or system manipulation.
  Updated-Date: '2024_08_07'
telnet_cgi:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e4b286f1f2160c59769808699c1208ec
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a Telnet CGI script file named "telnet.cgi.txt". It identifies the script by scanning for specific strings within the file, including a warning message indicating a private server, a command to remove a saved password cookie, and a prompt configuration string that varies depending on the operating system, such as Windows NT.
  Updated-Date: '2024_08_07'
telnet_pl:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d7b7da00cc192337eec293f012ca0fcb
  Ruleset: securityonion-yara
  Summary: 'This rule detects the presence of a Perl script named "telnet.pl" that connects to private server environments. It identifies specific content within the script, such as a warning message ("W A R N I N G: Private Server") and HTML formatting information associated with a status message rendered with specific font color and ASCII art.'
  Updated-Date: '2024_08_07'
telnetd_pl:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7af9b282fcf7a03e458e68961f2f9a6f
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a Perl script potentially associated with the "telnetd" service. Specific strings indicative of the script include "0ldW0lf," a message of luck, an expletive phrase indicating frustration, a command utilizing the "ioctl" function with terminal control parameters, and an email address linked to an IRC network. Detecting any one of these strings is sufficient to trigger the rule.
  Updated-Date: '2024_08_07'
templatr:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 913a1d248b433c90cdc5c5083086e0de
  Ruleset: securityonion-yara
  Summary: This rule detects a specific Chinese hacktool named "templatr.php," which is identified through the presence of an encoded string within the file. The file's evaluation involves decoding compressed base64 data, typically indicative of obfuscated malicious scripts often used for unauthorized activities such as data exfiltration or remote access. The rule applies to files smaller than 70KB and confirms the detection based on the described string pattern and other conditions.
  Updated-Date: '2024_08_07'
thelast_index3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 09ffe3c3a8d0f03815874a3db0268e4b
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific web shell file named "index3.php." It focuses on a unique string within the file that includes an error message indicating "Your Name Not Entered!" along with HTML and text suggesting that a required "Your Name" field is missing. This string pattern helps identify the web shell by matching its auto-generated content, which is likely used for malicious purposes.
  Updated-Date: '2024_08_07'
thelast_orice2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 42a0aa2f82490d495b017026523ad164
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific web shell file named "orice2.php" based on certain code patterns within the file. The identified patterns include assigning a variable `$aa` from a GET request and subsequently echoing this variable. The rule aims to identify potentially malicious PHP scripts used for unauthorized web access or control.
  Updated-Date: '2024_08_07'
tools_NTCmd:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4731a4046de601909fbc65f8407d4d75
  Ruleset: securityonion-yara
  Summary: This rule detects a specific Chinese hack tool known as NTCmd.exe. The tool facilitates command execution on remote systems with specified user credentials. It checks for identifiable strings within the file, such as various command syntax related to remote operations and unique version information from the developer. The file is identified by a particular hash value and is characterized by its small size, being less than 80KB.
  Updated-Date: '2024_08_07'
tools_Sqlcmd:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2b16e5ccf1359a233bbf9686a37af756
  Ruleset: securityonion-yara
  Summary: 'This rule detects a specific instance of a Chinese hacking tool named Sqlcmd.exe. It looks for unique strings within the executable file such as usage instructions, success messages upon connecting to an SQL server, and execution commands for the server. The rule identifies the presence of the tool''s signature phrases like "[Usage]: %s <HostName|IP> <UserName> <Password>" and "Cool! Connected to SQL server on %s successfully!", among others. The tool is specifically designed for SQL server interactions and is associated with hacker group identifiers and dates. The detection is based on the file properties and the presence of these distinct strings within files smaller than 40KB.'
  Updated-Date: '2024_08_07'
trigger_drop:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4d392b73c468a82aaa0b7b3a3e307537
  Ruleset: securityonion-yara
  Summary: This rule detects a malicious PHP script named "trigger_drop.php" associated with Chinese hacking tools. It identifies the presence of specific strings within a file, such as a PHP command involving `$_GET['returnto']` set to 'database_properties.php', HTML meta refresh code using `$_GET['returnto']`, a Microsoft SQL command 'DROP TRIGGER', and a condition checking if `$_GET['returnto']` is empty. The rule applies to files smaller than 5KB in size that contain all these strings, implying the script's purpose is related to manipulating database triggers and redirecting web traffic.
  Updated-Date: '2024_08_07'
trigger_modify:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c12aa51c9c5db7738e7fadb8bb68b47c
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a Chinese hacktool named "trigger_modify.php," which is used for modifying database triggers. The rule identifies specific keywords and code snippets within the file, such as form handling, SQL queries via `mssql_query`, conditional statements for handling POST requests, and user interface elements like `<b>Modify Trigger</b>`. The rule flags files smaller than 15KB containing all listed strings to identify this specific hacktool.
  Updated-Date: '2024_08_07'
turla_png_dropper:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3a7d59821799945f02086b232cace373
  Ruleset: securityonion-yara
  Summary: This rule detects the PNG Dropper malware used by the Turla group. It identifies the presence of specific API calls related to GDI+ functions used for image handling, including functions like GdiplusStartup, GdipAlloc, GdipCreateBitmapFromStreamICM, GdipBitmapLockBits, GdipGetImageWidth, GdipGetImageHeight, and GdiplusShutdown. Additionally, it checks for specific patterns of assembly code that indicate the malware's behavior in both 32-bit and 64-bit architectures. The rule confirms the presence of the executable file structure by checking for common PE (Portable Executable) signatures. This combination of conditions ensures the detection of the malicious dropper used by Turla.
  Updated-Date: '2024_08_07'
turla_png_reg_enum_payload:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: bdf807cec3092c5cce9f14d8bfbb368b
  Ruleset: securityonion-yara
  Summary: This rule detects a payload recently deployed by the Turla PNG Dropper. It identifies executables that import specific functions from system libraries, like "StartServiceCtrlDispatcherA" and "RegEnumValueA" from "advapi32.dll," as well as multiple cryptographic operations from "ncrypt.dll." Key strings associated with key storage and cryptographic chaining modes are also indicators, with some strings noted for performance considerations.
  Updated-Date: '2024_08_07'
u_uay:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 58829112f5fa079afe1cf5d5ff9de47b
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a webshell associated with the file "uay.exe." It identifies specific strings indicative of this malware, including a command execution targeting "c:\WINDOWS\System32\freecell.exe" and registry entries related to "SYSTEM\CurrentControlSet\Services\uay.sys\Security."
  Updated-Date: '2024_08_07'
unknown2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 17087a4ea73124ae616fb142e3db4fb0
  Ruleset: securityonion-yara
  Summary: This rule detects a Chinese hacktool known as unknown2.exe by identifying specific strings related to MD5 reverse lookup websites and file patterns. The strings include URLs associated with MD5 hash decryption services, a file named "1.5.exe," and configuration file paths like "\\Set.ini". Additional indicators include the presence of open file dialog references and filters for text files. The rule targets executable files with a specific signature and size constraints.
  Updated-Date: '2024_08_07'
update_PcInit:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2206453f126e84d4582b1c504e29b8f5
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a Chinese hacktool named PcInit.exe. The detection is based on specific string patterns such as "\svchost.exe", "%s%08x.001", and "Global\\ps%08x". Additionally, the rule identifies occurrences of certain "Goodware" strings like "StrStrA" and "StrToIntA", along with the presence of certain driver names. The executable file is expected to have a certain header value and a size under 50KB.
  Updated-Date: '2024_08_07'
uploader_php_php:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e806c99bb31d9f366fa254a8916835d3
  Ruleset: securityonion-yara
  Summary: This rule detects a PHP file named "uploader.php.php.txt" that includes functionality for moving an uploaded file to a destination named "entrika.php". It looks for specific strings in the code, such as instructions for uploading files through an HTML form with an input named "userfile" and a hidden input specifying the maximum file size. This combination of characteristics is indicative of a file upload script, possibly used for managing user-submitted files on a web server.
  Updated-Date: '2024_08_07'
users_list:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 611f3063e8f23acdd4fe6a839b73e323
  Ruleset: securityonion-yara
  Summary: This rule detects a Chinese hack tool named "users_list.php." It identifies the presence of specific strings associated with user management and default database operations within a file. Key indicators include references to creating users, certain authority certificates, and database elements, ensuring that the target file is less than 12KB in size.
  Updated-Date: '2024_08_07'
ustrrefadd:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9d67ce0dcab62dae90b14ae0ce22875f
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a malicious DLL file named "ustrrefadd.dll," associated with a Chinese hacktool set. The detection criteria include specific strings such as an email address "admin@luocong.com" and a homepage URL "http://www.luocong.com," alongside references to another DLL ("ustrreffix.dll") and versioning information for an "Ultra String Reference plugin." The rule applies to files with a certain header signature and size constraints, ensuring it targets the correct malicious file.
  Updated-Date: '2024_08_07'
vanquish:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: dd7cefd1960102ba3c626f768cd951af
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a webshell named "vanquish.dll". It identifies the webshell by searching for specific strings within the file, including a message related to logging attempts to delete protected files and folders, as well as references to functions like VCreateProcessA and VFindFirstFileExW. These unique strings help in the recognition of this particular malicious DLL file.
  Updated-Date: '2024_08_07'
vanquish_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 664915ebbe24b552e434f469fce553f3
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a file named "vanquish.exe" that is associated with webshells. It specifically looks for the string "Vanquish - DLL injection failed:" within the file, likely indicating that the software attempts DLL injection, a technique used to inject code into the address space of another process, but that injection has failed. The rule is intended to identify the described behavior potentially linked to malicious activity involving this executable.
  Updated-Date: '2024_08_07'
w3d_php_php:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e3cc96cf03a288438cca484cea172687
  Ruleset: securityonion-yara
  Summary: 'This rule detects the presence of the W3D Shell, a malicious PHP web shell, by identifying specific strings associated with it such as "W3D Shell," "By: Warpboy," and "No Query Executed." The detection triggers when at least two of these strings are found in the file.'
  Updated-Date: '2024_08_07'
warfiles_cmd:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 07bd6ddd962891957e4b55dd9ea50e8b
  Ruleset: securityonion-yara
  Summary: This rule detects a specific web shell script called "cmd.jsp" associated with the Laudanum Injector Tools. The script enables remote command execution by utilizing methods such as `Runtime.getRuntime().exec()` to run commands sent via HTTP requests. The rule identifies unique strings in the script, including instances of capturing and executing commands and generating HTML forms to submit these commands. This can be used to highlight a potentially malicious web-based tool allowing unauthorized access to execute commands on a server.
  Updated-Date: '2024_08_07'
wce:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: de5bdf98e3d53446966e1e959f7ca2cc
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of Winnti's credential dumping tool, explicitly targeting versions for both x86 and x64 architectures. The rule uses specific hexadecimal patterns to identify the tool's unique signature within system memory, which includes a common sequence that references "primary."
  Updated-Date: '2024_08_07'
webadmin:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b980a5037e03407fd8ecae81cb6792b5
  Ruleset: securityonion-yara
  Summary: "This rule detects the presence of a webshell file named webadmin.php by identifying a specific input field in the file's code, which includes the text `<input name=\"editfilename\" type=\"text\" class=\"style1\" value='\u2026`."
  Updated-Date: '2024_08_07'
webshell:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 642ea0099bf95dd47a38adfb33965d40
  Ruleset: securityonion-yara
  Summary: This rule detects webshells in a file named "webshell.php" by identifying a specific set of code patterns. These patterns include strings such as "RhViRYOzz," "d\\O!jWW," "bc!jWW," "0W[&{l," and "[INhQ@\\." These unique string sequences are collectively used to determine the presence of the webshell, a type of malicious script often used to gain unauthorized access to a web server.
  Updated-Date: '2024_08_07'
webshell_000_403_807_a_c5_config_css_dm_he1p_JspSpy_JspSpyJDK5_JspSpyJDK51_luci_jsp_xxx:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 17713999d3b72ef810a988fef21cd73f
  Ruleset: securityonion-yara
  Summary: This rule detects a web shell by identifying the presence of specific strings and patterns within a file. These patterns include a list of common network ports as well as a code snippet indicating the definition of a private static class named `VEditPropertyInvoker` that extends `DefaultInvoker`. The rule also uses a comprehensive list of known hashes related to web shells to certify detection accuracy.
  Updated-Date: '2024_08_07'
webshell_000_403_807_a_c5_config_css_dm_he1p_xxx:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a1ee7495cf492750dce3256bc5c7b0c4
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a web shell by looking for specific hardcoded strings that indicate potentially malicious behaviors. These strings include parameters and functions related to downloading files from a specified URL and saving them on the host system. Specifically, it searches for Java code patterns such as obtaining parameters from a request, initializing URL connections, conditionally checking URL and save path parameters, reading files through file input streams, and handling input streams from requests. By matching any four of these strings, the rule aims to identify scripts likely used for unauthorized remote file manipulation.
  Updated-Date: '2024_08_07'
webshell_000_403_c5_config_myxx_queryDong_spyjsp2010_zend:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1c2d59a181b815ce2f6e1c49288f5691
  Ruleset: securityonion-yara
  Summary: This rule detects specific web shell malware variants based on the presence of particular string patterns within the code. The malware is identified in files such as 000.jsp, 403.jsp, c5.jsp, config.jsp, myxx.jsp, queryDong.jsp, spyjsp2010.jsp, and zend.jsp. These web shells may contain code snippets like "return new Double(format.format(value)).doubleValue();", "File tempF = new File(savePath);", and "if (tempF.isDirectory()) {", which are indicative of their operations. The rule triggers if at least two of these patterns are found, providing a method to identify potentially malicious web shell activity within these JSP files.
  Updated-Date: '2024_08_07'
webshell_000_403_c5_queryDong_spyjsp2010:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7e1de79c9438fa94b50fe8b1eab1c24d
  Ruleset: securityonion-yara
  Summary: This rule detects a range of malicious web shell scripts named 000.jsp, 403.jsp, c5.jsp, queryDong.jsp, and spyjsp2010.jsp. The detection is based on specific string patterns found within these files, such as HTML select elements related to encoding options, Java session attributes related to file upload failures, file operations using Java, and invocations involving JSession objects. These patterns are characteristic of web shells used for unauthorized remote access and control over web servers.
  Updated-Date: '2024_08_07'
webshell_000_403_c5_queryDong_spyjsp2010_t00ls:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7b37b420adf5ea2d9e64345cc8e57a3e
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of web shells from specific files named 000.jsp, 403.jsp, c5.jsp, queryDong.jsp, spyjsp2010.jsp, and t00ls.jsp. These files potentially allow unauthorized access to or control over a web server by embedding malicious code into the server, which can be used for spying or other malicious activities. The rule identifies the web shells by matching strings that suggest database or table operations within the JSP files. Examples include HTML and JavaScript code snippets that indicate the generation of dynamic web content for database management purposes.
  Updated-Date: '2024_08_07'
webshell_2008_2009lite_2009mssql:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: fbd3e1fc1871f3d1e1af0c8716a88ff8
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of specific web shells associated with the filenames 2008.php, 2009lite.php, and 2009mssql.php. It identifies these web shells by matching unique strings within the files, such as code related to a file manager interface displaying disk usage and JavaScript used for directory navigation.
  Updated-Date: '2024_08_07'
webshell_2008_2009mssql_phpspy_2005_full_phpspy_2006_arabicspy_hkrkoz:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 46829a6d7ee4e2035f0813033d74b8ff
  Ruleset: securityonion-yara
  Summary: This rule detects a variety of web shells and malicious scripts known to target web servers, including specific examples like mssql_phpspy, phpSpy, arabicspy, and hkrkoz. It identifies these threats by looking for specific code patterns such as "$this -> addFile($content, $filename);", "function addFile($data, $name, $time = 0) {", "function unix2DosTime($unixtime = 0) {", and looping constructs involving "$filelist" and "$filename". These patterns indicate functionalities related to file manipulation and time conversion within the malicious scripts. The rule leverages the presence of these strings to recognize compromised systems running these web shell threats.
  Updated-Date: '2024_08_07'
webshell_201_3_ma_download:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8bb4fc42370ba8f6157e9736f8fde0d4
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of specific web shell files named 201.jsp, 3.jsp, ma.jsp, and download.jsp, which are often used for malicious purposes. It identifies these files by looking for distinctive HTML input element attributes within the file contents, particularly those related to uploading files to the current directory, launching commands, and deleting selected files and directories, including subdirectories. These indicators suggest web shell functionality likely used by attackers to manage files and execute commands on compromised servers.
  Updated-Date: '2024_08_07'
webshell_2_520_icesword_job_ma1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 97d1e65c3a70e9e545987d8060eb10ba
  Ruleset: securityonion-yara
  Summary: This rule detects web shells from specific JSP files including "2.jsp," "520.jsp," "icesword.jsp," "job.jsp," and "ma1.jsp" by identifying the presence of particular HTML meta tags and hidden input elements in these files. The meta tag specifies the content type and character set, while the hidden input elements are associated with event targets and arguments, common features in web shell implementations.
  Updated-Date: '2024_08_07'
webshell_2_520_icesword_job_ma1_ma4_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0ee24899a6a27d5c91e0c4ec145ec49f
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a web shell from specific malicious JSP files named 2.jsp, 520.jsp, icesword.jsp, job.jsp, ma1.jsp, and ma4.jsp. It identifies these web shells based on unique string patterns found in the files, such as definitions for acceptable text file types, HTML elements for uploading files, and conditional checks for request parameters related to passwords. The rule leverages multiple hash values to ensure accurate detection of these malicious files.
  Updated-Date: '2024_08_07'
webshell_2_520_job_JspWebshell_1_2_ma1_ma4_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c2952f138bf156e9c86bcd09583d7344
  Ruleset: securityonion-yara
  Summary: This rule detects a specific type of web shell malware identified in several JSP files (2.jsp, 520.jsp, job.jsp, JspWebshell 1.2.jsp, ma1.jsp, ma4.jsp). The malware operates by using code that reads input streams with functions like `InputStreamReader`, handles user session attributes such as `password`, and utilizes the `Charset.forName("GB2312")` method to set character encoding. These indicators signal the presence of malicious behavior intended to enable unauthorized remote access to web servers.
  Updated-Date: '2024_08_07'
webshell_2_520_job_ma1_ma4_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: cea8efe525cf25130f23ba041364617b
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of web shell scripts identified from files named 2.jsp, 520.jsp, job.jsp, ma1.jsp, and ma4.jsp. The detection is based on specific code strings commonly found in these web shells, such as a target URL pattern for a Microsoft SQL server connection and a meta refresh tag used in HTML. These web shells facilitate unauthorized remote access or control over the compromised servers.
  Updated-Date: '2024_08_07'
webshell_400_in_JFolder_jfolder01_jsp_leo_warn_webshell_nc:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 57112f94c01ed4413a27704d605dcc0a
  Ruleset: securityonion-yara
  Summary: This rule detects a specific web shell associated with files named 400.jsp, in.jsp, JFolder.jsp, jfolder01.jsp, jsp.jsp, leo.jsp, warn.jsp, and webshell-nc.jsp. It identifies key suspicious strings within these files, primarily related to HTML form elements and Java methods for file handling and size calculation. This includes code snippets for appending folder structures, obtaining file sizes, managing file information, and handling hidden form input commands. The detection is based on matching at least two of these defined suspicious strings.
  Updated-Date: '2024_08_07'
webshell_404_data_in_JFolder_jfolder01_jsp_suiyue_warn:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6e9181ea4477fee31138f0e1a13e983b
  Ruleset: securityonion-yara
  Summary: This rule detects a specific web shell by identifying files commonly used by attackers for unauthorized remote access, including "404.jsp," "data.jsp," "in.jsp," "JFolder.jsp," "jfolder01.jsp," "jsp.jsp," "suiyue.jsp," and "warn.jsp." The detection relies on the presence of specific HTML table attributes and comments, which are characteristic of these malicious files.
  Updated-Date: '2024_08_07'
webshell_404_data_in_JFolder_jfolder01_xxx:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d34a0ba3606bc2dc53ff44400a959df8
  Ruleset: securityonion-yara
  Summary: This rule detects a web shell by identifying specific patterns and indicators. It focuses on the presence of a distinct HTML textarea element used to execute commands via the web shell. The identified string is associated with a textarea named "cqq" where the output of the `sbCmd.toString()` function is placed, indicative of remote command execution functionality.
  Updated-Date: '2024_08_07'
webshell_404_data_suiyue:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6ef2fb54dd64425b54cfd4dd4d3a2d40
  Ruleset: securityonion-yara
  Summary: This rule detects a web shell present in files named 404.jsp, data.jsp, and suiyue.jsp. It identifies the presence of a specific string pattern that includes HTML input elements and possibly some JavaScript appending to an `sbCopy` object. The purpose of this identification is to flag potential backdoor or web shell activity used for unauthorized remote access on web servers.
  Updated-Date: '2024_08_07'
webshell_807_a_css_dm_he1p_JspSpy_xxx:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 04f6bc037f9cb5133359dc0e766eae67
  Ruleset: securityonion-yara
  Summary: This rule detects a web shell known as JspSpy, which is used for remote control purposes. It identifies specific HTML elements and attributes typical of this web shell, such as inputs for remote operational control and file management features. The rule matches distinctive strings indicating parts of a remote control interface, including HTML headers and form inputs designed to upload and manage files on a server.
  Updated-Date: '2024_08_07'
webshell_807_dm_JspSpyJDK5_m_cofigrue:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3cad973f8beee221aac9a0c07ccc5f39
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of specific web shell files named 807.jsp, dm.jsp, JspSpyJDK5.jsp, m.jsp, and cofigrue.jsp, which are malicious scripts that allow unauthorized remote control of a web server. By identifying particular strings used in these web shells, such as setting HTTP request headers and local file upload functions, the rule aims to identify potentially harmful web shell activities that can compromise server security.
  Updated-Date: '2024_08_07'
webshell_ASP_RemExp:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6d3ca8706d8d6ade6d196a1fcb9f2326
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific web shell known as "RemExp.asp". The detection is based on unique HTML and ASP code snippets found within the file, including a table data cell and a private function for binary conversion.
  Updated-Date: '2024_08_07'
webshell_ASP_aspydrv:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: fcf9eb67d8efba9fa7724965f9e86e69
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific ASP web shell file named "aspydrv.asp" by looking for a distinctive string pattern within the file. The pattern includes a sequence related to processing or displaying drive information, such as drive letters and types.
  Updated-Date: '2024_08_07'
webshell_ASP_cmd:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0678b2f91aa58a750badc13f4adc6cdb
  Ruleset: securityonion-yara
  Summary: This rule detects a malicious web shell script identified as `cmd.asp`, which uses the `.asp` extension and includes a specific string pattern involving computer and username data provided by an object `oScriptNet`. The presence of this string is indicative of the web shell attempting to gather and potentially expose system and user information, likely for unauthorized access or control over the affected system.
  Updated-Date: '2024_08_07'
webshell_ASP_tool:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ad0c7c66b4c89264e1f34cabda09011e
  Ruleset: securityonion-yara
  Summary: This rule detects a specific ASP-based web shell named "tool.asp" by identifying certain patterns in the script. The patterns include outputting HTML form actions based on server variables, generating directory listings with an Arial font, and creating clickable links with JavaScript actions. These signatures are indicative of malicious web shell behavior, providing attackers with functionalities like file manipulation and directory browsing through a web interface.
  Updated-Date: '2024_08_07'
webshell_ASP_zehir:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 20bd7a77aaa3a4cd599b294129a306df
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a web shell in a file named "zehir.asp." The detection focuses on identifying a specific string within the code that outputs HTML containing Wingdings font with a hyperlink, indicative of web shell behavior.
  Updated-Date: '2024_08_07'
webshell_ASP_zehir4:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 26a373b12f2b050b08131f4ea2f59a7d
  Ruleset: securityonion-yara
  Summary: This rule detects a web shell script named "zehir4.asp" used to compromise web servers. The detection is based on specific code patterns, such as a particular string that includes "Response.Write" and incorporates query parameters for file operations. The presence of this string indicates a likely malicious script designed to execute commands or facilitate unauthorized access to the server.
  Updated-Date: '2024_08_07'
webshell_Ani_Shell:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 843ac986b2570d071caed5eadf1b4512
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the web shell known as Ani-Shell.php, which is identified by specific strings embedded in the file, such as certain Python code indicators and customized password prompts with distinct separators.
  Updated-Date: '2024_08_07'
webshell_Antichat_Shell_v1_3_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: cb2ba190d47630ace21a22b38eda6504
  Ruleset: securityonion-yara
  Summary: This rule detects a specific web shell file named Antichat Shell v1.3.php. It identifies this file by looking for a particular string pattern in its contents, specifically checking for an HTML header that includes the title "Antichat Shell".
  Updated-Date: '2024_08_07'
webshell_B374kPHP_B374k:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 642c385208354ba4dc1b03144a0a0522
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the B374k web shell, specifically a file named B374k.php. It does so by looking for specific strings within the file, including a URL referencing the shell's code repository, obfuscated PHP code involving `str_rot13` and `strrev` functions, and phrases such as "Jayalah Indonesiaku & Lyke @ 2013" and "B374k Vip In Beautify Just For Self." The detection is triggered if any one of these strings is found in the file.
  Updated-Date: '2024_08_07'
webshell_C99madShell_v_3_0_smowu:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 719d523e5291d8f67cdd27b6c9b95b43
  Ruleset: securityonion-yara
  Summary: 'This rule detects a specific web shell known as C99madShell version 3.0, identified by the filename "smowu.php". The rule targets particular strings within the web shell script, including an HTML form snippet containing ":: Enter ::" and a message indicating that WordPress was not found. The presence of either of these strings can trigger detection, indicating the potential presence of the malicious web shell.'
  Updated-Date: '2024_08_07'
webshell_Crystal_Crystal:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d125a3d674c64ae465734d53fd34d00e
  Ruleset: securityonion-yara
  Summary: This rule detects a specific web shell script named "Crystal.php" by identifying unique strings indicative of its presence. These strings include HTML snippets related to displaying opened ports and references to tool functionalities within the web shell interface.
  Updated-Date: '2024_08_07'
webshell_DarkBlade1_3_asp_indexx:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5caeef3490bf02eb5b5b6c83c2e5c787
  Ruleset: securityonion-yara
  Summary: 'This rule detects a web shell named "DarkBlade1.3" that targets an ASP file named "indexx.asp". The detection is based on the presence of a specific string within the file: "Const strs_toTransform=\"command|Radmin|NTAuThenabled|FilterIp|IISSample|PageCou". The rule is designed to identify this particular malicious code by matching this distinctive pattern.'
  Updated-Date: '2024_08_07'
webshell_Dive_Shell_1_0_Emperor_Hacking_Team_xxx:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5e3dc9fb2887d248decaa67c72a28abe
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the Dive Shell web shell created by the Emperor Hacking Team. The detection focuses on specific string patterns, such as searches within requests and certain command-related expressions in the session history. Specific hash values of known harmful files are also identified to ensure accurate detection.
  Updated-Date: '2024_08_07'
webshell_Dx_Dx:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1e7fe42c254125c081e60923a270a298
  Ruleset: securityonion-yara
  Summary: This rule detects a web shell file named "Dx.php" by identifying specific malicious strings within the file content. One detectable string includes a message hinting at viewing the file in a particular manner involving the "Dx" component, while another string involves an HTML class tag related to a POST request that includes the PHP "eval" function, which is often used in executing arbitrary code.
  Updated-Date: '2024_08_07'
webshell_ELMALISEKER_Backd00r:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 59e7cb9ef0de2e0b4d85606769dfddfe
  Ruleset: securityonion-yara
  Summary: This rule detects a web shell named "ELMALISEKER Backd00r.asp" often used to facilitate unauthorized remote access and control over a web server. It identifies specific strings in the script, including code that generates form elements and handles file operations, indicating the presence of a backdoor. Such web shells allow attackers to execute commands and manage the server's filesystem covertly.
  Updated-Date: '2024_08_07'
webshell_Expdoor_com_ASP:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c279db85c7eb51b3d5704384c841bbc0
  Ruleset: securityonion-yara
  Summary: This rule detects a specific web shell associated with the file "Expdoor.com ASP.asp." It identifies strings indicative of the web shell's presence, including HTML and ASP code snippets such as references to "www.Expdoor.com," the manipulation of the text input field "FileName," and the creation of a file system object by utilizing "Scripting.FileSystemObject." The condition for detection is met if at least two of these strings are found in the scanned file.
  Updated-Date: '2024_08_07'
webshell_GetPostpHp:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7813a22a9f5d21595504f03adc0afb4d
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a web shell generated from the file GetPostpHp.php. It identifies malicious code specifically using a PHP script that executes obfuscated commands, in this case, `eval(str_rot13('riny($_CBFG[cntr]);'));`, which suggests the web shell is using `str_rot13` obfuscation for evasion techniques.
  Updated-Date: '2024_08_07'
webshell_Inderxer:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 11a7d32bf7c49684bda5da1b59b46444
  Ruleset: securityonion-yara
  Summary: This rule detects a specific web shell, identified as Inderxer, which resides in a file named Inderxer.asp. The rule targets a unique string pattern within the file, specifically an HTML form field definition involving text inputs commonly associated with malicious web shell behavior.
  Updated-Date: '2024_08_07'
webshell_Java_Shell:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4a6af58df7add88575b75dd3a96dc4df
  Ruleset: securityonion-yara
  Summary: This rule detects a specific Java-based webshell file named "Java Shell.jsp" that is designed to facilitate unauthorized access or control over a web server. The detection criteria focus on identifying unique code patterns within the file, such as the declaration of a public method `JythonShell` with parameters for columns, rows, and scrollback, along with a specific invocation of `Py.getSystemState()` method. These distinctive strings serve as indicators to flag the presence of the malicious webshell script.
  Updated-Date: '2024_08_07'
webshell_JspSpy_JspSpyJDK5_JspSpyJDK51_luci_jsp_spy2009_m_ma3_xxx:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4c6bdb104ceaf464d699afe6d95e9669
  Ruleset: securityonion-yara
  Summary: This rule detects a specific type of web shell, known as JspSpy, which is designed for malicious activities such as unauthorized file uploads and registry queries. It identifies this web shell by looking for specific strings within files that indicate form actions for uploading files and querying certain registry paths within Windows systems.
  Updated-Date: '2024_08_07'
webshell_Jspspyweb:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8bdf12f930d1213526afa507fd90cea3
  Ruleset: securityonion-yara
  Summary: "This rule detects a specific web shell named \"Jspspyweb.jsp\" by identifying unique strings associated with its content. One of these strings involves printing HTML code within the web shell, while another string involves modifying Windows registry settings through the \u201Creg add\u201D command."
  Updated-Date: '2024_08_07'
webshell_Liz0ziM_Private_Safe_Mode_Command_Execuriton_Bypass_Exploit:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 144a1fd1d29de1dd2c848e52ec16753c
  Ruleset: securityonion-yara
  Summary: This rule detects a web shell file named "Liz0ziM Private Safe Mode Command Execution Bypass Exploit.php." It identifies the presence of the web shell by looking for the string "<option value=\"cat /etc/passwd\">/etc/passwd</option>," which indicates an attempt to read the /etc/passwd file, a common target for unauthorized access to obtain system user information.
  Updated-Date: '2024_08_07'
webshell_Macker_s_Private_PHPShell:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: acbc562950ccfb8abfb12145acc98168
  Ruleset: securityonion-yara
  Summary: This rule detects Macker's Private PHPShell web shell by identifying characteristic strings within the PHP script. It searches for specific patterns such as HTML table structures, PHP version output, URL construction with specific HTML formatting, and form handling with POST methods, all of which are unique to this web shell. The presence of these indicators suggests the use of a PHPShell tailored by Macker for unauthorized remote control over servers.
  Updated-Date: '2024_08_07'
webshell_MySQL_Web_Interface_Version_0_8:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0494c0ffdf0a37dea452e31aa91a79e9
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a web shell named "MySQL Web Interface Version 0.8.php". It identifies the web shell by checking for a specific reference to a PHP script element that includes URLs with certain parameters related to dumping MySQL database tables.
  Updated-Date: '2024_08_07'
webshell_Mysql_interface_v1_0:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6c7e864d415d210b308f169034950d6f
  Ruleset: securityonion-yara
  Summary: This rule detects a web shell used for interacting with a MySQL database. It identifies a specific PHP script that includes functionalities such as dropping a database. The detection is based on a unique string that appears to be part of a user interface for managing databases, specifically a link with an action to drop a database.
  Updated-Date: '2024_08_07'
webshell_NIX_REMOTE_WEB_SHELL_NIX_REMOTE_WEB_xxx1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ebfd48dac173d156dede03d4828c9b78
  Ruleset: securityonion-yara
  Summary: This rule detects a specific type of web shell that facilitates remote access to Unix-based web servers. The malicious script identified by the rule includes code for file uploads and handling user inputs for directory paths, making it a potential tool for unauthorized access and remote control of the server. The presence of specific strings in the code, such as form elements for file paths and upload mechanisms, are indicative of the malicious activity targeted by this rule.
  Updated-Date: '2024_08_07'
webshell_NIX_REMOTE_WEB_SHELL_nstview_xxx:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 193e2b87c0d4509265af888e0002dd9f
  Ruleset: securityonion-yara
  Summary: This rule detects a web shell known as "nstview" which is typically used to execute commands on a web server remotely. It includes specific strings such as HTML and PHP code patterns that indicate the presence of this web shell. Examples include reformatting file paths and filtering directory listings. The detection focuses on identifying at least two of these characteristic strings.
  Updated-Date: '2024_08_07'
webshell_NetworkFileManagerPHP:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1019491bf728be8451ea1b8db5247882
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the web shell known as NetworkFileManagerPHP, specifically by identifying code within the file named NetworkFileManagerPHP.php. The detection is based on a distinctive string that references a message output, indicating that data from tables were processed. This could be indicative of malicious activity where web shell functionality is being leveraged to manage or manipulate data within a web server context.
  Updated-Date: '2024_08_07'
webshell_PHPJackal_v1_5:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 617faf601a5a17910ad32ff7a8f5b1d7
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the PHP web shell known as PHPJackal version 1.5. The detection is based on specific strings that are indicative of this web shell, such as output messages related to a MySQL client and a wordlist generator within HTML code. These strings suggest the presence of a web shell interface designed for malicious activities or unauthorized access.
  Updated-Date: '2024_08_07'
webshell_PHPRemoteView:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: dd70fce30805d09791e771aa366851c7
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a web shell known as PHPRemoteView by identifying specific strings in the file. The strings include HTML form elements and URL parameters associated with deleting directories and files recursively on a server. The detection is triggered if at least one of these identifying strings is found within the file.
  Updated-Date: '2024_08_07'
webshell_PHP_150:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b5fc21c43e56e91a5b38addda9b27829
  Ruleset: securityonion-yara
  Summary: This rule detects a specific PHP web shell file named "150.php" by searching for the presence of two distinct strings. The first string is "HJ3HjqxclkZfp", and the second string is a PHP script using the `eval` function to execute code that is decoded from a base64 format after being decompressed with `gzinflate`. This combination of strings is characteristic of malicious web shell behavior, which allows unauthorized remote control over a compromised web server.
  Updated-Date: '2024_08_07'
webshell_PHP_404:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2eed5dbb460945de43b88c7c567da4d3
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a PHP-based web shell named "404.php" by looking for the specific string "<span>Posix_getpwuid (\"Read\" /etc/passwd)" within files. The detection indicates unauthorized access attempts or malicious activities involving system user account enumeration through the "/etc/passwd" file via the `posix_getpwuid` function.
  Updated-Date: '2024_08_07'
webshell_PHP_G5:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 41adcf546a1e072fed1ee4b001a0c692
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific PHP web shell named G5.php. The web shell is identified by a distinctive string used within its code, which includes the text "echo \"Hacking Mode?<br><select name='htype'><option >--------SELECT--------</op". This string suggests the functionality of the web shell by presenting a user interface potentially used for malicious activities.
  Updated-Date: '2024_08_07'
webshell_PHP_Shell_x3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3a86f32004f5702f5156c4a94490706e
  Ruleset: securityonion-yara
  Summary: This rule detects a web shell, specifically targeting a PHP shell script identified by a specific hash. It searches for certain PHP code patterns indicative of malicious web shell activity. These patterns include PHP scripting for URL building, HTML form generation with embedded PHP echo statements, and conditional checks for HTTP authentication variables. This detection aims to identify unauthorized web interfaces that allow attackers to execute arbitrary commands on a compromised server.
  Updated-Date: '2024_08_07'
webshell_PHP_a:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 08fdb1e0c092c87e6716fe242ac7d0ae
  Ruleset: securityonion-yara
  Summary: This rule detects a specific variant of a PHP web shell named "a.php." It identifies the web shell by looking for strings in the code that are indicative of web shell behavior, such as HTML form elements for executing commands and PHP code that manipulates directory paths. The rule triggers when it finds at least two of the specified malicious patterns, revealing the presence of an unauthorized backdoor used to execute commands on a web server.
  Updated-Date: '2024_08_07'
webshell_PHP_b37:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9f71e15eaa3b4c4682eb7d35506c026d
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a PHP-based web shell by identifying a specific file named "b37.php" through its unique hash and a distinct string pattern. The file is associated with potentially unauthorized remote access and control activities, indicating a compromise in the web server's security.
  Updated-Date: '2024_08_07'
webshell_PHP_bug_1_:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 691b29b610dcb89c44c769dae7a68cb6
  Ruleset: securityonion-yara
  Summary: This rule detects a specific web shell file named "bug(1).php" used in PHP applications. The script includes a pattern where the `@include` function dynamically includes a PHP file based on a GET parameter, potentially allowing for unauthorized execution of code from external sources, posing a security risk.
  Updated-Date: '2024_08_07'
webshell_PHP_c37:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3d83d759e89aa6430099270e7998662b
  Ruleset: securityonion-yara
  Summary: This rule detects a malicious PHP web shell script known as c37.php. It identifies the presence of this web shell by matching specific strings within files. These strings include certain code patterns related to file extensions and URL encoding typical of the c37.php web shell. The rule is triggered if all specified patterns are found, indicating the presence of the malicious web shell file.
  Updated-Date: '2024_08_07'
webshell_PHP_co:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 51e997b9e13774f5ccc92dc8898b5239
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific web shell named "co.php", identified by unique strings within the file content. The strings "cGX6R9q733WvRRjISKHOp9neT7wa6ZAD8uthmVJV" and "6Mk36lz/HOkFfoXX87MpPhZzBQH6OaYukNg1OE1j" are used as indicators for this detection. These patterns help identify the malicious PHP file potentially used for unauthorized remote operations on compromised web servers.
  Updated-Date: '2024_08_07'
webshell_PHP_g00nv13:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: abfc8a5340b71cf5882b0907d1c4e3ea
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a web shell named "g00nv13.php." The detection is based on specific strings found within the file, which include common cases for handling different file types such as "zip," "tar," "rar," "gz," and "cab," along with code snippets related to establishing a MySQL connection using session variables for the host and port.
  Updated-Date: '2024_08_07'
webshell_PHP_r57142:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: eed1b56aed4fd0d905cdb78a8b882151
  Ruleset: securityonion-yara
  Summary: This rule detects a PHP-based web shell identified as file r57142.php. It specifically targets a script that enumerates several downloader applications, such as wget, fetch, lynx, links, curl, get, and lwp-mirror. The detection is based on the presence of this array within the PHP file.
  Updated-Date: '2024_08_07'
webshell_PHP_redcod:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d8230a8619012446c4aa6a0fcaf715c8
  Ruleset: securityonion-yara
  Summary: This rule detects a specific web shell script named "redcod.php," which is identified through its unique digital fingerprint and specific string patterns embedded in the file. The rule focuses on matching the exact sequences "H8p0bGFOEy7eAly4h4E4o88LTSVHoAglJ2KLQhUw" and "HKP7dVyCf8cgnWFy8ocjrP5ffzkn9ODroM0/raHm" to identify the presence of this potentially malicious PHP script.
  Updated-Date: '2024_08_07'
webshell_PHP_sql:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f4c072cdc5209dfb2cc4950a9f4b361c
  Ruleset: securityonion-yara
  Summary: This rule detects a specific PHP web shell file named "sql.php" that utilizes MySQL functions. It looks for the presence of code segments that list MySQL tables and constructs URLs with server environment variables for potential unauthorized database interaction or manipulation. The rule identifies these actions as indicative of malicious activity within a PHP environment.
  Updated-Date: '2024_08_07'
webshell_PH_Vayv_PH_Vayv:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 72fff24f2d9bd1ee6e0ad17b3823f3f7
  Ruleset: securityonion-yara
  Summary: This rule detects a specific web shell named "PH Vayv.php" by identifying unique strings within the file. It targets certain HTML and CSS elements, including a background-color style and specific font and text patterns, that are indicative of the web shell's presence.
  Updated-Date: '2024_08_07'
webshell_Private_i3lue:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: fafe3208dc790b85b741656bc256a2e2
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific web shell script named "Private-i3lue.php" by checking for a particular string pattern within the file's content. The string to be identified is associated with the manipulation of imagery, typically part of malicious web shell activities.
  Updated-Date: '2024_08_07'
webshell_Safe_Mode_Bypass_PHP_4_4_2_and_PHP_5_1_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: dc8e5425f356cd03f18b8cfd07b39e76
  Ruleset: securityonion-yara
  Summary: This rule detects a web shell designed to exploit a safe mode bypass vulnerability in PHP versions 4.4.2 and 5.1.2. The web shell contains specific strings, including a welcome message indicating the bypass capability and mentions of "Mode Shell v1.0." This script allows an attacker to operate in an environment where PHP safe mode is enabled.
  Updated-Date: '2024_08_07'
webshell_Safe_mode_breaker:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f4d35549d186778c07f79be7a0886e69
  Ruleset: securityonion-yara
  Summary: This rule detects a web shell file named "Safe mode breaker.php". It identifies specific string patterns related to breaking safe mode restrictions in PHP. These patterns include error messages indicating safe mode restrictions and the concatenation of file paths. The rule triggers if any of these specific string patterns are found within the file.
  Updated-Date: '2024_08_07'
webshell_Server_Variables:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5609974ab0cf4464b00dde40cfaed865
  Ruleset: securityonion-yara
  Summary: This rule detects a web shell by identifying specific patterns within a file named "Server Variables.asp". It looks for the presence of the string "<% For Each Vars In Request.ServerVariables %>" and the phrase "Variable Name</B></font></p>". These identifiers suggest the presence of a script that enumerates server variables, which is commonly used in web shells for gathering information about the server environment.
  Updated-Date: '2024_08_07'
webshell_Shell_ci_Biz_was_here_c100_v_xxx:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 794e50cd8ffde7a60eb4f2246dc252a7
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a web shell, identifying it through specific patterns and behaviors commonly associated with malicious scripts used for unauthorized control of web servers. Key indicators include patterns such as error message generation using certain data conditions, commands to search writable files in the `/etc/` directory, retrieval of processor information from `/proc/version` and `/proc/cpuinfo`, as well as commands to download files via `wget` and to extract user information from `/etc/passwd`. The detection is triggered if at least two of these patterns are found.
  Updated-Date: '2024_08_07'
webshell_SimAttacker_Vrsion_1_0_0_priv8_4_My_friend:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 411352cf3eeff3bc8c28043421e2092a
  Ruleset: securityonion-yara
  Summary: This rule detects a web shell script named "SimAttacker" version 1.0.0 that includes specific PHP code snippets. The rule identifies the presence of echo statements used to generate HTML links and file metadata manipulations, as well as file writing commands that indicate a welcome message associated with the SimAttacker tool. The detection triggers if any of these distinctive script markers are found.
  Updated-Date: '2024_08_07'
webshell_Sst_Sheller:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e3fb416a5d8192a5cb66a772932f7bb0
  Ruleset: securityonion-yara
  Summary: This rule detects a web shell known as Sst-Sheller by identifying specific strings within the PHP file. It looks for the presence of code that generates a hyperlink related to file management and code that includes commands to delete multiple files using the `unlink` function in PHP.
  Updated-Date: '2024_08_07'
webshell_WinX_Shell:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 355c09dbc8159e0b97753ad7d4767798
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a web shell script specifically named "WinX Shell.php." The web shell contains specific string patterns used within its code, such as HTML font tag elements formatted with a Verdana typeface and specific color and size attributes. These string patterns are indicative of the web shell's design and functionality, which likely involves displaying information about files within a web interface, as suggested by the phrases related to filenames and file paths.
  Updated-Date: '2024_08_07'
webshell_Worse_Linux_Shell:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 364eaee915ab0c1dae3e5601a4a37ca5
  Ruleset: securityonion-yara
  Summary: This rule detects a web shell identified as "Worse Linux Shell," specifically targeting a PHP file. The detection focuses on a characteristic string within the code that uses the `system` function to move uploaded files from temporary storage to a specified directory, indicating potential malicious file manipulation on a compromised Linux server.
  Updated-Date: '2024_08_07'
webshell_aZRaiLPhp_v1_0:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ccba8c13176d4f67b3cd1d77fb9ee39f
  Ruleset: securityonion-yara
  Summary: This rule detects a specific web shell known as "aZRaiLPhp v1.0.php". It identifies the presence of this web shell by looking for distinct strings within the file's content, such as the use of base conversion for file permissions and specific echo statements related to file operations and hyperlinks.
  Updated-Date: '2024_08_07'
webshell_asp_01:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 98f7e5894fc2cb45c10ee48431abd5d5
  Ruleset: securityonion-yara
  Summary: This rule detects a web shell, specifically a malicious ASP file (01.asp), by identifying a particular string used within the file. The string "<%eval request(\"pass\")%>" signifies a potential security threat where the code is designed to evaluate and execute a request parameter, commonly used by attackers to gain remote access or manipulate the server.
  Updated-Date: '2024_08_07'
webshell_asp_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0d97b1c41c70811944feffc2afc239e8
  Ruleset: securityonion-yara
  Summary: This rule detects an ASP-based web shell named "file 1.asp." It identifies the presence of malicious code by searching for specific patterns within the file, specifically the string "!22222222222222222222222222222222222222222222222222" and the code snippet "<%eval request(\"pass\")%>," which indicates the execution of potentially harmful commands input by a user.
  Updated-Date: '2024_08_07'
webshell_asp_1d:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 712cc1ee114179c9ee150b49974b3d7d
  Ruleset: securityonion-yara
  Summary: This rule detects a specific web shell identified by the file name "1d.asp." It is characterized by a unique hash value "fad7504ca8a55d4453e552621f81563c" and includes the specific string "+9JkskOfKhUxZJPL~\\(mD^W~[,{@#@&EO" within its code. The rule is designed to identify this malicious ASP file, which indicates the presence of a potentially compromised web server.
  Updated-Date: '2024_08_07'
webshell_asp_404:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9074fb9d8a192fe06f2e0934fd193ba7
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a web shell file named 404.asp by looking for a specific string within the file. The string used for detection is "lFyw6pd^DKV^4CDRWmmnO1GVKDl:y& f+2". This pattern can help identify unauthorized access or activities on a web server, indicating a potential compromise through the use of a web shell.
  Updated-Date: '2024_08_07'
webshell_asp_Ajan:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a700ad5fcd430ae69f4fb5f189318393
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the Ajan.asp web shell by searching for a specific string within a file. The string in question indicates the use of a command that writes data to a file named "c:\downloaded.zip," specifying the use of a binary stream to save the file. This characteristic is indicative of the malicious behavior commonly associated with the Ajan.asp web shell.
  Updated-Date: '2024_08_07'
webshell_asp_EFSO_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2760977d449c4f0d08b090b8c44bc54a
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a web shell, specifically the file named EFSO_2.asp. It identifies the web shell by matching a unique string pattern within the file that includes specific sequences of characters and symbols. The rule is designed to enhance security by flagging this potentially malicious script that might be used for unauthorized remote access or control over a web server.
  Updated-Date: '2024_08_07'
webshell_asp_Rader:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8bebadaecba8ce0ca5868a1bba0c89aa
  Ruleset: securityonion-yara
  Summary: This rule detects a specific web shell file named "Rader.asp." It identifies this malicious ASP file through the presence of distinct HTML formatting and scripting characteristics, such as bold font weights, specific font sizes, and transparent backgrounds. Additionally, it looks for a specific onclick event attached to a target window, which opens another window with given dimensions, hinting at possibly malicious or suspicious activity.
  Updated-Date: '2024_08_07'
webshell_asp_ajn:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 285dd068eb7fe7300b1bd971f67eb3a2
  Ruleset: securityonion-yara
  Summary: 'This rule detects the presence of a web shell file named ''ajn.asp,'' which is likely used for malicious purposes. It identifies specific code patterns associated with the web shell, including the creation of a WScript.Shell object and saving a binary stream to a file named ''downloaded.zip'' on the C: drive. These indicators point to potentially harmful activity typically associated with web shell exploits on compromised servers.'
  Updated-Date: '2024_08_07'
webshell_asp_cmd:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e528c54845f94489c65a2d36a624fa8e
  Ruleset: securityonion-yara
  Summary: This rule detects a specific web shell, identified as "cmd.asp", which likely provides functionality to execute command line instructions on a compromised server. It searches for specific strings within the file, including patterns that suggest it retrieves computer and username information, interacts with the file system through the creation of a "Scripting.FileSystemObject", and runs command-line instructions through "cmd.exe", redirecting the output to a temporary file. This behavior indicates typical web shell activity used for unauthorized remote control and command execution.
  Updated-Date: '2024_08_07'
webshell_asp_cmdasp:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d0b01b09834908cbedd69a3ec608c8cc
  Ruleset: securityonion-yara
  Summary: This rule detects a specific web shell file named cmdasp.asp. It identifies signatures associated with the execution of commands via the cmd.exe utility, and looks for specific patterns where script output includes computer and username information, as well as command execution results being directed to a temporary file. This particular web shell is designed to leverage scripting capabilities to run system commands on a compromised server.
  Updated-Date: '2024_08_07'
webshell_asp_dabao:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 442b461871e0ba6d52ea6e02a5e11335
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific malicious web shell file named "dabao.asp." The detection focuses on particular strings within the file, indicative of malicious activity. One string involves the creation of an input button with an onclick event designed to manipulate document location, while another string pertains to setting a file name value dynamically using a combination of year and month components. These characteristics help identify the web shell's attempt to embed harmful code into the server environment.
  Updated-Date: '2024_08_07'
webshell_asp_ice:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 193b150fdf4d5278941a02534c038b22
  Ruleset: securityonion-yara
  Summary: This rule detects a web shell script contained within the file "ice.asp" by identifying a specific hardcoded string "D,'PrjknD,J~[,EdnMP[,-4;DS6@#@&VKobx2ldd,'~JhC" within the file content. The hash for the file is d141e011a92f48da72728c35f1934a2b.
  Updated-Date: '2024_08_07'
webshell_asp_list:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8b5e0f5a7d9a58527836e971aa9df410
  Ruleset: securityonion-yara
  Summary: This rule detects a specific web shell script named "file list.asp" used in ASP environments. The script includes the presence of hidden input elements and specific Response.Write statements that list file names and types, indicating potential malicious file management capabilities on the web server.
  Updated-Date: '2024_08_07'
webshell_asp_ntdaddy:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 577ad54e60c9296cef01033c7f83551b
  Ruleset: securityonion-yara
  Summary: This rule detects a specific variant of a web shell known as "ntdaddy.asp," typically used for malicious web-based backdoor activity on ASP-based web servers. The detection is based on unique string patterns within the file, such as commands related to folder refresh or delete operations.
  Updated-Date: '2024_08_07'
webshell_asp_shell:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 066b1ab082162fdae1f729fba51b7e59
  Ruleset: securityonion-yara
  Summary: This rule detects a specific web shell, particularly a file named "shell.asp." It identifies this web shell by searching for distinct strings within the file, such as an input element with the text "GO!" and a textarea element with specific properties.
  Updated-Date: '2024_08_07'
webshell_asp_up:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 153f8904f152888947fa564323a820e9
  Ruleset: securityonion-yara
  Summary: This rule detects a specific web shell known as "up.asp" by identifying unique strings within the file content. The web shell is characterized by the presence of certain substrings related to handling HTTP requests, such as "Pos = InstrB(BoundaryPos,RequestBin,getByteString(\"Content-Dispositio" and "ContentType = getString(MidB(RequestBin,PosBeg,PosEnd-PosBeg))".
  Updated-Date: '2024_08_07'
webshell_browser_201_3_400_in_JFolder_jfolder01_jsp_leo_ma_warn_webshell_nc_download:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 743ef42da7d5f77655219837d33d5c0a
  Ruleset: securityonion-yara
  Summary: This rule detects a specific type of web shell by identifying unique strings and file hashes associated with it. Notable strings include references to the UploadMonitor's getInfo method and a calculation of elapsed time using System.currentTimeMillis. The listed file hashes also help in recognizing the web shell's presence.
  Updated-Date: '2024_08_07'
webshell_browser_201_3_ma_download:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ac1deb8beab17e7a8d636e76e7786df3
  Ruleset: securityonion-yara
  Summary: This rule detects specific web shells located in various Java Server Pages (JSP) files including browser.jsp, 201.jsp, 3.jsp, ma.jsp, and download.jsp. These web shells are identified by unique strings appearing in the code, such as references to a JSP file browser version and specific file extension checks for media files like .mpg and .mpeg.
  Updated-Date: '2024_08_07'
webshell_browser_201_3_ma_ma2_download:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d0d83762a25dff9378d18b6732add5ba
  Ruleset: securityonion-yara
  Summary: This rule detects web shell files named browser.jsp, 201.jsp, 3.jsp, ma.jsp, ma2.jsp, and download.jsp by identifying specific strings within the files. These strings include Java code declaring static final integers and temporary directory variables, as well as HTML input elements for hidden directory values. Matching at least two of these strings confirms the presence of the web shell, helping to identify potential malicious activity on web servers.
  Updated-Date: '2024_08_07'
webshell_bypass_iisuser_p:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7835dde8d0c664f95666108fd6b8cff6
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a malicious web shell, specifically generated from the file bypass-iisuser-p.asp. The rule identifies a particular string pattern that includes an embedded Eval function used in conjunction with a request to execute scripts. It also references the creation of a file system object, which is a common technique used by web shells to execute unauthorized commands or scripts on compromised web servers.
  Updated-Date: '2024_08_07'
webshell_c99_Shell_ci_Biz_was_here_c100_v_xxx:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e35c42e253e1ac75579608c144e034f2
  Ruleset: securityonion-yara
  Summary: This rule detects a specific web shell known as "c99 Shell" or "ci Biz was here." This web shell allows an attacker to interact with a compromised server by running commands and potentially extracting data. The rule identifies the presence of the web shell by matching a distinctive string within the web shell's code that outputs a message indicating the server is running and reveals the server's IP address.
  Updated-Date: '2024_08_07'
webshell_c99_c66_c99_shadows_mod_c99shell:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: abee7d7919681a5c439c78da8d902550
  Ruleset: securityonion-yara
  Summary: This rule detects known web shells from specific files typically used in unauthorized administrative control, including "c99.php," "c66.php," "c99-shadows-mod.php," and "c99shell.php." Indications of such files being used include strings related to file removal commands and Perl script invocations associated with backdoor connections and data pipelining, as well as HTML table formatting styles used within these web shells.
  Updated-Date: '2024_08_07'
webshell_c99_c99shell_c99_c99shell:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b3df5aa41fe3dddec31ad369cf27dc6a
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of specific web shell files, namely c99.php and c99shell.php, by searching for distinctive strings within the file content. These web shells are commonly associated with malicious activities, allowing unauthorized remote control over a web server. The detection is based on identifying unique code snippets that are characteristic of these web shells.
  Updated-Date: '2024_08_07'
webshell_c99_c99shell_c99_w4cking_Shell_xxx:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6962656bcd3b9280d79e4e029bd084e2
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the C99 web shell, a malicious script used by attackers to gain unauthorized access to a web server. The detection is based on specific text strings commonly found in the web shell's code, such as commands for creating database entries, handling file stealth, fetching rows from a MySQL database, generating server status outputs, and encoding text into HTML. Key strings like "echo \"<b>HEXDUMP:</b><nobr>", "if ($filestealth) {$stat = stat($d.$f);}", and "echo \"<textarea cols=80 rows=10>\".htmlspecialchars($encoded).\"</textarea>\"" are indicative of the web shell's functionality, allowing for the identification of this malicious tool on compromised servers.
  Updated-Date: '2024_08_07'
webshell_c99_generic:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9cd53e636bff5991b9e1617cce4376c2
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a generic web shell known as C99. It identifies specific PHP code patterns used in web shells, primarily by checking for certain strings that indicate file operations, MySQL information display, and session data manipulation. These indicators suggest malicious activities typically associated with web shells allowing unauthorized control over a compromised web server.
  Updated-Date: '2024_08_07'
webshell_c99_locus7s_c99_w4cking_xxx:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 87a16b03aded7745ed60b104dee500ee
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a web shell, specifically targeting potentially malicious scripts associated with the C99, locus7s, and W4cking variants. It searches for specific code patterns involving shell execution and output retrieval functions such as `@shell_exec($cfe);`, `@ob_get_contents();`, and `@exec($cfe,$res);`. The detection is triggered if at least two of these patterns are found within the scanned files, indicating suspicious behavior often used in web shell operations.
  Updated-Date: '2024_08_07'
webshell_c99_madnet_smowu:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f51d6366e1ea6cde01ca5dd785d15a03
  Ruleset: securityonion-yara
  Summary: This rule detects a specific type of web shell identified as "smowu.php". It looks for unique code signatures within the file, such as authentication comments, login variable declarations, and base64 encoded and gzipped payloads. The presence of MD5 password hashing within the PHP file's code is also checked. These distinct strings and patterns help to identify and assess the potential threat posed by the smowu.php web shell.
  Updated-Date: '2024_08_07'
webshell_caidao_shell_404:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b36fe09216527ba4246214af5130fcea
  Ruleset: securityonion-yara
  Summary: This rule detects a specific web shell named "Caidao Shell," which uses a file named "404.php." The web shell includes obfuscated PHP code that replaces certain characters in strings and handles POST requests, potentially to execute malicious commands if specific conditions are met.
  Updated-Date: '2024_08_07'
webshell_caidao_shell_guo:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2181e4436d873f83900883ed56fc5be0
  Ruleset: securityonion-yara
  Summary: This rule detects a specific web shell file named guo.php. The rule identifies the web shell by searching for unique PHP code patterns, including scripts that use the `$_POST['ice']` variable and the `preg_replace` function combined with the `str_rot13` encoding. This combination is characteristic of obfuscated PHP code often used in malicious web shell scripts.
  Updated-Date: '2024_08_07'
webshell_caidao_shell_hkmjj:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: cf41fc1dbe66c141286b8680f691ba52
  Ruleset: securityonion-yara
  Summary: This rule detects a web shell identified by the filename "hkmjj.asp". It targets a specific string characteristic typically found in malicious scripts used by attackers to maintain access to a compromised web server. The rule leverages a precise hash value and string pattern to identify and flag the presence of this web shell.
  Updated-Date: '2024_08_07'
webshell_caidao_shell_ice:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 28051ae77dc6df8e111c7768e4f7c55f
  Ruleset: securityonion-yara
  Summary: This rule detects a web shell file named "ice.asp" by identifying the exact string "<%eval request(\"ice\")%>". This type of web shell is used by attackers to remotely execute code on a compromised server. The rule matches the specific pattern in the file content to determine the presence of this malicious script.
  Updated-Date: '2024_08_07'
webshell_caidao_shell_ice_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 08cfab38e81a5da6a860c9d2538822fd
  Ruleset: securityonion-yara
  Summary: This rule detects a web shell file named "ice.php" which executes PHP code passed via a POST request parameter named "ice" using the `eval` function. The presence of this specific string pattern indicates potential malicious activity, as web shells like this are often used by attackers to gain unauthorized control over compromised web servers.
  Updated-Date: '2024_08_07'
webshell_caidao_shell_mdb:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: cb35c069262bbffa5e96e34b7ed7b4c9
  Ruleset: securityonion-yara
  Summary: This rule detects a specific web shell script within 'mdb.asp' files, which contains the code snippet `<% execute request("ice")%>`. Web shells like these can potentially enable unauthorized remote command execution on the server, posing a significant security risk.
  Updated-Date: '2024_08_07'
webshell_cihshell_fix:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a0af7798402340914c76422cff964669
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific web shell file named `cihshell_fix.php`. It identifies the file by looking for particular strings within it, such as HTML table styling and form actions associated with MySQL host settings. This detection is signaled when at least one of these strings is found.
  Updated-Date: '2024_08_07'
webshell_cmd_asp_5_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 34156517af8d0c6b55ecc360533ea4e1
  Ruleset: securityonion-yara
  Summary: This rule detects a specific web shell script named cmd-asp-5.1.asp. It identifies the presence of a command that runs cmd.exe via win.com, capturing the output to a specified file. This indicates potential malicious activity where an attacker might be using the web shell to execute system commands and redirect their outputs for further exploitation.
  Updated-Date: '2024_08_07'
webshell_cmd_win32:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3325e893e79632ec01221ef55ea6e089
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a web shell script named "cmd_win32.jsp" commonly used for executing system commands within a Windows environment. The script is characterized by code snippets that include invoking commands through "cmd.exe" via Java's Runtime.exec method and a specific HTML form element that includes a POST method designed for command input and execution.
  Updated-Date: '2024_08_07'
webshell_config_myxx_zend:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1c55bf389c0a020cd91d56cf9b20d432
  Ruleset: securityonion-yara
  Summary: 'This rule detects the presence of specific web shell scripts identified as "config.jsp," "myxx.jsp," and "zend.jsp." These scripts are malicious in nature and can potentially allow unauthorized access or control over the server. The detection is triggered by a specific string that displays a JavaScript alert with the message: "You Are In File Now ! Can Not Pack !". This alert indicates possible web shell functionality designed to alert the attacker of their current access state within the compromised file.'
  Updated-Date: '2024_08_07'
webshell_cpg_143_incl_xpl:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e7bf35a4043c69c1f634bf7ced2a2df1
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific web shell by identifying certain strings within the file named "cpg_143_incl_xpl.php." One string is related to the encoding of user credentials for HTTP transmission, while another indicates a PHP script attempting to alter the maximum execution time configuration. These patterns suggest malicious activity involving unauthorized web access or control.
  Updated-Date: '2024_08_07'
webshell_customize:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 52d927ec11e205b235ae0ba8fb1ea4e5
  Ruleset: securityonion-yara
  Summary: This rule detects a specific web shell file named `customize.jsp`. It targets a string within the JSP file that involves handling character sets through a request parameter (`z0`). This could indicate potential malicious activity such as unauthorized access or control over the web server. The rule is aimed at identifying this pattern to flag compromised files on web servers.
  Updated-Date: '2024_08_07'
webshell_dev_core:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d3bd198b54122eb405e8487514aa04d5
  Ruleset: securityonion-yara
  Summary: This rule detects a web shell that is generated from the file "dev_core.php." The web shell is identified through distinctive patterns such as the presence of specific strings in the code. These strings include checks for certain HTTP user agents, setting cookies with specific parameters, using session variables to request packed hexadecimal data, matching and processing HTTP response statuses, decrypting and decompressing session variables, and attempting to open a socket connection using specific parameters.
  Updated-Date: '2024_08_07'
webshell_drag_system:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9d5c909d9c679f751f9becb7697474a3
  Ruleset: securityonion-yara
  Summary: This rule detects a web shell script named "system.jsp" by identifying a specific string used in SQL queries that suggests an attempt to interact with a database's table information, potentially indicating malicious activity.
  Updated-Date: '2024_08_07'
webshell_e8eaf8da94012e866e51547cd63bb996379690bf:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ded5851ea688c0d57cdeef4e7b37d9da
  Ruleset: securityonion-yara
  Summary: This rule detects a web shell by identifying specific strings within the web shell scripts. It looks for the presence of particular commands and actions, such as executing a symbolic link creation to a sensitive file, embedding an iframe loading a MySQL Dumper interface, or extracting a MySQL Dumper archive. The detection condition is based on the presence of these patterns within files that are under 100KB in size.
  Updated-Date: '2024_08_07'
webshell_elmaliseker_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4005000971463df0c00e9e18b302cdee
  Ruleset: securityonion-yara
  Summary: This rule detects a specific web shell file named "elmaliseker.asp". It identifies the presence of this malicious script through unique strings found in the file content, such as HTML tags combined with server-side scripting (e.g., checking file extensions) and interface elements related to saving through an editor command. The detection focuses on assessing these indicators comprehensively.
  Updated-Date: '2024_08_07'
webshell_gfs_sh_r57shell_r57shell127_SnIpEr_SA_xxx:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 78f6bbb6d7a43e8749ca01f35507a7b5
  Ruleset: securityonion-yara
  Summary: This rule detects a specific type of web shell identified as "r57shell", which is a malicious script used by attackers to gain and maintain unauthorized access to a compromised web server. The rule looks for particular hexadecimal strings in the code that are known to be characteristics of this web shell. These indicators enable the detection of the web shell when it is present in the server's environment.
  Updated-Date: '2024_08_07'
webshell_ghost_source_icesword_silic:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2bc21eaccf012661432c87ac12f6eb4e
  Ruleset: securityonion-yara
  Summary: This rule detects a specific web shell associated with files named ghost_source.php, icesword.php, and silic.php. It identifies malicious behavior through specific code patterns, such as conditional statements that check for and manipulate SQL commands in HTTP POST requests and handle file uploads with particular conditions.
  Updated-Date: '2024_08_07'
webshell_h4ntu_shell_powered_by_tsoi_:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c537361192872e71b8a50aa90a44625c
  Ruleset: securityonion-yara
  Summary: This rule detects a specific web shell known as "h4ntu shell powered by tsoi.php." It identifies this malicious file by searching for distinct HTML and PHP code patterns within the file. These patterns include specific HTML tags used for displaying server addresses and user information, as well as particular PHP code snippets that process and display text inputs. These unique strings help pinpoint the presence of the web shell designed to facilitate unauthorized access and control over a web server.
  Updated-Date: '2024_08_07'
webshell_he1p_JspSpy_nogfw_ok_style_1_JspSpy1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 562290b484067e6f3d37e1bf8ab2e3a6
  Ruleset: securityonion-yara
  Summary: This rule detects a variety of malicious web shells, specifically targeting files named he1p.jsp, JspSpy.jsp, nogfw.jsp, ok.jsp, style.jsp, and 1.jsp. These web shells are characterized by their ability to manage files and directories, with features to check and display file permissions such as read, write, and execute privileges. The rule identifies these web shells through specific strings related to the printing and checking of file execution permissions within the Java Server Pages (JSP) script.
  Updated-Date: '2024_08_07'
webshell_iMHaPFtp_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8b327e3a847678e88a6a9fedb72cbcd4
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific web shell file named iMHaPFtp.php, identifiable by unique code patterns within the file. The strings indicative of this web shell include a conditional output statement that modifies the file's permissions and a base64-encoded string commonly used within malicious scripts.
  Updated-Date: '2024_08_07'
webshell_in_JFolder_jfolder01_jsp_leo_warn:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 985fabdc391ab8c6d9023b76e11ae43f
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a web shell through specific keyword patterns found in the files named in.jsp, JFolder.jsp, jfolder01.jsp, jsp.jsp, leo.jsp, and warn.jsp. Web shells are malicious scripts used by attackers to gain unauthorized access to a web server. The rule identifies these files based on certain scripted HTML and JavaScript functionalities, such as appending file paths and invoking JavaScript functions for file download and editing operations.
  Updated-Date: '2024_08_07'
webshell_ironshell:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 433903260dbe2a83e3460a43132e5e80
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific web shell named "ironshell.php." It identifies the malicious file by looking for distinct strings within the code, such as HTML form constructs and URL parameters for handling commands and renaming files. The detection is based on matching all specified string patterns, which together indicate the characteristic features of this web shell.
  Updated-Date: '2024_08_07'
webshell_itsec_PHPJackal_itsecteam_shell_jHn:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 20bc842bb5707dd682aa451889b2bab1
  Ruleset: securityonion-yara
  Summary: This rule detects specific web shells named itsec.php, PHPJackal.php, itsecteam_shell.php, and jHn.php. The detection is based on characteristic PHP code patterns involving PostgreSQL and Oracle database interactions. Specific signatures include patterns for establishing database connections and fetching data from results, ensuring accurate identification of these malicious web shell files.
  Updated-Date: '2024_08_07'
webshell_itsec_itsecteam_shell_jHn:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 430e70e84470ea67ef6b64717a1cd838
  Ruleset: securityonion-yara
  Summary: This rule detects a specific type of web shell malware found in files named "itsec.php," "itsecteam_shell.php," and "jHn.php." The detection is based on identifying certain strings within the code, such as references to the PHP "php_uname()" function, which is used to display operating system information, and a form action method within the server's PHP self-environment variable. These strings are indicative of common functionalities found in web shells, which are malicious scripts used by attackers to gain unauthorized access and control over a web server.
  Updated-Date: '2024_08_07'
webshell_jspShell:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a51cb15698b6b62b456e5521d70df13e
  Ruleset: securityonion-yara
  Summary: This rule detects a web shell named jspShell.jsp. It targets specific input and onblur attributes indicative of malicious activity embedded in a web page, focusing on the presence of an "autoUpdate" checkbox and associated JavaScript behaviors.
  Updated-Date: '2024_08_07'
webshell_jsp_123:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9b3fb7f8893a8cf9773e309826942ee8
  Ruleset: securityonion-yara
  Summary: This rule detects a specific web shell identified as "123.jsp." It searches for specific strings within a file, including an HTML snippet with a blue-colored font input field, a Java code fragment related to acquiring a request parameter in ISO-8859-1 encoding, and an HTML input element for file upload submission.
  Updated-Date: '2024_08_07'
webshell_jsp_12302:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 385d6616ebb40b0283da9d727092353b
  Ruleset: securityonion-yara
  Summary: This rule detects a specific web shell identified by the file name `12302.jsp`. The indicators include a script that outputs the real path of the servlet using `request.getRealPath(request.getServletPath())`, a page directive importing Java packages like `java.io`, `java.util`, and `java.net`, and a code snippet that converts the request parameter "path" using `ISO-8859-1` encoding.
  Updated-Date: '2024_08_07'
webshell_jsp_IXRbE:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0902a782104732e456bedc40eff13b06
  Ruleset: securityonion-yara
  Summary: This rule detects a malicious JSP web shell file named IXRbE.jsp. It identifies the file through a specific code pattern that checks for the presence of a parameter "f" in an HTTP request and attempts to open a file output stream using Java. This behavior is characteristic of a web shell trying to execute server-side operations, such as writing files on the server.
  Updated-Date: '2024_08_07'
webshell_jsp_action:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 25967c8f2f98b5d7a229d774cbefcef4
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a web shell in a JSP file named "action.jsp". It identifies suspicious code that includes a hardcoded JDBC URL pointing to an Oracle database and a specific page directive setting the content type to "text/html" with a charset of "gb2312".
  Updated-Date: '2024_08_07'
webshell_jsp_asd:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ec00e455663e0d65e42d3414eb413286
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific web shell named "asd.jsp" by looking for certain indicators within the file. It searches for the string "<%@ page language=\"java\" pageEncoding=\"gbk\"%>", which specifies a JSP page using the GBK character encoding. Additionally, it identifies the string "<input size=\"100\" value=\"<%=application.getRealPath(\"/\") %>\" name=\"url", which is part of an HTML form input element that retrieves the application's real path. These combined indicators are used to recognize the malicious JSP web shell.
  Updated-Date: '2024_08_07'
webshell_jsp_cmd:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3d05abb88566f44489256a302aa02933
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a web shell script named 'cmd.jsp' commonly used for unauthorized access and control of web servers. It specifically looks for a string that outputs the result of a command parameter from a request, indicating that the script is processing and printing commands issued by a remote attacker. This type of web shell can be used for executing arbitrary commands on the server, which is a common method for exploiting vulnerabilities.
  Updated-Date: '2024_08_07'
webshell_jsp_cmdjsp:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e3157e4d46ab36b537a00db64f45f82d
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a web shell file named `cmdjsp.jsp` by identifying a specific HTML form element within the file. This form uses the GET method and points to the 'cmdjsp.jsp' action, indicating potential web-based shell activity.
  Updated-Date: '2024_08_07'
webshell_jsp_cmdjsp_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6bf228e14686f530e5010fc246aac7e9
  Ruleset: securityonion-yara
  Summary: This rule detects a specific web shell file named "cmdjsp.jsp." The rule identifies the presence of a script that allows remote command execution through a Java server page (JSP). It looks for code patterns such as the execution of "cmd.exe /C" in combination with user-specified commands and an HTML form that directs GET requests to "cmdjsp.jsp."
  Updated-Date: '2024_08_07'
webshell_jsp_guige:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8b052583df262d4c11fbce7b08751901
  Ruleset: securityonion-yara
  Summary: This rule detects a specific web shell script named "guige.jsp" by checking for a unique string pattern within the file content. The string pattern includes a conditional statement that evaluates whether variables (`damapath` and `content`) are non-null and non-empty. The file is identified using its hash value "2c9f2dafa06332957127e2c713aacdd2". This detection aids in identifying a potentially malicious JSP web shell used for unauthorized access or control over a web server.
  Updated-Date: '2024_08_07'
webshell_jsp_guige02:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: af39f80f62d82ef11fc1d9b8fba0868d
  Ruleset: securityonion-yara
  Summary: This rule detects a specific web shell file named "guige02.jsp". It flags content that includes an HTML structure with unusual placeholder characters and a suspicious title, along with JSP directives that import Java I/O classes and set the content type. The intent behind these elements suggests the presence of a potentially malicious script designed to exploit a server.
  Updated-Date: '2024_08_07'
webshell_jsp_hsxa:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: afecdae4167565edacaa7d71088665ce
  Ruleset: securityonion-yara
  Summary: This rule detects a specific web shell file named "hsxa.jsp" used in Java Server Pages (JSP) applications. The detection is based on the presence of a distinctive string that includes a JSP directive, indicating the use of the GBK character encoding and importing Java classes. This kind of web shell can be leveraged by attackers to execute arbitrary commands on a compromised web server.
  Updated-Date: '2024_08_07'
webshell_jsp_jshell:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 08155e13baa7dc9ef925dd218173c65d
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a web shell named `jshell.jsp` based on specific string patterns within the file. These unique strings include sequences like "kXpeW[\"", "[7b:g0W@W<", "b:gHr,g<", "RhV0W@W<", and "S_MR(u7b", which help in identifying the malicious JSP file potentially used for unauthorized remote access to a web server.
  Updated-Date: '2024_08_07'
webshell_jsp_k81:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 57f213acca6db2ad70490c9b9711a07b
  Ruleset: securityonion-yara
  Summary: This rule detects a web shell named "file k81.jsp." It identifies specific strings within the JSP file that are indicative of malicious activity, such as decoding base64 encoded commands using the BASE64Decoder class and verifying if a command equals a particular base64 string ("Szh0ZWFt") to print sensitive directory information.
  Updated-Date: '2024_08_07'
webshell_jsp_k8cmd:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9e5643ddedac83bc0b960c93cf37ac68
  Ruleset: securityonion-yara
  Summary: This rule detects a potentially malicious JSP web shell file named k8cmd.jsp by identifying a specific string within the file that checks for a session attribute named "hehe". If the attribute value equals "hehe", it is likely an indication of the web shell's presence.
  Updated-Date: '2024_08_07'
webshell_jsp_list:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e77d4a092a98070d3696790381fa40a0
  Ruleset: securityonion-yara
  Summary: This rule detects a specific web shell named "file list.jsp." It identifies the malicious script based on the occurrence of certain strings used within the code. These strings include a form submission line, an HTML link with a dynamic color attribute, and a conditional statement checking file read permissions. The detection focuses on the distinctive patterns and functionalities typically employed by web shells to manipulate and display files on a compromised server.
  Updated-Date: '2024_08_07'
webshell_jsp_list1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 543403013ea1016117bcc5a0aac663d9
  Ruleset: securityonion-yara
  Summary: This rule detects a web shell named "list1.jsp." It identifies specific strings associated with the web shell's functionality, such as managing database connections and handling file deletions through encoded parameters within URLs.
  Updated-Date: '2024_08_07'
webshell_jsp_reverse_jsp_reverse_jspbd:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9313d16c27a43c725e11b6e0800953a1
  Ruleset: securityonion-yara
  Summary: This rule detects web shells named `jsp-reverse.jsp`, `jsp-reverse.jsp`, and `jspbd.jsp` that utilize Java Server Pages (JSP) technology. These web shells are identified through particular code patterns, including the creation of a `BufferedWriter` for output streams, the establishment of a socket connection to a specified IP address and port, and the use of a `BufferedReader` for input streams. These characteristics suggest the web shell's capability to execute commands on a remote server and relay input/output back to an attacker.
  Updated-Date: '2024_08_07'
webshell_jsp_sys3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 76cfd4355475a9f4da67328cda7c871b
  Ruleset: securityonion-yara
  Summary: This rule detects a specific web shell identified in the file "sys3.jsp". The web shell includes an upload form with a submit button labeled "Upload", and it manages file paths by processing request parameters with a specified character encoding. Additionally, the web page sets its content type to "text/html" with the charset "gb2312".
  Updated-Date: '2024_08_07'
webshell_jsp_tree:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 09ce246fe2c65aa4aa9f2c441de2c14a
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a suspicious file named "tree.jsp" which is indicative of web shell activity. The file contains specific strings related to constructing and utilizing URL requests in a potentially malicious manner within a JavaServer Pages (JSP) web environment. The key indicators include the manipulation of tree view elements through the assignment of URLs and the concatenation of scheme, server name, and port information to form a base path request.
  Updated-Date: '2024_08_07'
webshell_jsp_up:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 17cbe32d9cf006fb0e50fb57ca3b0fc4
  Ruleset: securityonion-yara
  Summary: This rule detects a specific web shell identified by the presence of a file named up.jsp. It flags this web shell based on a comment in the code that mentions a known bug where the file size is truncated if it exceeds 640 kilobytes. This detection is aimed at identifying malicious activity associated with web shells, which are scripts placed on web servers to enable remote control or exploitation.
  Updated-Date: '2024_08_07'
webshell_jsp_utils:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 79cb2561d8dee1da2e5369685bbefd0b
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a web shell within a JSP file named "utils.jsp." It identifies specific suspicious strings indicating database metadata manipulation and character set parameter handling commonly used by attackers to exploit web server vulnerabilities.
  Updated-Date: '2024_08_07'
webshell_jsp_web:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0d275ecdba50995909668685f1f56cad
  Ruleset: securityonion-yara
  Summary: This rule detects a web shell script in a file named web.jsp by identifying specific code patterns associated with importing Java classes such as java.io and java.net, and a string that matches the beginning of a typical web shell operation using HTTP requests.
  Updated-Date: '2024_08_07'
webshell_jsp_zx:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 895ffd7e451982046e29352c6b36a575
  Ruleset: securityonion-yara
  Summary: This rule detects a specific web shell file named "zx.jsp". The web shell checks if a certain request parameter "f" is not null, and if so, it proceeds to create a new file output stream.
  Updated-Date: '2024_08_07'
webshell_metaslsoft:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3e4877c8f513ad8373f937efb7ab39e4
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a web shell by identifying a specific file named 'metaslsoft.php'. It looks for a particular string within the file that includes HTML and PHP code, specifically an element that appends a table row containing hyperlinks to directories on a server. This detection indicates an attempt to use the web shell for directory traversal or exploration.
  Updated-Date: '2024_08_07'
webshell_minupload:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5753a18a4f2527d020279c956c61c0bc
  Ruleset: securityonion-yara
  Summary: This rule detects a web shell script named "minupload.jsp". It identifies the presence of an input HTML element with the type "submit" and the name "btnSubmit" that has a value of "Upload" along with a specific byte manipulation of a request parameter named "path". These indicators suggest malicious upload capabilities intended for unauthorized access or control within a web environment.
  Updated-Date: '2024_08_07'
webshell_mumaasp_com:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7d4e88ce0c7e8bf67d8829a6f3db4c73
  Ruleset: securityonion-yara
  Summary: This rule detects a specific web shell known as "mumaasp.com.asp." The detection is based on a distinctive string pattern found within the file, which is identified by the hash "cce32b2e18f5357c85b6d20f564ebd5d." This rule helps identify the presence of this web shell, typically used for unauthorized remote control of a server.
  Updated-Date: '2024_08_07'
webshell_mysqlwebsh:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 456ff84badb0d4fe054f9fea93404465
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a web shell specifically named "mysqlwebsh.php". The detection is based on identifying a particular string within the file, which contains HTML code used for rendering table rows with conditional background colors based on certain PHP variables related to database connectivity and actions. This pattern aids in recognizing potentially malicious web shell scripts used for unauthorized access and manipulation of web servers.
  Updated-Date: '2024_08_07'
webshell_php:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: cda92af8ba60f2d78731510f9455ccb8
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a PHP Web Shell by identifying specific strings within a file, including an error message string and a reference indicating "PHP Web Shell".
  Updated-Date: '2024_08_07'
webshell_php_2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 498692404179e409401a9b8ed3d85488
  Ruleset: securityonion-yara
  Summary: This rule detects a malicious PHP web shell script that takes control over a server through an "assert" function which executes a malicious payload passed via an HTTP request parameter named "c". This type of code is commonly used by attackers to maintain unauthorized access and control over compromised servers.
  Updated-Date: '2024_08_07'
webshell_php_404:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 559b1007995a4c5f3573e679ef5be213
  Ruleset: securityonion-yara
  Summary: This rule detects a specific web shell file named "404.php" used in malicious activities. It identifies the presence of an encrypted password mechanism by looking for the string "$pass = md5(md5(md5($pass)));" within the PHP code, indicating a high likelihood of the web shell's intent to secure access through multiple layers of MD5 hashing.
  Updated-Date: '2024_08_07'
webshell_php_backdoor:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c37a42fccd7facadaebd677b9e397bc3
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a PHP-based web shell backdoor script named "php-backdoor.php". The script includes specific code patterns such as a command to handle file uploads through `$HTTP_POST_FILES['file_name']['tmp_name']` and a form interface that executes commands through a GET request method with `<? echo $PHP_SELF; ?>`. These identifiers help in recognizing unauthorized and potentially malicious activities typically associated with web shells that provide remote access and command execution on the compromised server.
  Updated-Date: '2024_08_07'
webshell_php_cmd:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: fb41de13810c96e1f70d4a7ba6f29f1c
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a PHP web shell script named "cmd.php" by identifying specific strings within the script. These strings are indicative of command execution functionality, triggered by a GET request parameter labeled 'cmd'. In particular, the rule looks for a conditional statement that initiates if the 'cmd' parameter is set, a comment indicating command execution, and a system call used to execute the command provided in the request.
  Updated-Date: '2024_08_07'
webshell_php_dodo_zip:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: ee58f405407fccd10281a7cc64f73650
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a PHP web shell, specifically targeting a file named "zip.php." It identifies malicious code by searching for specific hexadecimal patterns and data structures commonly associated with web shells that handle zip file operations. The detection focuses on identifying sequences used for setting hexadecimal time variables and initializing zip file headers, which are indicative of this type of malicious activity.
  Updated-Date: '2024_08_07'
webshell_php_fbi:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 1a02471a092f43ded03808fd323bac89
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific web shell file named "fbi.php" by identifying the unique string within the file related to various data types and descriptions such as "Getallen" (numbers), "Datum en tijd" (date and time), "Tekst" (text), and "Binaire gegevens" (binary data), among other categories. This detection helps identify potential malicious activity involving the use of a web shell to control or exploit a compromised web server.
  Updated-Date: '2024_08_07'
webshell_php_ghost:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c3cf608f9d2f21bb8e6cb6ade0ad97ba
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the "ghost.php" web shell by looking for specific code patterns and strings indicative of this malware. It identifies the usage of certain obfuscated PHP code and a distinctive PHP function "preg_replace" used maliciously. Additionally, it checks for a specific URL embedded in the code, which may suggest communication with a remote server. The rule is based on a known hash value and specific encoded strings that are unique to the ghost.php web shell.
  Updated-Date: '2024_08_07'
webshell_php_h6ss:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 92f0c144ce01cb8a9f1cafca95b566fe
  Ruleset: securityonion-yara
  Summary: 'This rule detects a specific web shell identified as `h6ss.php`. It targets PHP files that use a particular pattern of code: a PHP script that utilizes the `eval` function combined with `gzuncompress` and `base64_decode` functions. This combination is often used to obfuscate malicious code embedded in web server files, indicating potential unauthorized access or control of the web server.'
  Updated-Date: '2024_08_07'
webshell_php_list:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 64dc01292707bc02639644425f0bbf1c
  Ruleset: securityonion-yara
  Summary: 'This rule detects a malicious web shell script named "list.php" that is used for directory and file listing. It looks for specific strings within the script, such as comments indicating the file''s purpose ("// list.php = Directory & File Listing") and an author tag ("// by: The Dark Raver"), as well as PHP code responsible for listing directories and files online. This rule aims to identify potential backdoors that allow unauthorized users to navigate through a server''s directory structure.'
  Updated-Date: '2024_08_07'
webshell_php_moon:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a1d68ba1b4905864d3855d377dfa9da7
  Ruleset: securityonion-yara
  Summary: This rule detects a specific web shell named "moon.php," which is known to host malicious functionalities. The web shell is identified through various string patterns that include commands for creating a backdoor function and displaying options related to shell commands. These string patterns reveal the web shell's capability to interact with operating system commands and potentially execute harmful actions.
  Updated-Date: '2024_08_07'
webshell_php_s_u:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e1eafa76210aaa0080ff0d045e890db5
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific web shell file, named "s-u.php," which is identified by the HTML snippet that includes an anchor tag with the text "Go Execute" in a red font, followed by a textarea element. This snippet is indicative of a web shell interface used for executing commands on the server.
  Updated-Date: '2024_08_07'
webshell_php_sh_server:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f38b42e47434182181b719e332864adf
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a malicious PHP web shell script known as "server.php." It looks specifically for the string "eval(getenv('HTTP_CODE'));" within the file to identify potential web shells. The detection method employs this exact string to flag suspect activity, indicating that the PHP script may be executing code from environment variables, a common tactic used by malicious web shells.
  Updated-Date: '2024_08_07'
webshell_php_up:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2aa0aa7a949bdbc0070c7e37abee9409
  Ruleset: securityonion-yara
  Summary: This rule detects a specific PHP web shell script named 'up.php', which is used for handling file uploads. The script includes commands for copying uploaded files from temporary locations to specified paths on the server and checks if the file was uploaded using HTTP POST. Additionally, it echoes the name of the uploaded file for confirmation.
  Updated-Date: '2024_08_07'
webshell_phpkit_0_1a_odd:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e65722bbccbfb2e602373459e0a438e8
  Ruleset: securityonion-yara
  Summary: This rule detects a PHP-based web shell associated with a file named "odd.php." It identifies malicious activities by searching for specific strings within the file, including the inclusion of input via "php://input" and the setting of configuration options to allow URL inclusion. These detections indicate the potential for arbitrary code execution and backdoor functionality. The rule aims to highlight suspicious PHP scripts that might be used to execute unauthorized commands on a web server.
  Updated-Date: '2024_08_07'
webshell_phpkit_1_0_odd:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 48a96cb27d0c3de580607f813cd2b9aa
  Ruleset: securityonion-yara
  Summary: This rule detects a specific web shell named "odd.php." It identifies the presence of certain suspicious PHP code, including the use of "include('php://input');" which can allow remote code inclusion, and the configuration setting "ini_set('allow_url_include, 1');" which enables URL inclusion. Additionally, it notes an unusual comment indicating the absence of typically malicious functions like eval() and system(), suggesting an attempt to bypass standard detection methods.
  Updated-Date: '2024_08_07'
webshell_phpshell3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f63c1d1233ea4135fd0a155585375cf0
  Ruleset: securityonion-yara
  Summary: This rule detects a malicious web shell script named "phpshell3.php," which is often used by attackers to gain unauthorized access and control over a web server. The presence of specific code patterns, such as hidden input fields for a nonce value linked to PHP sessions, fields for capturing usernames, and PHP session management for directory change errors, are indicative of this web shell. This rule identifies these malicious indicators to help mitigate potential security threats.
  Updated-Date: '2024_08_07'
webshell_phpshell_2_1_config:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3ce4cb9f12496b9488c281a91ede4b1b
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific web shell by identifying a configuration file named "config.php" that contains the string "; (choose good passwords!).  Add uses as simple 'username = \"password\"' lines." This string suggests a context where user credentials are being managed, possibly indicating an administration interface or security feature use.
  Updated-Date: '2024_08_07'
webshell_phpshell_2_1_pwhash:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 735c88bf690adec4874c2153047491c8
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a malicious web shell file named "pwhash.php." The rule identifies specific HTML patterns and keyword strings commonly associated with web shells, including encoded HTML tags such as `<tt>&nbsp;</tt>`, `<tt>[</tt>`, and words like `<tt>null</tt>`, `<tt>yes</tt>`, `<tt>no</tt>`, and `<tt>true</tt>`. The detection criteria are based on the occurrence of any one of these defined strings within the file. The rule aims to identify the use of this particular file by its distinct content patterns, pointing towards potential unauthorized access or control over a web server.
  Updated-Date: '2024_08_07'
webshell_phpspy2010:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c1625e6095841ab2c233c1aaabac9107
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the web shell file identified as "phpspy2010.php". It looks for specific malicious code patterns including the use of `eval(gzinflate(base64_decode(` for obfuscated code execution, a comment marker `//angel`, and a specific configuration line `$admin['cookiedomain'] = '';`. Combining these signatures helps in identifying and flagging the malicious web shell.
  Updated-Date: '2024_08_07'
webshell_phpspy_2005_full_phpspy_2005_lite_PHPSPY:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e731e44e98e7c444ee94e8a5c65fb559
  Ruleset: securityonion-yara
  Summary: This rule detects web shells specifically named "phpspy_2005_full.php," "phpspy_2005_lite.php," and "PHPSPY.php." It identifies specific characteristics and patterns associated with these malicious files, including certain HTML and PHP code snippets related to command inputs and file uploads. Such web shells are often used by attackers to gain unauthorized access and execute arbitrary commands on compromised web servers.
  Updated-Date: '2024_08_07'
webshell_phpspy_2005_full_phpspy_2005_lite_phpspy_2006_PHPSPY:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 68188c46734fbea017de47e8e9d5a945
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of PHP web shells from specific files, specifically "phpspy_2005_full.php", "phpspy_2005_lite.php", "phpspy_2006.php", and "PHPSPY.php". It identifies these malicious web shells by looking for particular strings within the files, including URLs, HTML anchor tags, PHP environment references, and specific phrases indicating file write operations and author tags. The detection is triggered if at least two of these indicator strings are found in the scanned file.
  Updated-Date: '2024_08_07'
webshell_r57_1_4_0:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 584d8947e2a4ebbc0093697c23da548f
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the r57 web shell version 1.4.0 by identifying specific strings within a PHP file. The detected strings include configurations and commands typically used in this web shell, such as setting error log parameters, defining a password, and restoring INI settings related to functions and safe mode execution directories.
  Updated-Date: '2024_08_07'
webshell_r57shell127_r57_iFX_r57_kartal_r57_antichat:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: fb5dc088b4c0e263452945ce95b6f963
  Ruleset: securityonion-yara
  Summary: 'This rule detects a web shell associated with specific files: r57shell127.php, r57_iFX.php, r57_kartal.php, r57.php, and antichat.php. Web shells are malicious scripts used by attackers to gain unauthorized access to a web server and perform remote execution of commands. The rule identifies the presence of the web shell by searching for distinctive code patterns within the script files, such as MySQL query execution and PHP commands for manipulating SQL queries and strings. These patterns are indicative of typical web shell functionalities that allow attackers to interact with databases and manipulate data.'
  Updated-Date: '2024_08_07'
webshell_r57shell127_r57_kartal_r57:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b71d1f73a021f2c18bae7eae949c3180
  Ruleset: securityonion-yara
  Summary: This rule detects web shells that originate from the files r57shell127.php, r57_kartal.php, and r57.php. It identifies specific code patterns, including directory handling operations, database selection commands, and authentication checks. The rule matches if any two of these code patterns are present.
  Updated-Date: '2024_08_07'
webshell_r57shell_r57shell127_SnIpEr_SA_Shell_EgY_SpIdEr_ShElL_V2_r57_xxx:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 6439a54fe1398392f1c2fd0bfab64c1a
  Ruleset: securityonion-yara
  Summary: This rule detects specific web shells such as r57shell and SA Shell EgY SpIdEr ShElL V2 by identifying unique echo statements within the code. These echo statements are characteristic of the web shells' language constructs and interface elements, pointing to potentially malicious activity. Recognizable patterns include specific echoed expressions containing language variables and HTML output tags used by these shells.
  Updated-Date: '2024_08_07'
webshell_redirect:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d1d1100372cda2fcab61d1026e0fb24a
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a web shell through a specific file named `redirect.asp`. It looks for the JavaScript code segment `var flag = \"?txt=\" + (document.getElementById(\"dl\").checked ? \"2\":\"1\"`, which indicates the usage of a flag variable to manipulate document objects dynamically within the script. This pattern is characteristic of web shells used by attackers to control web server functionalities stealthily.
  Updated-Date: '2024_08_07'
webshell_remview_fix:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: af934333ad00f27303ac1838c0c5ae2b
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a web shell in the file named `remview_fix.php`. It specifically looks for certain strings in the file, such as links involving deletion commands and specific echo statements that generate repetitive line breaks and horizontal rules. These indicators suggest the presence of malicious web shell scripts used for unauthorized web management or exploitation.
  Updated-Date: '2024_08_07'
webshell_s72_Shell_v1_1_Coding:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: c62bd205c22933fcc227cdc9d9deb36a
  Ruleset: securityonion-yara
  Summary: This rule detects a specific web shell script, identified by a unique hash, which is named "s72 Shell v1.1 Coding.php". The rule analyzes for the presence of a particular HTML string within the file, which includes a <font> tag with specific attributes such as font face "Verdana" and color code "#800080".
  Updated-Date: '2024_08_07'
webshell_shell_2008_2009mssql_phpspy_2005_full_phpspy_2006_arabicspy_hkrkoz:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2ccdb039dc18c201d44d3913f3785114
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of specific web shells by identifying characteristic strings associated with web shell behavior. The rule focuses on recognizing patterns such as SQL dump operations, iteration over database indices, and table manipulations. Additionally, it looks for the absence of the term "backup" in the filename, ensuring more accurate detection of malicious activity commonly associated with web shells targeting database operations.
  Updated-Date: '2024_08_07'
webshell_shell_phpspy_2005_full_phpspy_2005_lite_phpspy_2006_arabicspy_PHPSPY_hkrkoz:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0c750d3f2baa80e67f79bba456b731f3
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of specific web shell variants such as PHPSPY and ArabicSpy by identifying unique strings associated with these tools. It looks for a specific pattern where a variable named `$mainpath_info` is defined as an array obtained by splitting another variable `$mainpath` using the '/' delimiter. Additionally, it checks for a condition where the 'action' parameter in the URL is either not set, empty, or set to a specific value. These identified behaviors are characteristic of the web shells, enabling their detection.
  Updated-Date: '2024_08_07'
webshell_shell_phpspy_2006_arabicspy:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 8393c6844373869a08bafc2966f6b173
  Ruleset: securityonion-yara
  Summary: This rule detects malicious web shell scripts named shell.php, phpspy_2006.php, and arabicspy.php. These scripts contain strings such as conditional checks for `$regwrite` and specific HTML form actions related to shell execution. Identifying these patterns helps to recognize unauthorized web shell activities.
  Updated-Date: '2024_08_07'
webshell_shell_phpspy_2006_arabicspy_hkrkoz:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: f062ecdd5b1fa805cf5a51f9ba83d213
  Ruleset: securityonion-yara
  Summary: This rule detects web shells, specifically from files named shell.php, phpspy_2006.php, arabicspy.php, and hkrkoz.php. It identifies a particular string pattern used in these web shells, involving a check to see if a script parameter named 'prog' is set, and if not, defaulting it to a command string that writes the output of 'net start' into a specified pathname.
  Updated-Date: '2024_08_07'
webshell_sig_404super:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3d9fad3ff639969d892c79ae0de3fb6f
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific web shell generated from the file 404super.php. It identifies the web shell by looking for certain strings within the file, including lines of code that pack specific ASCII values, URL references to external PHP files, session handling code, and a predefined password comment. These strings serve as indicators of the malicious behavior typically exhibited by this web shell.
  Updated-Date: '2024_08_07'
webshell_simple_backdoor:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2e0417c20835ada6c49a2d266cfaeb42
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a web shell, specifically targeting the file named simple-backdoor.php. It identifies malicious activity by scanning for specific strings within the file. These strings include typical web shell patterns such as setting a command variable from user input, checking if the command parameter is set, and executing the command via the system function. Detecting at least two of these patterns indicates the presence of the web shell.
  Updated-Date: '2024_08_07'
webshell_spjspshell:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: dc00e200e37135df13af575459d75a06
  Ruleset: securityonion-yara
  Summary: This rule detects a specific web shell file named "spjspshell.jsp," which contains a distinguishing string indicating the use of Unix and Windows command execution utilities. The string includes a command for Unix systems to extract files using `tar` and a command for Windows systems utilizing `cmd.exe` to concatenate files.
  Updated-Date: '2024_08_07'
webshell_tinyasp:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: bf3b2f5926fbe1d9471e57795b685d7b
  Ruleset: securityonion-yara
  Summary: This rule detects a 24-byte ASP webshell and its variations. It identifies the presence of the webshell by scanning for the "Execute Request" string in ASCII or wide character format, regardless of case. The condition checks if the file starts with the hexadecimal value 0x253c and is smaller than 150 bytes.
  Updated-Date: '2024_08_07'
webshell_webshell_123:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 915ec8d642a8bfb2ce96beae8cf06b3d
  Ruleset: securityonion-yara
  Summary: This rule detects a web shell script contained in a file named `webshell-123.php`. It looks for specific indicators within the code, such as the presence of the distinctive comment `// Web Shell!!`, a specific `preg_replace` function with obfuscated code, the assignment of `$default_charset` as "UTF-8", and a URL comment referencing the website `http://www.weigongkai.com/shell/`. Detection is triggered if any two of these strings are found in the script.
  Updated-Date: '2024_08_07'
webshell_webshell_cnseay02_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 897fc9e6bced162768548b80cd457990
  Ruleset: securityonion-yara
  Summary: This rule detects a specific web shell script named "webshell-cnseay02-1.php". The detection is based on a unique sequence of characters within the script, which includes encoded strings that likely serve obfuscation purposes to evade straightforward identification.
  Updated-Date: '2024_08_07'
webshell_webshell_cnseay_x:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d74113a879dab1e48c36814221c16374
  Ruleset: securityonion-yara
  Summary: This rule detects a web shell file named "webshell-cnseay-x.php," identified through a specific string pattern found within the file. The string pattern examined includes a sequence that manipulates PHP variables `$_F_F` and `$_P_P`, indicating potential malicious behavior typical of web shells used for unauthorized remote access or control of compromised web servers.
  Updated-Date: '2024_08_07'
webshell_webshells_new_Asp:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 872673b762384ada56e114e905dedbfc
  Ruleset: securityonion-yara
  Summary: This rule detects a web shell identified as "Asp.asp" by looking for specific textual patterns within the script. The presence of specific functions and code segments such as "Execute MorfiCoder(\")/*/z/*/(tseuqer lave\")", "Function MorfiCoder(Code)", and "MorfiCoder=Replace(Replace(StrReverse(Code),\"/*/\",\"\"\"\"),\"\\*\\\",vbCrlf)" indicates the malicious activity. These patterns suggest the use of obfuscation techniques and code execution functionalities typical of web shell behavior that can compromise web servers.
  Updated-Date: '2024_08_07'
webshell_webshells_new_JJJsp2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e9f034ab8ad3b38d10ea87830d8a6177
  Ruleset: securityonion-yara
  Summary: This rule detects web shells generated from the file JJJsp2.jsp. It identifies specific patterns and string sequences that are indicative of malicious web shell activities. These patterns include certain Java expressions such as result set handling, SQL queries involving Oracle databases, and string manipulations that are typically used to obfuscate or control web shell operations. The rule looks for these distinct strings within files to determine if they match known signatures of the JJJsp2 web shell.
  Updated-Date: '2024_08_07'
webshell_webshells_new_JJjsp3:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 5a10263d61753da66932a9025c93cf3b
  Ruleset: securityonion-yara
  Summary: This rule detects a web shell generated from the file JJjsp3.jsp. It looks for a specific pattern in the script, notably an import statement that includes multiple Java packages, which indicates the presence of a potentially harmful web shell used for unauthorized access or manipulation of web servers.
  Updated-Date: '2024_08_07'
webshell_webshells_new_JSP:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 867251b1fb9418289f784625a0cc51c8
  Ruleset: securityonion-yara
  Summary: This rule detects a specific web shell, which is malicious code often used to maintain unauthorized access to a server, embedded within a JSP file. The web shell's defining characteristics include certain strings that indicate file operations, such as listing root directories and writing buffered data, as well as conditions handling HTTP requests through the `application.getRealPath` method.
  Updated-Date: '2024_08_07'
webshell_webshells_new_PHP:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 72aa7df75c6f9066eaf0c6412c17cc24
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a PHP-based web shell by identifying specific strings of code typically used in such malicious scripts. The strings include error messages displayed in a certain font color, input fields for text with PHP script references, specific titles indicating potential backdoor access, code for opening files via HTTP POST methods, and HTML textarea elements for executing text-based commands. These code snippets are indicative of functionality intended for unauthorized remote access and manipulation of web servers.
  Updated-Date: '2024_08_07'
webshell_webshells_new_PHP1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: cd3fda4f8a0f9cfc9ef7c1e0bb93023c
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of specific web shells typically utilized for unauthorized access to web servers. It targets distinctive strings within PHP files, such as obfuscated code used to execute remote commands via PHP GET requests. The detection is triggered by the presence of particular patterns, including certain array map functions, specific URLs, and preg_replace function usage, which are indicative of malicious web shell activity.
  Updated-Date: '2024_08_07'
webshell_webshells_new_aaa:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a1ef276832d7a5531af98b8846b5a61a
  Ruleset: securityonion-yara
  Summary: This rule detects web shells generated from the specific file "aaa.asp". The web shell exhibits behaviors such as defining and using a function named `fvm`, manipulating SQL database tables, executing certain registry write operations, and handling MySQL server configuration. The detection includes specific patterns and keywords present in the web shell source code to identify malicious activity related to unauthorized remote control or access to the server.
  Updated-Date: '2024_08_07'
webshell_webshells_new_asp1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 87ad1d8d3ff73682862f1827ed9502b9
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a web shell generated from a specific ASP file, asp1.asp. It identifies malicious code by searching for unique strings within the file, such as a specific HTTP request pattern and reversed string execution commands commonly associated with web shell activities. These strings are designed to match a particular manipulation of web server requests and script execution, indicative of unauthorized or malicious usage of web technologies.
  Updated-Date: '2024_08_07'
webshell_webshells_new_code:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 228a6c98eeda94f38a456f73e149a235
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of specific web shells generated from a file named "code.php" by identifying key strings commonly associated with such web shell activity. It looks for specific HTML elements, JavaScript functions, and PHP operations indicative of web shell activity, such as file manipulation, deceptive link creation, and file uploading processes. The identified patterns highlight common characteristics of web shells used for unauthorized web server access and control.
  Updated-Date: '2024_08_07'
webshell_webshells_new_con2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4f57c2f7a77a0361e6334757e13eab44
  Ruleset: securityonion-yara
  Summary: This rule detects web shells created from the file "con2.asp". It identifies the presence of specific patterns in the code, including a script that manipulates PowerShell properties and an HTML form element designed to post data, which are indicative of malicious web shell activity.
  Updated-Date: '2024_08_07'
webshell_webshells_new_jspyyy:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0be19633c2e89bf22fdd0b36a0bb9acb
  Ruleset: securityonion-yara
  Summary: This rule detects web shells, specifically those generated from the file named `jspyyy.jsp`. It identifies the presence of web shells by looking for a particular string pattern that includes `"<%@page import=\"java.io.*\"%><%if(request.getParameter(\"f\")` within the code. Web shells like these are malicious scripts that allow attackers to execute arbitrary commands on compromised web servers.
  Updated-Date: '2024_08_07'
webshell_webshells_new_make2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4884493f45bf9ce0aeb07b079f52a39e
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a web shell generated from the make2.php file by identifying specific code patterns. It looks for the usage of functions such as `error_reporting(0)`, `session_start()`, and setting the header to `Content-type:text/html;charset=utf-8`, which are commonly used in malicious scripts to suppress errors, manage sessions, and define character encoding, respectively. The detection aims to identify potential unauthorized access or control mechanisms embedded within web applications.
  Updated-Date: '2024_08_07'
webshell_webshells_new_pHp:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 619b4daa14e6f818324156c1e21d2bd8
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a web shell generated from the file named `pHp.php`. It identifies specific patterns commonly associated with malicious web shells, such as functions that check file readability and commands that evaluate or execute potentially harmful code segments. It looks for occurrences of functions like `eval`, `assert`, `include`, `require`, `include_once`, `require_once`, `exec`, `shell_exec`, `system`, and `passthru`, among others. The detection works by identifying these suspicious strings in the analyzed files, indicating the possible existence of backdoor access tools and remote administration features typically used for unauthorized server access and control.
  Updated-Date: '2024_08_07'
webshell_webshells_new_php2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7e15dc0d87b8967f875385135c1c0566
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific PHP web shell. The detection is based on a PHP code snippet that includes the string "<?php $s=@$_GET[2];if(md5($s.$s)==", which indicates a potentially malicious script that could allow remote execution of commands received via HTTP GET requests. This behavior is common in web shell attacks used for unauthorized access and control of web servers.
  Updated-Date: '2024_08_07'
webshell_webshells_new_php5:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9f50457c348de5ab8ae768ef3d6f8600
  Ruleset: securityonion-yara
  Summary: This rule detects web shells embedded in PHP files, specifically focusing on a file known as "php5.php." The detection is based on specific unique strings within the file, such as encoded commands leveraging PHP's `chr()` function to execute code. The rule is designed to identify instances of potentially malicious web shells used to gain unauthorized access to web servers.
  Updated-Date: '2024_08_07'
webshell_webshells_new_php6:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 9cb0abd9777dc320ca9608f76117f798
  Ruleset: securityonion-yara
  Summary: This rule detects a specific type of web shell generated from the file named "php6.php." It identifies malicious PHP code snippets used for unauthorized control of web servers. The rule triggers if it encounters certain patterns, such as suspicious array mapping function references, unsafe usage of the `preg_replace` function with a dynamic `page` variable, and specific query parameters in "shell.php." The detection aims to identify web shells that enable remote attackers to execute commands on a compromised web server.
  Updated-Date: '2024_08_07'
webshell_webshells_new_pppp:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 7443a2e66d9ad5312566e9a42b7b6f90
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific web shell generated from the file named pppp.php. It searches for unique strings associated with the web shell, such as the email address "chinese@hackermail.com," a conditional GET request related to the string "hackers," and a reference to the site "http://blog.weili.me". If any one of these strings is found within a file, it triggers the detection, indicating that the file might be compromised with this web shell.
  Updated-Date: '2024_08_07'
webshell_webshells_new_radhat:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2fef1d8af40f9ac2e84c268231d18931
  Ruleset: securityonion-yara
  Summary: 'This rule detects the presence of a web shell that is generated from the file named "radhat.asp". The detection is based on a specific string within the file: `sod=Array("D","7","S`. This characteristic is used to identify the potentially malicious web shell activity.'
  Updated-Date: '2024_08_07'
webshell_webshells_new_xxx:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0d308b56099e031dd20a484beaf2df0f
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a web shell generated from a file named "xxx.php." Specifically, it looks for code that executes a PHP script which utilizes the `array_map` function combined with the `assert` statement applied to user input from the `$_REQUEST['expdoor']` parameter.
  Updated-Date: '2024_08_07'
webshell_webshells_new_xxxx:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: b022f406b01a5c90920b70bd0faf04e8
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of web shells specifically generated from the file "xxxx.php." It identifies malicious activity by looking for scripts in PHP format that use the `eval` function to execute code sent via HTTP POST requests, specifically the string "<?php eval($_POST[1]);?>". This pattern is indicative of web shell usage, where an attacker can remotely execute arbitrary PHP code on the server.
  Updated-Date: '2024_08_07'
webshell_wsb_idc:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 14ebf0814c8555611e7f6fe2f1595d5e
  Ruleset: securityonion-yara
  Summary: This rule detects a web shell script named "idc.php" characterized by malicious code snippets that include a conditional check using the MD5 hash of user inputs for authentication and an `eval` function call that evaluates GET parameters.
  Updated-Date: '2024_08_07'
webshell_wso2_5_1_wso2_5_wso2:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 91443078f59eb914723d86db44d4584c
  Ruleset: securityonion-yara
  Summary: This rule detects a specific variant of web shells identified as versions "wso2.5.1.php," "wso2.5.php," and "wso2.php." Web shells are malicious scripts uploaded to a server to enable remote administration. This rule identifies certain unique strings within the web shell scripts related to character set options and URL encoding used in the malicious PHP files.
  Updated-Date: '2024_08_07'
webshell_zacosmall:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 3d82a0428c1644722acdfb401b5c28fb
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the web shell file "zacosmall.php." It scans for the specific string pattern `"if($cmd!==''){ echo('<strong>'.htmlspecialchars($cmd).\"</strong><hr>"` within the file, which indicates the likely existence of a web shell used for executing commands on a compromised server.
  Updated-Date: '2024_08_07'
wh_bindshell_py:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e40bd5f0f657f8d613cf65f34cca1bef
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a Python-based bind shell script named "wh_bindshell.py" based on specific strings found within the file. It looks for an indicative comment about using the script with specified port and password parameters, a snippet of Python code that generates an MD5 hash, and a bug-related comment mentioning that pressing "ctrl+c" might stop the script.
  Updated-Date: '2024_08_07'
whosthere:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 72299e793ac5b3e6dbf89468610a3609
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the "whosthere.exe" file, which is associated with a pass-the-hash toolkit developed by Core Security Technologies. The rule identifies the file through specific strings, including references to the author Hernan Ochoa, details about its operation such as entering an infinite loop to search for new logon sessions every 2 seconds, and instructions about specifying addresses for various functions. Additionally, it looks for error messages related to enabling debug privileges and obtaining the LSASS process ID.
  Updated-Date: '2024_08_07'
whosthere_alt:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0edf1fabf114d13e8a95fa07fb79ff08
  Ruleset: securityonion-yara
  Summary: This rule detects the file "whosthere-alt.exe," associated with a tool authored by Hernan Ochoa and distributed by Core Security Technologies. The tool "WHOSTHERE-ALT v1.1" lists active Local Security Authority (LSA) logon sessions that use NTLM credentials. It enters an infinite loop to search for new logon sessions every two seconds and outputs only newly detected sessions. Additionally, the tool can dump the output to a specified file, expects the presence of "pth.dll" in the current directory, and formats the output as "username:domain:lmhash:nthash." An error message is shown if it cannot get the process ID of "LSASS.EXE."
  Updated-Date: '2024_08_07'
whosthere_alt_pth:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: bbceceb29fc0258c2176cd94d25d4222
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the file "pth.dll" by searching for specific strings within files that could indicate its presence. These strings include paths to debug files, references to the "pth.dll" file, messages about the location of a "Primary" string, and segment location references within the file. The rule conditions are set to trigger when the file being scanned is a PE file with specific characteristics, such as a size smaller than 240KB, and at least four of the specified strings are found.
  Updated-Date: '2024_08_07'
winshell:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 41b017ba646cbe44b1e285924c454fe0
  Ruleset: securityonion-yara
  Summary: This rule detects a specific webshell named "winshell.exe." It identifies the presence of this webshell by looking for unique strings in the file such as "Software\\Microsoft\\Windows\\CurrentVersion\\RunServices," "WinShell Service," "__GLOBAL_HEAP_SELECTED," "__MSVCRT_HEAP_SELECT," and "Provide Windows CmdShell Service." Additional indicators include references to "URLDownloadToFileA," "RegisterServiceProcess," and "GetModuleBaseNameA," as well as a distinct version string "WinShell v5.0 (C)2002 janker.org." These distinctive strings together help in identifying the "winshell.exe" webshell.
  Updated-Date: '2024_08_07'
x64_KiwiCmd:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: edae2300944df46484f03136c0727154
  Ruleset: securityonion-yara
  Summary: This rule detects a file named KiwiCmd.exe associated with a Chinese hacktool set. The detection relies on identifying specific strings within the file, such as "Process Ok, Memory Ok, resuming process :)", "Kiwi Cmd no-gpo", and "KiwiAndCMD". The file size must be less than 400KB, and its header must start with the hexadecimal value 0x5a4d.
  Updated-Date: '2024_08_07'
x64_klock:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 85318986ba46f939aaba93fbb3a1f485
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific file, klock.dll, associated with a Chinese hacktool set known for remote process manipulation. Key identifying strings within the file include French phrases indicating a remote process and error messages, as well as references to "klock.dll" and "klock de mimikatz pour Windows." The rule is activated when the file size is less than 907KB, begins with the hex sequence 0x5a4d, and matches all specified strings.
  Updated-Date: '2024_08_07'
xDedic_SysScan_unpacked:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 625f15c779c4130a857604c3216d7f4e
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the SysScan APT tool, which is identified as crimeware. It does so by searching for specific strings within Win32 executable files. These strings include indications of the tool's activities, such as commands to delete itself, debug mode notifications, user prompts, and URL references for sending results. Additionally, it checks for completion messages and attempts to send results, indicating the end of its scanning process. The detection is based on the file's characteristics and its content, ensuring the tool's unique behaviors and signatures are identified.
  Updated-Date: '2024_08_07'
xRAT_1:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: e191cfadb112b3dd3475cd729130e165
  Ruleset: securityonion-yara
  Summary: This rule detects Patchwork malware by identifying specific strings within executable files. It looks for various distinctive phrases and patterns, such as "-CHECK & PING -n 2 127.0.0.1 & EXIT," "xClient.Core.Elevation," "Welcome to MAX-Shell :Session created," and "<description>My UAC Compatible application." It also searches for references to actions like "DownloadAndExecute," and specific user-agent strings mimicking browser behavior. The rule ensures the presence of these identifying marks within files smaller than 1000KB and having a PE file signature, helping to pinpoint the particular malware variant from known attributes and behaviors.
  Updated-Date: '2024_08_07'
x_way2_5_X_way:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: dd827ed9ae7892419ee8e815cf7d7eda
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of the Chinese hacktool X-way, specifically identifying the file "X-way.exe." It is designed to match certain strings within a file, such as "TTFTPSERVERFRM," "TPORTSCANSETFRM," and "TIISSHELLFRM" among others. The rule checks for these strings only if the file starts with the "MZ" header, indicative of a Windows executable, and if the file size is less than 1000KB.
  Updated-Date: '2024_08_07'
x_way2_5_sqlcmd:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 72f7cc0d0f0ae5aaf7ba87124dc6b9e0
  Ruleset: securityonion-yara
  Summary: This rule detects a specific instance of the Chinese hacktool set associated with the file named "sqlcmd.exe". It identifies the tool by checking for certain strings and patterns within its binary file such as error messages related to the loader, procedure entry points, and dynamic link libraries such as `kernel32.dll` and `user32.dll`. Additionally, it looks for functions like `VirtualAlloc`, `VirtualFree`, `VirtualProtect`, and `ExitProcess`, as well as references to `odbc32.dll` and various API functions (`MessageBoxA`, `wsprintfA`, `GetProcAddress`, `GetModuleHandleA`, `LoadLibraryA`). The rule triggers if the file size is between 20KB and 23KB and if the file starts with the appropriate magic number for a DOS header.
  Updated-Date: '2024_08_07'
xdedic_packed_syscan:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: a8e8650cf17167bd888549bf5911c321
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a potentially packed version of the software SysScan.exe, specifically version 1.3.4. The file is identified by examining for the string "SysScan.exe" (case-insensitive and in both ASCII and wide formats) in executable files with a size ranging between 500KB and 1500KB and a starting 16-bit value of 0x5A4D.
  Updated-Date: '2024_08_07'
xscan_gui:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d20d146557da110598ab05e589c13b78
  Ruleset: securityonion-yara
  Summary: This rule detects a specific executable file named "xscan_gui.exe," associated with a Chinese hacktool set. The detection mechanism primarily focuses on identifying distinct strings within the file, such as mutex, host, and index configuration parameters, references to "www.target.com", file path structures indicating scripting assets, and logs of active and maximum host threads. The rule also validates that the file starts with the "MZ" header, typical for executable files, and ensures the file size is less than 3000KB.
  Updated-Date: '2024_08_07'
xssshell:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 2180d607b482133eaae9aa9ce8d4d31b
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a specific web shell file named "xssshell.asp." It identifies the file by searching for a particular string within the file's content, which includes a characteristic web request format used by the web shell. This string is part of an operation that retrieves commands via a URL, indicating the malicious intent of remotely controlling or monitoring the affected system.
  Updated-Date: '2024_08_07'
xssshell_db:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 0ae6817644dee38c0e809f302e9ec40a
  Ruleset: securityonion-yara
  Summary: This rule detects a specific web shell script, identified by the presence of a comment attributed to Ferruh Mavituna from his website. The targeted file is named "db.asp".
  Updated-Date: '2024_08_07'
xssshell_default:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 07e15b30ddb7e5745e0f0a57bc0ef9cd
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a webshell, specifically targeting the default.asp file, which includes a condition where proxy data is modified by replacing a data separator with an HTML break tag.
  Updated-Date: '2024_08_07'
xssshell_save:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: d18b4f29f578dff531759e4eca49cc5b
  Ruleset: securityonion-yara
  Summary: This rule detects a specific webshell identified through key strings used in its code. The webshell, named "save.asp," is likely auto-generated and implements commands and parameters with specific structures. It manipulates and references victim IDs and attacks, indicated by the strings "RawCommand = Command & COMMAND_SEPERATOR & Param & COMMAND_SEPERATOR & AttackID" and "VictimID = fm_NStr(Victims(i))", respectively. This detection targets the unique aspects of this webshell, ensuring accurate identification based on these patterns.
  Updated-Date: '2024_08_07'
z_webshell:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 4ca50a6f9c910852a942b59ae4f1b222
  Ruleset: securityonion-yara
  Summary: This rule detects a specific web shell known as "z_webshell," which is identified by particular strings within its code. It searches for ASCII or wide string patterns related to the web shell's program name and password declaration. Additionally, it checks for specific file signatures and ensures the file size is less than 100KB to confirm the detection criteria.
  Updated-Date: '2024_08_07'
zacosmall_php:
  Created-Date: '2024_08_07'
  Custom-Edited: false
  Reviewed: true
  Rule-Body-Hash: 91fbeeb43f5b7955e2ce545494f615a3
  Ruleset: securityonion-yara
  Summary: This rule detects the presence of a PHP file associated with zacosmall, characterized by specific strings within the code. These include a call to the `rand(1,99999)` function, concatenation involving the `$dump_file` variable and SQL rows, and a filename pattern starting with `dump_`. Detection is based on the appearance of any two of these distinctive strings.
  Updated-Date: '2024_08_07'
